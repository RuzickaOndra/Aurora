
IR_decoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000364c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800370c  0800370c  0000470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003784  08003784  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003784  08003784  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003784  08003784  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003784  08003784  00004784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003788  08003788  00004788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800378c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  080037f4  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080037f4  000052b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0e8  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0b  00000000  00000000  00011178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00012d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000956  00000000  00000000  00013970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001108c  00000000  00000000  000142c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e31c  00000000  00000000  00025352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066cc1  00000000  00000000  0003366e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a32f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f8  00000000  00000000  0009a374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  0009d56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036f4 	.word	0x080036f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080036f4 	.word	0x080036f4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fb85 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f827 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f90b 	bl	800045c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000246:	f000 f8d9 	bl	80003fc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800024a:	f000 f881 	bl	8000350 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); // IR Receiver timer start
 800024e:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <main+0x54>)
 8000250:	0018      	movs	r0, r3
 8000252:	f001 fbfb 	bl	8001a4c <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim3, 0); // IR Receiver timer cnt set
 8000256:	4b0c      	ldr	r3, [pc, #48]	@ (8000288 <main+0x54>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2200      	movs	r2, #0
 800025c:	625a      	str	r2, [r3, #36]	@ 0x24

  uint32_t tm = 0; // Timestamp variable
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (tm < HAL_GetTick()) {
 8000262:	f000 fbcb 	bl	80009fc <HAL_GetTick>
 8000266:	0002      	movs	r2, r0
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4293      	cmp	r3, r2
 800026c:	d2f9      	bcs.n	8000262 <main+0x2e>
			tm = HAL_GetTick() + 100;
 800026e:	f000 fbc5 	bl	80009fc <HAL_GetTick>
 8000272:	0003      	movs	r3, r0
 8000274:	3364      	adds	r3, #100	@ 0x64
 8000276:	607b      	str	r3, [r7, #4]

			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //LED
 8000278:	2380      	movs	r3, #128	@ 0x80
 800027a:	019b      	lsls	r3, r3, #6
 800027c:	4a03      	ldr	r2, [pc, #12]	@ (800028c <main+0x58>)
 800027e:	0019      	movs	r1, r3
 8000280:	0010      	movs	r0, r2
 8000282:	f000 fe30 	bl	8000ee6 <HAL_GPIO_TogglePin>
		if (tm < HAL_GetTick()) {
 8000286:	e7ec      	b.n	8000262 <main+0x2e>
 8000288:	20000084 	.word	0x20000084
 800028c:	48000800 	.word	0x48000800

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b095      	sub	sp, #84	@ 0x54
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	2420      	movs	r4, #32
 8000298:	193b      	adds	r3, r7, r4
 800029a:	0018      	movs	r0, r3
 800029c:	2330      	movs	r3, #48	@ 0x30
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f002 fbe5 	bl	8002a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	2310      	movs	r3, #16
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	0018      	movs	r0, r3
 80002ac:	2310      	movs	r3, #16
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f002 fbdd 	bl	8002a70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b6:	003b      	movs	r3, r7
 80002b8:	0018      	movs	r0, r3
 80002ba:	2310      	movs	r3, #16
 80002bc:	001a      	movs	r2, r3
 80002be:	2100      	movs	r1, #0
 80002c0:	f002 fbd6 	bl	8002a70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c4:	0021      	movs	r1, r4
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2201      	movs	r2, #1
 80002ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2201      	movs	r2, #1
 80002d0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2202      	movs	r2, #2
 80002d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2280      	movs	r2, #128	@ 0x80
 80002dc:	0252      	lsls	r2, r2, #9
 80002de:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2280      	movs	r2, #128	@ 0x80
 80002e4:	0352      	lsls	r2, r2, #13
 80002e6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2200      	movs	r2, #0
 80002ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f000 fe2f 	bl	8000f54 <HAL_RCC_OscConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002fa:	f000 f9bf 	bl	800067c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	2110      	movs	r1, #16
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2207      	movs	r2, #7
 8000304:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2202      	movs	r2, #2
 800030a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2200      	movs	r2, #0
 8000316:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2101      	movs	r1, #1
 800031c:	0018      	movs	r0, r3
 800031e:	f001 f933 	bl	8001588 <HAL_RCC_ClockConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000326:	f000 f9a9 	bl	800067c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800032a:	003b      	movs	r3, r7
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000330:	003b      	movs	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000336:	003b      	movs	r3, r7
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fa69 	bl	8001810 <HAL_RCCEx_PeriphCLKConfig>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000342:	f000 f99b 	bl	800067c <Error_Handler>
  }
}
 8000346:	46c0      	nop			@ (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	b015      	add	sp, #84	@ 0x54
 800034c:	bd90      	pop	{r4, r7, pc}
	...

08000350 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000356:	2308      	movs	r3, #8
 8000358:	18fb      	adds	r3, r7, r3
 800035a:	0018      	movs	r0, r3
 800035c:	2310      	movs	r3, #16
 800035e:	001a      	movs	r2, r3
 8000360:	2100      	movs	r1, #0
 8000362:	f002 fb85 	bl	8002a70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	2308      	movs	r3, #8
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f002 fb7e 	bl	8002a70 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000374:	4b1e      	ldr	r3, [pc, #120]	@ (80003f0 <MX_TIM3_Init+0xa0>)
 8000376:	4a1f      	ldr	r2, [pc, #124]	@ (80003f4 <MX_TIM3_Init+0xa4>)
 8000378:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 800037a:	4b1d      	ldr	r3, [pc, #116]	@ (80003f0 <MX_TIM3_Init+0xa0>)
 800037c:	2230      	movs	r2, #48	@ 0x30
 800037e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000380:	4b1b      	ldr	r3, [pc, #108]	@ (80003f0 <MX_TIM3_Init+0xa0>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000386:	4b1a      	ldr	r3, [pc, #104]	@ (80003f0 <MX_TIM3_Init+0xa0>)
 8000388:	4a1b      	ldr	r2, [pc, #108]	@ (80003f8 <MX_TIM3_Init+0xa8>)
 800038a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038c:	4b18      	ldr	r3, [pc, #96]	@ (80003f0 <MX_TIM3_Init+0xa0>)
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000392:	4b17      	ldr	r3, [pc, #92]	@ (80003f0 <MX_TIM3_Init+0xa0>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000398:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <MX_TIM3_Init+0xa0>)
 800039a:	0018      	movs	r0, r3
 800039c:	f001 fb06 	bl	80019ac <HAL_TIM_Base_Init>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80003a4:	f000 f96a 	bl	800067c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003a8:	2108      	movs	r1, #8
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2280      	movs	r2, #128	@ 0x80
 80003ae:	0152      	lsls	r2, r2, #5
 80003b0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003b2:	187a      	adds	r2, r7, r1
 80003b4:	4b0e      	ldr	r3, [pc, #56]	@ (80003f0 <MX_TIM3_Init+0xa0>)
 80003b6:	0011      	movs	r1, r2
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 fb8b 	bl	8001ad4 <HAL_TIM_ConfigClockSource>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80003c2:	f000 f95b 	bl	800067c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c6:	003b      	movs	r3, r7
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003cc:	003b      	movs	r3, r7
 80003ce:	2200      	movs	r2, #0
 80003d0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003d2:	003a      	movs	r2, r7
 80003d4:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <MX_TIM3_Init+0xa0>)
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f001 fd6d 	bl	8001eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80003e2:	f000 f94b 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003e6:	46c0      	nop			@ (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b006      	add	sp, #24
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	20000084 	.word	0x20000084
 80003f4:	40000400 	.word	0x40000400
 80003f8:	0000ffff 	.word	0x0000ffff

080003fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000400:	4b14      	ldr	r3, [pc, #80]	@ (8000454 <MX_USART1_UART_Init+0x58>)
 8000402:	4a15      	ldr	r2, [pc, #84]	@ (8000458 <MX_USART1_UART_Init+0x5c>)
 8000404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000406:	4b13      	ldr	r3, [pc, #76]	@ (8000454 <MX_USART1_UART_Init+0x58>)
 8000408:	22e1      	movs	r2, #225	@ 0xe1
 800040a:	0252      	lsls	r2, r2, #9
 800040c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800040e:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <MX_USART1_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <MX_USART1_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <MX_USART1_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000420:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <MX_USART1_UART_Init+0x58>)
 8000422:	220c      	movs	r2, #12
 8000424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <MX_USART1_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800042c:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <MX_USART1_UART_Init+0x58>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000432:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <MX_USART1_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <MX_USART1_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800043e:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <MX_USART1_UART_Init+0x58>)
 8000440:	0018      	movs	r0, r3
 8000442:	f001 fd91 	bl	8001f68 <HAL_UART_Init>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800044a:	f000 f917 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200000cc 	.word	0x200000cc
 8000458:	40013800 	.word	0x40013800

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b089      	sub	sp, #36	@ 0x24
 8000460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	240c      	movs	r4, #12
 8000464:	193b      	adds	r3, r7, r4
 8000466:	0018      	movs	r0, r3
 8000468:	2314      	movs	r3, #20
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f002 faff 	bl	8002a70 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000472:	4b31      	ldr	r3, [pc, #196]	@ (8000538 <MX_GPIO_Init+0xdc>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b30      	ldr	r3, [pc, #192]	@ (8000538 <MX_GPIO_Init+0xdc>)
 8000478:	2180      	movs	r1, #128	@ 0x80
 800047a:	0309      	lsls	r1, r1, #12
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b2d      	ldr	r3, [pc, #180]	@ (8000538 <MX_GPIO_Init+0xdc>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	@ 0x80
 8000486:	031b      	lsls	r3, r3, #12
 8000488:	4013      	ands	r3, r2
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048e:	4b2a      	ldr	r3, [pc, #168]	@ (8000538 <MX_GPIO_Init+0xdc>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b29      	ldr	r3, [pc, #164]	@ (8000538 <MX_GPIO_Init+0xdc>)
 8000494:	2180      	movs	r1, #128	@ 0x80
 8000496:	03c9      	lsls	r1, r1, #15
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b26      	ldr	r3, [pc, #152]	@ (8000538 <MX_GPIO_Init+0xdc>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	@ 0x80
 80004a2:	03db      	lsls	r3, r3, #15
 80004a4:	4013      	ands	r3, r2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b23      	ldr	r3, [pc, #140]	@ (8000538 <MX_GPIO_Init+0xdc>)
 80004ac:	695a      	ldr	r2, [r3, #20]
 80004ae:	4b22      	ldr	r3, [pc, #136]	@ (8000538 <MX_GPIO_Init+0xdc>)
 80004b0:	2180      	movs	r1, #128	@ 0x80
 80004b2:	0289      	lsls	r1, r1, #10
 80004b4:	430a      	orrs	r2, r1
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000538 <MX_GPIO_Init+0xdc>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	2380      	movs	r3, #128	@ 0x80
 80004be:	029b      	lsls	r3, r3, #10
 80004c0:	4013      	ands	r3, r2
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004c6:	2380      	movs	r3, #128	@ 0x80
 80004c8:	019b      	lsls	r3, r3, #6
 80004ca:	481c      	ldr	r0, [pc, #112]	@ (800053c <MX_GPIO_Init+0xe0>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	0019      	movs	r1, r3
 80004d0:	f000 fcec 	bl	8000eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2280      	movs	r2, #128	@ 0x80
 80004d8:	0192      	lsls	r2, r2, #6
 80004da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2201      	movs	r2, #1
 80004e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	4a12      	ldr	r2, [pc, #72]	@ (800053c <MX_GPIO_Init+0xe0>)
 80004f2:	0019      	movs	r1, r3
 80004f4:	0010      	movs	r0, r2
 80004f6:	f000 fb69 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004fa:	0021      	movs	r1, r4
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2240      	movs	r2, #64	@ 0x40
 8000500:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2284      	movs	r2, #132	@ 0x84
 8000506:	0392      	lsls	r2, r2, #14
 8000508:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	187a      	adds	r2, r7, r1
 8000512:	2390      	movs	r3, #144	@ 0x90
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	0011      	movs	r1, r2
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fb57 	bl	8000bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	2007      	movs	r0, #7
 8000524:	f000 fb20 	bl	8000b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000528:	2007      	movs	r0, #7
 800052a:	f000 fb32 	bl	8000b92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b009      	add	sp, #36	@ 0x24
 8000534:	bd90      	pop	{r4, r7, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	40021000 	.word	0x40021000
 800053c:	48000800 	.word	0x48000800

08000540 <_write>:

/* USER CODE BEGIN 4 */

/* UART PRINTF MAP */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	b29a      	uxth	r2, r3
 8000550:	2301      	movs	r3, #1
 8000552:	425b      	negs	r3, r3
 8000554:	68b9      	ldr	r1, [r7, #8]
 8000556:	4804      	ldr	r0, [pc, #16]	@ (8000568 <_write+0x28>)
 8000558:	f001 fd5a 	bl	8002010 <HAL_UART_Transmit>
	return len;
 800055c:	687b      	ldr	r3, [r7, #4]
}
 800055e:	0018      	movs	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	b004      	add	sp, #16
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	200000cc 	.word	0x200000cc

0800056c <HAL_GPIO_EXTI_Callback>:



/* IR TIMER AND DECODING */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	0002      	movs	r2, r0
 8000574:	1dbb      	adds	r3, r7, #6
 8000576:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_6)
 8000578:	1dbb      	adds	r3, r7, #6
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	2b40      	cmp	r3, #64	@ 0x40
 800057e:	d168      	bne.n	8000652 <HAL_GPIO_EXTI_Callback+0xe6>
  {
    if (__HAL_TIM_GET_COUNTER(&htim3) > 8000)
 8000580:	4b36      	ldr	r3, [pc, #216]	@ (800065c <HAL_GPIO_EXTI_Callback+0xf0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000586:	23fa      	movs	r3, #250	@ 0xfa
 8000588:	015b      	lsls	r3, r3, #5
 800058a:	429a      	cmp	r2, r3
 800058c:	d906      	bls.n	800059c <HAL_GPIO_EXTI_Callback+0x30>
    {
      tempCode = 0;
 800058e:	4b34      	ldr	r3, [pc, #208]	@ (8000660 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
      bitIndex = 0;
 8000594:	4b33      	ldr	r3, [pc, #204]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e031      	b.n	8000600 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim3) > 1700)
 800059c:	4b2f      	ldr	r3, [pc, #188]	@ (800065c <HAL_GPIO_EXTI_Callback+0xf0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005a2:	4a31      	ldr	r2, [pc, #196]	@ (8000668 <HAL_GPIO_EXTI_Callback+0xfc>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d912      	bls.n	80005ce <HAL_GPIO_EXTI_Callback+0x62>
    {
      tempCode |= (1UL << (31-bitIndex));   // write 1
 80005a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xf8>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	001a      	movs	r2, r3
 80005ae:	2380      	movs	r3, #128	@ 0x80
 80005b0:	061b      	lsls	r3, r3, #24
 80005b2:	40d3      	lsrs	r3, r2
 80005b4:	001a      	movs	r2, r3
 80005b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000660 <HAL_GPIO_EXTI_Callback+0xf4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <HAL_GPIO_EXTI_Callback+0xf4>)
 80005be:	601a      	str	r2, [r3, #0]
      bitIndex++;
 80005c0:	4b28      	ldr	r3, [pc, #160]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xf8>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xf8>)
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	e018      	b.n	8000600 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim3) > 1000)
 80005ce:	4b23      	ldr	r3, [pc, #140]	@ (800065c <HAL_GPIO_EXTI_Callback+0xf0>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005d4:	23fa      	movs	r3, #250	@ 0xfa
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	429a      	cmp	r2, r3
 80005da:	d911      	bls.n	8000600 <HAL_GPIO_EXTI_Callback+0x94>
    {
      tempCode &= ~(1UL << (31-bitIndex));  // write 0
 80005dc:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xf8>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	001a      	movs	r2, r3
 80005e2:	2380      	movs	r3, #128	@ 0x80
 80005e4:	061b      	lsls	r3, r3, #24
 80005e6:	40d3      	lsrs	r3, r2
 80005e8:	43da      	mvns	r2, r3
 80005ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <HAL_GPIO_EXTI_Callback+0xf4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	401a      	ands	r2, r3
 80005f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <HAL_GPIO_EXTI_Callback+0xf4>)
 80005f2:	601a      	str	r2, [r3, #0]
      bitIndex++;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xf8>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xf8>)
 80005fe:	701a      	strb	r2, [r3, #0]
    }
    if(bitIndex == 32)
 8000600:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b20      	cmp	r3, #32
 8000606:	d120      	bne.n	800064a <HAL_GPIO_EXTI_Callback+0xde>
    {
      cmdli = ~tempCode; // Logical inverted last 8 bits
 8000608:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <HAL_GPIO_EXTI_Callback+0xf4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	43db      	mvns	r3, r3
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b16      	ldr	r3, [pc, #88]	@ (800066c <HAL_GPIO_EXTI_Callback+0x100>)
 8000614:	701a      	strb	r2, [r3, #0]
      cmd = tempCode >> 8; // Second last 8 bits
 8000616:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	0a1b      	lsrs	r3, r3, #8
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <HAL_GPIO_EXTI_Callback+0x104>)
 8000620:	701a      	strb	r2, [r3, #0]
      if(cmdli == cmd) // Check for errors
 8000622:	4b12      	ldr	r3, [pc, #72]	@ (800066c <HAL_GPIO_EXTI_Callback+0x100>)
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <HAL_GPIO_EXTI_Callback+0x104>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	429a      	cmp	r2, r3
 800062c:	d10a      	bne.n	8000644 <HAL_GPIO_EXTI_Callback+0xd8>
      {
        code = tempCode; // If no bit errors
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x108>)
 8000634:	601a      	str	r2, [r3, #0]
        // Do your main work HERE
        printf("Data: %X\r\n",code);
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x108>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x10c>)
 800063c:	0011      	movs	r1, r2
 800063e:	0018      	movs	r0, r3
 8000640:	f002 f9ba 	bl	80029b8 <iprintf>
      }
      bitIndex = 0;
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
    }
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 800064a:	4b04      	ldr	r3, [pc, #16]	@ (800065c <HAL_GPIO_EXTI_Callback+0xf0>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b002      	add	sp, #8
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	20000084 	.word	0x20000084
 8000660:	20000154 	.word	0x20000154
 8000664:	20000158 	.word	0x20000158
 8000668:	000006a4 	.word	0x000006a4
 800066c:	2000015a 	.word	0x2000015a
 8000670:	20000159 	.word	0x20000159
 8000674:	2000015c 	.word	0x2000015c
 8000678:	0800370c 	.word	0x0800370c

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	e7fd      	b.n	8000684 <Error_Handler+0x8>

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <HAL_MspInit+0x44>)
 8000690:	699a      	ldr	r2, [r3, #24]
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <HAL_MspInit+0x44>)
 8000694:	2101      	movs	r1, #1
 8000696:	430a      	orrs	r2, r1
 8000698:	619a      	str	r2, [r3, #24]
 800069a:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <HAL_MspInit+0x44>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	2201      	movs	r2, #1
 80006a0:	4013      	ands	r3, r2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <HAL_MspInit+0x44>)
 80006a8:	69da      	ldr	r2, [r3, #28]
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <HAL_MspInit+0x44>)
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	0549      	lsls	r1, r1, #21
 80006b0:	430a      	orrs	r2, r1
 80006b2:	61da      	str	r2, [r3, #28]
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <HAL_MspInit+0x44>)
 80006b6:	69da      	ldr	r2, [r3, #28]
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	055b      	lsls	r3, r3, #21
 80006bc:	4013      	ands	r3, r2
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a09      	ldr	r2, [pc, #36]	@ (8000704 <HAL_TIM_Base_MspInit+0x34>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d10b      	bne.n	80006fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <HAL_TIM_Base_MspInit+0x38>)
 80006e4:	69da      	ldr	r2, [r3, #28]
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <HAL_TIM_Base_MspInit+0x38>)
 80006e8:	2102      	movs	r1, #2
 80006ea:	430a      	orrs	r2, r1
 80006ec:	61da      	str	r2, [r3, #28]
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <HAL_TIM_Base_MspInit+0x38>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	2202      	movs	r2, #2
 80006f4:	4013      	ands	r3, r2
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b004      	add	sp, #16
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	40000400 	.word	0x40000400
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b08b      	sub	sp, #44	@ 0x2c
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	2414      	movs	r4, #20
 8000716:	193b      	adds	r3, r7, r4
 8000718:	0018      	movs	r0, r3
 800071a:	2314      	movs	r3, #20
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f002 f9a6 	bl	8002a70 <memset>
  if(huart->Instance==USART1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a1d      	ldr	r2, [pc, #116]	@ (80007a0 <HAL_UART_MspInit+0x94>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d133      	bne.n	8000796 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800072e:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <HAL_UART_MspInit+0x98>)
 8000730:	699a      	ldr	r2, [r3, #24]
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <HAL_UART_MspInit+0x98>)
 8000734:	2180      	movs	r1, #128	@ 0x80
 8000736:	01c9      	lsls	r1, r1, #7
 8000738:	430a      	orrs	r2, r1
 800073a:	619a      	str	r2, [r3, #24]
 800073c:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <HAL_UART_MspInit+0x98>)
 800073e:	699a      	ldr	r2, [r3, #24]
 8000740:	2380      	movs	r3, #128	@ 0x80
 8000742:	01db      	lsls	r3, r3, #7
 8000744:	4013      	ands	r3, r2
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <HAL_UART_MspInit+0x98>)
 800074c:	695a      	ldr	r2, [r3, #20]
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <HAL_UART_MspInit+0x98>)
 8000750:	2180      	movs	r1, #128	@ 0x80
 8000752:	0289      	lsls	r1, r1, #10
 8000754:	430a      	orrs	r2, r1
 8000756:	615a      	str	r2, [r3, #20]
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_UART_MspInit+0x98>)
 800075a:	695a      	ldr	r2, [r3, #20]
 800075c:	2380      	movs	r3, #128	@ 0x80
 800075e:	029b      	lsls	r3, r3, #10
 8000760:	4013      	ands	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	22c0      	movs	r2, #192	@ 0xc0
 800076a:	00d2      	lsls	r2, r2, #3
 800076c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	0021      	movs	r1, r4
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2202      	movs	r2, #2
 8000774:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2203      	movs	r2, #3
 8000780:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2201      	movs	r2, #1
 8000786:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	187a      	adds	r2, r7, r1
 800078a:	2390      	movs	r3, #144	@ 0x90
 800078c:	05db      	lsls	r3, r3, #23
 800078e:	0011      	movs	r1, r2
 8000790:	0018      	movs	r0, r3
 8000792:	f000 fa1b 	bl	8000bcc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b00b      	add	sp, #44	@ 0x2c
 800079c:	bd90      	pop	{r4, r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	40013800 	.word	0x40013800
 80007a4:	40021000 	.word	0x40021000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	e7fd      	b.n	80007ac <NMI_Handler+0x4>

080007b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	e7fd      	b.n	80007b4 <HardFault_Handler+0x4>

080007b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 f902 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80007de:	2040      	movs	r0, #64	@ 0x40
 80007e0:	f000 fb9c 	bl	8000f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80007e4:	46c0      	nop			@ (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	e00a      	b.n	8000812 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007fc:	e000      	b.n	8000800 <_read+0x16>
 80007fe:	bf00      	nop
 8000800:	0001      	movs	r1, r0
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	1c5a      	adds	r2, r3, #1
 8000806:	60ba      	str	r2, [r7, #8]
 8000808:	b2ca      	uxtb	r2, r1
 800080a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	3301      	adds	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	429a      	cmp	r2, r3
 8000818:	dbf0      	blt.n	80007fc <_read+0x12>
  }

  return len;
 800081a:	687b      	ldr	r3, [r7, #4]
}
 800081c:	0018      	movs	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	b006      	add	sp, #24
 8000822:	bd80      	pop	{r7, pc}

08000824 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800082c:	2301      	movs	r3, #1
 800082e:	425b      	negs	r3, r3
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}

08000838 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	0192      	lsls	r2, r2, #6
 8000848:	605a      	str	r2, [r3, #4]
  return 0;
 800084a:	2300      	movs	r3, #0
}
 800084c:	0018      	movs	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}

08000854 <_isatty>:

int _isatty(int file)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800085c:	2301      	movs	r3, #1
}
 800085e:	0018      	movs	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}

08000866 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b084      	sub	sp, #16
 800086a:	af00      	add	r7, sp, #0
 800086c:	60f8      	str	r0, [r7, #12]
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000872:	2300      	movs	r3, #0
}
 8000874:	0018      	movs	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	b004      	add	sp, #16
 800087a:	bd80      	pop	{r7, pc}

0800087c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000884:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <_sbrk+0x5c>)
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <_sbrk+0x60>)
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000890:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <_sbrk+0x64>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <_sbrk+0x64>)
 800089a:	4a12      	ldr	r2, [pc, #72]	@ (80008e4 <_sbrk+0x68>)
 800089c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d207      	bcs.n	80008bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ac:	f002 f936 	bl	8002b1c <__errno>
 80008b0:	0003      	movs	r3, r0
 80008b2:	220c      	movs	r2, #12
 80008b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	425b      	negs	r3, r3
 80008ba:	e009      	b.n	80008d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008bc:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <_sbrk+0x64>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008c2:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	18d2      	adds	r2, r2, r3
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <_sbrk+0x64>)
 80008cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008ce:	68fb      	ldr	r3, [r7, #12]
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b006      	add	sp, #24
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20002000 	.word	0x20002000
 80008dc:	00000400 	.word	0x00000400
 80008e0:	20000160 	.word	0x20000160
 80008e4:	200002b8 	.word	0x200002b8

080008e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f4:	480d      	ldr	r0, [pc, #52]	@ (800092c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f8:	f7ff fff6 	bl	80008e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	@ (8000930 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	@ (8000934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	@ (8000940 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000922:	f002 f901 	bl	8002b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000926:	f7ff fc85 	bl	8000234 <main>

0800092a <LoopForever>:

LoopForever:
    b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
  ldr   r0, =_estack
 800092c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000938:	0800378c 	.word	0x0800378c
  ldr r2, =_sbss
 800093c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000940:	200002b4 	.word	0x200002b4

08000944 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_IRQHandler>
	...

08000948 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b07      	ldr	r3, [pc, #28]	@ (800096c <HAL_Init+0x24>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_Init+0x24>)
 8000952:	2110      	movs	r1, #16
 8000954:	430a      	orrs	r2, r1
 8000956:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f809 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095e:	f7ff fe93 	bl	8000688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000962:	2300      	movs	r3, #0
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	40022000 	.word	0x40022000

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000978:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <HAL_InitTick+0x5c>)
 800097a:	681c      	ldr	r4, [r3, #0]
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <HAL_InitTick+0x60>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	0019      	movs	r1, r3
 8000982:	23fa      	movs	r3, #250	@ 0xfa
 8000984:	0098      	lsls	r0, r3, #2
 8000986:	f7ff fbc9 	bl	800011c <__udivsi3>
 800098a:	0003      	movs	r3, r0
 800098c:	0019      	movs	r1, r3
 800098e:	0020      	movs	r0, r4
 8000990:	f7ff fbc4 	bl	800011c <__udivsi3>
 8000994:	0003      	movs	r3, r0
 8000996:	0018      	movs	r0, r3
 8000998:	f000 f90b 	bl	8000bb2 <HAL_SYSTICK_Config>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e00f      	b.n	80009c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d80b      	bhi.n	80009c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	2301      	movs	r3, #1
 80009ae:	425b      	negs	r3, r3
 80009b0:	2200      	movs	r2, #0
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 f8d8 	bl	8000b68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_InitTick+0x64>)
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	e000      	b.n	80009c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b003      	add	sp, #12
 80009ca:	bd90      	pop	{r4, r7, pc}
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000004 	.word	0x20000004

080009d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009dc:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <HAL_IncTick+0x1c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	001a      	movs	r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <HAL_IncTick+0x20>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	18d2      	adds	r2, r2, r3
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <HAL_IncTick+0x20>)
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	46c0      	nop			@ (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000164 	.word	0x20000164

080009fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b02      	ldr	r3, [pc, #8]	@ (8000a0c <HAL_GetTick+0x10>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	20000164 	.word	0x20000164

08000a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	0002      	movs	r2, r0
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a22:	d809      	bhi.n	8000a38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	001a      	movs	r2, r3
 8000a2a:	231f      	movs	r3, #31
 8000a2c:	401a      	ands	r2, r3
 8000a2e:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <__NVIC_EnableIRQ+0x30>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	4091      	lsls	r1, r2
 8000a34:	000a      	movs	r2, r1
 8000a36:	601a      	str	r2, [r3, #0]
  }
}
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a58:	d828      	bhi.n	8000aac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b18 <__NVIC_SetPriority+0xd4>)
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b25b      	sxtb	r3, r3
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	33c0      	adds	r3, #192	@ 0xc0
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	589b      	ldr	r3, [r3, r2]
 8000a6a:	1dfa      	adds	r2, r7, #7
 8000a6c:	7812      	ldrb	r2, [r2, #0]
 8000a6e:	0011      	movs	r1, r2
 8000a70:	2203      	movs	r2, #3
 8000a72:	400a      	ands	r2, r1
 8000a74:	00d2      	lsls	r2, r2, #3
 8000a76:	21ff      	movs	r1, #255	@ 0xff
 8000a78:	4091      	lsls	r1, r2
 8000a7a:	000a      	movs	r2, r1
 8000a7c:	43d2      	mvns	r2, r2
 8000a7e:	401a      	ands	r2, r3
 8000a80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	019b      	lsls	r3, r3, #6
 8000a86:	22ff      	movs	r2, #255	@ 0xff
 8000a88:	401a      	ands	r2, r3
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	0018      	movs	r0, r3
 8000a90:	2303      	movs	r3, #3
 8000a92:	4003      	ands	r3, r0
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a98:	481f      	ldr	r0, [pc, #124]	@ (8000b18 <__NVIC_SetPriority+0xd4>)
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	089b      	lsrs	r3, r3, #2
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	33c0      	adds	r3, #192	@ 0xc0
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aaa:	e031      	b.n	8000b10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	4a1b      	ldr	r2, [pc, #108]	@ (8000b1c <__NVIC_SetPriority+0xd8>)
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	400b      	ands	r3, r1
 8000ab8:	3b08      	subs	r3, #8
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	3306      	adds	r3, #6
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	18d3      	adds	r3, r2, r3
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	1dfa      	adds	r2, r7, #7
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	0011      	movs	r1, r2
 8000acc:	2203      	movs	r2, #3
 8000ace:	400a      	ands	r2, r1
 8000ad0:	00d2      	lsls	r2, r2, #3
 8000ad2:	21ff      	movs	r1, #255	@ 0xff
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	000a      	movs	r2, r1
 8000ad8:	43d2      	mvns	r2, r2
 8000ada:	401a      	ands	r2, r3
 8000adc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	019b      	lsls	r3, r3, #6
 8000ae2:	22ff      	movs	r2, #255	@ 0xff
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	0018      	movs	r0, r3
 8000aec:	2303      	movs	r3, #3
 8000aee:	4003      	ands	r3, r0
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af4:	4809      	ldr	r0, [pc, #36]	@ (8000b1c <__NVIC_SetPriority+0xd8>)
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	001c      	movs	r4, r3
 8000afc:	230f      	movs	r3, #15
 8000afe:	4023      	ands	r3, r4
 8000b00:	3b08      	subs	r3, #8
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	430a      	orrs	r2, r1
 8000b06:	3306      	adds	r3, #6
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	18c3      	adds	r3, r0, r3
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	601a      	str	r2, [r3, #0]
}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b003      	add	sp, #12
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	1e5a      	subs	r2, r3, #1
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	045b      	lsls	r3, r3, #17
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d301      	bcc.n	8000b38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b34:	2301      	movs	r3, #1
 8000b36:	e010      	b.n	8000b5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b38:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <SysTick_Config+0x44>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	3a01      	subs	r2, #1
 8000b3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b40:	2301      	movs	r3, #1
 8000b42:	425b      	negs	r3, r3
 8000b44:	2103      	movs	r1, #3
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff ff7c 	bl	8000a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <SysTick_Config+0x44>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <SysTick_Config+0x44>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	210f      	movs	r1, #15
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	1c02      	adds	r2, r0, #0
 8000b78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	0011      	movs	r1, r2
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff ff5d 	bl	8000a44 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b004      	add	sp, #16
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	0002      	movs	r2, r0
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b25b      	sxtb	r3, r3
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f7ff ff33 	bl	8000a10 <__NVIC_EnableIRQ>
}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ffaf 	bl	8000b20 <SysTick_Config>
 8000bc2:	0003      	movs	r3, r0
}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bda:	e14f      	b.n	8000e7c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	4091      	lsls	r1, r2
 8000be6:	000a      	movs	r2, r1
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d100      	bne.n	8000bf4 <HAL_GPIO_Init+0x28>
 8000bf2:	e140      	b.n	8000e76 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d005      	beq.n	8000c0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2203      	movs	r2, #3
 8000c06:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d130      	bne.n	8000c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2203      	movs	r2, #3
 8000c18:	409a      	lsls	r2, r3
 8000c1a:	0013      	movs	r3, r2
 8000c1c:	43da      	mvns	r2, r3
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68da      	ldr	r2, [r3, #12]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	409a      	lsls	r2, r3
 8000c2e:	0013      	movs	r3, r2
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c42:	2201      	movs	r2, #1
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	091b      	lsrs	r3, r3, #4
 8000c58:	2201      	movs	r2, #1
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	0013      	movs	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2203      	movs	r2, #3
 8000c74:	4013      	ands	r3, r2
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d017      	beq.n	8000caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	409a      	lsls	r2, r3
 8000c88:	0013      	movs	r3, r2
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2203      	movs	r2, #3
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d123      	bne.n	8000cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	08da      	lsrs	r2, r3, #3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	58d3      	ldr	r3, [r2, r3]
 8000cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	4013      	ands	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	220f      	movs	r2, #15
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	691a      	ldr	r2, [r3, #16]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2107      	movs	r1, #7
 8000ce2:	400b      	ands	r3, r1
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	0013      	movs	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3208      	adds	r2, #8
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	6939      	ldr	r1, [r7, #16]
 8000cfc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	23c0      	movs	r3, #192	@ 0xc0
 8000d38:	029b      	lsls	r3, r3, #10
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d100      	bne.n	8000d40 <HAL_GPIO_Init+0x174>
 8000d3e:	e09a      	b.n	8000e76 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d40:	4b54      	ldr	r3, [pc, #336]	@ (8000e94 <HAL_GPIO_Init+0x2c8>)
 8000d42:	699a      	ldr	r2, [r3, #24]
 8000d44:	4b53      	ldr	r3, [pc, #332]	@ (8000e94 <HAL_GPIO_Init+0x2c8>)
 8000d46:	2101      	movs	r1, #1
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	619a      	str	r2, [r3, #24]
 8000d4c:	4b51      	ldr	r3, [pc, #324]	@ (8000e94 <HAL_GPIO_Init+0x2c8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	2201      	movs	r2, #1
 8000d52:	4013      	ands	r3, r2
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d58:	4a4f      	ldr	r2, [pc, #316]	@ (8000e98 <HAL_GPIO_Init+0x2cc>)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	3302      	adds	r3, #2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	589b      	ldr	r3, [r3, r2]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	220f      	movs	r2, #15
 8000d70:	409a      	lsls	r2, r3
 8000d72:	0013      	movs	r3, r2
 8000d74:	43da      	mvns	r2, r3
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	2390      	movs	r3, #144	@ 0x90
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d013      	beq.n	8000dae <HAL_GPIO_Init+0x1e2>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a44      	ldr	r2, [pc, #272]	@ (8000e9c <HAL_GPIO_Init+0x2d0>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d00d      	beq.n	8000daa <HAL_GPIO_Init+0x1de>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a43      	ldr	r2, [pc, #268]	@ (8000ea0 <HAL_GPIO_Init+0x2d4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d007      	beq.n	8000da6 <HAL_GPIO_Init+0x1da>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a42      	ldr	r2, [pc, #264]	@ (8000ea4 <HAL_GPIO_Init+0x2d8>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d101      	bne.n	8000da2 <HAL_GPIO_Init+0x1d6>
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x1e4>
 8000da2:	2305      	movs	r3, #5
 8000da4:	e004      	b.n	8000db0 <HAL_GPIO_Init+0x1e4>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_Init+0x1e4>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x1e4>
 8000dae:	2300      	movs	r3, #0
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	2103      	movs	r1, #3
 8000db4:	400a      	ands	r2, r1
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	4093      	lsls	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dc0:	4935      	ldr	r1, [pc, #212]	@ (8000e98 <HAL_GPIO_Init+0x2cc>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dce:	4b36      	ldr	r3, [pc, #216]	@ (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	2380      	movs	r3, #128	@ 0x80
 8000de4:	035b      	lsls	r3, r3, #13
 8000de6:	4013      	ands	r3, r2
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000df2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000df8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	039b      	lsls	r3, r3, #14
 8000e10:	4013      	ands	r3, r2
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000e22:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	2380      	movs	r3, #128	@ 0x80
 8000e38:	029b      	lsls	r3, r3, #10
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e46:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43da      	mvns	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	2380      	movs	r3, #128	@ 0x80
 8000e62:	025b      	lsls	r3, r3, #9
 8000e64:	4013      	ands	r3, r2
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <HAL_GPIO_Init+0x2dc>)
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	40da      	lsrs	r2, r3
 8000e84:	1e13      	subs	r3, r2, #0
 8000e86:	d000      	beq.n	8000e8a <HAL_GPIO_Init+0x2be>
 8000e88:	e6a8      	b.n	8000bdc <HAL_GPIO_Init+0x10>
  } 
}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b006      	add	sp, #24
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	48000800 	.word	0x48000800
 8000ea4:	48000c00 	.word	0x48000c00
 8000ea8:	40010400 	.word	0x40010400

08000eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	0008      	movs	r0, r1
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	1cbb      	adds	r3, r7, #2
 8000eba:	1c02      	adds	r2, r0, #0
 8000ebc:	801a      	strh	r2, [r3, #0]
 8000ebe:	1c7b      	adds	r3, r7, #1
 8000ec0:	1c0a      	adds	r2, r1, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec4:	1c7b      	adds	r3, r7, #1
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d004      	beq.n	8000ed6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ecc:	1cbb      	adds	r3, r7, #2
 8000ece:	881a      	ldrh	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ed4:	e003      	b.n	8000ede <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed6:	1cbb      	adds	r3, r7, #2
 8000ed8:	881a      	ldrh	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	000a      	movs	r2, r1
 8000ef0:	1cbb      	adds	r3, r7, #2
 8000ef2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000efa:	1cbb      	adds	r3, r7, #2
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	4013      	ands	r3, r2
 8000f02:	041a      	lsls	r2, r3, #16
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	1cb9      	adds	r1, r7, #2
 8000f0a:	8809      	ldrh	r1, [r1, #0]
 8000f0c:	400b      	ands	r3, r1
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	619a      	str	r2, [r3, #24]
}
 8000f14:	46c0      	nop			@ (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b004      	add	sp, #16
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	0002      	movs	r2, r0
 8000f24:	1dbb      	adds	r3, r7, #6
 8000f26:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f28:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	1dba      	adds	r2, r7, #6
 8000f2e:	8812      	ldrh	r2, [r2, #0]
 8000f30:	4013      	ands	r3, r2
 8000f32:	d008      	beq.n	8000f46 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f36:	1dba      	adds	r2, r7, #6
 8000f38:	8812      	ldrh	r2, [r2, #0]
 8000f3a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f3c:	1dbb      	adds	r3, r7, #6
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff fb13 	bl	800056c <HAL_GPIO_EXTI_Callback>
  }
}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
 8000f50:	40010400 	.word	0x40010400

08000f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e301      	b.n	800156a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d100      	bne.n	8000f72 <HAL_RCC_OscConfig+0x1e>
 8000f70:	e08d      	b.n	800108e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f72:	4bc3      	ldr	r3, [pc, #780]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	220c      	movs	r2, #12
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d00e      	beq.n	8000f9c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f7e:	4bc0      	ldr	r3, [pc, #768]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	220c      	movs	r2, #12
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b08      	cmp	r3, #8
 8000f88:	d116      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x64>
 8000f8a:	4bbd      	ldr	r3, [pc, #756]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	2380      	movs	r3, #128	@ 0x80
 8000f90:	025b      	lsls	r3, r3, #9
 8000f92:	401a      	ands	r2, r3
 8000f94:	2380      	movs	r3, #128	@ 0x80
 8000f96:	025b      	lsls	r3, r3, #9
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d10d      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	4bb8      	ldr	r3, [pc, #736]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	2380      	movs	r3, #128	@ 0x80
 8000fa2:	029b      	lsls	r3, r3, #10
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d100      	bne.n	8000faa <HAL_RCC_OscConfig+0x56>
 8000fa8:	e070      	b.n	800108c <HAL_RCC_OscConfig+0x138>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d000      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x60>
 8000fb2:	e06b      	b.n	800108c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e2d8      	b.n	800156a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d107      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x7c>
 8000fc0:	4baf      	ldr	r3, [pc, #700]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4bae      	ldr	r3, [pc, #696]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8000fc6:	2180      	movs	r1, #128	@ 0x80
 8000fc8:	0249      	lsls	r1, r1, #9
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e02f      	b.n	8001030 <HAL_RCC_OscConfig+0xdc>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10c      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x9e>
 8000fd8:	4ba9      	ldr	r3, [pc, #676]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4ba8      	ldr	r3, [pc, #672]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8000fde:	49a9      	ldr	r1, [pc, #676]	@ (8001284 <HAL_RCC_OscConfig+0x330>)
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	4ba6      	ldr	r3, [pc, #664]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4ba5      	ldr	r3, [pc, #660]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8000fea:	49a7      	ldr	r1, [pc, #668]	@ (8001288 <HAL_RCC_OscConfig+0x334>)
 8000fec:	400a      	ands	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e01e      	b.n	8001030 <HAL_RCC_OscConfig+0xdc>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b05      	cmp	r3, #5
 8000ff8:	d10e      	bne.n	8001018 <HAL_RCC_OscConfig+0xc4>
 8000ffa:	4ba1      	ldr	r3, [pc, #644]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4ba0      	ldr	r3, [pc, #640]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001000:	2180      	movs	r1, #128	@ 0x80
 8001002:	02c9      	lsls	r1, r1, #11
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	4b9d      	ldr	r3, [pc, #628]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b9c      	ldr	r3, [pc, #624]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 800100e:	2180      	movs	r1, #128	@ 0x80
 8001010:	0249      	lsls	r1, r1, #9
 8001012:	430a      	orrs	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	e00b      	b.n	8001030 <HAL_RCC_OscConfig+0xdc>
 8001018:	4b99      	ldr	r3, [pc, #612]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b98      	ldr	r3, [pc, #608]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 800101e:	4999      	ldr	r1, [pc, #612]	@ (8001284 <HAL_RCC_OscConfig+0x330>)
 8001020:	400a      	ands	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	4b96      	ldr	r3, [pc, #600]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b95      	ldr	r3, [pc, #596]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 800102a:	4997      	ldr	r1, [pc, #604]	@ (8001288 <HAL_RCC_OscConfig+0x334>)
 800102c:	400a      	ands	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d014      	beq.n	8001062 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fce0 	bl	80009fc <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001042:	f7ff fcdb 	bl	80009fc <HAL_GetTick>
 8001046:	0002      	movs	r2, r0
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b64      	cmp	r3, #100	@ 0x64
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e28a      	b.n	800156a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001054:	4b8a      	ldr	r3, [pc, #552]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	2380      	movs	r3, #128	@ 0x80
 800105a:	029b      	lsls	r3, r3, #10
 800105c:	4013      	ands	r3, r2
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0xee>
 8001060:	e015      	b.n	800108e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001062:	f7ff fccb 	bl	80009fc <HAL_GetTick>
 8001066:	0003      	movs	r3, r0
 8001068:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800106c:	f7ff fcc6 	bl	80009fc <HAL_GetTick>
 8001070:	0002      	movs	r2, r0
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b64      	cmp	r3, #100	@ 0x64
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e275      	b.n	800156a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107e:	4b80      	ldr	r3, [pc, #512]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	2380      	movs	r3, #128	@ 0x80
 8001084:	029b      	lsls	r3, r3, #10
 8001086:	4013      	ands	r3, r2
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x118>
 800108a:	e000      	b.n	800108e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2202      	movs	r2, #2
 8001094:	4013      	ands	r3, r2
 8001096:	d100      	bne.n	800109a <HAL_RCC_OscConfig+0x146>
 8001098:	e069      	b.n	800116e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800109a:	4b79      	ldr	r3, [pc, #484]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	220c      	movs	r2, #12
 80010a0:	4013      	ands	r3, r2
 80010a2:	d00b      	beq.n	80010bc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010a4:	4b76      	ldr	r3, [pc, #472]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	220c      	movs	r2, #12
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d11c      	bne.n	80010ea <HAL_RCC_OscConfig+0x196>
 80010b0:	4b73      	ldr	r3, [pc, #460]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	2380      	movs	r3, #128	@ 0x80
 80010b6:	025b      	lsls	r3, r3, #9
 80010b8:	4013      	ands	r3, r2
 80010ba:	d116      	bne.n	80010ea <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010bc:	4b70      	ldr	r3, [pc, #448]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2202      	movs	r2, #2
 80010c2:	4013      	ands	r3, r2
 80010c4:	d005      	beq.n	80010d2 <HAL_RCC_OscConfig+0x17e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d001      	beq.n	80010d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e24b      	b.n	800156a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	22f8      	movs	r2, #248	@ 0xf8
 80010d8:	4393      	bics	r3, r2
 80010da:	0019      	movs	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	00da      	lsls	r2, r3, #3
 80010e2:	4b67      	ldr	r3, [pc, #412]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e8:	e041      	b.n	800116e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d024      	beq.n	800113c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f2:	4b63      	ldr	r3, [pc, #396]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b62      	ldr	r3, [pc, #392]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	430a      	orrs	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fc7d 	bl	80009fc <HAL_GetTick>
 8001102:	0003      	movs	r3, r0
 8001104:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001108:	f7ff fc78 	bl	80009fc <HAL_GetTick>
 800110c:	0002      	movs	r2, r0
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e227      	b.n	800156a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111a:	4b59      	ldr	r3, [pc, #356]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2202      	movs	r2, #2
 8001120:	4013      	ands	r3, r2
 8001122:	d0f1      	beq.n	8001108 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001124:	4b56      	ldr	r3, [pc, #344]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	22f8      	movs	r2, #248	@ 0xf8
 800112a:	4393      	bics	r3, r2
 800112c:	0019      	movs	r1, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	00da      	lsls	r2, r3, #3
 8001134:	4b52      	ldr	r3, [pc, #328]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e018      	b.n	800116e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113c:	4b50      	ldr	r3, [pc, #320]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b4f      	ldr	r3, [pc, #316]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001142:	2101      	movs	r1, #1
 8001144:	438a      	bics	r2, r1
 8001146:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fc58 	bl	80009fc <HAL_GetTick>
 800114c:	0003      	movs	r3, r0
 800114e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001152:	f7ff fc53 	bl	80009fc <HAL_GetTick>
 8001156:	0002      	movs	r2, r0
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e202      	b.n	800156a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001164:	4b46      	ldr	r3, [pc, #280]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2202      	movs	r2, #2
 800116a:	4013      	ands	r3, r2
 800116c:	d1f1      	bne.n	8001152 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2208      	movs	r2, #8
 8001174:	4013      	ands	r3, r2
 8001176:	d036      	beq.n	80011e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d019      	beq.n	80011b4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001180:	4b3f      	ldr	r3, [pc, #252]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001182:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001184:	4b3e      	ldr	r3, [pc, #248]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001186:	2101      	movs	r1, #1
 8001188:	430a      	orrs	r2, r1
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118c:	f7ff fc36 	bl	80009fc <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001196:	f7ff fc31 	bl	80009fc <HAL_GetTick>
 800119a:	0002      	movs	r2, r0
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e1e0      	b.n	800156a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a8:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 80011aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ac:	2202      	movs	r2, #2
 80011ae:	4013      	ands	r3, r2
 80011b0:	d0f1      	beq.n	8001196 <HAL_RCC_OscConfig+0x242>
 80011b2:	e018      	b.n	80011e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b4:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 80011b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011b8:	4b31      	ldr	r3, [pc, #196]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 80011ba:	2101      	movs	r1, #1
 80011bc:	438a      	bics	r2, r1
 80011be:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c0:	f7ff fc1c 	bl	80009fc <HAL_GetTick>
 80011c4:	0003      	movs	r3, r0
 80011c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ca:	f7ff fc17 	bl	80009fc <HAL_GetTick>
 80011ce:	0002      	movs	r2, r0
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e1c6      	b.n	800156a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011dc:	4b28      	ldr	r3, [pc, #160]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 80011de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e0:	2202      	movs	r2, #2
 80011e2:	4013      	ands	r3, r2
 80011e4:	d1f1      	bne.n	80011ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2204      	movs	r2, #4
 80011ec:	4013      	ands	r3, r2
 80011ee:	d100      	bne.n	80011f2 <HAL_RCC_OscConfig+0x29e>
 80011f0:	e0b4      	b.n	800135c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f2:	201f      	movs	r0, #31
 80011f4:	183b      	adds	r3, r7, r0
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fa:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 80011fc:	69da      	ldr	r2, [r3, #28]
 80011fe:	2380      	movs	r3, #128	@ 0x80
 8001200:	055b      	lsls	r3, r3, #21
 8001202:	4013      	ands	r3, r2
 8001204:	d110      	bne.n	8001228 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001208:	69da      	ldr	r2, [r3, #28]
 800120a:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 800120c:	2180      	movs	r1, #128	@ 0x80
 800120e:	0549      	lsls	r1, r1, #21
 8001210:	430a      	orrs	r2, r1
 8001212:	61da      	str	r2, [r3, #28]
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001216:	69da      	ldr	r2, [r3, #28]
 8001218:	2380      	movs	r3, #128	@ 0x80
 800121a:	055b      	lsls	r3, r3, #21
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001222:	183b      	adds	r3, r7, r0
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <HAL_RCC_OscConfig+0x338>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4013      	ands	r3, r2
 8001232:	d11a      	bne.n	800126a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001234:	4b15      	ldr	r3, [pc, #84]	@ (800128c <HAL_RCC_OscConfig+0x338>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b14      	ldr	r3, [pc, #80]	@ (800128c <HAL_RCC_OscConfig+0x338>)
 800123a:	2180      	movs	r1, #128	@ 0x80
 800123c:	0049      	lsls	r1, r1, #1
 800123e:	430a      	orrs	r2, r1
 8001240:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001242:	f7ff fbdb 	bl	80009fc <HAL_GetTick>
 8001246:	0003      	movs	r3, r0
 8001248:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124c:	f7ff fbd6 	bl	80009fc <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	@ 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e185      	b.n	800156a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <HAL_RCC_OscConfig+0x338>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	2380      	movs	r3, #128	@ 0x80
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4013      	ands	r3, r2
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10e      	bne.n	8001290 <HAL_RCC_OscConfig+0x33c>
 8001272:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001274:	6a1a      	ldr	r2, [r3, #32]
 8001276:	4b02      	ldr	r3, [pc, #8]	@ (8001280 <HAL_RCC_OscConfig+0x32c>)
 8001278:	2101      	movs	r1, #1
 800127a:	430a      	orrs	r2, r1
 800127c:	621a      	str	r2, [r3, #32]
 800127e:	e035      	b.n	80012ec <HAL_RCC_OscConfig+0x398>
 8001280:	40021000 	.word	0x40021000
 8001284:	fffeffff 	.word	0xfffeffff
 8001288:	fffbffff 	.word	0xfffbffff
 800128c:	40007000 	.word	0x40007000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10c      	bne.n	80012b2 <HAL_RCC_OscConfig+0x35e>
 8001298:	4bb6      	ldr	r3, [pc, #728]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 800129a:	6a1a      	ldr	r2, [r3, #32]
 800129c:	4bb5      	ldr	r3, [pc, #724]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 800129e:	2101      	movs	r1, #1
 80012a0:	438a      	bics	r2, r1
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	4bb3      	ldr	r3, [pc, #716]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80012a6:	6a1a      	ldr	r2, [r3, #32]
 80012a8:	4bb2      	ldr	r3, [pc, #712]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80012aa:	2104      	movs	r1, #4
 80012ac:	438a      	bics	r2, r1
 80012ae:	621a      	str	r2, [r3, #32]
 80012b0:	e01c      	b.n	80012ec <HAL_RCC_OscConfig+0x398>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x380>
 80012ba:	4bae      	ldr	r3, [pc, #696]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80012bc:	6a1a      	ldr	r2, [r3, #32]
 80012be:	4bad      	ldr	r3, [pc, #692]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80012c0:	2104      	movs	r1, #4
 80012c2:	430a      	orrs	r2, r1
 80012c4:	621a      	str	r2, [r3, #32]
 80012c6:	4bab      	ldr	r3, [pc, #684]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80012c8:	6a1a      	ldr	r2, [r3, #32]
 80012ca:	4baa      	ldr	r3, [pc, #680]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80012cc:	2101      	movs	r1, #1
 80012ce:	430a      	orrs	r2, r1
 80012d0:	621a      	str	r2, [r3, #32]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0x398>
 80012d4:	4ba7      	ldr	r3, [pc, #668]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80012d6:	6a1a      	ldr	r2, [r3, #32]
 80012d8:	4ba6      	ldr	r3, [pc, #664]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80012da:	2101      	movs	r1, #1
 80012dc:	438a      	bics	r2, r1
 80012de:	621a      	str	r2, [r3, #32]
 80012e0:	4ba4      	ldr	r3, [pc, #656]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	4ba3      	ldr	r3, [pc, #652]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80012e6:	2104      	movs	r1, #4
 80012e8:	438a      	bics	r2, r1
 80012ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d014      	beq.n	800131e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f4:	f7ff fb82 	bl	80009fc <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fc:	e009      	b.n	8001312 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012fe:	f7ff fb7d 	bl	80009fc <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	4a9b      	ldr	r2, [pc, #620]	@ (8001578 <HAL_RCC_OscConfig+0x624>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e12b      	b.n	800156a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001312:	4b98      	ldr	r3, [pc, #608]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	2202      	movs	r2, #2
 8001318:	4013      	ands	r3, r2
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x3aa>
 800131c:	e013      	b.n	8001346 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131e:	f7ff fb6d 	bl	80009fc <HAL_GetTick>
 8001322:	0003      	movs	r3, r0
 8001324:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001326:	e009      	b.n	800133c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001328:	f7ff fb68 	bl	80009fc <HAL_GetTick>
 800132c:	0002      	movs	r2, r0
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	4a91      	ldr	r2, [pc, #580]	@ (8001578 <HAL_RCC_OscConfig+0x624>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e116      	b.n	800156a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133c:	4b8d      	ldr	r3, [pc, #564]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	2202      	movs	r2, #2
 8001342:	4013      	ands	r3, r2
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001346:	231f      	movs	r3, #31
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d105      	bne.n	800135c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001350:	4b88      	ldr	r3, [pc, #544]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001352:	69da      	ldr	r2, [r3, #28]
 8001354:	4b87      	ldr	r3, [pc, #540]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001356:	4989      	ldr	r1, [pc, #548]	@ (800157c <HAL_RCC_OscConfig+0x628>)
 8001358:	400a      	ands	r2, r1
 800135a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2210      	movs	r2, #16
 8001362:	4013      	ands	r3, r2
 8001364:	d063      	beq.n	800142e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d12a      	bne.n	80013c4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800136e:	4b81      	ldr	r3, [pc, #516]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001370:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001372:	4b80      	ldr	r3, [pc, #512]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001374:	2104      	movs	r1, #4
 8001376:	430a      	orrs	r2, r1
 8001378:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800137a:	4b7e      	ldr	r3, [pc, #504]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 800137c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800137e:	4b7d      	ldr	r3, [pc, #500]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001380:	2101      	movs	r1, #1
 8001382:	430a      	orrs	r2, r1
 8001384:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff fb39 	bl	80009fc <HAL_GetTick>
 800138a:	0003      	movs	r3, r0
 800138c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001390:	f7ff fb34 	bl	80009fc <HAL_GetTick>
 8001394:	0002      	movs	r2, r0
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e0e3      	b.n	800156a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013a2:	4b74      	ldr	r3, [pc, #464]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80013a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a6:	2202      	movs	r2, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	d0f1      	beq.n	8001390 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013ac:	4b71      	ldr	r3, [pc, #452]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80013ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013b0:	22f8      	movs	r2, #248	@ 0xf8
 80013b2:	4393      	bics	r3, r2
 80013b4:	0019      	movs	r1, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	00da      	lsls	r2, r3, #3
 80013bc:	4b6d      	ldr	r3, [pc, #436]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80013be:	430a      	orrs	r2, r1
 80013c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013c2:	e034      	b.n	800142e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	3305      	adds	r3, #5
 80013ca:	d111      	bne.n	80013f0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80013cc:	4b69      	ldr	r3, [pc, #420]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80013ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013d0:	4b68      	ldr	r3, [pc, #416]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80013d2:	2104      	movs	r1, #4
 80013d4:	438a      	bics	r2, r1
 80013d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013d8:	4b66      	ldr	r3, [pc, #408]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80013da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013dc:	22f8      	movs	r2, #248	@ 0xf8
 80013de:	4393      	bics	r3, r2
 80013e0:	0019      	movs	r1, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	00da      	lsls	r2, r3, #3
 80013e8:	4b62      	ldr	r3, [pc, #392]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80013ea:	430a      	orrs	r2, r1
 80013ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ee:	e01e      	b.n	800142e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013f0:	4b60      	ldr	r3, [pc, #384]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80013f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80013f6:	2104      	movs	r1, #4
 80013f8:	430a      	orrs	r2, r1
 80013fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013fc:	4b5d      	ldr	r3, [pc, #372]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80013fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001400:	4b5c      	ldr	r3, [pc, #368]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001402:	2101      	movs	r1, #1
 8001404:	438a      	bics	r2, r1
 8001406:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001408:	f7ff faf8 	bl	80009fc <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001412:	f7ff faf3 	bl	80009fc <HAL_GetTick>
 8001416:	0002      	movs	r2, r0
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e0a2      	b.n	800156a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001424:	4b53      	ldr	r3, [pc, #332]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001428:	2202      	movs	r2, #2
 800142a:	4013      	ands	r3, r2
 800142c:	d1f1      	bne.n	8001412 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d100      	bne.n	8001438 <HAL_RCC_OscConfig+0x4e4>
 8001436:	e097      	b.n	8001568 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001438:	4b4e      	ldr	r3, [pc, #312]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	220c      	movs	r2, #12
 800143e:	4013      	ands	r3, r2
 8001440:	2b08      	cmp	r3, #8
 8001442:	d100      	bne.n	8001446 <HAL_RCC_OscConfig+0x4f2>
 8001444:	e06b      	b.n	800151e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d14c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144e:	4b49      	ldr	r3, [pc, #292]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b48      	ldr	r3, [pc, #288]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001454:	494a      	ldr	r1, [pc, #296]	@ (8001580 <HAL_RCC_OscConfig+0x62c>)
 8001456:	400a      	ands	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff facf 	bl	80009fc <HAL_GetTick>
 800145e:	0003      	movs	r3, r0
 8001460:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff faca 	bl	80009fc <HAL_GetTick>
 8001468:	0002      	movs	r2, r0
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e079      	b.n	800156a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001476:	4b3f      	ldr	r3, [pc, #252]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	2380      	movs	r3, #128	@ 0x80
 800147c:	049b      	lsls	r3, r3, #18
 800147e:	4013      	ands	r3, r2
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001482:	4b3c      	ldr	r3, [pc, #240]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001486:	220f      	movs	r2, #15
 8001488:	4393      	bics	r3, r2
 800148a:	0019      	movs	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001490:	4b38      	ldr	r3, [pc, #224]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001492:	430a      	orrs	r2, r1
 8001494:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001496:	4b37      	ldr	r3, [pc, #220]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4a3a      	ldr	r2, [pc, #232]	@ (8001584 <HAL_RCC_OscConfig+0x630>)
 800149c:	4013      	ands	r3, r2
 800149e:	0019      	movs	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a8:	431a      	orrs	r2, r3
 80014aa:	4b32      	ldr	r3, [pc, #200]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b0:	4b30      	ldr	r3, [pc, #192]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80014b6:	2180      	movs	r1, #128	@ 0x80
 80014b8:	0449      	lsls	r1, r1, #17
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff fa9d 	bl	80009fc <HAL_GetTick>
 80014c2:	0003      	movs	r3, r0
 80014c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c8:	f7ff fa98 	bl	80009fc <HAL_GetTick>
 80014cc:	0002      	movs	r2, r0
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e047      	b.n	800156a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	2380      	movs	r3, #128	@ 0x80
 80014e0:	049b      	lsls	r3, r3, #18
 80014e2:	4013      	ands	r3, r2
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x574>
 80014e6:	e03f      	b.n	8001568 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e8:	4b22      	ldr	r3, [pc, #136]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 80014ee:	4924      	ldr	r1, [pc, #144]	@ (8001580 <HAL_RCC_OscConfig+0x62c>)
 80014f0:	400a      	ands	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fa82 	bl	80009fc <HAL_GetTick>
 80014f8:	0003      	movs	r3, r0
 80014fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff fa7d 	bl	80009fc <HAL_GetTick>
 8001502:	0002      	movs	r2, r0
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e02c      	b.n	800156a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	2380      	movs	r3, #128	@ 0x80
 8001516:	049b      	lsls	r3, r3, #18
 8001518:	4013      	ands	r3, r2
 800151a:	d1f0      	bne.n	80014fe <HAL_RCC_OscConfig+0x5aa>
 800151c:	e024      	b.n	8001568 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e01f      	b.n	800156a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800152a:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001530:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <HAL_RCC_OscConfig+0x620>)
 8001532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001534:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	2380      	movs	r3, #128	@ 0x80
 800153a:	025b      	lsls	r3, r3, #9
 800153c:	401a      	ands	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001542:	429a      	cmp	r2, r3
 8001544:	d10e      	bne.n	8001564 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	220f      	movs	r2, #15
 800154a:	401a      	ands	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001550:	429a      	cmp	r2, r3
 8001552:	d107      	bne.n	8001564 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	23f0      	movs	r3, #240	@ 0xf0
 8001558:	039b      	lsls	r3, r3, #14
 800155a:	401a      	ands	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b008      	add	sp, #32
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	40021000 	.word	0x40021000
 8001578:	00001388 	.word	0x00001388
 800157c:	efffffff 	.word	0xefffffff
 8001580:	feffffff 	.word	0xfeffffff
 8001584:	ffc2ffff 	.word	0xffc2ffff

08001588 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0b3      	b.n	8001704 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800159c:	4b5b      	ldr	r3, [pc, #364]	@ (800170c <HAL_RCC_ClockConfig+0x184>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2201      	movs	r2, #1
 80015a2:	4013      	ands	r3, r2
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d911      	bls.n	80015ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b58      	ldr	r3, [pc, #352]	@ (800170c <HAL_RCC_ClockConfig+0x184>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2201      	movs	r2, #1
 80015b0:	4393      	bics	r3, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	4b55      	ldr	r3, [pc, #340]	@ (800170c <HAL_RCC_ClockConfig+0x184>)
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015bc:	4b53      	ldr	r3, [pc, #332]	@ (800170c <HAL_RCC_ClockConfig+0x184>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2201      	movs	r2, #1
 80015c2:	4013      	ands	r3, r2
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d001      	beq.n	80015ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e09a      	b.n	8001704 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2202      	movs	r2, #2
 80015d4:	4013      	ands	r3, r2
 80015d6:	d015      	beq.n	8001604 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2204      	movs	r2, #4
 80015de:	4013      	ands	r3, r2
 80015e0:	d006      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001710 <HAL_RCC_ClockConfig+0x188>)
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001710 <HAL_RCC_ClockConfig+0x188>)
 80015e8:	21e0      	movs	r1, #224	@ 0xe0
 80015ea:	00c9      	lsls	r1, r1, #3
 80015ec:	430a      	orrs	r2, r1
 80015ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f0:	4b47      	ldr	r3, [pc, #284]	@ (8001710 <HAL_RCC_ClockConfig+0x188>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	22f0      	movs	r2, #240	@ 0xf0
 80015f6:	4393      	bics	r3, r2
 80015f8:	0019      	movs	r1, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	4b44      	ldr	r3, [pc, #272]	@ (8001710 <HAL_RCC_ClockConfig+0x188>)
 8001600:	430a      	orrs	r2, r1
 8001602:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2201      	movs	r2, #1
 800160a:	4013      	ands	r3, r2
 800160c:	d040      	beq.n	8001690 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b3e      	ldr	r3, [pc, #248]	@ (8001710 <HAL_RCC_ClockConfig+0x188>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	2380      	movs	r3, #128	@ 0x80
 800161c:	029b      	lsls	r3, r3, #10
 800161e:	4013      	ands	r3, r2
 8001620:	d114      	bne.n	800164c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e06e      	b.n	8001704 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	4b38      	ldr	r3, [pc, #224]	@ (8001710 <HAL_RCC_ClockConfig+0x188>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	2380      	movs	r3, #128	@ 0x80
 8001634:	049b      	lsls	r3, r3, #18
 8001636:	4013      	ands	r3, r2
 8001638:	d108      	bne.n	800164c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e062      	b.n	8001704 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163e:	4b34      	ldr	r3, [pc, #208]	@ (8001710 <HAL_RCC_ClockConfig+0x188>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2202      	movs	r2, #2
 8001644:	4013      	ands	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e05b      	b.n	8001704 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800164c:	4b30      	ldr	r3, [pc, #192]	@ (8001710 <HAL_RCC_ClockConfig+0x188>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2203      	movs	r2, #3
 8001652:	4393      	bics	r3, r2
 8001654:	0019      	movs	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <HAL_RCC_ClockConfig+0x188>)
 800165c:	430a      	orrs	r2, r1
 800165e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001660:	f7ff f9cc 	bl	80009fc <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001668:	e009      	b.n	800167e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166a:	f7ff f9c7 	bl	80009fc <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	4a27      	ldr	r2, [pc, #156]	@ (8001714 <HAL_RCC_ClockConfig+0x18c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e042      	b.n	8001704 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <HAL_RCC_ClockConfig+0x188>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	220c      	movs	r2, #12
 8001684:	401a      	ands	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	429a      	cmp	r2, r3
 800168e:	d1ec      	bne.n	800166a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001690:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <HAL_RCC_ClockConfig+0x184>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2201      	movs	r2, #1
 8001696:	4013      	ands	r3, r2
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d211      	bcs.n	80016c2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_RCC_ClockConfig+0x184>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4393      	bics	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_RCC_ClockConfig+0x184>)
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <HAL_RCC_ClockConfig+0x184>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2201      	movs	r2, #1
 80016b6:	4013      	ands	r3, r2
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e020      	b.n	8001704 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2204      	movs	r2, #4
 80016c8:	4013      	ands	r3, r2
 80016ca:	d009      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016cc:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <HAL_RCC_ClockConfig+0x188>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a11      	ldr	r2, [pc, #68]	@ (8001718 <HAL_RCC_ClockConfig+0x190>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <HAL_RCC_ClockConfig+0x188>)
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016e0:	f000 f820 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016e4:	0001      	movs	r1, r0
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_RCC_ClockConfig+0x188>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	220f      	movs	r2, #15
 80016ee:	4013      	ands	r3, r2
 80016f0:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <HAL_RCC_ClockConfig+0x194>)
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	000a      	movs	r2, r1
 80016f6:	40da      	lsrs	r2, r3
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_RCC_ClockConfig+0x198>)
 80016fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f7ff f937 	bl	8000970 <HAL_InitTick>
  
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40022000 	.word	0x40022000
 8001710:	40021000 	.word	0x40021000
 8001714:	00001388 	.word	0x00001388
 8001718:	fffff8ff 	.word	0xfffff8ff
 800171c:	08003718 	.word	0x08003718
 8001720:	20000000 	.word	0x20000000

08001724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	220c      	movs	r2, #12
 8001748:	4013      	ands	r3, r2
 800174a:	2b04      	cmp	r3, #4
 800174c:	d002      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0x30>
 800174e:	2b08      	cmp	r3, #8
 8001750:	d003      	beq.n	800175a <HAL_RCC_GetSysClockFreq+0x36>
 8001752:	e02c      	b.n	80017ae <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001754:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001756:	613b      	str	r3, [r7, #16]
      break;
 8001758:	e02c      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	0c9b      	lsrs	r3, r3, #18
 800175e:	220f      	movs	r2, #15
 8001760:	4013      	ands	r3, r2
 8001762:	4a19      	ldr	r2, [pc, #100]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001764:	5cd3      	ldrb	r3, [r2, r3]
 8001766:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001768:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800176a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176c:	220f      	movs	r2, #15
 800176e:	4013      	ands	r3, r2
 8001770:	4a16      	ldr	r2, [pc, #88]	@ (80017cc <HAL_RCC_GetSysClockFreq+0xa8>)
 8001772:	5cd3      	ldrb	r3, [r2, r3]
 8001774:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	025b      	lsls	r3, r3, #9
 800177c:	4013      	ands	r3, r2
 800177e:	d009      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	4810      	ldr	r0, [pc, #64]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001784:	f7fe fcca 	bl	800011c <__udivsi3>
 8001788:	0003      	movs	r3, r0
 800178a:	001a      	movs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4353      	muls	r3, r2
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e009      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	000a      	movs	r2, r1
 8001798:	0152      	lsls	r2, r2, #5
 800179a:	1a52      	subs	r2, r2, r1
 800179c:	0193      	lsls	r3, r2, #6
 800179e:	1a9b      	subs	r3, r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	185b      	adds	r3, r3, r1
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	613b      	str	r3, [r7, #16]
      break;
 80017ac:	e002      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017ae:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017b0:	613b      	str	r3, [r7, #16]
      break;
 80017b2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017b4:	693b      	ldr	r3, [r7, #16]
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b006      	add	sp, #24
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	40021000 	.word	0x40021000
 80017c4:	007a1200 	.word	0x007a1200
 80017c8:	08003730 	.word	0x08003730
 80017cc:	08003740 	.word	0x08003740

080017d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d4:	4b02      	ldr	r3, [pc, #8]	@ (80017e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	20000000 	.word	0x20000000

080017e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017e8:	f7ff fff2 	bl	80017d0 <HAL_RCC_GetHCLKFreq>
 80017ec:	0001      	movs	r1, r0
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	2207      	movs	r2, #7
 80017f6:	4013      	ands	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	@ (800180c <HAL_RCC_GetPCLK1Freq+0x28>)
 80017fa:	5cd3      	ldrb	r3, [r2, r3]
 80017fc:	40d9      	lsrs	r1, r3
 80017fe:	000b      	movs	r3, r1
}    
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	40021000 	.word	0x40021000
 800180c:	08003728 	.word	0x08003728

08001810 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	025b      	lsls	r3, r3, #9
 8001828:	4013      	ands	r3, r2
 800182a:	d100      	bne.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800182c:	e08e      	b.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800182e:	2017      	movs	r0, #23
 8001830:	183b      	adds	r3, r7, r0
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001836:	4b57      	ldr	r3, [pc, #348]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001838:	69da      	ldr	r2, [r3, #28]
 800183a:	2380      	movs	r3, #128	@ 0x80
 800183c:	055b      	lsls	r3, r3, #21
 800183e:	4013      	ands	r3, r2
 8001840:	d110      	bne.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	4b54      	ldr	r3, [pc, #336]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001844:	69da      	ldr	r2, [r3, #28]
 8001846:	4b53      	ldr	r3, [pc, #332]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001848:	2180      	movs	r1, #128	@ 0x80
 800184a:	0549      	lsls	r1, r1, #21
 800184c:	430a      	orrs	r2, r1
 800184e:	61da      	str	r2, [r3, #28]
 8001850:	4b50      	ldr	r3, [pc, #320]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	2380      	movs	r3, #128	@ 0x80
 8001856:	055b      	lsls	r3, r3, #21
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185e:	183b      	adds	r3, r7, r0
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	4b4c      	ldr	r3, [pc, #304]	@ (8001998 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4013      	ands	r3, r2
 800186e:	d11a      	bne.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001870:	4b49      	ldr	r3, [pc, #292]	@ (8001998 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b48      	ldr	r3, [pc, #288]	@ (8001998 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001876:	2180      	movs	r1, #128	@ 0x80
 8001878:	0049      	lsls	r1, r1, #1
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187e:	f7ff f8bd 	bl	80009fc <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	e008      	b.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001888:	f7ff f8b8 	bl	80009fc <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	@ 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e077      	b.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189a:	4b3f      	ldr	r3, [pc, #252]	@ (8001998 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	@ 0x80
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018a8:	6a1a      	ldr	r2, [r3, #32]
 80018aa:	23c0      	movs	r3, #192	@ 0xc0
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4013      	ands	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d034      	beq.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	23c0      	movs	r3, #192	@ 0xc0
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d02c      	beq.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018c8:	4b32      	ldr	r3, [pc, #200]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4a33      	ldr	r2, [pc, #204]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018d2:	4b30      	ldr	r3, [pc, #192]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018d4:	6a1a      	ldr	r2, [r3, #32]
 80018d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018d8:	2180      	movs	r1, #128	@ 0x80
 80018da:	0249      	lsls	r1, r1, #9
 80018dc:	430a      	orrs	r2, r1
 80018de:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018e2:	6a1a      	ldr	r2, [r3, #32]
 80018e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018e6:	492e      	ldr	r1, [pc, #184]	@ (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80018e8:	400a      	ands	r2, r1
 80018ea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80018ec:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4013      	ands	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fa:	f7ff f87f 	bl	80009fc <HAL_GetTick>
 80018fe:	0003      	movs	r3, r0
 8001900:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001902:	e009      	b.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7ff f87a 	bl	80009fc <HAL_GetTick>
 8001908:	0002      	movs	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	4a25      	ldr	r2, [pc, #148]	@ (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e038      	b.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001918:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	2202      	movs	r2, #2
 800191e:	4013      	ands	r3, r2
 8001920:	d0f0      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001922:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a1d      	ldr	r2, [pc, #116]	@ (800199c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001928:	4013      	ands	r3, r2
 800192a:	0019      	movs	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001932:	430a      	orrs	r2, r1
 8001934:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001936:	2317      	movs	r3, #23
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001946:	4918      	ldr	r1, [pc, #96]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001948:	400a      	ands	r2, r1
 800194a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2201      	movs	r2, #1
 8001952:	4013      	ands	r3, r2
 8001954:	d009      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	2203      	movs	r2, #3
 800195c:	4393      	bics	r3, r2
 800195e:	0019      	movs	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001966:	430a      	orrs	r2, r1
 8001968:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2220      	movs	r2, #32
 8001970:	4013      	ands	r3, r2
 8001972:	d009      	beq.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001974:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001978:	2210      	movs	r2, #16
 800197a:	4393      	bics	r3, r2
 800197c:	0019      	movs	r1, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001984:	430a      	orrs	r2, r1
 8001986:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	b006      	add	sp, #24
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	40021000 	.word	0x40021000
 8001998:	40007000 	.word	0x40007000
 800199c:	fffffcff 	.word	0xfffffcff
 80019a0:	fffeffff 	.word	0xfffeffff
 80019a4:	00001388 	.word	0x00001388
 80019a8:	efffffff 	.word	0xefffffff

080019ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e042      	b.n	8001a44 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	223d      	movs	r2, #61	@ 0x3d
 80019c2:	5c9b      	ldrb	r3, [r3, r2]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d107      	bne.n	80019da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	223c      	movs	r2, #60	@ 0x3c
 80019ce:	2100      	movs	r1, #0
 80019d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	0018      	movs	r0, r3
 80019d6:	f7fe fe7b 	bl	80006d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	223d      	movs	r2, #61	@ 0x3d
 80019de:	2102      	movs	r1, #2
 80019e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3304      	adds	r3, #4
 80019ea:	0019      	movs	r1, r3
 80019ec:	0010      	movs	r0, r2
 80019ee:	f000 f945 	bl	8001c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2246      	movs	r2, #70	@ 0x46
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	223e      	movs	r2, #62	@ 0x3e
 80019fe:	2101      	movs	r1, #1
 8001a00:	5499      	strb	r1, [r3, r2]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	223f      	movs	r2, #63	@ 0x3f
 8001a06:	2101      	movs	r1, #1
 8001a08:	5499      	strb	r1, [r3, r2]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2240      	movs	r2, #64	@ 0x40
 8001a0e:	2101      	movs	r1, #1
 8001a10:	5499      	strb	r1, [r3, r2]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2241      	movs	r2, #65	@ 0x41
 8001a16:	2101      	movs	r1, #1
 8001a18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2242      	movs	r2, #66	@ 0x42
 8001a1e:	2101      	movs	r1, #1
 8001a20:	5499      	strb	r1, [r3, r2]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2243      	movs	r2, #67	@ 0x43
 8001a26:	2101      	movs	r1, #1
 8001a28:	5499      	strb	r1, [r3, r2]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2244      	movs	r2, #68	@ 0x44
 8001a2e:	2101      	movs	r1, #1
 8001a30:	5499      	strb	r1, [r3, r2]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2245      	movs	r2, #69	@ 0x45
 8001a36:	2101      	movs	r1, #1
 8001a38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	223d      	movs	r2, #61	@ 0x3d
 8001a3e:	2101      	movs	r1, #1
 8001a40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b002      	add	sp, #8
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	223d      	movs	r2, #61	@ 0x3d
 8001a58:	5c9b      	ldrb	r3, [r3, r2]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d001      	beq.n	8001a64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e02d      	b.n	8001ac0 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	223d      	movs	r2, #61	@ 0x3d
 8001a68:	2102      	movs	r1, #2
 8001a6a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a15      	ldr	r2, [pc, #84]	@ (8001ac8 <HAL_TIM_Base_Start+0x7c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d009      	beq.n	8001a8a <HAL_TIM_Base_Start+0x3e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <HAL_TIM_Base_Start+0x80>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d004      	beq.n	8001a8a <HAL_TIM_Base_Start+0x3e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <HAL_TIM_Base_Start+0x84>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d111      	bne.n	8001aae <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2207      	movs	r2, #7
 8001a92:	4013      	ands	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b06      	cmp	r3, #6
 8001a9a:	d010      	beq.n	8001abe <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aac:	e007      	b.n	8001abe <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b004      	add	sp, #16
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	40014000 	.word	0x40014000

08001ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ade:	230f      	movs	r3, #15
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	223c      	movs	r2, #60	@ 0x3c
 8001aea:	5c9b      	ldrb	r3, [r3, r2]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_TIM_ConfigClockSource+0x20>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e0bc      	b.n	8001c6e <HAL_TIM_ConfigClockSource+0x19a>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	223c      	movs	r2, #60	@ 0x3c
 8001af8:	2101      	movs	r1, #1
 8001afa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	223d      	movs	r2, #61	@ 0x3d
 8001b00:	2102      	movs	r1, #2
 8001b02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2277      	movs	r2, #119	@ 0x77
 8001b10:	4393      	bics	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4a58      	ldr	r2, [pc, #352]	@ (8001c78 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2280      	movs	r2, #128	@ 0x80
 8001b2a:	0192      	lsls	r2, r2, #6
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d040      	beq.n	8001bb2 <HAL_TIM_ConfigClockSource+0xde>
 8001b30:	2280      	movs	r2, #128	@ 0x80
 8001b32:	0192      	lsls	r2, r2, #6
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d900      	bls.n	8001b3a <HAL_TIM_ConfigClockSource+0x66>
 8001b38:	e088      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x178>
 8001b3a:	2280      	movs	r2, #128	@ 0x80
 8001b3c:	0152      	lsls	r2, r2, #5
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d100      	bne.n	8001b44 <HAL_TIM_ConfigClockSource+0x70>
 8001b42:	e088      	b.n	8001c56 <HAL_TIM_ConfigClockSource+0x182>
 8001b44:	2280      	movs	r2, #128	@ 0x80
 8001b46:	0152      	lsls	r2, r2, #5
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d900      	bls.n	8001b4e <HAL_TIM_ConfigClockSource+0x7a>
 8001b4c:	e07e      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x178>
 8001b4e:	2b70      	cmp	r3, #112	@ 0x70
 8001b50:	d018      	beq.n	8001b84 <HAL_TIM_ConfigClockSource+0xb0>
 8001b52:	d900      	bls.n	8001b56 <HAL_TIM_ConfigClockSource+0x82>
 8001b54:	e07a      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x178>
 8001b56:	2b60      	cmp	r3, #96	@ 0x60
 8001b58:	d04f      	beq.n	8001bfa <HAL_TIM_ConfigClockSource+0x126>
 8001b5a:	d900      	bls.n	8001b5e <HAL_TIM_ConfigClockSource+0x8a>
 8001b5c:	e076      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x178>
 8001b5e:	2b50      	cmp	r3, #80	@ 0x50
 8001b60:	d03b      	beq.n	8001bda <HAL_TIM_ConfigClockSource+0x106>
 8001b62:	d900      	bls.n	8001b66 <HAL_TIM_ConfigClockSource+0x92>
 8001b64:	e072      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x178>
 8001b66:	2b40      	cmp	r3, #64	@ 0x40
 8001b68:	d057      	beq.n	8001c1a <HAL_TIM_ConfigClockSource+0x146>
 8001b6a:	d900      	bls.n	8001b6e <HAL_TIM_ConfigClockSource+0x9a>
 8001b6c:	e06e      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x178>
 8001b6e:	2b30      	cmp	r3, #48	@ 0x30
 8001b70:	d063      	beq.n	8001c3a <HAL_TIM_ConfigClockSource+0x166>
 8001b72:	d86b      	bhi.n	8001c4c <HAL_TIM_ConfigClockSource+0x178>
 8001b74:	2b20      	cmp	r3, #32
 8001b76:	d060      	beq.n	8001c3a <HAL_TIM_ConfigClockSource+0x166>
 8001b78:	d868      	bhi.n	8001c4c <HAL_TIM_ConfigClockSource+0x178>
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d05d      	beq.n	8001c3a <HAL_TIM_ConfigClockSource+0x166>
 8001b7e:	2b10      	cmp	r3, #16
 8001b80:	d05b      	beq.n	8001c3a <HAL_TIM_ConfigClockSource+0x166>
 8001b82:	e063      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b94:	f000 f970 	bl	8001e78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2277      	movs	r2, #119	@ 0x77
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	609a      	str	r2, [r3, #8]
      break;
 8001bb0:	e052      	b.n	8001c58 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001bc2:	f000 f959 	bl	8001e78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2180      	movs	r1, #128	@ 0x80
 8001bd2:	01c9      	lsls	r1, r1, #7
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]
      break;
 8001bd8:	e03e      	b.n	8001c58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001be6:	001a      	movs	r2, r3
 8001be8:	f000 f8cc 	bl	8001d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2150      	movs	r1, #80	@ 0x50
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 f926 	bl	8001e44 <TIM_ITRx_SetConfig>
      break;
 8001bf8:	e02e      	b.n	8001c58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c06:	001a      	movs	r2, r3
 8001c08:	f000 f8ea 	bl	8001de0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2160      	movs	r1, #96	@ 0x60
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 f916 	bl	8001e44 <TIM_ITRx_SetConfig>
      break;
 8001c18:	e01e      	b.n	8001c58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c26:	001a      	movs	r2, r3
 8001c28:	f000 f8ac 	bl	8001d84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2140      	movs	r1, #64	@ 0x40
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 f906 	bl	8001e44 <TIM_ITRx_SetConfig>
      break;
 8001c38:	e00e      	b.n	8001c58 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0019      	movs	r1, r3
 8001c44:	0010      	movs	r0, r2
 8001c46:	f000 f8fd 	bl	8001e44 <TIM_ITRx_SetConfig>
      break;
 8001c4a:	e005      	b.n	8001c58 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
      break;
 8001c54:	e000      	b.n	8001c58 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001c56:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	223d      	movs	r2, #61	@ 0x3d
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	223c      	movs	r2, #60	@ 0x3c
 8001c64:	2100      	movs	r1, #0
 8001c66:	5499      	strb	r1, [r3, r2]

  return status;
 8001c68:	230f      	movs	r3, #15
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	781b      	ldrb	r3, [r3, #0]
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	ffff00ff 	.word	0xffff00ff

08001c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a36      	ldr	r2, [pc, #216]	@ (8001d68 <TIM_Base_SetConfig+0xec>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d003      	beq.n	8001c9c <TIM_Base_SetConfig+0x20>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a35      	ldr	r2, [pc, #212]	@ (8001d6c <TIM_Base_SetConfig+0xf0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d108      	bne.n	8001cae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2270      	movs	r2, #112	@ 0x70
 8001ca0:	4393      	bics	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8001d68 <TIM_Base_SetConfig+0xec>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <TIM_Base_SetConfig+0x62>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8001d6c <TIM_Base_SetConfig+0xf0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00f      	beq.n	8001cde <TIM_Base_SetConfig+0x62>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d70 <TIM_Base_SetConfig+0xf4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00b      	beq.n	8001cde <TIM_Base_SetConfig+0x62>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001d74 <TIM_Base_SetConfig+0xf8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <TIM_Base_SetConfig+0x62>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a29      	ldr	r2, [pc, #164]	@ (8001d78 <TIM_Base_SetConfig+0xfc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d003      	beq.n	8001cde <TIM_Base_SetConfig+0x62>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a28      	ldr	r2, [pc, #160]	@ (8001d7c <TIM_Base_SetConfig+0x100>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d108      	bne.n	8001cf0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4a27      	ldr	r2, [pc, #156]	@ (8001d80 <TIM_Base_SetConfig+0x104>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2280      	movs	r2, #128	@ 0x80
 8001cf4:	4393      	bics	r3, r2
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a13      	ldr	r2, [pc, #76]	@ (8001d68 <TIM_Base_SetConfig+0xec>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00b      	beq.n	8001d36 <TIM_Base_SetConfig+0xba>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a14      	ldr	r2, [pc, #80]	@ (8001d74 <TIM_Base_SetConfig+0xf8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d007      	beq.n	8001d36 <TIM_Base_SetConfig+0xba>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a13      	ldr	r2, [pc, #76]	@ (8001d78 <TIM_Base_SetConfig+0xfc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d003      	beq.n	8001d36 <TIM_Base_SetConfig+0xba>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <TIM_Base_SetConfig+0x100>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d103      	bne.n	8001d3e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d106      	bne.n	8001d5e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4393      	bics	r3, r2
 8001d58:	001a      	movs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	611a      	str	r2, [r3, #16]
  }
}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	40012c00 	.word	0x40012c00
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40002000 	.word	0x40002000
 8001d74:	40014000 	.word	0x40014000
 8001d78:	40014400 	.word	0x40014400
 8001d7c:	40014800 	.word	0x40014800
 8001d80:	fffffcff 	.word	0xfffffcff

08001d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4393      	bics	r3, r2
 8001d9e:	001a      	movs	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	22f0      	movs	r2, #240	@ 0xf0
 8001dae:	4393      	bics	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	220a      	movs	r2, #10
 8001dc0:	4393      	bics	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	621a      	str	r2, [r3, #32]
}
 8001dd8:	46c0      	nop			@ (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b006      	add	sp, #24
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	2210      	movs	r2, #16
 8001df8:	4393      	bics	r3, r2
 8001dfa:	001a      	movs	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <TIM_TI2_ConfigInputStage+0x60>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	031b      	lsls	r3, r3, #12
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	22a0      	movs	r2, #160	@ 0xa0
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	621a      	str	r2, [r3, #32]
}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b006      	add	sp, #24
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	ffff0fff 	.word	0xffff0fff

08001e44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2270      	movs	r2, #112	@ 0x70
 8001e58:	4393      	bics	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	2207      	movs	r2, #7
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	609a      	str	r2, [r3, #8]
}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b004      	add	sp, #16
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	4a09      	ldr	r2, [pc, #36]	@ (8001eb4 <TIM_ETR_SetConfig+0x3c>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	021a      	lsls	r2, r3, #8
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	609a      	str	r2, [r3, #8]
}
 8001eac:	46c0      	nop			@ (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b006      	add	sp, #24
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	ffff00ff 	.word	0xffff00ff

08001eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	223c      	movs	r2, #60	@ 0x3c
 8001ec6:	5c9b      	ldrb	r3, [r3, r2]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e041      	b.n	8001f54 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	223c      	movs	r2, #60	@ 0x3c
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	223d      	movs	r2, #61	@ 0x3d
 8001edc:	2102      	movs	r1, #2
 8001ede:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2270      	movs	r2, #112	@ 0x70
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a13      	ldr	r2, [pc, #76]	@ (8001f5c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d009      	beq.n	8001f28 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a11      	ldr	r2, [pc, #68]	@ (8001f60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a10      	ldr	r2, [pc, #64]	@ (8001f64 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d10c      	bne.n	8001f42 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2280      	movs	r2, #128	@ 0x80
 8001f2c:	4393      	bics	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	223d      	movs	r2, #61	@ 0x3d
 8001f46:	2101      	movs	r1, #1
 8001f48:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223c      	movs	r2, #60	@ 0x3c
 8001f4e:	2100      	movs	r1, #0
 8001f50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b004      	add	sp, #16
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40012c00 	.word	0x40012c00
 8001f60:	40000400 	.word	0x40000400
 8001f64:	40014000 	.word	0x40014000

08001f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e044      	b.n	8002004 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d107      	bne.n	8001f92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2278      	movs	r2, #120	@ 0x78
 8001f86:	2100      	movs	r1, #0
 8001f88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7fe fbbd 	bl	800070c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2224      	movs	r2, #36	@ 0x24
 8001f96:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	438a      	bics	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 fa0c 	bl	80023d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 f8c8 	bl	8002150 <UART_SetConfig>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e01c      	b.n	8002004 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	490d      	ldr	r1, [pc, #52]	@ (800200c <HAL_UART_Init+0xa4>)
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2108      	movs	r1, #8
 8001fe6:	438a      	bics	r2, r1
 8001fe8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f000 fa9b 	bl	8002538 <UART_CheckIdleState>
 8002002:	0003      	movs	r3, r0
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}
 800200c:	fffff7ff 	.word	0xfffff7ff

08002010 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	@ 0x28
 8002014:	af02      	add	r7, sp, #8
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	1dbb      	adds	r3, r7, #6
 800201e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002024:	2b20      	cmp	r3, #32
 8002026:	d000      	beq.n	800202a <HAL_UART_Transmit+0x1a>
 8002028:	e08c      	b.n	8002144 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_UART_Transmit+0x28>
 8002030:	1dbb      	adds	r3, r7, #6
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e084      	b.n	8002146 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	015b      	lsls	r3, r3, #5
 8002044:	429a      	cmp	r2, r3
 8002046:	d109      	bne.n	800205c <HAL_UART_Transmit+0x4c>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2201      	movs	r2, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d001      	beq.n	800205c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e074      	b.n	8002146 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2284      	movs	r2, #132	@ 0x84
 8002060:	2100      	movs	r1, #0
 8002062:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2221      	movs	r2, #33	@ 0x21
 8002068:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800206a:	f7fe fcc7 	bl	80009fc <HAL_GetTick>
 800206e:	0003      	movs	r3, r0
 8002070:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1dba      	adds	r2, r7, #6
 8002076:	2150      	movs	r1, #80	@ 0x50
 8002078:	8812      	ldrh	r2, [r2, #0]
 800207a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1dba      	adds	r2, r7, #6
 8002080:	2152      	movs	r1, #82	@ 0x52
 8002082:	8812      	ldrh	r2, [r2, #0]
 8002084:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	015b      	lsls	r3, r3, #5
 800208e:	429a      	cmp	r2, r3
 8002090:	d108      	bne.n	80020a4 <HAL_UART_Transmit+0x94>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d104      	bne.n	80020a4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	e003      	b.n	80020ac <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020ac:	e02f      	b.n	800210e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	0013      	movs	r3, r2
 80020b8:	2200      	movs	r2, #0
 80020ba:	2180      	movs	r1, #128	@ 0x80
 80020bc:	f000 fae4 	bl	8002688 <UART_WaitOnFlagUntilTimeout>
 80020c0:	1e03      	subs	r3, r0, #0
 80020c2:	d004      	beq.n	80020ce <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e03b      	b.n	8002146 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10b      	bne.n	80020ec <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	881a      	ldrh	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	05d2      	lsls	r2, r2, #23
 80020de:	0dd2      	lsrs	r2, r2, #23
 80020e0:	b292      	uxth	r2, r2
 80020e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	3302      	adds	r3, #2
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	e007      	b.n	80020fc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	781a      	ldrb	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3301      	adds	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2252      	movs	r2, #82	@ 0x52
 8002100:	5a9b      	ldrh	r3, [r3, r2]
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b299      	uxth	r1, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2252      	movs	r2, #82	@ 0x52
 800210c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2252      	movs	r2, #82	@ 0x52
 8002112:	5a9b      	ldrh	r3, [r3, r2]
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1c9      	bne.n	80020ae <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	0013      	movs	r3, r2
 8002124:	2200      	movs	r2, #0
 8002126:	2140      	movs	r1, #64	@ 0x40
 8002128:	f000 faae 	bl	8002688 <UART_WaitOnFlagUntilTimeout>
 800212c:	1e03      	subs	r3, r0, #0
 800212e:	d004      	beq.n	800213a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e005      	b.n	8002146 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002144:	2302      	movs	r3, #2
  }
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b008      	add	sp, #32
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002158:	231e      	movs	r3, #30
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a8d      	ldr	r2, [pc, #564]	@ (80023b4 <UART_SetConfig+0x264>)
 8002180:	4013      	ands	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4a88      	ldr	r2, [pc, #544]	@ (80023b8 <UART_SetConfig+0x268>)
 8002196:	4013      	ands	r3, r2
 8002198:	0019      	movs	r1, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a7f      	ldr	r2, [pc, #508]	@ (80023bc <UART_SetConfig+0x26c>)
 80021be:	4013      	ands	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a7b      	ldr	r2, [pc, #492]	@ (80023c0 <UART_SetConfig+0x270>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d127      	bne.n	8002226 <UART_SetConfig+0xd6>
 80021d6:	4b7b      	ldr	r3, [pc, #492]	@ (80023c4 <UART_SetConfig+0x274>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	2203      	movs	r2, #3
 80021dc:	4013      	ands	r3, r2
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d00d      	beq.n	80021fe <UART_SetConfig+0xae>
 80021e2:	d81b      	bhi.n	800221c <UART_SetConfig+0xcc>
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d014      	beq.n	8002212 <UART_SetConfig+0xc2>
 80021e8:	d818      	bhi.n	800221c <UART_SetConfig+0xcc>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <UART_SetConfig+0xa4>
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d00a      	beq.n	8002208 <UART_SetConfig+0xb8>
 80021f2:	e013      	b.n	800221c <UART_SetConfig+0xcc>
 80021f4:	231f      	movs	r3, #31
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e021      	b.n	8002242 <UART_SetConfig+0xf2>
 80021fe:	231f      	movs	r3, #31
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	2202      	movs	r2, #2
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	e01c      	b.n	8002242 <UART_SetConfig+0xf2>
 8002208:	231f      	movs	r3, #31
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	2204      	movs	r2, #4
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	e017      	b.n	8002242 <UART_SetConfig+0xf2>
 8002212:	231f      	movs	r3, #31
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	2208      	movs	r2, #8
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e012      	b.n	8002242 <UART_SetConfig+0xf2>
 800221c:	231f      	movs	r3, #31
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	2210      	movs	r2, #16
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	e00d      	b.n	8002242 <UART_SetConfig+0xf2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a67      	ldr	r2, [pc, #412]	@ (80023c8 <UART_SetConfig+0x278>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d104      	bne.n	800223a <UART_SetConfig+0xea>
 8002230:	231f      	movs	r3, #31
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	e003      	b.n	8002242 <UART_SetConfig+0xf2>
 800223a:	231f      	movs	r3, #31
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	2210      	movs	r2, #16
 8002240:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	429a      	cmp	r2, r3
 800224c:	d15c      	bne.n	8002308 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800224e:	231f      	movs	r3, #31
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b08      	cmp	r3, #8
 8002256:	d015      	beq.n	8002284 <UART_SetConfig+0x134>
 8002258:	dc18      	bgt.n	800228c <UART_SetConfig+0x13c>
 800225a:	2b04      	cmp	r3, #4
 800225c:	d00d      	beq.n	800227a <UART_SetConfig+0x12a>
 800225e:	dc15      	bgt.n	800228c <UART_SetConfig+0x13c>
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <UART_SetConfig+0x11a>
 8002264:	2b02      	cmp	r3, #2
 8002266:	d005      	beq.n	8002274 <UART_SetConfig+0x124>
 8002268:	e010      	b.n	800228c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800226a:	f7ff fabb 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 800226e:	0003      	movs	r3, r0
 8002270:	61bb      	str	r3, [r7, #24]
        break;
 8002272:	e012      	b.n	800229a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002274:	4b55      	ldr	r3, [pc, #340]	@ (80023cc <UART_SetConfig+0x27c>)
 8002276:	61bb      	str	r3, [r7, #24]
        break;
 8002278:	e00f      	b.n	800229a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800227a:	f7ff fa53 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 800227e:	0003      	movs	r3, r0
 8002280:	61bb      	str	r3, [r7, #24]
        break;
 8002282:	e00a      	b.n	800229a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	61bb      	str	r3, [r7, #24]
        break;
 800228a:	e006      	b.n	800229a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002290:	231e      	movs	r3, #30
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
        break;
 8002298:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d100      	bne.n	80022a2 <UART_SetConfig+0x152>
 80022a0:	e07a      	b.n	8002398 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	005a      	lsls	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	18d2      	adds	r2, r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	0019      	movs	r1, r3
 80022b4:	0010      	movs	r0, r2
 80022b6:	f7fd ff31 	bl	800011c <__udivsi3>
 80022ba:	0003      	movs	r3, r0
 80022bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d91c      	bls.n	80022fe <UART_SetConfig+0x1ae>
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	2380      	movs	r3, #128	@ 0x80
 80022c8:	025b      	lsls	r3, r3, #9
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d217      	bcs.n	80022fe <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	200e      	movs	r0, #14
 80022d4:	183b      	adds	r3, r7, r0
 80022d6:	210f      	movs	r1, #15
 80022d8:	438a      	bics	r2, r1
 80022da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2207      	movs	r2, #7
 80022e4:	4013      	ands	r3, r2
 80022e6:	b299      	uxth	r1, r3
 80022e8:	183b      	adds	r3, r7, r0
 80022ea:	183a      	adds	r2, r7, r0
 80022ec:	8812      	ldrh	r2, [r2, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	183a      	adds	r2, r7, r0
 80022f8:	8812      	ldrh	r2, [r2, #0]
 80022fa:	60da      	str	r2, [r3, #12]
 80022fc:	e04c      	b.n	8002398 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80022fe:	231e      	movs	r3, #30
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e047      	b.n	8002398 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002308:	231f      	movs	r3, #31
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b08      	cmp	r3, #8
 8002310:	d015      	beq.n	800233e <UART_SetConfig+0x1ee>
 8002312:	dc18      	bgt.n	8002346 <UART_SetConfig+0x1f6>
 8002314:	2b04      	cmp	r3, #4
 8002316:	d00d      	beq.n	8002334 <UART_SetConfig+0x1e4>
 8002318:	dc15      	bgt.n	8002346 <UART_SetConfig+0x1f6>
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <UART_SetConfig+0x1d4>
 800231e:	2b02      	cmp	r3, #2
 8002320:	d005      	beq.n	800232e <UART_SetConfig+0x1de>
 8002322:	e010      	b.n	8002346 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002324:	f7ff fa5e 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8002328:	0003      	movs	r3, r0
 800232a:	61bb      	str	r3, [r7, #24]
        break;
 800232c:	e012      	b.n	8002354 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800232e:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <UART_SetConfig+0x27c>)
 8002330:	61bb      	str	r3, [r7, #24]
        break;
 8002332:	e00f      	b.n	8002354 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002334:	f7ff f9f6 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 8002338:	0003      	movs	r3, r0
 800233a:	61bb      	str	r3, [r7, #24]
        break;
 800233c:	e00a      	b.n	8002354 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800233e:	2380      	movs	r3, #128	@ 0x80
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	61bb      	str	r3, [r7, #24]
        break;
 8002344:	e006      	b.n	8002354 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800234a:	231e      	movs	r3, #30
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
        break;
 8002352:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01e      	beq.n	8002398 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	085a      	lsrs	r2, r3, #1
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	18d2      	adds	r2, r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	0019      	movs	r1, r3
 800236a:	0010      	movs	r0, r2
 800236c:	f7fd fed6 	bl	800011c <__udivsi3>
 8002370:	0003      	movs	r3, r0
 8002372:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	d90a      	bls.n	8002390 <UART_SetConfig+0x240>
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	025b      	lsls	r3, r3, #9
 8002380:	429a      	cmp	r2, r3
 8002382:	d205      	bcs.n	8002390 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	b29a      	uxth	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	e003      	b.n	8002398 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002390:	231e      	movs	r3, #30
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	2201      	movs	r2, #1
 8002396:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80023a4:	231e      	movs	r3, #30
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	781b      	ldrb	r3, [r3, #0]
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b008      	add	sp, #32
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	ffff69f3 	.word	0xffff69f3
 80023b8:	ffffcfff 	.word	0xffffcfff
 80023bc:	fffff4ff 	.word	0xfffff4ff
 80023c0:	40013800 	.word	0x40013800
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40004400 	.word	0x40004400
 80023cc:	007a1200 	.word	0x007a1200

080023d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023dc:	2208      	movs	r2, #8
 80023de:	4013      	ands	r3, r2
 80023e0:	d00b      	beq.n	80023fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002514 <UART_AdvFeatureConfig+0x144>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	2201      	movs	r2, #1
 8002400:	4013      	ands	r3, r2
 8002402:	d00b      	beq.n	800241c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a43      	ldr	r2, [pc, #268]	@ (8002518 <UART_AdvFeatureConfig+0x148>)
 800240c:	4013      	ands	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	2202      	movs	r2, #2
 8002422:	4013      	ands	r3, r2
 8002424:	d00b      	beq.n	800243e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a3b      	ldr	r2, [pc, #236]	@ (800251c <UART_AdvFeatureConfig+0x14c>)
 800242e:	4013      	ands	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002442:	2204      	movs	r2, #4
 8002444:	4013      	ands	r3, r2
 8002446:	d00b      	beq.n	8002460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4a34      	ldr	r2, [pc, #208]	@ (8002520 <UART_AdvFeatureConfig+0x150>)
 8002450:	4013      	ands	r3, r2
 8002452:	0019      	movs	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	2210      	movs	r2, #16
 8002466:	4013      	ands	r3, r2
 8002468:	d00b      	beq.n	8002482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a2c      	ldr	r2, [pc, #176]	@ (8002524 <UART_AdvFeatureConfig+0x154>)
 8002472:	4013      	ands	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	2220      	movs	r2, #32
 8002488:	4013      	ands	r3, r2
 800248a:	d00b      	beq.n	80024a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	4a25      	ldr	r2, [pc, #148]	@ (8002528 <UART_AdvFeatureConfig+0x158>)
 8002494:	4013      	ands	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	2240      	movs	r2, #64	@ 0x40
 80024aa:	4013      	ands	r3, r2
 80024ac:	d01d      	beq.n	80024ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a1d      	ldr	r2, [pc, #116]	@ (800252c <UART_AdvFeatureConfig+0x15c>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024ca:	2380      	movs	r3, #128	@ 0x80
 80024cc:	035b      	lsls	r3, r3, #13
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d10b      	bne.n	80024ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a15      	ldr	r2, [pc, #84]	@ (8002530 <UART_AdvFeatureConfig+0x160>)
 80024da:	4013      	ands	r3, r2
 80024dc:	0019      	movs	r1, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	2280      	movs	r2, #128	@ 0x80
 80024f0:	4013      	ands	r3, r2
 80024f2:	d00b      	beq.n	800250c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002534 <UART_AdvFeatureConfig+0x164>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	0019      	movs	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	605a      	str	r2, [r3, #4]
  }
}
 800250c:	46c0      	nop			@ (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}
 8002514:	ffff7fff 	.word	0xffff7fff
 8002518:	fffdffff 	.word	0xfffdffff
 800251c:	fffeffff 	.word	0xfffeffff
 8002520:	fffbffff 	.word	0xfffbffff
 8002524:	ffffefff 	.word	0xffffefff
 8002528:	ffffdfff 	.word	0xffffdfff
 800252c:	ffefffff 	.word	0xffefffff
 8002530:	ff9fffff 	.word	0xff9fffff
 8002534:	fff7ffff 	.word	0xfff7ffff

08002538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b092      	sub	sp, #72	@ 0x48
 800253c:	af02      	add	r7, sp, #8
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2284      	movs	r2, #132	@ 0x84
 8002544:	2100      	movs	r1, #0
 8002546:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002548:	f7fe fa58 	bl	80009fc <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2208      	movs	r2, #8
 8002558:	4013      	ands	r3, r2
 800255a:	2b08      	cmp	r3, #8
 800255c:	d12c      	bne.n	80025b8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800255e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002560:	2280      	movs	r2, #128	@ 0x80
 8002562:	0391      	lsls	r1, r2, #14
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	4a46      	ldr	r2, [pc, #280]	@ (8002680 <UART_CheckIdleState+0x148>)
 8002568:	9200      	str	r2, [sp, #0]
 800256a:	2200      	movs	r2, #0
 800256c:	f000 f88c 	bl	8002688 <UART_WaitOnFlagUntilTimeout>
 8002570:	1e03      	subs	r3, r0, #0
 8002572:	d021      	beq.n	80025b8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002574:	f3ef 8310 	mrs	r3, PRIMASK
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800257c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800257e:	2301      	movs	r3, #1
 8002580:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002584:	f383 8810 	msr	PRIMASK, r3
}
 8002588:	46c0      	nop			@ (mov r8, r8)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2180      	movs	r1, #128	@ 0x80
 8002596:	438a      	bics	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800259e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a0:	f383 8810 	msr	PRIMASK, r3
}
 80025a4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2278      	movs	r2, #120	@ 0x78
 80025b0:	2100      	movs	r1, #0
 80025b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e05f      	b.n	8002678 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2204      	movs	r2, #4
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d146      	bne.n	8002654 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025c8:	2280      	movs	r2, #128	@ 0x80
 80025ca:	03d1      	lsls	r1, r2, #15
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002680 <UART_CheckIdleState+0x148>)
 80025d0:	9200      	str	r2, [sp, #0]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f000 f858 	bl	8002688 <UART_WaitOnFlagUntilTimeout>
 80025d8:	1e03      	subs	r3, r0, #0
 80025da:	d03b      	beq.n	8002654 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025dc:	f3ef 8310 	mrs	r3, PRIMASK
 80025e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80025e2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80025e6:	2301      	movs	r3, #1
 80025e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f383 8810 	msr	PRIMASK, r3
}
 80025f0:	46c0      	nop			@ (mov r8, r8)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4921      	ldr	r1, [pc, #132]	@ (8002684 <UART_CheckIdleState+0x14c>)
 80025fe:	400a      	ands	r2, r1
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002604:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f383 8810 	msr	PRIMASK, r3
}
 800260c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800260e:	f3ef 8310 	mrs	r3, PRIMASK
 8002612:	61bb      	str	r3, [r7, #24]
  return(result);
 8002614:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002616:	633b      	str	r3, [r7, #48]	@ 0x30
 8002618:	2301      	movs	r3, #1
 800261a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f383 8810 	msr	PRIMASK, r3
}
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2101      	movs	r1, #1
 8002630:	438a      	bics	r2, r1
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002636:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f383 8810 	msr	PRIMASK, r3
}
 800263e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2280      	movs	r2, #128	@ 0x80
 8002644:	2120      	movs	r1, #32
 8002646:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2278      	movs	r2, #120	@ 0x78
 800264c:	2100      	movs	r1, #0
 800264e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e011      	b.n	8002678 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2280      	movs	r2, #128	@ 0x80
 800265e:	2120      	movs	r1, #32
 8002660:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2278      	movs	r2, #120	@ 0x78
 8002672:	2100      	movs	r1, #0
 8002674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b010      	add	sp, #64	@ 0x40
 800267e:	bd80      	pop	{r7, pc}
 8002680:	01ffffff 	.word	0x01ffffff
 8002684:	fffffedf 	.word	0xfffffedf

08002688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	1dfb      	adds	r3, r7, #7
 8002696:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002698:	e051      	b.n	800273e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	3301      	adds	r3, #1
 800269e:	d04e      	beq.n	800273e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a0:	f7fe f9ac 	bl	80009fc <HAL_GetTick>
 80026a4:	0002      	movs	r2, r0
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d302      	bcc.n	80026b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e051      	b.n	800275e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2204      	movs	r2, #4
 80026c2:	4013      	ands	r3, r2
 80026c4:	d03b      	beq.n	800273e <UART_WaitOnFlagUntilTimeout+0xb6>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b80      	cmp	r3, #128	@ 0x80
 80026ca:	d038      	beq.n	800273e <UART_WaitOnFlagUntilTimeout+0xb6>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b40      	cmp	r3, #64	@ 0x40
 80026d0:	d035      	beq.n	800273e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	2208      	movs	r2, #8
 80026da:	4013      	ands	r3, r2
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d111      	bne.n	8002704 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2208      	movs	r2, #8
 80026e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 f83c 	bl	8002768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2284      	movs	r2, #132	@ 0x84
 80026f4:	2108      	movs	r1, #8
 80026f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2278      	movs	r2, #120	@ 0x78
 80026fc:	2100      	movs	r1, #0
 80026fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e02c      	b.n	800275e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	2380      	movs	r3, #128	@ 0x80
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	401a      	ands	r2, r3
 8002710:	2380      	movs	r3, #128	@ 0x80
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	429a      	cmp	r2, r3
 8002716:	d112      	bne.n	800273e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2280      	movs	r2, #128	@ 0x80
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	0018      	movs	r0, r3
 8002726:	f000 f81f 	bl	8002768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2284      	movs	r2, #132	@ 0x84
 800272e:	2120      	movs	r1, #32
 8002730:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2278      	movs	r2, #120	@ 0x78
 8002736:	2100      	movs	r1, #0
 8002738:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e00f      	b.n	800275e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	4013      	ands	r3, r2
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	425a      	negs	r2, r3
 800274e:	4153      	adcs	r3, r2
 8002750:	b2db      	uxtb	r3, r3
 8002752:	001a      	movs	r2, r3
 8002754:	1dfb      	adds	r3, r7, #7
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d09e      	beq.n	800269a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08e      	sub	sp, #56	@ 0x38
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002770:	f3ef 8310 	mrs	r3, PRIMASK
 8002774:	617b      	str	r3, [r7, #20]
  return(result);
 8002776:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002778:	637b      	str	r3, [r7, #52]	@ 0x34
 800277a:	2301      	movs	r3, #1
 800277c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f383 8810 	msr	PRIMASK, r3
}
 8002784:	46c0      	nop			@ (mov r8, r8)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4926      	ldr	r1, [pc, #152]	@ (800282c <UART_EndRxTransfer+0xc4>)
 8002792:	400a      	ands	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002798:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f383 8810 	msr	PRIMASK, r3
}
 80027a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027a2:	f3ef 8310 	mrs	r3, PRIMASK
 80027a6:	623b      	str	r3, [r7, #32]
  return(result);
 80027a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80027ac:	2301      	movs	r3, #1
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	f383 8810 	msr	PRIMASK, r3
}
 80027b6:	46c0      	nop			@ (mov r8, r8)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2101      	movs	r1, #1
 80027c4:	438a      	bics	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ce:	f383 8810 	msr	PRIMASK, r3
}
 80027d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d118      	bne.n	800280e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027dc:	f3ef 8310 	mrs	r3, PRIMASK
 80027e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80027e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027e6:	2301      	movs	r3, #1
 80027e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f383 8810 	msr	PRIMASK, r3
}
 80027f0:	46c0      	nop			@ (mov r8, r8)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2110      	movs	r1, #16
 80027fe:	438a      	bics	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002804:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f383 8810 	msr	PRIMASK, r3
}
 800280c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2280      	movs	r2, #128	@ 0x80
 8002812:	2120      	movs	r1, #32
 8002814:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b00e      	add	sp, #56	@ 0x38
 8002828:	bd80      	pop	{r7, pc}
 800282a:	46c0      	nop			@ (mov r8, r8)
 800282c:	fffffedf 	.word	0xfffffedf

08002830 <std>:
 8002830:	2300      	movs	r3, #0
 8002832:	b510      	push	{r4, lr}
 8002834:	0004      	movs	r4, r0
 8002836:	6003      	str	r3, [r0, #0]
 8002838:	6043      	str	r3, [r0, #4]
 800283a:	6083      	str	r3, [r0, #8]
 800283c:	8181      	strh	r1, [r0, #12]
 800283e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002840:	81c2      	strh	r2, [r0, #14]
 8002842:	6103      	str	r3, [r0, #16]
 8002844:	6143      	str	r3, [r0, #20]
 8002846:	6183      	str	r3, [r0, #24]
 8002848:	0019      	movs	r1, r3
 800284a:	2208      	movs	r2, #8
 800284c:	305c      	adds	r0, #92	@ 0x5c
 800284e:	f000 f90f 	bl	8002a70 <memset>
 8002852:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <std+0x50>)
 8002854:	6224      	str	r4, [r4, #32]
 8002856:	6263      	str	r3, [r4, #36]	@ 0x24
 8002858:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <std+0x54>)
 800285a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <std+0x58>)
 800285e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002860:	4b0a      	ldr	r3, [pc, #40]	@ (800288c <std+0x5c>)
 8002862:	6323      	str	r3, [r4, #48]	@ 0x30
 8002864:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <std+0x60>)
 8002866:	429c      	cmp	r4, r3
 8002868:	d005      	beq.n	8002876 <std+0x46>
 800286a:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <std+0x64>)
 800286c:	429c      	cmp	r4, r3
 800286e:	d002      	beq.n	8002876 <std+0x46>
 8002870:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <std+0x68>)
 8002872:	429c      	cmp	r4, r3
 8002874:	d103      	bne.n	800287e <std+0x4e>
 8002876:	0020      	movs	r0, r4
 8002878:	3058      	adds	r0, #88	@ 0x58
 800287a:	f000 f979 	bl	8002b70 <__retarget_lock_init_recursive>
 800287e:	bd10      	pop	{r4, pc}
 8002880:	080029d9 	.word	0x080029d9
 8002884:	08002a01 	.word	0x08002a01
 8002888:	08002a39 	.word	0x08002a39
 800288c:	08002a65 	.word	0x08002a65
 8002890:	20000168 	.word	0x20000168
 8002894:	200001d0 	.word	0x200001d0
 8002898:	20000238 	.word	0x20000238

0800289c <stdio_exit_handler>:
 800289c:	b510      	push	{r4, lr}
 800289e:	4a03      	ldr	r2, [pc, #12]	@ (80028ac <stdio_exit_handler+0x10>)
 80028a0:	4903      	ldr	r1, [pc, #12]	@ (80028b0 <stdio_exit_handler+0x14>)
 80028a2:	4804      	ldr	r0, [pc, #16]	@ (80028b4 <stdio_exit_handler+0x18>)
 80028a4:	f000 f86c 	bl	8002980 <_fwalk_sglue>
 80028a8:	bd10      	pop	{r4, pc}
 80028aa:	46c0      	nop			@ (mov r8, r8)
 80028ac:	2000000c 	.word	0x2000000c
 80028b0:	08003401 	.word	0x08003401
 80028b4:	2000001c 	.word	0x2000001c

080028b8 <cleanup_stdio>:
 80028b8:	6841      	ldr	r1, [r0, #4]
 80028ba:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <cleanup_stdio+0x30>)
 80028bc:	b510      	push	{r4, lr}
 80028be:	0004      	movs	r4, r0
 80028c0:	4299      	cmp	r1, r3
 80028c2:	d001      	beq.n	80028c8 <cleanup_stdio+0x10>
 80028c4:	f000 fd9c 	bl	8003400 <_fflush_r>
 80028c8:	68a1      	ldr	r1, [r4, #8]
 80028ca:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <cleanup_stdio+0x34>)
 80028cc:	4299      	cmp	r1, r3
 80028ce:	d002      	beq.n	80028d6 <cleanup_stdio+0x1e>
 80028d0:	0020      	movs	r0, r4
 80028d2:	f000 fd95 	bl	8003400 <_fflush_r>
 80028d6:	68e1      	ldr	r1, [r4, #12]
 80028d8:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <cleanup_stdio+0x38>)
 80028da:	4299      	cmp	r1, r3
 80028dc:	d002      	beq.n	80028e4 <cleanup_stdio+0x2c>
 80028de:	0020      	movs	r0, r4
 80028e0:	f000 fd8e 	bl	8003400 <_fflush_r>
 80028e4:	bd10      	pop	{r4, pc}
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	20000168 	.word	0x20000168
 80028ec:	200001d0 	.word	0x200001d0
 80028f0:	20000238 	.word	0x20000238

080028f4 <global_stdio_init.part.0>:
 80028f4:	b510      	push	{r4, lr}
 80028f6:	4b09      	ldr	r3, [pc, #36]	@ (800291c <global_stdio_init.part.0+0x28>)
 80028f8:	4a09      	ldr	r2, [pc, #36]	@ (8002920 <global_stdio_init.part.0+0x2c>)
 80028fa:	2104      	movs	r1, #4
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	4809      	ldr	r0, [pc, #36]	@ (8002924 <global_stdio_init.part.0+0x30>)
 8002900:	2200      	movs	r2, #0
 8002902:	f7ff ff95 	bl	8002830 <std>
 8002906:	2201      	movs	r2, #1
 8002908:	2109      	movs	r1, #9
 800290a:	4807      	ldr	r0, [pc, #28]	@ (8002928 <global_stdio_init.part.0+0x34>)
 800290c:	f7ff ff90 	bl	8002830 <std>
 8002910:	2202      	movs	r2, #2
 8002912:	2112      	movs	r1, #18
 8002914:	4805      	ldr	r0, [pc, #20]	@ (800292c <global_stdio_init.part.0+0x38>)
 8002916:	f7ff ff8b 	bl	8002830 <std>
 800291a:	bd10      	pop	{r4, pc}
 800291c:	200002a0 	.word	0x200002a0
 8002920:	0800289d 	.word	0x0800289d
 8002924:	20000168 	.word	0x20000168
 8002928:	200001d0 	.word	0x200001d0
 800292c:	20000238 	.word	0x20000238

08002930 <__sfp_lock_acquire>:
 8002930:	b510      	push	{r4, lr}
 8002932:	4802      	ldr	r0, [pc, #8]	@ (800293c <__sfp_lock_acquire+0xc>)
 8002934:	f000 f91d 	bl	8002b72 <__retarget_lock_acquire_recursive>
 8002938:	bd10      	pop	{r4, pc}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	200002a9 	.word	0x200002a9

08002940 <__sfp_lock_release>:
 8002940:	b510      	push	{r4, lr}
 8002942:	4802      	ldr	r0, [pc, #8]	@ (800294c <__sfp_lock_release+0xc>)
 8002944:	f000 f916 	bl	8002b74 <__retarget_lock_release_recursive>
 8002948:	bd10      	pop	{r4, pc}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	200002a9 	.word	0x200002a9

08002950 <__sinit>:
 8002950:	b510      	push	{r4, lr}
 8002952:	0004      	movs	r4, r0
 8002954:	f7ff ffec 	bl	8002930 <__sfp_lock_acquire>
 8002958:	6a23      	ldr	r3, [r4, #32]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <__sinit+0x14>
 800295e:	f7ff ffef 	bl	8002940 <__sfp_lock_release>
 8002962:	bd10      	pop	{r4, pc}
 8002964:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <__sinit+0x28>)
 8002966:	6223      	str	r3, [r4, #32]
 8002968:	4b04      	ldr	r3, [pc, #16]	@ (800297c <__sinit+0x2c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f6      	bne.n	800295e <__sinit+0xe>
 8002970:	f7ff ffc0 	bl	80028f4 <global_stdio_init.part.0>
 8002974:	e7f3      	b.n	800295e <__sinit+0xe>
 8002976:	46c0      	nop			@ (mov r8, r8)
 8002978:	080028b9 	.word	0x080028b9
 800297c:	200002a0 	.word	0x200002a0

08002980 <_fwalk_sglue>:
 8002980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002982:	0014      	movs	r4, r2
 8002984:	2600      	movs	r6, #0
 8002986:	9000      	str	r0, [sp, #0]
 8002988:	9101      	str	r1, [sp, #4]
 800298a:	68a5      	ldr	r5, [r4, #8]
 800298c:	6867      	ldr	r7, [r4, #4]
 800298e:	3f01      	subs	r7, #1
 8002990:	d504      	bpl.n	800299c <_fwalk_sglue+0x1c>
 8002992:	6824      	ldr	r4, [r4, #0]
 8002994:	2c00      	cmp	r4, #0
 8002996:	d1f8      	bne.n	800298a <_fwalk_sglue+0xa>
 8002998:	0030      	movs	r0, r6
 800299a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800299c:	89ab      	ldrh	r3, [r5, #12]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d908      	bls.n	80029b4 <_fwalk_sglue+0x34>
 80029a2:	220e      	movs	r2, #14
 80029a4:	5eab      	ldrsh	r3, [r5, r2]
 80029a6:	3301      	adds	r3, #1
 80029a8:	d004      	beq.n	80029b4 <_fwalk_sglue+0x34>
 80029aa:	0029      	movs	r1, r5
 80029ac:	9800      	ldr	r0, [sp, #0]
 80029ae:	9b01      	ldr	r3, [sp, #4]
 80029b0:	4798      	blx	r3
 80029b2:	4306      	orrs	r6, r0
 80029b4:	3568      	adds	r5, #104	@ 0x68
 80029b6:	e7ea      	b.n	800298e <_fwalk_sglue+0xe>

080029b8 <iprintf>:
 80029b8:	b40f      	push	{r0, r1, r2, r3}
 80029ba:	b507      	push	{r0, r1, r2, lr}
 80029bc:	4905      	ldr	r1, [pc, #20]	@ (80029d4 <iprintf+0x1c>)
 80029be:	ab04      	add	r3, sp, #16
 80029c0:	6808      	ldr	r0, [r1, #0]
 80029c2:	cb04      	ldmia	r3!, {r2}
 80029c4:	6881      	ldr	r1, [r0, #8]
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	f000 f9fa 	bl	8002dc0 <_vfiprintf_r>
 80029cc:	b003      	add	sp, #12
 80029ce:	bc08      	pop	{r3}
 80029d0:	b004      	add	sp, #16
 80029d2:	4718      	bx	r3
 80029d4:	20000018 	.word	0x20000018

080029d8 <__sread>:
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	000c      	movs	r4, r1
 80029dc:	250e      	movs	r5, #14
 80029de:	5f49      	ldrsh	r1, [r1, r5]
 80029e0:	f000 f874 	bl	8002acc <_read_r>
 80029e4:	2800      	cmp	r0, #0
 80029e6:	db03      	blt.n	80029f0 <__sread+0x18>
 80029e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80029ea:	181b      	adds	r3, r3, r0
 80029ec:	6563      	str	r3, [r4, #84]	@ 0x54
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
 80029f0:	89a3      	ldrh	r3, [r4, #12]
 80029f2:	4a02      	ldr	r2, [pc, #8]	@ (80029fc <__sread+0x24>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	81a3      	strh	r3, [r4, #12]
 80029f8:	e7f9      	b.n	80029ee <__sread+0x16>
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	ffffefff 	.word	0xffffefff

08002a00 <__swrite>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	001f      	movs	r7, r3
 8002a04:	898b      	ldrh	r3, [r1, #12]
 8002a06:	0005      	movs	r5, r0
 8002a08:	000c      	movs	r4, r1
 8002a0a:	0016      	movs	r6, r2
 8002a0c:	05db      	lsls	r3, r3, #23
 8002a0e:	d505      	bpl.n	8002a1c <__swrite+0x1c>
 8002a10:	230e      	movs	r3, #14
 8002a12:	5ec9      	ldrsh	r1, [r1, r3]
 8002a14:	2200      	movs	r2, #0
 8002a16:	2302      	movs	r3, #2
 8002a18:	f000 f844 	bl	8002aa4 <_lseek_r>
 8002a1c:	89a3      	ldrh	r3, [r4, #12]
 8002a1e:	4a05      	ldr	r2, [pc, #20]	@ (8002a34 <__swrite+0x34>)
 8002a20:	0028      	movs	r0, r5
 8002a22:	4013      	ands	r3, r2
 8002a24:	81a3      	strh	r3, [r4, #12]
 8002a26:	0032      	movs	r2, r6
 8002a28:	230e      	movs	r3, #14
 8002a2a:	5ee1      	ldrsh	r1, [r4, r3]
 8002a2c:	003b      	movs	r3, r7
 8002a2e:	f000 f861 	bl	8002af4 <_write_r>
 8002a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a34:	ffffefff 	.word	0xffffefff

08002a38 <__sseek>:
 8002a38:	b570      	push	{r4, r5, r6, lr}
 8002a3a:	000c      	movs	r4, r1
 8002a3c:	250e      	movs	r5, #14
 8002a3e:	5f49      	ldrsh	r1, [r1, r5]
 8002a40:	f000 f830 	bl	8002aa4 <_lseek_r>
 8002a44:	89a3      	ldrh	r3, [r4, #12]
 8002a46:	1c42      	adds	r2, r0, #1
 8002a48:	d103      	bne.n	8002a52 <__sseek+0x1a>
 8002a4a:	4a05      	ldr	r2, [pc, #20]	@ (8002a60 <__sseek+0x28>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	81a3      	strh	r3, [r4, #12]
 8002a50:	bd70      	pop	{r4, r5, r6, pc}
 8002a52:	2280      	movs	r2, #128	@ 0x80
 8002a54:	0152      	lsls	r2, r2, #5
 8002a56:	4313      	orrs	r3, r2
 8002a58:	81a3      	strh	r3, [r4, #12]
 8002a5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8002a5c:	e7f8      	b.n	8002a50 <__sseek+0x18>
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	ffffefff 	.word	0xffffefff

08002a64 <__sclose>:
 8002a64:	b510      	push	{r4, lr}
 8002a66:	230e      	movs	r3, #14
 8002a68:	5ec9      	ldrsh	r1, [r1, r3]
 8002a6a:	f000 f809 	bl	8002a80 <_close_r>
 8002a6e:	bd10      	pop	{r4, pc}

08002a70 <memset>:
 8002a70:	0003      	movs	r3, r0
 8002a72:	1882      	adds	r2, r0, r2
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d100      	bne.n	8002a7a <memset+0xa>
 8002a78:	4770      	bx	lr
 8002a7a:	7019      	strb	r1, [r3, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	e7f9      	b.n	8002a74 <memset+0x4>

08002a80 <_close_r>:
 8002a80:	2300      	movs	r3, #0
 8002a82:	b570      	push	{r4, r5, r6, lr}
 8002a84:	4d06      	ldr	r5, [pc, #24]	@ (8002aa0 <_close_r+0x20>)
 8002a86:	0004      	movs	r4, r0
 8002a88:	0008      	movs	r0, r1
 8002a8a:	602b      	str	r3, [r5, #0]
 8002a8c:	f7fd feca 	bl	8000824 <_close>
 8002a90:	1c43      	adds	r3, r0, #1
 8002a92:	d103      	bne.n	8002a9c <_close_r+0x1c>
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d000      	beq.n	8002a9c <_close_r+0x1c>
 8002a9a:	6023      	str	r3, [r4, #0]
 8002a9c:	bd70      	pop	{r4, r5, r6, pc}
 8002a9e:	46c0      	nop			@ (mov r8, r8)
 8002aa0:	200002a4 	.word	0x200002a4

08002aa4 <_lseek_r>:
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	0004      	movs	r4, r0
 8002aa8:	0008      	movs	r0, r1
 8002aaa:	0011      	movs	r1, r2
 8002aac:	001a      	movs	r2, r3
 8002aae:	2300      	movs	r3, #0
 8002ab0:	4d05      	ldr	r5, [pc, #20]	@ (8002ac8 <_lseek_r+0x24>)
 8002ab2:	602b      	str	r3, [r5, #0]
 8002ab4:	f7fd fed7 	bl	8000866 <_lseek>
 8002ab8:	1c43      	adds	r3, r0, #1
 8002aba:	d103      	bne.n	8002ac4 <_lseek_r+0x20>
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d000      	beq.n	8002ac4 <_lseek_r+0x20>
 8002ac2:	6023      	str	r3, [r4, #0]
 8002ac4:	bd70      	pop	{r4, r5, r6, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	200002a4 	.word	0x200002a4

08002acc <_read_r>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	0004      	movs	r4, r0
 8002ad0:	0008      	movs	r0, r1
 8002ad2:	0011      	movs	r1, r2
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	4d05      	ldr	r5, [pc, #20]	@ (8002af0 <_read_r+0x24>)
 8002ada:	602b      	str	r3, [r5, #0]
 8002adc:	f7fd fe85 	bl	80007ea <_read>
 8002ae0:	1c43      	adds	r3, r0, #1
 8002ae2:	d103      	bne.n	8002aec <_read_r+0x20>
 8002ae4:	682b      	ldr	r3, [r5, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d000      	beq.n	8002aec <_read_r+0x20>
 8002aea:	6023      	str	r3, [r4, #0]
 8002aec:	bd70      	pop	{r4, r5, r6, pc}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	200002a4 	.word	0x200002a4

08002af4 <_write_r>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	0004      	movs	r4, r0
 8002af8:	0008      	movs	r0, r1
 8002afa:	0011      	movs	r1, r2
 8002afc:	001a      	movs	r2, r3
 8002afe:	2300      	movs	r3, #0
 8002b00:	4d05      	ldr	r5, [pc, #20]	@ (8002b18 <_write_r+0x24>)
 8002b02:	602b      	str	r3, [r5, #0]
 8002b04:	f7fd fd1c 	bl	8000540 <_write>
 8002b08:	1c43      	adds	r3, r0, #1
 8002b0a:	d103      	bne.n	8002b14 <_write_r+0x20>
 8002b0c:	682b      	ldr	r3, [r5, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d000      	beq.n	8002b14 <_write_r+0x20>
 8002b12:	6023      	str	r3, [r4, #0]
 8002b14:	bd70      	pop	{r4, r5, r6, pc}
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	200002a4 	.word	0x200002a4

08002b1c <__errno>:
 8002b1c:	4b01      	ldr	r3, [pc, #4]	@ (8002b24 <__errno+0x8>)
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	4770      	bx	lr
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	20000018 	.word	0x20000018

08002b28 <__libc_init_array>:
 8002b28:	b570      	push	{r4, r5, r6, lr}
 8002b2a:	2600      	movs	r6, #0
 8002b2c:	4c0c      	ldr	r4, [pc, #48]	@ (8002b60 <__libc_init_array+0x38>)
 8002b2e:	4d0d      	ldr	r5, [pc, #52]	@ (8002b64 <__libc_init_array+0x3c>)
 8002b30:	1b64      	subs	r4, r4, r5
 8002b32:	10a4      	asrs	r4, r4, #2
 8002b34:	42a6      	cmp	r6, r4
 8002b36:	d109      	bne.n	8002b4c <__libc_init_array+0x24>
 8002b38:	2600      	movs	r6, #0
 8002b3a:	f000 fddb 	bl	80036f4 <_init>
 8002b3e:	4c0a      	ldr	r4, [pc, #40]	@ (8002b68 <__libc_init_array+0x40>)
 8002b40:	4d0a      	ldr	r5, [pc, #40]	@ (8002b6c <__libc_init_array+0x44>)
 8002b42:	1b64      	subs	r4, r4, r5
 8002b44:	10a4      	asrs	r4, r4, #2
 8002b46:	42a6      	cmp	r6, r4
 8002b48:	d105      	bne.n	8002b56 <__libc_init_array+0x2e>
 8002b4a:	bd70      	pop	{r4, r5, r6, pc}
 8002b4c:	00b3      	lsls	r3, r6, #2
 8002b4e:	58eb      	ldr	r3, [r5, r3]
 8002b50:	4798      	blx	r3
 8002b52:	3601      	adds	r6, #1
 8002b54:	e7ee      	b.n	8002b34 <__libc_init_array+0xc>
 8002b56:	00b3      	lsls	r3, r6, #2
 8002b58:	58eb      	ldr	r3, [r5, r3]
 8002b5a:	4798      	blx	r3
 8002b5c:	3601      	adds	r6, #1
 8002b5e:	e7f2      	b.n	8002b46 <__libc_init_array+0x1e>
 8002b60:	08003784 	.word	0x08003784
 8002b64:	08003784 	.word	0x08003784
 8002b68:	08003788 	.word	0x08003788
 8002b6c:	08003784 	.word	0x08003784

08002b70 <__retarget_lock_init_recursive>:
 8002b70:	4770      	bx	lr

08002b72 <__retarget_lock_acquire_recursive>:
 8002b72:	4770      	bx	lr

08002b74 <__retarget_lock_release_recursive>:
 8002b74:	4770      	bx	lr
	...

08002b78 <_free_r>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	0005      	movs	r5, r0
 8002b7c:	1e0c      	subs	r4, r1, #0
 8002b7e:	d010      	beq.n	8002ba2 <_free_r+0x2a>
 8002b80:	3c04      	subs	r4, #4
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	da00      	bge.n	8002b8a <_free_r+0x12>
 8002b88:	18e4      	adds	r4, r4, r3
 8002b8a:	0028      	movs	r0, r5
 8002b8c:	f000 f8e0 	bl	8002d50 <__malloc_lock>
 8002b90:	4a1d      	ldr	r2, [pc, #116]	@ (8002c08 <_free_r+0x90>)
 8002b92:	6813      	ldr	r3, [r2, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <_free_r+0x2c>
 8002b98:	6063      	str	r3, [r4, #4]
 8002b9a:	6014      	str	r4, [r2, #0]
 8002b9c:	0028      	movs	r0, r5
 8002b9e:	f000 f8df 	bl	8002d60 <__malloc_unlock>
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	42a3      	cmp	r3, r4
 8002ba6:	d908      	bls.n	8002bba <_free_r+0x42>
 8002ba8:	6820      	ldr	r0, [r4, #0]
 8002baa:	1821      	adds	r1, r4, r0
 8002bac:	428b      	cmp	r3, r1
 8002bae:	d1f3      	bne.n	8002b98 <_free_r+0x20>
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	1809      	adds	r1, r1, r0
 8002bb6:	6021      	str	r1, [r4, #0]
 8002bb8:	e7ee      	b.n	8002b98 <_free_r+0x20>
 8002bba:	001a      	movs	r2, r3
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <_free_r+0x4e>
 8002bc2:	42a3      	cmp	r3, r4
 8002bc4:	d9f9      	bls.n	8002bba <_free_r+0x42>
 8002bc6:	6811      	ldr	r1, [r2, #0]
 8002bc8:	1850      	adds	r0, r2, r1
 8002bca:	42a0      	cmp	r0, r4
 8002bcc:	d10b      	bne.n	8002be6 <_free_r+0x6e>
 8002bce:	6820      	ldr	r0, [r4, #0]
 8002bd0:	1809      	adds	r1, r1, r0
 8002bd2:	1850      	adds	r0, r2, r1
 8002bd4:	6011      	str	r1, [r2, #0]
 8002bd6:	4283      	cmp	r3, r0
 8002bd8:	d1e0      	bne.n	8002b9c <_free_r+0x24>
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	1841      	adds	r1, r0, r1
 8002be0:	6011      	str	r1, [r2, #0]
 8002be2:	6053      	str	r3, [r2, #4]
 8002be4:	e7da      	b.n	8002b9c <_free_r+0x24>
 8002be6:	42a0      	cmp	r0, r4
 8002be8:	d902      	bls.n	8002bf0 <_free_r+0x78>
 8002bea:	230c      	movs	r3, #12
 8002bec:	602b      	str	r3, [r5, #0]
 8002bee:	e7d5      	b.n	8002b9c <_free_r+0x24>
 8002bf0:	6820      	ldr	r0, [r4, #0]
 8002bf2:	1821      	adds	r1, r4, r0
 8002bf4:	428b      	cmp	r3, r1
 8002bf6:	d103      	bne.n	8002c00 <_free_r+0x88>
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	1809      	adds	r1, r1, r0
 8002bfe:	6021      	str	r1, [r4, #0]
 8002c00:	6063      	str	r3, [r4, #4]
 8002c02:	6054      	str	r4, [r2, #4]
 8002c04:	e7ca      	b.n	8002b9c <_free_r+0x24>
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	200002b0 	.word	0x200002b0

08002c0c <sbrk_aligned>:
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8002c4c <sbrk_aligned+0x40>)
 8002c10:	000d      	movs	r5, r1
 8002c12:	6831      	ldr	r1, [r6, #0]
 8002c14:	0004      	movs	r4, r0
 8002c16:	2900      	cmp	r1, #0
 8002c18:	d102      	bne.n	8002c20 <sbrk_aligned+0x14>
 8002c1a:	f000 fcbd 	bl	8003598 <_sbrk_r>
 8002c1e:	6030      	str	r0, [r6, #0]
 8002c20:	0029      	movs	r1, r5
 8002c22:	0020      	movs	r0, r4
 8002c24:	f000 fcb8 	bl	8003598 <_sbrk_r>
 8002c28:	1c43      	adds	r3, r0, #1
 8002c2a:	d103      	bne.n	8002c34 <sbrk_aligned+0x28>
 8002c2c:	2501      	movs	r5, #1
 8002c2e:	426d      	negs	r5, r5
 8002c30:	0028      	movs	r0, r5
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
 8002c34:	2303      	movs	r3, #3
 8002c36:	1cc5      	adds	r5, r0, #3
 8002c38:	439d      	bics	r5, r3
 8002c3a:	42a8      	cmp	r0, r5
 8002c3c:	d0f8      	beq.n	8002c30 <sbrk_aligned+0x24>
 8002c3e:	1a29      	subs	r1, r5, r0
 8002c40:	0020      	movs	r0, r4
 8002c42:	f000 fca9 	bl	8003598 <_sbrk_r>
 8002c46:	3001      	adds	r0, #1
 8002c48:	d1f2      	bne.n	8002c30 <sbrk_aligned+0x24>
 8002c4a:	e7ef      	b.n	8002c2c <sbrk_aligned+0x20>
 8002c4c:	200002ac 	.word	0x200002ac

08002c50 <_malloc_r>:
 8002c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c52:	2203      	movs	r2, #3
 8002c54:	1ccb      	adds	r3, r1, #3
 8002c56:	4393      	bics	r3, r2
 8002c58:	3308      	adds	r3, #8
 8002c5a:	0005      	movs	r5, r0
 8002c5c:	001f      	movs	r7, r3
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d234      	bcs.n	8002ccc <_malloc_r+0x7c>
 8002c62:	270c      	movs	r7, #12
 8002c64:	42b9      	cmp	r1, r7
 8002c66:	d833      	bhi.n	8002cd0 <_malloc_r+0x80>
 8002c68:	0028      	movs	r0, r5
 8002c6a:	f000 f871 	bl	8002d50 <__malloc_lock>
 8002c6e:	4e37      	ldr	r6, [pc, #220]	@ (8002d4c <_malloc_r+0xfc>)
 8002c70:	6833      	ldr	r3, [r6, #0]
 8002c72:	001c      	movs	r4, r3
 8002c74:	2c00      	cmp	r4, #0
 8002c76:	d12f      	bne.n	8002cd8 <_malloc_r+0x88>
 8002c78:	0039      	movs	r1, r7
 8002c7a:	0028      	movs	r0, r5
 8002c7c:	f7ff ffc6 	bl	8002c0c <sbrk_aligned>
 8002c80:	0004      	movs	r4, r0
 8002c82:	1c43      	adds	r3, r0, #1
 8002c84:	d15f      	bne.n	8002d46 <_malloc_r+0xf6>
 8002c86:	6834      	ldr	r4, [r6, #0]
 8002c88:	9400      	str	r4, [sp, #0]
 8002c8a:	9b00      	ldr	r3, [sp, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d14a      	bne.n	8002d26 <_malloc_r+0xd6>
 8002c90:	2c00      	cmp	r4, #0
 8002c92:	d052      	beq.n	8002d3a <_malloc_r+0xea>
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	0028      	movs	r0, r5
 8002c98:	18e3      	adds	r3, r4, r3
 8002c9a:	9900      	ldr	r1, [sp, #0]
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	f000 fc7b 	bl	8003598 <_sbrk_r>
 8002ca2:	9b01      	ldr	r3, [sp, #4]
 8002ca4:	4283      	cmp	r3, r0
 8002ca6:	d148      	bne.n	8002d3a <_malloc_r+0xea>
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	0028      	movs	r0, r5
 8002cac:	1aff      	subs	r7, r7, r3
 8002cae:	0039      	movs	r1, r7
 8002cb0:	f7ff ffac 	bl	8002c0c <sbrk_aligned>
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	d040      	beq.n	8002d3a <_malloc_r+0xea>
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	19db      	adds	r3, r3, r7
 8002cbc:	6023      	str	r3, [r4, #0]
 8002cbe:	6833      	ldr	r3, [r6, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	2a00      	cmp	r2, #0
 8002cc4:	d133      	bne.n	8002d2e <_malloc_r+0xde>
 8002cc6:	9b00      	ldr	r3, [sp, #0]
 8002cc8:	6033      	str	r3, [r6, #0]
 8002cca:	e019      	b.n	8002d00 <_malloc_r+0xb0>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	dac9      	bge.n	8002c64 <_malloc_r+0x14>
 8002cd0:	230c      	movs	r3, #12
 8002cd2:	602b      	str	r3, [r5, #0]
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002cd8:	6821      	ldr	r1, [r4, #0]
 8002cda:	1bc9      	subs	r1, r1, r7
 8002cdc:	d420      	bmi.n	8002d20 <_malloc_r+0xd0>
 8002cde:	290b      	cmp	r1, #11
 8002ce0:	d90a      	bls.n	8002cf8 <_malloc_r+0xa8>
 8002ce2:	19e2      	adds	r2, r4, r7
 8002ce4:	6027      	str	r7, [r4, #0]
 8002ce6:	42a3      	cmp	r3, r4
 8002ce8:	d104      	bne.n	8002cf4 <_malloc_r+0xa4>
 8002cea:	6032      	str	r2, [r6, #0]
 8002cec:	6863      	ldr	r3, [r4, #4]
 8002cee:	6011      	str	r1, [r2, #0]
 8002cf0:	6053      	str	r3, [r2, #4]
 8002cf2:	e005      	b.n	8002d00 <_malloc_r+0xb0>
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	e7f9      	b.n	8002cec <_malloc_r+0x9c>
 8002cf8:	6862      	ldr	r2, [r4, #4]
 8002cfa:	42a3      	cmp	r3, r4
 8002cfc:	d10e      	bne.n	8002d1c <_malloc_r+0xcc>
 8002cfe:	6032      	str	r2, [r6, #0]
 8002d00:	0028      	movs	r0, r5
 8002d02:	f000 f82d 	bl	8002d60 <__malloc_unlock>
 8002d06:	0020      	movs	r0, r4
 8002d08:	2207      	movs	r2, #7
 8002d0a:	300b      	adds	r0, #11
 8002d0c:	1d23      	adds	r3, r4, #4
 8002d0e:	4390      	bics	r0, r2
 8002d10:	1ac2      	subs	r2, r0, r3
 8002d12:	4298      	cmp	r0, r3
 8002d14:	d0df      	beq.n	8002cd6 <_malloc_r+0x86>
 8002d16:	1a1b      	subs	r3, r3, r0
 8002d18:	50a3      	str	r3, [r4, r2]
 8002d1a:	e7dc      	b.n	8002cd6 <_malloc_r+0x86>
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	e7ef      	b.n	8002d00 <_malloc_r+0xb0>
 8002d20:	0023      	movs	r3, r4
 8002d22:	6864      	ldr	r4, [r4, #4]
 8002d24:	e7a6      	b.n	8002c74 <_malloc_r+0x24>
 8002d26:	9c00      	ldr	r4, [sp, #0]
 8002d28:	6863      	ldr	r3, [r4, #4]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	e7ad      	b.n	8002c8a <_malloc_r+0x3a>
 8002d2e:	001a      	movs	r2, r3
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	42a3      	cmp	r3, r4
 8002d34:	d1fb      	bne.n	8002d2e <_malloc_r+0xde>
 8002d36:	2300      	movs	r3, #0
 8002d38:	e7da      	b.n	8002cf0 <_malloc_r+0xa0>
 8002d3a:	230c      	movs	r3, #12
 8002d3c:	0028      	movs	r0, r5
 8002d3e:	602b      	str	r3, [r5, #0]
 8002d40:	f000 f80e 	bl	8002d60 <__malloc_unlock>
 8002d44:	e7c6      	b.n	8002cd4 <_malloc_r+0x84>
 8002d46:	6007      	str	r7, [r0, #0]
 8002d48:	e7da      	b.n	8002d00 <_malloc_r+0xb0>
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	200002b0 	.word	0x200002b0

08002d50 <__malloc_lock>:
 8002d50:	b510      	push	{r4, lr}
 8002d52:	4802      	ldr	r0, [pc, #8]	@ (8002d5c <__malloc_lock+0xc>)
 8002d54:	f7ff ff0d 	bl	8002b72 <__retarget_lock_acquire_recursive>
 8002d58:	bd10      	pop	{r4, pc}
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	200002a8 	.word	0x200002a8

08002d60 <__malloc_unlock>:
 8002d60:	b510      	push	{r4, lr}
 8002d62:	4802      	ldr	r0, [pc, #8]	@ (8002d6c <__malloc_unlock+0xc>)
 8002d64:	f7ff ff06 	bl	8002b74 <__retarget_lock_release_recursive>
 8002d68:	bd10      	pop	{r4, pc}
 8002d6a:	46c0      	nop			@ (mov r8, r8)
 8002d6c:	200002a8 	.word	0x200002a8

08002d70 <__sfputc_r>:
 8002d70:	6893      	ldr	r3, [r2, #8]
 8002d72:	b510      	push	{r4, lr}
 8002d74:	3b01      	subs	r3, #1
 8002d76:	6093      	str	r3, [r2, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	da04      	bge.n	8002d86 <__sfputc_r+0x16>
 8002d7c:	6994      	ldr	r4, [r2, #24]
 8002d7e:	42a3      	cmp	r3, r4
 8002d80:	db07      	blt.n	8002d92 <__sfputc_r+0x22>
 8002d82:	290a      	cmp	r1, #10
 8002d84:	d005      	beq.n	8002d92 <__sfputc_r+0x22>
 8002d86:	6813      	ldr	r3, [r2, #0]
 8002d88:	1c58      	adds	r0, r3, #1
 8002d8a:	6010      	str	r0, [r2, #0]
 8002d8c:	7019      	strb	r1, [r3, #0]
 8002d8e:	0008      	movs	r0, r1
 8002d90:	bd10      	pop	{r4, pc}
 8002d92:	f000 fb60 	bl	8003456 <__swbuf_r>
 8002d96:	0001      	movs	r1, r0
 8002d98:	e7f9      	b.n	8002d8e <__sfputc_r+0x1e>

08002d9a <__sfputs_r>:
 8002d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9c:	0006      	movs	r6, r0
 8002d9e:	000f      	movs	r7, r1
 8002da0:	0014      	movs	r4, r2
 8002da2:	18d5      	adds	r5, r2, r3
 8002da4:	42ac      	cmp	r4, r5
 8002da6:	d101      	bne.n	8002dac <__sfputs_r+0x12>
 8002da8:	2000      	movs	r0, #0
 8002daa:	e007      	b.n	8002dbc <__sfputs_r+0x22>
 8002dac:	7821      	ldrb	r1, [r4, #0]
 8002dae:	003a      	movs	r2, r7
 8002db0:	0030      	movs	r0, r6
 8002db2:	f7ff ffdd 	bl	8002d70 <__sfputc_r>
 8002db6:	3401      	adds	r4, #1
 8002db8:	1c43      	adds	r3, r0, #1
 8002dba:	d1f3      	bne.n	8002da4 <__sfputs_r+0xa>
 8002dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002dc0 <_vfiprintf_r>:
 8002dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc2:	b0a1      	sub	sp, #132	@ 0x84
 8002dc4:	000f      	movs	r7, r1
 8002dc6:	0015      	movs	r5, r2
 8002dc8:	001e      	movs	r6, r3
 8002dca:	9003      	str	r0, [sp, #12]
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d004      	beq.n	8002dda <_vfiprintf_r+0x1a>
 8002dd0:	6a03      	ldr	r3, [r0, #32]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <_vfiprintf_r+0x1a>
 8002dd6:	f7ff fdbb 	bl	8002950 <__sinit>
 8002dda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ddc:	07db      	lsls	r3, r3, #31
 8002dde:	d405      	bmi.n	8002dec <_vfiprintf_r+0x2c>
 8002de0:	89bb      	ldrh	r3, [r7, #12]
 8002de2:	059b      	lsls	r3, r3, #22
 8002de4:	d402      	bmi.n	8002dec <_vfiprintf_r+0x2c>
 8002de6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002de8:	f7ff fec3 	bl	8002b72 <__retarget_lock_acquire_recursive>
 8002dec:	89bb      	ldrh	r3, [r7, #12]
 8002dee:	071b      	lsls	r3, r3, #28
 8002df0:	d502      	bpl.n	8002df8 <_vfiprintf_r+0x38>
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d113      	bne.n	8002e20 <_vfiprintf_r+0x60>
 8002df8:	0039      	movs	r1, r7
 8002dfa:	9803      	ldr	r0, [sp, #12]
 8002dfc:	f000 fb6e 	bl	80034dc <__swsetup_r>
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d00d      	beq.n	8002e20 <_vfiprintf_r+0x60>
 8002e04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e06:	07db      	lsls	r3, r3, #31
 8002e08:	d503      	bpl.n	8002e12 <_vfiprintf_r+0x52>
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	4240      	negs	r0, r0
 8002e0e:	b021      	add	sp, #132	@ 0x84
 8002e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e12:	89bb      	ldrh	r3, [r7, #12]
 8002e14:	059b      	lsls	r3, r3, #22
 8002e16:	d4f8      	bmi.n	8002e0a <_vfiprintf_r+0x4a>
 8002e18:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002e1a:	f7ff feab 	bl	8002b74 <__retarget_lock_release_recursive>
 8002e1e:	e7f4      	b.n	8002e0a <_vfiprintf_r+0x4a>
 8002e20:	2300      	movs	r3, #0
 8002e22:	ac08      	add	r4, sp, #32
 8002e24:	6163      	str	r3, [r4, #20]
 8002e26:	3320      	adds	r3, #32
 8002e28:	7663      	strb	r3, [r4, #25]
 8002e2a:	3310      	adds	r3, #16
 8002e2c:	76a3      	strb	r3, [r4, #26]
 8002e2e:	9607      	str	r6, [sp, #28]
 8002e30:	002e      	movs	r6, r5
 8002e32:	7833      	ldrb	r3, [r6, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <_vfiprintf_r+0x7c>
 8002e38:	2b25      	cmp	r3, #37	@ 0x25
 8002e3a:	d148      	bne.n	8002ece <_vfiprintf_r+0x10e>
 8002e3c:	1b73      	subs	r3, r6, r5
 8002e3e:	9305      	str	r3, [sp, #20]
 8002e40:	42ae      	cmp	r6, r5
 8002e42:	d00b      	beq.n	8002e5c <_vfiprintf_r+0x9c>
 8002e44:	002a      	movs	r2, r5
 8002e46:	0039      	movs	r1, r7
 8002e48:	9803      	ldr	r0, [sp, #12]
 8002e4a:	f7ff ffa6 	bl	8002d9a <__sfputs_r>
 8002e4e:	3001      	adds	r0, #1
 8002e50:	d100      	bne.n	8002e54 <_vfiprintf_r+0x94>
 8002e52:	e0ae      	b.n	8002fb2 <_vfiprintf_r+0x1f2>
 8002e54:	6963      	ldr	r3, [r4, #20]
 8002e56:	9a05      	ldr	r2, [sp, #20]
 8002e58:	189b      	adds	r3, r3, r2
 8002e5a:	6163      	str	r3, [r4, #20]
 8002e5c:	7833      	ldrb	r3, [r6, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d100      	bne.n	8002e64 <_vfiprintf_r+0xa4>
 8002e62:	e0a6      	b.n	8002fb2 <_vfiprintf_r+0x1f2>
 8002e64:	2201      	movs	r2, #1
 8002e66:	2300      	movs	r3, #0
 8002e68:	4252      	negs	r2, r2
 8002e6a:	6062      	str	r2, [r4, #4]
 8002e6c:	a904      	add	r1, sp, #16
 8002e6e:	3254      	adds	r2, #84	@ 0x54
 8002e70:	1852      	adds	r2, r2, r1
 8002e72:	1c75      	adds	r5, r6, #1
 8002e74:	6023      	str	r3, [r4, #0]
 8002e76:	60e3      	str	r3, [r4, #12]
 8002e78:	60a3      	str	r3, [r4, #8]
 8002e7a:	7013      	strb	r3, [r2, #0]
 8002e7c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002e7e:	4b59      	ldr	r3, [pc, #356]	@ (8002fe4 <_vfiprintf_r+0x224>)
 8002e80:	2205      	movs	r2, #5
 8002e82:	0018      	movs	r0, r3
 8002e84:	7829      	ldrb	r1, [r5, #0]
 8002e86:	9305      	str	r3, [sp, #20]
 8002e88:	f000 fb98 	bl	80035bc <memchr>
 8002e8c:	1c6e      	adds	r6, r5, #1
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	d11f      	bne.n	8002ed2 <_vfiprintf_r+0x112>
 8002e92:	6822      	ldr	r2, [r4, #0]
 8002e94:	06d3      	lsls	r3, r2, #27
 8002e96:	d504      	bpl.n	8002ea2 <_vfiprintf_r+0xe2>
 8002e98:	2353      	movs	r3, #83	@ 0x53
 8002e9a:	a904      	add	r1, sp, #16
 8002e9c:	185b      	adds	r3, r3, r1
 8002e9e:	2120      	movs	r1, #32
 8002ea0:	7019      	strb	r1, [r3, #0]
 8002ea2:	0713      	lsls	r3, r2, #28
 8002ea4:	d504      	bpl.n	8002eb0 <_vfiprintf_r+0xf0>
 8002ea6:	2353      	movs	r3, #83	@ 0x53
 8002ea8:	a904      	add	r1, sp, #16
 8002eaa:	185b      	adds	r3, r3, r1
 8002eac:	212b      	movs	r1, #43	@ 0x2b
 8002eae:	7019      	strb	r1, [r3, #0]
 8002eb0:	782b      	ldrb	r3, [r5, #0]
 8002eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eb4:	d016      	beq.n	8002ee4 <_vfiprintf_r+0x124>
 8002eb6:	002e      	movs	r6, r5
 8002eb8:	2100      	movs	r1, #0
 8002eba:	200a      	movs	r0, #10
 8002ebc:	68e3      	ldr	r3, [r4, #12]
 8002ebe:	7832      	ldrb	r2, [r6, #0]
 8002ec0:	1c75      	adds	r5, r6, #1
 8002ec2:	3a30      	subs	r2, #48	@ 0x30
 8002ec4:	2a09      	cmp	r2, #9
 8002ec6:	d950      	bls.n	8002f6a <_vfiprintf_r+0x1aa>
 8002ec8:	2900      	cmp	r1, #0
 8002eca:	d111      	bne.n	8002ef0 <_vfiprintf_r+0x130>
 8002ecc:	e017      	b.n	8002efe <_vfiprintf_r+0x13e>
 8002ece:	3601      	adds	r6, #1
 8002ed0:	e7af      	b.n	8002e32 <_vfiprintf_r+0x72>
 8002ed2:	9b05      	ldr	r3, [sp, #20]
 8002ed4:	6822      	ldr	r2, [r4, #0]
 8002ed6:	1ac0      	subs	r0, r0, r3
 8002ed8:	2301      	movs	r3, #1
 8002eda:	4083      	lsls	r3, r0
 8002edc:	4313      	orrs	r3, r2
 8002ede:	0035      	movs	r5, r6
 8002ee0:	6023      	str	r3, [r4, #0]
 8002ee2:	e7cc      	b.n	8002e7e <_vfiprintf_r+0xbe>
 8002ee4:	9b07      	ldr	r3, [sp, #28]
 8002ee6:	1d19      	adds	r1, r3, #4
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	9107      	str	r1, [sp, #28]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	db01      	blt.n	8002ef4 <_vfiprintf_r+0x134>
 8002ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002ef2:	e004      	b.n	8002efe <_vfiprintf_r+0x13e>
 8002ef4:	425b      	negs	r3, r3
 8002ef6:	60e3      	str	r3, [r4, #12]
 8002ef8:	2302      	movs	r3, #2
 8002efa:	4313      	orrs	r3, r2
 8002efc:	6023      	str	r3, [r4, #0]
 8002efe:	7833      	ldrb	r3, [r6, #0]
 8002f00:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f02:	d10c      	bne.n	8002f1e <_vfiprintf_r+0x15e>
 8002f04:	7873      	ldrb	r3, [r6, #1]
 8002f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f08:	d134      	bne.n	8002f74 <_vfiprintf_r+0x1b4>
 8002f0a:	9b07      	ldr	r3, [sp, #28]
 8002f0c:	3602      	adds	r6, #2
 8002f0e:	1d1a      	adds	r2, r3, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	9207      	str	r2, [sp, #28]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	da01      	bge.n	8002f1c <_vfiprintf_r+0x15c>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	425b      	negs	r3, r3
 8002f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f1e:	4d32      	ldr	r5, [pc, #200]	@ (8002fe8 <_vfiprintf_r+0x228>)
 8002f20:	2203      	movs	r2, #3
 8002f22:	0028      	movs	r0, r5
 8002f24:	7831      	ldrb	r1, [r6, #0]
 8002f26:	f000 fb49 	bl	80035bc <memchr>
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d006      	beq.n	8002f3c <_vfiprintf_r+0x17c>
 8002f2e:	2340      	movs	r3, #64	@ 0x40
 8002f30:	1b40      	subs	r0, r0, r5
 8002f32:	4083      	lsls	r3, r0
 8002f34:	6822      	ldr	r2, [r4, #0]
 8002f36:	3601      	adds	r6, #1
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	6023      	str	r3, [r4, #0]
 8002f3c:	7831      	ldrb	r1, [r6, #0]
 8002f3e:	2206      	movs	r2, #6
 8002f40:	482a      	ldr	r0, [pc, #168]	@ (8002fec <_vfiprintf_r+0x22c>)
 8002f42:	1c75      	adds	r5, r6, #1
 8002f44:	7621      	strb	r1, [r4, #24]
 8002f46:	f000 fb39 	bl	80035bc <memchr>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	d040      	beq.n	8002fd0 <_vfiprintf_r+0x210>
 8002f4e:	4b28      	ldr	r3, [pc, #160]	@ (8002ff0 <_vfiprintf_r+0x230>)
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d122      	bne.n	8002f9a <_vfiprintf_r+0x1da>
 8002f54:	2207      	movs	r2, #7
 8002f56:	9b07      	ldr	r3, [sp, #28]
 8002f58:	3307      	adds	r3, #7
 8002f5a:	4393      	bics	r3, r2
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	9307      	str	r3, [sp, #28]
 8002f60:	6963      	ldr	r3, [r4, #20]
 8002f62:	9a04      	ldr	r2, [sp, #16]
 8002f64:	189b      	adds	r3, r3, r2
 8002f66:	6163      	str	r3, [r4, #20]
 8002f68:	e762      	b.n	8002e30 <_vfiprintf_r+0x70>
 8002f6a:	4343      	muls	r3, r0
 8002f6c:	002e      	movs	r6, r5
 8002f6e:	2101      	movs	r1, #1
 8002f70:	189b      	adds	r3, r3, r2
 8002f72:	e7a4      	b.n	8002ebe <_vfiprintf_r+0xfe>
 8002f74:	2300      	movs	r3, #0
 8002f76:	200a      	movs	r0, #10
 8002f78:	0019      	movs	r1, r3
 8002f7a:	3601      	adds	r6, #1
 8002f7c:	6063      	str	r3, [r4, #4]
 8002f7e:	7832      	ldrb	r2, [r6, #0]
 8002f80:	1c75      	adds	r5, r6, #1
 8002f82:	3a30      	subs	r2, #48	@ 0x30
 8002f84:	2a09      	cmp	r2, #9
 8002f86:	d903      	bls.n	8002f90 <_vfiprintf_r+0x1d0>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0c8      	beq.n	8002f1e <_vfiprintf_r+0x15e>
 8002f8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8002f8e:	e7c6      	b.n	8002f1e <_vfiprintf_r+0x15e>
 8002f90:	4341      	muls	r1, r0
 8002f92:	002e      	movs	r6, r5
 8002f94:	2301      	movs	r3, #1
 8002f96:	1889      	adds	r1, r1, r2
 8002f98:	e7f1      	b.n	8002f7e <_vfiprintf_r+0x1be>
 8002f9a:	aa07      	add	r2, sp, #28
 8002f9c:	9200      	str	r2, [sp, #0]
 8002f9e:	0021      	movs	r1, r4
 8002fa0:	003a      	movs	r2, r7
 8002fa2:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <_vfiprintf_r+0x234>)
 8002fa4:	9803      	ldr	r0, [sp, #12]
 8002fa6:	e000      	b.n	8002faa <_vfiprintf_r+0x1ea>
 8002fa8:	bf00      	nop
 8002faa:	9004      	str	r0, [sp, #16]
 8002fac:	9b04      	ldr	r3, [sp, #16]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	d1d6      	bne.n	8002f60 <_vfiprintf_r+0x1a0>
 8002fb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fb4:	07db      	lsls	r3, r3, #31
 8002fb6:	d405      	bmi.n	8002fc4 <_vfiprintf_r+0x204>
 8002fb8:	89bb      	ldrh	r3, [r7, #12]
 8002fba:	059b      	lsls	r3, r3, #22
 8002fbc:	d402      	bmi.n	8002fc4 <_vfiprintf_r+0x204>
 8002fbe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002fc0:	f7ff fdd8 	bl	8002b74 <__retarget_lock_release_recursive>
 8002fc4:	89bb      	ldrh	r3, [r7, #12]
 8002fc6:	065b      	lsls	r3, r3, #25
 8002fc8:	d500      	bpl.n	8002fcc <_vfiprintf_r+0x20c>
 8002fca:	e71e      	b.n	8002e0a <_vfiprintf_r+0x4a>
 8002fcc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002fce:	e71e      	b.n	8002e0e <_vfiprintf_r+0x4e>
 8002fd0:	aa07      	add	r2, sp, #28
 8002fd2:	9200      	str	r2, [sp, #0]
 8002fd4:	0021      	movs	r1, r4
 8002fd6:	003a      	movs	r2, r7
 8002fd8:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <_vfiprintf_r+0x234>)
 8002fda:	9803      	ldr	r0, [sp, #12]
 8002fdc:	f000 f87c 	bl	80030d8 <_printf_i>
 8002fe0:	e7e3      	b.n	8002faa <_vfiprintf_r+0x1ea>
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	08003750 	.word	0x08003750
 8002fe8:	08003756 	.word	0x08003756
 8002fec:	0800375a 	.word	0x0800375a
 8002ff0:	00000000 	.word	0x00000000
 8002ff4:	08002d9b 	.word	0x08002d9b

08002ff8 <_printf_common>:
 8002ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ffa:	0016      	movs	r6, r2
 8002ffc:	9301      	str	r3, [sp, #4]
 8002ffe:	688a      	ldr	r2, [r1, #8]
 8003000:	690b      	ldr	r3, [r1, #16]
 8003002:	000c      	movs	r4, r1
 8003004:	9000      	str	r0, [sp, #0]
 8003006:	4293      	cmp	r3, r2
 8003008:	da00      	bge.n	800300c <_printf_common+0x14>
 800300a:	0013      	movs	r3, r2
 800300c:	0022      	movs	r2, r4
 800300e:	6033      	str	r3, [r6, #0]
 8003010:	3243      	adds	r2, #67	@ 0x43
 8003012:	7812      	ldrb	r2, [r2, #0]
 8003014:	2a00      	cmp	r2, #0
 8003016:	d001      	beq.n	800301c <_printf_common+0x24>
 8003018:	3301      	adds	r3, #1
 800301a:	6033      	str	r3, [r6, #0]
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	069b      	lsls	r3, r3, #26
 8003020:	d502      	bpl.n	8003028 <_printf_common+0x30>
 8003022:	6833      	ldr	r3, [r6, #0]
 8003024:	3302      	adds	r3, #2
 8003026:	6033      	str	r3, [r6, #0]
 8003028:	6822      	ldr	r2, [r4, #0]
 800302a:	2306      	movs	r3, #6
 800302c:	0015      	movs	r5, r2
 800302e:	401d      	ands	r5, r3
 8003030:	421a      	tst	r2, r3
 8003032:	d027      	beq.n	8003084 <_printf_common+0x8c>
 8003034:	0023      	movs	r3, r4
 8003036:	3343      	adds	r3, #67	@ 0x43
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	1e5a      	subs	r2, r3, #1
 800303c:	4193      	sbcs	r3, r2
 800303e:	6822      	ldr	r2, [r4, #0]
 8003040:	0692      	lsls	r2, r2, #26
 8003042:	d430      	bmi.n	80030a6 <_printf_common+0xae>
 8003044:	0022      	movs	r2, r4
 8003046:	9901      	ldr	r1, [sp, #4]
 8003048:	9800      	ldr	r0, [sp, #0]
 800304a:	9d08      	ldr	r5, [sp, #32]
 800304c:	3243      	adds	r2, #67	@ 0x43
 800304e:	47a8      	blx	r5
 8003050:	3001      	adds	r0, #1
 8003052:	d025      	beq.n	80030a0 <_printf_common+0xa8>
 8003054:	2206      	movs	r2, #6
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	2500      	movs	r5, #0
 800305a:	4013      	ands	r3, r2
 800305c:	2b04      	cmp	r3, #4
 800305e:	d105      	bne.n	800306c <_printf_common+0x74>
 8003060:	6833      	ldr	r3, [r6, #0]
 8003062:	68e5      	ldr	r5, [r4, #12]
 8003064:	1aed      	subs	r5, r5, r3
 8003066:	43eb      	mvns	r3, r5
 8003068:	17db      	asrs	r3, r3, #31
 800306a:	401d      	ands	r5, r3
 800306c:	68a3      	ldr	r3, [r4, #8]
 800306e:	6922      	ldr	r2, [r4, #16]
 8003070:	4293      	cmp	r3, r2
 8003072:	dd01      	ble.n	8003078 <_printf_common+0x80>
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	18ed      	adds	r5, r5, r3
 8003078:	2600      	movs	r6, #0
 800307a:	42b5      	cmp	r5, r6
 800307c:	d120      	bne.n	80030c0 <_printf_common+0xc8>
 800307e:	2000      	movs	r0, #0
 8003080:	e010      	b.n	80030a4 <_printf_common+0xac>
 8003082:	3501      	adds	r5, #1
 8003084:	68e3      	ldr	r3, [r4, #12]
 8003086:	6832      	ldr	r2, [r6, #0]
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	42ab      	cmp	r3, r5
 800308c:	ddd2      	ble.n	8003034 <_printf_common+0x3c>
 800308e:	0022      	movs	r2, r4
 8003090:	2301      	movs	r3, #1
 8003092:	9901      	ldr	r1, [sp, #4]
 8003094:	9800      	ldr	r0, [sp, #0]
 8003096:	9f08      	ldr	r7, [sp, #32]
 8003098:	3219      	adds	r2, #25
 800309a:	47b8      	blx	r7
 800309c:	3001      	adds	r0, #1
 800309e:	d1f0      	bne.n	8003082 <_printf_common+0x8a>
 80030a0:	2001      	movs	r0, #1
 80030a2:	4240      	negs	r0, r0
 80030a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030a6:	2030      	movs	r0, #48	@ 0x30
 80030a8:	18e1      	adds	r1, r4, r3
 80030aa:	3143      	adds	r1, #67	@ 0x43
 80030ac:	7008      	strb	r0, [r1, #0]
 80030ae:	0021      	movs	r1, r4
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	3145      	adds	r1, #69	@ 0x45
 80030b4:	7809      	ldrb	r1, [r1, #0]
 80030b6:	18a2      	adds	r2, r4, r2
 80030b8:	3243      	adds	r2, #67	@ 0x43
 80030ba:	3302      	adds	r3, #2
 80030bc:	7011      	strb	r1, [r2, #0]
 80030be:	e7c1      	b.n	8003044 <_printf_common+0x4c>
 80030c0:	0022      	movs	r2, r4
 80030c2:	2301      	movs	r3, #1
 80030c4:	9901      	ldr	r1, [sp, #4]
 80030c6:	9800      	ldr	r0, [sp, #0]
 80030c8:	9f08      	ldr	r7, [sp, #32]
 80030ca:	321a      	adds	r2, #26
 80030cc:	47b8      	blx	r7
 80030ce:	3001      	adds	r0, #1
 80030d0:	d0e6      	beq.n	80030a0 <_printf_common+0xa8>
 80030d2:	3601      	adds	r6, #1
 80030d4:	e7d1      	b.n	800307a <_printf_common+0x82>
	...

080030d8 <_printf_i>:
 80030d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030da:	b08b      	sub	sp, #44	@ 0x2c
 80030dc:	9206      	str	r2, [sp, #24]
 80030de:	000a      	movs	r2, r1
 80030e0:	3243      	adds	r2, #67	@ 0x43
 80030e2:	9307      	str	r3, [sp, #28]
 80030e4:	9005      	str	r0, [sp, #20]
 80030e6:	9203      	str	r2, [sp, #12]
 80030e8:	7e0a      	ldrb	r2, [r1, #24]
 80030ea:	000c      	movs	r4, r1
 80030ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80030ee:	2a78      	cmp	r2, #120	@ 0x78
 80030f0:	d809      	bhi.n	8003106 <_printf_i+0x2e>
 80030f2:	2a62      	cmp	r2, #98	@ 0x62
 80030f4:	d80b      	bhi.n	800310e <_printf_i+0x36>
 80030f6:	2a00      	cmp	r2, #0
 80030f8:	d100      	bne.n	80030fc <_printf_i+0x24>
 80030fa:	e0bc      	b.n	8003276 <_printf_i+0x19e>
 80030fc:	497b      	ldr	r1, [pc, #492]	@ (80032ec <_printf_i+0x214>)
 80030fe:	9104      	str	r1, [sp, #16]
 8003100:	2a58      	cmp	r2, #88	@ 0x58
 8003102:	d100      	bne.n	8003106 <_printf_i+0x2e>
 8003104:	e090      	b.n	8003228 <_printf_i+0x150>
 8003106:	0025      	movs	r5, r4
 8003108:	3542      	adds	r5, #66	@ 0x42
 800310a:	702a      	strb	r2, [r5, #0]
 800310c:	e022      	b.n	8003154 <_printf_i+0x7c>
 800310e:	0010      	movs	r0, r2
 8003110:	3863      	subs	r0, #99	@ 0x63
 8003112:	2815      	cmp	r0, #21
 8003114:	d8f7      	bhi.n	8003106 <_printf_i+0x2e>
 8003116:	f7fc fff7 	bl	8000108 <__gnu_thumb1_case_shi>
 800311a:	0016      	.short	0x0016
 800311c:	fff6001f 	.word	0xfff6001f
 8003120:	fff6fff6 	.word	0xfff6fff6
 8003124:	001ffff6 	.word	0x001ffff6
 8003128:	fff6fff6 	.word	0xfff6fff6
 800312c:	fff6fff6 	.word	0xfff6fff6
 8003130:	003600a1 	.word	0x003600a1
 8003134:	fff60080 	.word	0xfff60080
 8003138:	00b2fff6 	.word	0x00b2fff6
 800313c:	0036fff6 	.word	0x0036fff6
 8003140:	fff6fff6 	.word	0xfff6fff6
 8003144:	0084      	.short	0x0084
 8003146:	0025      	movs	r5, r4
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	3542      	adds	r5, #66	@ 0x42
 800314c:	1d11      	adds	r1, r2, #4
 800314e:	6019      	str	r1, [r3, #0]
 8003150:	6813      	ldr	r3, [r2, #0]
 8003152:	702b      	strb	r3, [r5, #0]
 8003154:	2301      	movs	r3, #1
 8003156:	e0a0      	b.n	800329a <_printf_i+0x1c2>
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	6809      	ldr	r1, [r1, #0]
 800315c:	1d02      	adds	r2, r0, #4
 800315e:	060d      	lsls	r5, r1, #24
 8003160:	d50b      	bpl.n	800317a <_printf_i+0xa2>
 8003162:	6806      	ldr	r6, [r0, #0]
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	2e00      	cmp	r6, #0
 8003168:	da03      	bge.n	8003172 <_printf_i+0x9a>
 800316a:	232d      	movs	r3, #45	@ 0x2d
 800316c:	9a03      	ldr	r2, [sp, #12]
 800316e:	4276      	negs	r6, r6
 8003170:	7013      	strb	r3, [r2, #0]
 8003172:	4b5e      	ldr	r3, [pc, #376]	@ (80032ec <_printf_i+0x214>)
 8003174:	270a      	movs	r7, #10
 8003176:	9304      	str	r3, [sp, #16]
 8003178:	e018      	b.n	80031ac <_printf_i+0xd4>
 800317a:	6806      	ldr	r6, [r0, #0]
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	0649      	lsls	r1, r1, #25
 8003180:	d5f1      	bpl.n	8003166 <_printf_i+0x8e>
 8003182:	b236      	sxth	r6, r6
 8003184:	e7ef      	b.n	8003166 <_printf_i+0x8e>
 8003186:	6808      	ldr	r0, [r1, #0]
 8003188:	6819      	ldr	r1, [r3, #0]
 800318a:	c940      	ldmia	r1!, {r6}
 800318c:	0605      	lsls	r5, r0, #24
 800318e:	d402      	bmi.n	8003196 <_printf_i+0xbe>
 8003190:	0640      	lsls	r0, r0, #25
 8003192:	d500      	bpl.n	8003196 <_printf_i+0xbe>
 8003194:	b2b6      	uxth	r6, r6
 8003196:	6019      	str	r1, [r3, #0]
 8003198:	4b54      	ldr	r3, [pc, #336]	@ (80032ec <_printf_i+0x214>)
 800319a:	270a      	movs	r7, #10
 800319c:	9304      	str	r3, [sp, #16]
 800319e:	2a6f      	cmp	r2, #111	@ 0x6f
 80031a0:	d100      	bne.n	80031a4 <_printf_i+0xcc>
 80031a2:	3f02      	subs	r7, #2
 80031a4:	0023      	movs	r3, r4
 80031a6:	2200      	movs	r2, #0
 80031a8:	3343      	adds	r3, #67	@ 0x43
 80031aa:	701a      	strb	r2, [r3, #0]
 80031ac:	6863      	ldr	r3, [r4, #4]
 80031ae:	60a3      	str	r3, [r4, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	db03      	blt.n	80031bc <_printf_i+0xe4>
 80031b4:	2104      	movs	r1, #4
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	438a      	bics	r2, r1
 80031ba:	6022      	str	r2, [r4, #0]
 80031bc:	2e00      	cmp	r6, #0
 80031be:	d102      	bne.n	80031c6 <_printf_i+0xee>
 80031c0:	9d03      	ldr	r5, [sp, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <_printf_i+0x108>
 80031c6:	9d03      	ldr	r5, [sp, #12]
 80031c8:	0030      	movs	r0, r6
 80031ca:	0039      	movs	r1, r7
 80031cc:	f7fd f82c 	bl	8000228 <__aeabi_uidivmod>
 80031d0:	9b04      	ldr	r3, [sp, #16]
 80031d2:	3d01      	subs	r5, #1
 80031d4:	5c5b      	ldrb	r3, [r3, r1]
 80031d6:	702b      	strb	r3, [r5, #0]
 80031d8:	0033      	movs	r3, r6
 80031da:	0006      	movs	r6, r0
 80031dc:	429f      	cmp	r7, r3
 80031de:	d9f3      	bls.n	80031c8 <_printf_i+0xf0>
 80031e0:	2f08      	cmp	r7, #8
 80031e2:	d109      	bne.n	80031f8 <_printf_i+0x120>
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	07db      	lsls	r3, r3, #31
 80031e8:	d506      	bpl.n	80031f8 <_printf_i+0x120>
 80031ea:	6862      	ldr	r2, [r4, #4]
 80031ec:	6923      	ldr	r3, [r4, #16]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	dc02      	bgt.n	80031f8 <_printf_i+0x120>
 80031f2:	2330      	movs	r3, #48	@ 0x30
 80031f4:	3d01      	subs	r5, #1
 80031f6:	702b      	strb	r3, [r5, #0]
 80031f8:	9b03      	ldr	r3, [sp, #12]
 80031fa:	1b5b      	subs	r3, r3, r5
 80031fc:	6123      	str	r3, [r4, #16]
 80031fe:	9b07      	ldr	r3, [sp, #28]
 8003200:	0021      	movs	r1, r4
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	9805      	ldr	r0, [sp, #20]
 8003206:	9b06      	ldr	r3, [sp, #24]
 8003208:	aa09      	add	r2, sp, #36	@ 0x24
 800320a:	f7ff fef5 	bl	8002ff8 <_printf_common>
 800320e:	3001      	adds	r0, #1
 8003210:	d148      	bne.n	80032a4 <_printf_i+0x1cc>
 8003212:	2001      	movs	r0, #1
 8003214:	4240      	negs	r0, r0
 8003216:	b00b      	add	sp, #44	@ 0x2c
 8003218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800321a:	2220      	movs	r2, #32
 800321c:	6809      	ldr	r1, [r1, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	6022      	str	r2, [r4, #0]
 8003222:	2278      	movs	r2, #120	@ 0x78
 8003224:	4932      	ldr	r1, [pc, #200]	@ (80032f0 <_printf_i+0x218>)
 8003226:	9104      	str	r1, [sp, #16]
 8003228:	0021      	movs	r1, r4
 800322a:	3145      	adds	r1, #69	@ 0x45
 800322c:	700a      	strb	r2, [r1, #0]
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	6822      	ldr	r2, [r4, #0]
 8003232:	c940      	ldmia	r1!, {r6}
 8003234:	0610      	lsls	r0, r2, #24
 8003236:	d402      	bmi.n	800323e <_printf_i+0x166>
 8003238:	0650      	lsls	r0, r2, #25
 800323a:	d500      	bpl.n	800323e <_printf_i+0x166>
 800323c:	b2b6      	uxth	r6, r6
 800323e:	6019      	str	r1, [r3, #0]
 8003240:	07d3      	lsls	r3, r2, #31
 8003242:	d502      	bpl.n	800324a <_printf_i+0x172>
 8003244:	2320      	movs	r3, #32
 8003246:	4313      	orrs	r3, r2
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	2e00      	cmp	r6, #0
 800324c:	d001      	beq.n	8003252 <_printf_i+0x17a>
 800324e:	2710      	movs	r7, #16
 8003250:	e7a8      	b.n	80031a4 <_printf_i+0xcc>
 8003252:	2220      	movs	r2, #32
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	4393      	bics	r3, r2
 8003258:	6023      	str	r3, [r4, #0]
 800325a:	e7f8      	b.n	800324e <_printf_i+0x176>
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	680d      	ldr	r5, [r1, #0]
 8003260:	1d10      	adds	r0, r2, #4
 8003262:	6949      	ldr	r1, [r1, #20]
 8003264:	6018      	str	r0, [r3, #0]
 8003266:	6813      	ldr	r3, [r2, #0]
 8003268:	062e      	lsls	r6, r5, #24
 800326a:	d501      	bpl.n	8003270 <_printf_i+0x198>
 800326c:	6019      	str	r1, [r3, #0]
 800326e:	e002      	b.n	8003276 <_printf_i+0x19e>
 8003270:	066d      	lsls	r5, r5, #25
 8003272:	d5fb      	bpl.n	800326c <_printf_i+0x194>
 8003274:	8019      	strh	r1, [r3, #0]
 8003276:	2300      	movs	r3, #0
 8003278:	9d03      	ldr	r5, [sp, #12]
 800327a:	6123      	str	r3, [r4, #16]
 800327c:	e7bf      	b.n	80031fe <_printf_i+0x126>
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	1d11      	adds	r1, r2, #4
 8003282:	6019      	str	r1, [r3, #0]
 8003284:	6815      	ldr	r5, [r2, #0]
 8003286:	2100      	movs	r1, #0
 8003288:	0028      	movs	r0, r5
 800328a:	6862      	ldr	r2, [r4, #4]
 800328c:	f000 f996 	bl	80035bc <memchr>
 8003290:	2800      	cmp	r0, #0
 8003292:	d001      	beq.n	8003298 <_printf_i+0x1c0>
 8003294:	1b40      	subs	r0, r0, r5
 8003296:	6060      	str	r0, [r4, #4]
 8003298:	6863      	ldr	r3, [r4, #4]
 800329a:	6123      	str	r3, [r4, #16]
 800329c:	2300      	movs	r3, #0
 800329e:	9a03      	ldr	r2, [sp, #12]
 80032a0:	7013      	strb	r3, [r2, #0]
 80032a2:	e7ac      	b.n	80031fe <_printf_i+0x126>
 80032a4:	002a      	movs	r2, r5
 80032a6:	6923      	ldr	r3, [r4, #16]
 80032a8:	9906      	ldr	r1, [sp, #24]
 80032aa:	9805      	ldr	r0, [sp, #20]
 80032ac:	9d07      	ldr	r5, [sp, #28]
 80032ae:	47a8      	blx	r5
 80032b0:	3001      	adds	r0, #1
 80032b2:	d0ae      	beq.n	8003212 <_printf_i+0x13a>
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	079b      	lsls	r3, r3, #30
 80032b8:	d415      	bmi.n	80032e6 <_printf_i+0x20e>
 80032ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032bc:	68e0      	ldr	r0, [r4, #12]
 80032be:	4298      	cmp	r0, r3
 80032c0:	daa9      	bge.n	8003216 <_printf_i+0x13e>
 80032c2:	0018      	movs	r0, r3
 80032c4:	e7a7      	b.n	8003216 <_printf_i+0x13e>
 80032c6:	0022      	movs	r2, r4
 80032c8:	2301      	movs	r3, #1
 80032ca:	9906      	ldr	r1, [sp, #24]
 80032cc:	9805      	ldr	r0, [sp, #20]
 80032ce:	9e07      	ldr	r6, [sp, #28]
 80032d0:	3219      	adds	r2, #25
 80032d2:	47b0      	blx	r6
 80032d4:	3001      	adds	r0, #1
 80032d6:	d09c      	beq.n	8003212 <_printf_i+0x13a>
 80032d8:	3501      	adds	r5, #1
 80032da:	68e3      	ldr	r3, [r4, #12]
 80032dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	42ab      	cmp	r3, r5
 80032e2:	dcf0      	bgt.n	80032c6 <_printf_i+0x1ee>
 80032e4:	e7e9      	b.n	80032ba <_printf_i+0x1e2>
 80032e6:	2500      	movs	r5, #0
 80032e8:	e7f7      	b.n	80032da <_printf_i+0x202>
 80032ea:	46c0      	nop			@ (mov r8, r8)
 80032ec:	08003761 	.word	0x08003761
 80032f0:	08003772 	.word	0x08003772

080032f4 <__sflush_r>:
 80032f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032f6:	220c      	movs	r2, #12
 80032f8:	5e8b      	ldrsh	r3, [r1, r2]
 80032fa:	0005      	movs	r5, r0
 80032fc:	000c      	movs	r4, r1
 80032fe:	071a      	lsls	r2, r3, #28
 8003300:	d456      	bmi.n	80033b0 <__sflush_r+0xbc>
 8003302:	684a      	ldr	r2, [r1, #4]
 8003304:	2a00      	cmp	r2, #0
 8003306:	dc02      	bgt.n	800330e <__sflush_r+0x1a>
 8003308:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800330a:	2a00      	cmp	r2, #0
 800330c:	dd4e      	ble.n	80033ac <__sflush_r+0xb8>
 800330e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003310:	2f00      	cmp	r7, #0
 8003312:	d04b      	beq.n	80033ac <__sflush_r+0xb8>
 8003314:	2200      	movs	r2, #0
 8003316:	2080      	movs	r0, #128	@ 0x80
 8003318:	682e      	ldr	r6, [r5, #0]
 800331a:	602a      	str	r2, [r5, #0]
 800331c:	001a      	movs	r2, r3
 800331e:	0140      	lsls	r0, r0, #5
 8003320:	6a21      	ldr	r1, [r4, #32]
 8003322:	4002      	ands	r2, r0
 8003324:	4203      	tst	r3, r0
 8003326:	d033      	beq.n	8003390 <__sflush_r+0x9c>
 8003328:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800332a:	89a3      	ldrh	r3, [r4, #12]
 800332c:	075b      	lsls	r3, r3, #29
 800332e:	d506      	bpl.n	800333e <__sflush_r+0x4a>
 8003330:	6863      	ldr	r3, [r4, #4]
 8003332:	1ad2      	subs	r2, r2, r3
 8003334:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <__sflush_r+0x4a>
 800333a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800333c:	1ad2      	subs	r2, r2, r3
 800333e:	2300      	movs	r3, #0
 8003340:	0028      	movs	r0, r5
 8003342:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003344:	6a21      	ldr	r1, [r4, #32]
 8003346:	47b8      	blx	r7
 8003348:	89a2      	ldrh	r2, [r4, #12]
 800334a:	1c43      	adds	r3, r0, #1
 800334c:	d106      	bne.n	800335c <__sflush_r+0x68>
 800334e:	6829      	ldr	r1, [r5, #0]
 8003350:	291d      	cmp	r1, #29
 8003352:	d846      	bhi.n	80033e2 <__sflush_r+0xee>
 8003354:	4b29      	ldr	r3, [pc, #164]	@ (80033fc <__sflush_r+0x108>)
 8003356:	410b      	asrs	r3, r1
 8003358:	07db      	lsls	r3, r3, #31
 800335a:	d442      	bmi.n	80033e2 <__sflush_r+0xee>
 800335c:	2300      	movs	r3, #0
 800335e:	6063      	str	r3, [r4, #4]
 8003360:	6923      	ldr	r3, [r4, #16]
 8003362:	6023      	str	r3, [r4, #0]
 8003364:	04d2      	lsls	r2, r2, #19
 8003366:	d505      	bpl.n	8003374 <__sflush_r+0x80>
 8003368:	1c43      	adds	r3, r0, #1
 800336a:	d102      	bne.n	8003372 <__sflush_r+0x7e>
 800336c:	682b      	ldr	r3, [r5, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d100      	bne.n	8003374 <__sflush_r+0x80>
 8003372:	6560      	str	r0, [r4, #84]	@ 0x54
 8003374:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003376:	602e      	str	r6, [r5, #0]
 8003378:	2900      	cmp	r1, #0
 800337a:	d017      	beq.n	80033ac <__sflush_r+0xb8>
 800337c:	0023      	movs	r3, r4
 800337e:	3344      	adds	r3, #68	@ 0x44
 8003380:	4299      	cmp	r1, r3
 8003382:	d002      	beq.n	800338a <__sflush_r+0x96>
 8003384:	0028      	movs	r0, r5
 8003386:	f7ff fbf7 	bl	8002b78 <_free_r>
 800338a:	2300      	movs	r3, #0
 800338c:	6363      	str	r3, [r4, #52]	@ 0x34
 800338e:	e00d      	b.n	80033ac <__sflush_r+0xb8>
 8003390:	2301      	movs	r3, #1
 8003392:	0028      	movs	r0, r5
 8003394:	47b8      	blx	r7
 8003396:	0002      	movs	r2, r0
 8003398:	1c43      	adds	r3, r0, #1
 800339a:	d1c6      	bne.n	800332a <__sflush_r+0x36>
 800339c:	682b      	ldr	r3, [r5, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0c3      	beq.n	800332a <__sflush_r+0x36>
 80033a2:	2b1d      	cmp	r3, #29
 80033a4:	d001      	beq.n	80033aa <__sflush_r+0xb6>
 80033a6:	2b16      	cmp	r3, #22
 80033a8:	d11a      	bne.n	80033e0 <__sflush_r+0xec>
 80033aa:	602e      	str	r6, [r5, #0]
 80033ac:	2000      	movs	r0, #0
 80033ae:	e01e      	b.n	80033ee <__sflush_r+0xfa>
 80033b0:	690e      	ldr	r6, [r1, #16]
 80033b2:	2e00      	cmp	r6, #0
 80033b4:	d0fa      	beq.n	80033ac <__sflush_r+0xb8>
 80033b6:	680f      	ldr	r7, [r1, #0]
 80033b8:	600e      	str	r6, [r1, #0]
 80033ba:	1bba      	subs	r2, r7, r6
 80033bc:	9201      	str	r2, [sp, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	079b      	lsls	r3, r3, #30
 80033c2:	d100      	bne.n	80033c6 <__sflush_r+0xd2>
 80033c4:	694a      	ldr	r2, [r1, #20]
 80033c6:	60a2      	str	r2, [r4, #8]
 80033c8:	9b01      	ldr	r3, [sp, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	ddee      	ble.n	80033ac <__sflush_r+0xb8>
 80033ce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80033d0:	0032      	movs	r2, r6
 80033d2:	001f      	movs	r7, r3
 80033d4:	0028      	movs	r0, r5
 80033d6:	9b01      	ldr	r3, [sp, #4]
 80033d8:	6a21      	ldr	r1, [r4, #32]
 80033da:	47b8      	blx	r7
 80033dc:	2800      	cmp	r0, #0
 80033de:	dc07      	bgt.n	80033f0 <__sflush_r+0xfc>
 80033e0:	89a2      	ldrh	r2, [r4, #12]
 80033e2:	2340      	movs	r3, #64	@ 0x40
 80033e4:	2001      	movs	r0, #1
 80033e6:	4313      	orrs	r3, r2
 80033e8:	b21b      	sxth	r3, r3
 80033ea:	81a3      	strh	r3, [r4, #12]
 80033ec:	4240      	negs	r0, r0
 80033ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033f0:	9b01      	ldr	r3, [sp, #4]
 80033f2:	1836      	adds	r6, r6, r0
 80033f4:	1a1b      	subs	r3, r3, r0
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	e7e6      	b.n	80033c8 <__sflush_r+0xd4>
 80033fa:	46c0      	nop			@ (mov r8, r8)
 80033fc:	dfbffffe 	.word	0xdfbffffe

08003400 <_fflush_r>:
 8003400:	690b      	ldr	r3, [r1, #16]
 8003402:	b570      	push	{r4, r5, r6, lr}
 8003404:	0005      	movs	r5, r0
 8003406:	000c      	movs	r4, r1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d102      	bne.n	8003412 <_fflush_r+0x12>
 800340c:	2500      	movs	r5, #0
 800340e:	0028      	movs	r0, r5
 8003410:	bd70      	pop	{r4, r5, r6, pc}
 8003412:	2800      	cmp	r0, #0
 8003414:	d004      	beq.n	8003420 <_fflush_r+0x20>
 8003416:	6a03      	ldr	r3, [r0, #32]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <_fflush_r+0x20>
 800341c:	f7ff fa98 	bl	8002950 <__sinit>
 8003420:	220c      	movs	r2, #12
 8003422:	5ea3      	ldrsh	r3, [r4, r2]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f1      	beq.n	800340c <_fflush_r+0xc>
 8003428:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800342a:	07d2      	lsls	r2, r2, #31
 800342c:	d404      	bmi.n	8003438 <_fflush_r+0x38>
 800342e:	059b      	lsls	r3, r3, #22
 8003430:	d402      	bmi.n	8003438 <_fflush_r+0x38>
 8003432:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003434:	f7ff fb9d 	bl	8002b72 <__retarget_lock_acquire_recursive>
 8003438:	0028      	movs	r0, r5
 800343a:	0021      	movs	r1, r4
 800343c:	f7ff ff5a 	bl	80032f4 <__sflush_r>
 8003440:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003442:	0005      	movs	r5, r0
 8003444:	07db      	lsls	r3, r3, #31
 8003446:	d4e2      	bmi.n	800340e <_fflush_r+0xe>
 8003448:	89a3      	ldrh	r3, [r4, #12]
 800344a:	059b      	lsls	r3, r3, #22
 800344c:	d4df      	bmi.n	800340e <_fflush_r+0xe>
 800344e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003450:	f7ff fb90 	bl	8002b74 <__retarget_lock_release_recursive>
 8003454:	e7db      	b.n	800340e <_fflush_r+0xe>

08003456 <__swbuf_r>:
 8003456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003458:	0006      	movs	r6, r0
 800345a:	000d      	movs	r5, r1
 800345c:	0014      	movs	r4, r2
 800345e:	2800      	cmp	r0, #0
 8003460:	d004      	beq.n	800346c <__swbuf_r+0x16>
 8003462:	6a03      	ldr	r3, [r0, #32]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <__swbuf_r+0x16>
 8003468:	f7ff fa72 	bl	8002950 <__sinit>
 800346c:	69a3      	ldr	r3, [r4, #24]
 800346e:	60a3      	str	r3, [r4, #8]
 8003470:	89a3      	ldrh	r3, [r4, #12]
 8003472:	071b      	lsls	r3, r3, #28
 8003474:	d502      	bpl.n	800347c <__swbuf_r+0x26>
 8003476:	6923      	ldr	r3, [r4, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <__swbuf_r+0x3a>
 800347c:	0021      	movs	r1, r4
 800347e:	0030      	movs	r0, r6
 8003480:	f000 f82c 	bl	80034dc <__swsetup_r>
 8003484:	2800      	cmp	r0, #0
 8003486:	d003      	beq.n	8003490 <__swbuf_r+0x3a>
 8003488:	2501      	movs	r5, #1
 800348a:	426d      	negs	r5, r5
 800348c:	0028      	movs	r0, r5
 800348e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003490:	6923      	ldr	r3, [r4, #16]
 8003492:	6820      	ldr	r0, [r4, #0]
 8003494:	b2ef      	uxtb	r7, r5
 8003496:	1ac0      	subs	r0, r0, r3
 8003498:	6963      	ldr	r3, [r4, #20]
 800349a:	b2ed      	uxtb	r5, r5
 800349c:	4283      	cmp	r3, r0
 800349e:	dc05      	bgt.n	80034ac <__swbuf_r+0x56>
 80034a0:	0021      	movs	r1, r4
 80034a2:	0030      	movs	r0, r6
 80034a4:	f7ff ffac 	bl	8003400 <_fflush_r>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	d1ed      	bne.n	8003488 <__swbuf_r+0x32>
 80034ac:	68a3      	ldr	r3, [r4, #8]
 80034ae:	3001      	adds	r0, #1
 80034b0:	3b01      	subs	r3, #1
 80034b2:	60a3      	str	r3, [r4, #8]
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	6022      	str	r2, [r4, #0]
 80034ba:	701f      	strb	r7, [r3, #0]
 80034bc:	6963      	ldr	r3, [r4, #20]
 80034be:	4283      	cmp	r3, r0
 80034c0:	d004      	beq.n	80034cc <__swbuf_r+0x76>
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	07db      	lsls	r3, r3, #31
 80034c6:	d5e1      	bpl.n	800348c <__swbuf_r+0x36>
 80034c8:	2d0a      	cmp	r5, #10
 80034ca:	d1df      	bne.n	800348c <__swbuf_r+0x36>
 80034cc:	0021      	movs	r1, r4
 80034ce:	0030      	movs	r0, r6
 80034d0:	f7ff ff96 	bl	8003400 <_fflush_r>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d0d9      	beq.n	800348c <__swbuf_r+0x36>
 80034d8:	e7d6      	b.n	8003488 <__swbuf_r+0x32>
	...

080034dc <__swsetup_r>:
 80034dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003594 <__swsetup_r+0xb8>)
 80034de:	b570      	push	{r4, r5, r6, lr}
 80034e0:	0005      	movs	r5, r0
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	000c      	movs	r4, r1
 80034e6:	2800      	cmp	r0, #0
 80034e8:	d004      	beq.n	80034f4 <__swsetup_r+0x18>
 80034ea:	6a03      	ldr	r3, [r0, #32]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <__swsetup_r+0x18>
 80034f0:	f7ff fa2e 	bl	8002950 <__sinit>
 80034f4:	230c      	movs	r3, #12
 80034f6:	5ee2      	ldrsh	r2, [r4, r3]
 80034f8:	0713      	lsls	r3, r2, #28
 80034fa:	d423      	bmi.n	8003544 <__swsetup_r+0x68>
 80034fc:	06d3      	lsls	r3, r2, #27
 80034fe:	d407      	bmi.n	8003510 <__swsetup_r+0x34>
 8003500:	2309      	movs	r3, #9
 8003502:	602b      	str	r3, [r5, #0]
 8003504:	2340      	movs	r3, #64	@ 0x40
 8003506:	2001      	movs	r0, #1
 8003508:	4313      	orrs	r3, r2
 800350a:	81a3      	strh	r3, [r4, #12]
 800350c:	4240      	negs	r0, r0
 800350e:	e03a      	b.n	8003586 <__swsetup_r+0xaa>
 8003510:	0752      	lsls	r2, r2, #29
 8003512:	d513      	bpl.n	800353c <__swsetup_r+0x60>
 8003514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003516:	2900      	cmp	r1, #0
 8003518:	d008      	beq.n	800352c <__swsetup_r+0x50>
 800351a:	0023      	movs	r3, r4
 800351c:	3344      	adds	r3, #68	@ 0x44
 800351e:	4299      	cmp	r1, r3
 8003520:	d002      	beq.n	8003528 <__swsetup_r+0x4c>
 8003522:	0028      	movs	r0, r5
 8003524:	f7ff fb28 	bl	8002b78 <_free_r>
 8003528:	2300      	movs	r3, #0
 800352a:	6363      	str	r3, [r4, #52]	@ 0x34
 800352c:	2224      	movs	r2, #36	@ 0x24
 800352e:	89a3      	ldrh	r3, [r4, #12]
 8003530:	4393      	bics	r3, r2
 8003532:	81a3      	strh	r3, [r4, #12]
 8003534:	2300      	movs	r3, #0
 8003536:	6063      	str	r3, [r4, #4]
 8003538:	6923      	ldr	r3, [r4, #16]
 800353a:	6023      	str	r3, [r4, #0]
 800353c:	2308      	movs	r3, #8
 800353e:	89a2      	ldrh	r2, [r4, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	81a3      	strh	r3, [r4, #12]
 8003544:	6923      	ldr	r3, [r4, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10b      	bne.n	8003562 <__swsetup_r+0x86>
 800354a:	21a0      	movs	r1, #160	@ 0xa0
 800354c:	2280      	movs	r2, #128	@ 0x80
 800354e:	89a3      	ldrh	r3, [r4, #12]
 8003550:	0089      	lsls	r1, r1, #2
 8003552:	0092      	lsls	r2, r2, #2
 8003554:	400b      	ands	r3, r1
 8003556:	4293      	cmp	r3, r2
 8003558:	d003      	beq.n	8003562 <__swsetup_r+0x86>
 800355a:	0021      	movs	r1, r4
 800355c:	0028      	movs	r0, r5
 800355e:	f000 f863 	bl	8003628 <__smakebuf_r>
 8003562:	230c      	movs	r3, #12
 8003564:	5ee2      	ldrsh	r2, [r4, r3]
 8003566:	2101      	movs	r1, #1
 8003568:	0013      	movs	r3, r2
 800356a:	400b      	ands	r3, r1
 800356c:	420a      	tst	r2, r1
 800356e:	d00b      	beq.n	8003588 <__swsetup_r+0xac>
 8003570:	2300      	movs	r3, #0
 8003572:	60a3      	str	r3, [r4, #8]
 8003574:	6963      	ldr	r3, [r4, #20]
 8003576:	425b      	negs	r3, r3
 8003578:	61a3      	str	r3, [r4, #24]
 800357a:	2000      	movs	r0, #0
 800357c:	6923      	ldr	r3, [r4, #16]
 800357e:	4283      	cmp	r3, r0
 8003580:	d101      	bne.n	8003586 <__swsetup_r+0xaa>
 8003582:	0613      	lsls	r3, r2, #24
 8003584:	d4be      	bmi.n	8003504 <__swsetup_r+0x28>
 8003586:	bd70      	pop	{r4, r5, r6, pc}
 8003588:	0791      	lsls	r1, r2, #30
 800358a:	d400      	bmi.n	800358e <__swsetup_r+0xb2>
 800358c:	6963      	ldr	r3, [r4, #20]
 800358e:	60a3      	str	r3, [r4, #8]
 8003590:	e7f3      	b.n	800357a <__swsetup_r+0x9e>
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	20000018 	.word	0x20000018

08003598 <_sbrk_r>:
 8003598:	2300      	movs	r3, #0
 800359a:	b570      	push	{r4, r5, r6, lr}
 800359c:	4d06      	ldr	r5, [pc, #24]	@ (80035b8 <_sbrk_r+0x20>)
 800359e:	0004      	movs	r4, r0
 80035a0:	0008      	movs	r0, r1
 80035a2:	602b      	str	r3, [r5, #0]
 80035a4:	f7fd f96a 	bl	800087c <_sbrk>
 80035a8:	1c43      	adds	r3, r0, #1
 80035aa:	d103      	bne.n	80035b4 <_sbrk_r+0x1c>
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d000      	beq.n	80035b4 <_sbrk_r+0x1c>
 80035b2:	6023      	str	r3, [r4, #0]
 80035b4:	bd70      	pop	{r4, r5, r6, pc}
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	200002a4 	.word	0x200002a4

080035bc <memchr>:
 80035bc:	b2c9      	uxtb	r1, r1
 80035be:	1882      	adds	r2, r0, r2
 80035c0:	4290      	cmp	r0, r2
 80035c2:	d101      	bne.n	80035c8 <memchr+0xc>
 80035c4:	2000      	movs	r0, #0
 80035c6:	4770      	bx	lr
 80035c8:	7803      	ldrb	r3, [r0, #0]
 80035ca:	428b      	cmp	r3, r1
 80035cc:	d0fb      	beq.n	80035c6 <memchr+0xa>
 80035ce:	3001      	adds	r0, #1
 80035d0:	e7f6      	b.n	80035c0 <memchr+0x4>
	...

080035d4 <__swhatbuf_r>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	000e      	movs	r6, r1
 80035d8:	001d      	movs	r5, r3
 80035da:	230e      	movs	r3, #14
 80035dc:	5ec9      	ldrsh	r1, [r1, r3]
 80035de:	0014      	movs	r4, r2
 80035e0:	b096      	sub	sp, #88	@ 0x58
 80035e2:	2900      	cmp	r1, #0
 80035e4:	da0c      	bge.n	8003600 <__swhatbuf_r+0x2c>
 80035e6:	89b2      	ldrh	r2, [r6, #12]
 80035e8:	2380      	movs	r3, #128	@ 0x80
 80035ea:	0011      	movs	r1, r2
 80035ec:	4019      	ands	r1, r3
 80035ee:	421a      	tst	r2, r3
 80035f0:	d114      	bne.n	800361c <__swhatbuf_r+0x48>
 80035f2:	2380      	movs	r3, #128	@ 0x80
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	2000      	movs	r0, #0
 80035f8:	6029      	str	r1, [r5, #0]
 80035fa:	6023      	str	r3, [r4, #0]
 80035fc:	b016      	add	sp, #88	@ 0x58
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	466a      	mov	r2, sp
 8003602:	f000 f853 	bl	80036ac <_fstat_r>
 8003606:	2800      	cmp	r0, #0
 8003608:	dbed      	blt.n	80035e6 <__swhatbuf_r+0x12>
 800360a:	23f0      	movs	r3, #240	@ 0xf0
 800360c:	9901      	ldr	r1, [sp, #4]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	4019      	ands	r1, r3
 8003612:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <__swhatbuf_r+0x50>)
 8003614:	18c9      	adds	r1, r1, r3
 8003616:	424b      	negs	r3, r1
 8003618:	4159      	adcs	r1, r3
 800361a:	e7ea      	b.n	80035f2 <__swhatbuf_r+0x1e>
 800361c:	2100      	movs	r1, #0
 800361e:	2340      	movs	r3, #64	@ 0x40
 8003620:	e7e9      	b.n	80035f6 <__swhatbuf_r+0x22>
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	ffffe000 	.word	0xffffe000

08003628 <__smakebuf_r>:
 8003628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362a:	2602      	movs	r6, #2
 800362c:	898b      	ldrh	r3, [r1, #12]
 800362e:	0005      	movs	r5, r0
 8003630:	000c      	movs	r4, r1
 8003632:	b085      	sub	sp, #20
 8003634:	4233      	tst	r3, r6
 8003636:	d007      	beq.n	8003648 <__smakebuf_r+0x20>
 8003638:	0023      	movs	r3, r4
 800363a:	3347      	adds	r3, #71	@ 0x47
 800363c:	6023      	str	r3, [r4, #0]
 800363e:	6123      	str	r3, [r4, #16]
 8003640:	2301      	movs	r3, #1
 8003642:	6163      	str	r3, [r4, #20]
 8003644:	b005      	add	sp, #20
 8003646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003648:	ab03      	add	r3, sp, #12
 800364a:	aa02      	add	r2, sp, #8
 800364c:	f7ff ffc2 	bl	80035d4 <__swhatbuf_r>
 8003650:	9f02      	ldr	r7, [sp, #8]
 8003652:	9001      	str	r0, [sp, #4]
 8003654:	0039      	movs	r1, r7
 8003656:	0028      	movs	r0, r5
 8003658:	f7ff fafa 	bl	8002c50 <_malloc_r>
 800365c:	2800      	cmp	r0, #0
 800365e:	d108      	bne.n	8003672 <__smakebuf_r+0x4a>
 8003660:	220c      	movs	r2, #12
 8003662:	5ea3      	ldrsh	r3, [r4, r2]
 8003664:	059a      	lsls	r2, r3, #22
 8003666:	d4ed      	bmi.n	8003644 <__smakebuf_r+0x1c>
 8003668:	2203      	movs	r2, #3
 800366a:	4393      	bics	r3, r2
 800366c:	431e      	orrs	r6, r3
 800366e:	81a6      	strh	r6, [r4, #12]
 8003670:	e7e2      	b.n	8003638 <__smakebuf_r+0x10>
 8003672:	2380      	movs	r3, #128	@ 0x80
 8003674:	89a2      	ldrh	r2, [r4, #12]
 8003676:	6020      	str	r0, [r4, #0]
 8003678:	4313      	orrs	r3, r2
 800367a:	81a3      	strh	r3, [r4, #12]
 800367c:	9b03      	ldr	r3, [sp, #12]
 800367e:	6120      	str	r0, [r4, #16]
 8003680:	6167      	str	r7, [r4, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00c      	beq.n	80036a0 <__smakebuf_r+0x78>
 8003686:	0028      	movs	r0, r5
 8003688:	230e      	movs	r3, #14
 800368a:	5ee1      	ldrsh	r1, [r4, r3]
 800368c:	f000 f820 	bl	80036d0 <_isatty_r>
 8003690:	2800      	cmp	r0, #0
 8003692:	d005      	beq.n	80036a0 <__smakebuf_r+0x78>
 8003694:	2303      	movs	r3, #3
 8003696:	89a2      	ldrh	r2, [r4, #12]
 8003698:	439a      	bics	r2, r3
 800369a:	3b02      	subs	r3, #2
 800369c:	4313      	orrs	r3, r2
 800369e:	81a3      	strh	r3, [r4, #12]
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	9a01      	ldr	r2, [sp, #4]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	81a3      	strh	r3, [r4, #12]
 80036a8:	e7cc      	b.n	8003644 <__smakebuf_r+0x1c>
	...

080036ac <_fstat_r>:
 80036ac:	2300      	movs	r3, #0
 80036ae:	b570      	push	{r4, r5, r6, lr}
 80036b0:	4d06      	ldr	r5, [pc, #24]	@ (80036cc <_fstat_r+0x20>)
 80036b2:	0004      	movs	r4, r0
 80036b4:	0008      	movs	r0, r1
 80036b6:	0011      	movs	r1, r2
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	f7fd f8bd 	bl	8000838 <_fstat>
 80036be:	1c43      	adds	r3, r0, #1
 80036c0:	d103      	bne.n	80036ca <_fstat_r+0x1e>
 80036c2:	682b      	ldr	r3, [r5, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d000      	beq.n	80036ca <_fstat_r+0x1e>
 80036c8:	6023      	str	r3, [r4, #0]
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
 80036cc:	200002a4 	.word	0x200002a4

080036d0 <_isatty_r>:
 80036d0:	2300      	movs	r3, #0
 80036d2:	b570      	push	{r4, r5, r6, lr}
 80036d4:	4d06      	ldr	r5, [pc, #24]	@ (80036f0 <_isatty_r+0x20>)
 80036d6:	0004      	movs	r4, r0
 80036d8:	0008      	movs	r0, r1
 80036da:	602b      	str	r3, [r5, #0]
 80036dc:	f7fd f8ba 	bl	8000854 <_isatty>
 80036e0:	1c43      	adds	r3, r0, #1
 80036e2:	d103      	bne.n	80036ec <_isatty_r+0x1c>
 80036e4:	682b      	ldr	r3, [r5, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d000      	beq.n	80036ec <_isatty_r+0x1c>
 80036ea:	6023      	str	r3, [r4, #0]
 80036ec:	bd70      	pop	{r4, r5, r6, pc}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	200002a4 	.word	0x200002a4

080036f4 <_init>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fa:	bc08      	pop	{r3}
 80036fc:	469e      	mov	lr, r3
 80036fe:	4770      	bx	lr

08003700 <_fini>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr
