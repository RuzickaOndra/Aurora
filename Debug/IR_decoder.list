
IR_decoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051fc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  080052bc  080052bc  000062bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e0  080054e0  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  080054e0  080054e0  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054e0  080054e0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e0  080054e0  000064e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054e4  080054e4  000064e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080054e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000068  08005550  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08005550  00007510  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e111  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d2  00000000  00000000  000151a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00017578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a76  00000000  00000000  000182d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001199b  00000000  00000000  00018d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109a0  00000000  00000000  0002a6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006779d  00000000  00000000  0003b089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003970  00000000  00000000  000a286c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000a61dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080052a4 	.word	0x080052a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080052a4 	.word	0x080052a4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_lmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46ce      	mov	lr, r9
 8000238:	4699      	mov	r9, r3
 800023a:	0c03      	lsrs	r3, r0, #16
 800023c:	469c      	mov	ip, r3
 800023e:	0413      	lsls	r3, r2, #16
 8000240:	4647      	mov	r7, r8
 8000242:	0c1b      	lsrs	r3, r3, #16
 8000244:	001d      	movs	r5, r3
 8000246:	000e      	movs	r6, r1
 8000248:	4661      	mov	r1, ip
 800024a:	0404      	lsls	r4, r0, #16
 800024c:	0c24      	lsrs	r4, r4, #16
 800024e:	b580      	push	{r7, lr}
 8000250:	0007      	movs	r7, r0
 8000252:	0c10      	lsrs	r0, r2, #16
 8000254:	434b      	muls	r3, r1
 8000256:	4365      	muls	r5, r4
 8000258:	4341      	muls	r1, r0
 800025a:	4360      	muls	r0, r4
 800025c:	0c2c      	lsrs	r4, r5, #16
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	1824      	adds	r4, r4, r0
 8000262:	468c      	mov	ip, r1
 8000264:	42a3      	cmp	r3, r4
 8000266:	d903      	bls.n	8000270 <__aeabi_lmul+0x3c>
 8000268:	2380      	movs	r3, #128	@ 0x80
 800026a:	025b      	lsls	r3, r3, #9
 800026c:	4698      	mov	r8, r3
 800026e:	44c4      	add	ip, r8
 8000270:	4649      	mov	r1, r9
 8000272:	4379      	muls	r1, r7
 8000274:	4356      	muls	r6, r2
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	042d      	lsls	r5, r5, #16
 800027a:	0c2d      	lsrs	r5, r5, #16
 800027c:	1989      	adds	r1, r1, r6
 800027e:	4463      	add	r3, ip
 8000280:	0424      	lsls	r4, r4, #16
 8000282:	1960      	adds	r0, r4, r5
 8000284:	18c9      	adds	r1, r1, r3
 8000286:	bcc0      	pop	{r6, r7}
 8000288:	46b9      	mov	r9, r7
 800028a:	46b0      	mov	r8, r6
 800028c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028e:	46c0      	nop			@ (mov r8, r8)

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f001 fa59 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f833 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f9e9 	bl	8000674 <MX_GPIO_Init>
  MX_DMA_Init();
 80002a2:	f000 f9c9 	bl	8000638 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80002a6:	f000 f997 	bl	80005d8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80002aa:	f000 f88b 	bl	80003c4 <MX_TIM3_Init>
  MX_TIM15_Init();
 80002ae:	f000 f8df 	bl	8000470 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3); // IR Receiver timer start
 80002b2:	4b12      	ldr	r3, [pc, #72]	@ (80002fc <main+0x6c>)
 80002b4:	0018      	movs	r0, r3
 80002b6:	f002 fc8f 	bl	8002bd8 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim3, 0); // IR Receiver timer cnt set
 80002ba:	4b10      	ldr	r3, [pc, #64]	@ (80002fc <main+0x6c>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2200      	movs	r2, #0
 80002c0:	625a      	str	r2, [r3, #36]	@ 0x24

  visInit();
 80002c2:	f000 feab 	bl	800101c <visInit>

  uint32_t tm = 0; // Timestamp variable
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
  uint8_t i = 0;
 80002ca:	1cfb      	adds	r3, r7, #3
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		visHandle();
 80002d0:	f000 feee 	bl	80010b0 <visHandle>

		if (tm < HAL_GetTick()) {
 80002d4:	f001 fa94 	bl	8001800 <HAL_GetTick>
 80002d8:	0002      	movs	r2, r0
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4293      	cmp	r3, r2
 80002de:	d2f7      	bcs.n	80002d0 <main+0x40>
			tm = HAL_GetTick() + 100;
 80002e0:	f001 fa8e 	bl	8001800 <HAL_GetTick>
 80002e4:	0003      	movs	r3, r0
 80002e6:	3364      	adds	r3, #100	@ 0x64
 80002e8:	607b      	str	r3, [r7, #4]

			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //LED
 80002ea:	2380      	movs	r3, #128	@ 0x80
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	4a04      	ldr	r2, [pc, #16]	@ (8000300 <main+0x70>)
 80002f0:	0019      	movs	r1, r3
 80002f2:	0010      	movs	r0, r2
 80002f4:	f001 febd 	bl	8002072 <HAL_GPIO_TogglePin>
		visHandle();
 80002f8:	e7ea      	b.n	80002d0 <main+0x40>
 80002fa:	46c0      	nop			@ (mov r8, r8)
 80002fc:	20000084 	.word	0x20000084
 8000300:	48000800 	.word	0x48000800

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b095      	sub	sp, #84	@ 0x54
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	2420      	movs	r4, #32
 800030c:	193b      	adds	r3, r7, r4
 800030e:	0018      	movs	r0, r3
 8000310:	2330      	movs	r3, #48	@ 0x30
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f004 f8fd 	bl	8004514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031a:	2310      	movs	r3, #16
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	0018      	movs	r0, r3
 8000320:	2310      	movs	r3, #16
 8000322:	001a      	movs	r2, r3
 8000324:	2100      	movs	r1, #0
 8000326:	f004 f8f5 	bl	8004514 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032a:	003b      	movs	r3, r7
 800032c:	0018      	movs	r0, r3
 800032e:	2310      	movs	r3, #16
 8000330:	001a      	movs	r2, r3
 8000332:	2100      	movs	r1, #0
 8000334:	f004 f8ee 	bl	8004514 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000338:	0021      	movs	r1, r4
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2201      	movs	r2, #1
 800033e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2201      	movs	r2, #1
 8000344:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2202      	movs	r2, #2
 800034a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2280      	movs	r2, #128	@ 0x80
 8000350:	0252      	lsls	r2, r2, #9
 8000352:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2280      	movs	r2, #128	@ 0x80
 8000358:	0352      	lsls	r2, r2, #13
 800035a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2200      	movs	r2, #0
 8000360:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	187b      	adds	r3, r7, r1
 8000364:	0018      	movs	r0, r3
 8000366:	f001 febb 	bl	80020e0 <HAL_RCC_OscConfig>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800036e:	f000 fab7 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	2110      	movs	r1, #16
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2207      	movs	r2, #7
 8000378:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2202      	movs	r2, #2
 800037e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2101      	movs	r1, #1
 8000390:	0018      	movs	r0, r3
 8000392:	f002 f9bf 	bl	8002714 <HAL_RCC_ClockConfig>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800039a:	f000 faa1 	bl	80008e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800039e:	003b      	movs	r3, r7
 80003a0:	2201      	movs	r2, #1
 80003a2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003a4:	003b      	movs	r3, r7
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003aa:	003b      	movs	r3, r7
 80003ac:	0018      	movs	r0, r3
 80003ae:	f002 faf5 	bl	800299c <HAL_RCCEx_PeriphCLKConfig>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003b6:	f000 fa93 	bl	80008e0 <Error_Handler>
  }
}
 80003ba:	46c0      	nop			@ (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	b015      	add	sp, #84	@ 0x54
 80003c0:	bd90      	pop	{r4, r7, pc}
	...

080003c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ca:	2308      	movs	r3, #8
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	0018      	movs	r0, r3
 80003d0:	2310      	movs	r3, #16
 80003d2:	001a      	movs	r2, r3
 80003d4:	2100      	movs	r1, #0
 80003d6:	f004 f89d 	bl	8004514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003da:	003b      	movs	r3, r7
 80003dc:	0018      	movs	r0, r3
 80003de:	2308      	movs	r3, #8
 80003e0:	001a      	movs	r2, r3
 80003e2:	2100      	movs	r1, #0
 80003e4:	f004 f896 	bl	8004514 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000464 <MX_TIM3_Init+0xa0>)
 80003ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000468 <MX_TIM3_Init+0xa4>)
 80003ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 80003ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000464 <MX_TIM3_Init+0xa0>)
 80003f0:	2230      	movs	r2, #48	@ 0x30
 80003f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <MX_TIM3_Init+0xa0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <MX_TIM3_Init+0xa0>)
 80003fc:	4a1b      	ldr	r2, [pc, #108]	@ (800046c <MX_TIM3_Init+0xa8>)
 80003fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000400:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <MX_TIM3_Init+0xa0>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000406:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <MX_TIM3_Init+0xa0>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800040c:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <MX_TIM3_Init+0xa0>)
 800040e:	0018      	movs	r0, r3
 8000410:	f002 fb92 	bl	8002b38 <HAL_TIM_Base_Init>
 8000414:	1e03      	subs	r3, r0, #0
 8000416:	d001      	beq.n	800041c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000418:	f000 fa62 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800041c:	2108      	movs	r1, #8
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2280      	movs	r2, #128	@ 0x80
 8000422:	0152      	lsls	r2, r2, #5
 8000424:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000426:	187a      	adds	r2, r7, r1
 8000428:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <MX_TIM3_Init+0xa0>)
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f002 fde7 	bl	8003000 <HAL_TIM_ConfigClockSource>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000436:	f000 fa53 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800043a:	003b      	movs	r3, r7
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000440:	003b      	movs	r3, r7
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000446:	003a      	movs	r2, r7
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <MX_TIM3_Init+0xa0>)
 800044a:	0011      	movs	r1, r2
 800044c:	0018      	movs	r0, r3
 800044e:	f003 f9e9 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000456:	f000 fa43 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b006      	add	sp, #24
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	20000084 	.word	0x20000084
 8000468:	40000400 	.word	0x40000400
 800046c:	0000ffff 	.word	0x0000ffff

08000470 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b096      	sub	sp, #88	@ 0x58
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */
//
  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000476:	2348      	movs	r3, #72	@ 0x48
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	0018      	movs	r0, r3
 800047c:	2310      	movs	r3, #16
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f004 f847 	bl	8004514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000486:	2340      	movs	r3, #64	@ 0x40
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	0018      	movs	r0, r3
 800048c:	2308      	movs	r3, #8
 800048e:	001a      	movs	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	f004 f83f 	bl	8004514 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000496:	2324      	movs	r3, #36	@ 0x24
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	0018      	movs	r0, r3
 800049c:	231c      	movs	r3, #28
 800049e:	001a      	movs	r2, r3
 80004a0:	2100      	movs	r1, #0
 80004a2:	f004 f837 	bl	8004514 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	0018      	movs	r0, r3
 80004aa:	2320      	movs	r3, #32
 80004ac:	001a      	movs	r2, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	f004 f830 	bl	8004514 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */
//
  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80004b4:	4b46      	ldr	r3, [pc, #280]	@ (80005d0 <MX_TIM15_Init+0x160>)
 80004b6:	4a47      	ldr	r2, [pc, #284]	@ (80005d4 <MX_TIM15_Init+0x164>)
 80004b8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80004ba:	4b45      	ldr	r3, [pc, #276]	@ (80005d0 <MX_TIM15_Init+0x160>)
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c0:	4b43      	ldr	r3, [pc, #268]	@ (80005d0 <MX_TIM15_Init+0x160>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 59;
 80004c6:	4b42      	ldr	r3, [pc, #264]	@ (80005d0 <MX_TIM15_Init+0x160>)
 80004c8:	223b      	movs	r2, #59	@ 0x3b
 80004ca:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004cc:	4b40      	ldr	r3, [pc, #256]	@ (80005d0 <MX_TIM15_Init+0x160>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80004d2:	4b3f      	ldr	r3, [pc, #252]	@ (80005d0 <MX_TIM15_Init+0x160>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004d8:	4b3d      	ldr	r3, [pc, #244]	@ (80005d0 <MX_TIM15_Init+0x160>)
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80004de:	4b3c      	ldr	r3, [pc, #240]	@ (80005d0 <MX_TIM15_Init+0x160>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f002 fb29 	bl	8002b38 <HAL_TIM_Base_Init>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80004ea:	f000 f9f9 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ee:	2148      	movs	r1, #72	@ 0x48
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2280      	movs	r2, #128	@ 0x80
 80004f4:	0152      	lsls	r2, r2, #5
 80004f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80004f8:	187a      	adds	r2, r7, r1
 80004fa:	4b35      	ldr	r3, [pc, #212]	@ (80005d0 <MX_TIM15_Init+0x160>)
 80004fc:	0011      	movs	r1, r2
 80004fe:	0018      	movs	r0, r3
 8000500:	f002 fd7e 	bl	8003000 <HAL_TIM_ConfigClockSource>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000508:	f000 f9ea 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800050c:	4b30      	ldr	r3, [pc, #192]	@ (80005d0 <MX_TIM15_Init+0x160>)
 800050e:	0018      	movs	r0, r3
 8000510:	f002 fba6 	bl	8002c60 <HAL_TIM_PWM_Init>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000518:	f000 f9e2 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051c:	2140      	movs	r1, #64	@ 0x40
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800052a:	187a      	adds	r2, r7, r1
 800052c:	4b28      	ldr	r3, [pc, #160]	@ (80005d0 <MX_TIM15_Init+0x160>)
 800052e:	0011      	movs	r1, r2
 8000530:	0018      	movs	r0, r3
 8000532:	f003 f977 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800053a:	f000 f9d1 	bl	80008e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800053e:	2124      	movs	r1, #36	@ 0x24
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2260      	movs	r2, #96	@ 0x60
 8000544:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 30;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	221e      	movs	r2, #30
 800054a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800056a:	1879      	adds	r1, r7, r1
 800056c:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <MX_TIM15_Init+0x160>)
 800056e:	2200      	movs	r2, #0
 8000570:	0018      	movs	r0, r3
 8000572:	f002 fc7f 	bl	8002e74 <HAL_TIM_PWM_ConfigChannel>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800057a:	f000 f9b1 	bl	80008e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2280      	movs	r2, #128	@ 0x80
 80005a0:	0192      	lsls	r2, r2, #6
 80005a2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80005aa:	1d3a      	adds	r2, r7, #4
 80005ac:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <MX_TIM15_Init+0x160>)
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f003 f98f 	bl	80038d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM15_Init+0x14e>
  {
    Error_Handler();
 80005ba:	f000 f991 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
//
  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80005be:	4b04      	ldr	r3, [pc, #16]	@ (80005d0 <MX_TIM15_Init+0x160>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fa29 	bl	8000a18 <HAL_TIM_MspPostInit>

}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b016      	add	sp, #88	@ 0x58
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	200000cc 	.word	0x200000cc
 80005d4:	40014000 	.word	0x40014000

080005d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005dc:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <MX_USART1_UART_Init+0x58>)
 80005de:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <MX_USART1_UART_Init+0x5c>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005e2:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <MX_USART1_UART_Init+0x58>)
 80005e4:	22e1      	movs	r2, #225	@ 0xe1
 80005e6:	0252      	lsls	r2, r2, #9
 80005e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <MX_USART1_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <MX_USART1_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <MX_USART1_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <MX_USART1_UART_Init+0x58>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <MX_USART1_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <MX_USART1_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <MX_USART1_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <MX_USART1_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800061a:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <MX_USART1_UART_Init+0x58>)
 800061c:	0018      	movs	r0, r3
 800061e:	f003 f9b7 	bl	8003990 <HAL_UART_Init>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000626:	f000 f95b 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000158 	.word	0x20000158
 8000634:	40013800 	.word	0x40013800

08000638 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_DMA_Init+0x38>)
 8000640:	695a      	ldr	r2, [r3, #20]
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <MX_DMA_Init+0x38>)
 8000644:	2101      	movs	r1, #1
 8000646:	430a      	orrs	r2, r1
 8000648:	615a      	str	r2, [r3, #20]
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_DMA_Init+0x38>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	2201      	movs	r2, #1
 8000650:	4013      	ands	r3, r2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	200b      	movs	r0, #11
 800065c:	f001 f986 	bl	800196c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000660:	200b      	movs	r0, #11
 8000662:	f001 f998 	bl	8001996 <HAL_NVIC_EnableIRQ>

}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b002      	add	sp, #8
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	40021000 	.word	0x40021000

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b08b      	sub	sp, #44	@ 0x2c
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	2414      	movs	r4, #20
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	2314      	movs	r3, #20
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f003 ff45 	bl	8004514 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b43      	ldr	r3, [pc, #268]	@ (8000798 <MX_GPIO_Init+0x124>)
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	4b42      	ldr	r3, [pc, #264]	@ (8000798 <MX_GPIO_Init+0x124>)
 8000690:	2180      	movs	r1, #128	@ 0x80
 8000692:	0309      	lsls	r1, r1, #12
 8000694:	430a      	orrs	r2, r1
 8000696:	615a      	str	r2, [r3, #20]
 8000698:	4b3f      	ldr	r3, [pc, #252]	@ (8000798 <MX_GPIO_Init+0x124>)
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	2380      	movs	r3, #128	@ 0x80
 800069e:	031b      	lsls	r3, r3, #12
 80006a0:	4013      	ands	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000798 <MX_GPIO_Init+0x124>)
 80006a8:	695a      	ldr	r2, [r3, #20]
 80006aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000798 <MX_GPIO_Init+0x124>)
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	03c9      	lsls	r1, r1, #15
 80006b0:	430a      	orrs	r2, r1
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	4b38      	ldr	r3, [pc, #224]	@ (8000798 <MX_GPIO_Init+0x124>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	03db      	lsls	r3, r3, #15
 80006bc:	4013      	ands	r3, r2
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b35      	ldr	r3, [pc, #212]	@ (8000798 <MX_GPIO_Init+0x124>)
 80006c4:	695a      	ldr	r2, [r3, #20]
 80006c6:	4b34      	ldr	r3, [pc, #208]	@ (8000798 <MX_GPIO_Init+0x124>)
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	0289      	lsls	r1, r1, #10
 80006cc:	430a      	orrs	r2, r1
 80006ce:	615a      	str	r2, [r3, #20]
 80006d0:	4b31      	ldr	r3, [pc, #196]	@ (8000798 <MX_GPIO_Init+0x124>)
 80006d2:	695a      	ldr	r2, [r3, #20]
 80006d4:	2380      	movs	r3, #128	@ 0x80
 80006d6:	029b      	lsls	r3, r3, #10
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	4b2e      	ldr	r3, [pc, #184]	@ (8000798 <MX_GPIO_Init+0x124>)
 80006e0:	695a      	ldr	r2, [r3, #20]
 80006e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <MX_GPIO_Init+0x124>)
 80006e4:	2180      	movs	r1, #128	@ 0x80
 80006e6:	02c9      	lsls	r1, r1, #11
 80006e8:	430a      	orrs	r2, r1
 80006ea:	615a      	str	r2, [r3, #20]
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <MX_GPIO_Init+0x124>)
 80006ee:	695a      	ldr	r2, [r3, #20]
 80006f0:	2380      	movs	r3, #128	@ 0x80
 80006f2:	02db      	lsls	r3, r3, #11
 80006f4:	4013      	ands	r3, r2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006fa:	2380      	movs	r3, #128	@ 0x80
 80006fc:	019b      	lsls	r3, r3, #6
 80006fe:	4827      	ldr	r0, [pc, #156]	@ (800079c <MX_GPIO_Init+0x128>)
 8000700:	2200      	movs	r2, #0
 8000702:	0019      	movs	r1, r3
 8000704:	f001 fc98 	bl	8002038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2280      	movs	r2, #128	@ 0x80
 800070c:	0192      	lsls	r2, r2, #6
 800070e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2201      	movs	r2, #1
 8000714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000722:	193b      	adds	r3, r7, r4
 8000724:	4a1d      	ldr	r2, [pc, #116]	@ (800079c <MX_GPIO_Init+0x128>)
 8000726:	0019      	movs	r1, r3
 8000728:	0010      	movs	r0, r2
 800072a:	f001 fb15 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2240      	movs	r2, #64	@ 0x40
 8000732:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2284      	movs	r2, #132	@ 0x84
 8000738:	0392      	lsls	r2, r2, #14
 800073a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	193b      	adds	r3, r7, r4
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	193a      	adds	r2, r7, r4
 8000744:	2390      	movs	r3, #144	@ 0x90
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fb04 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000750:	0021      	movs	r1, r4
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2280      	movs	r2, #128	@ 0x80
 8000756:	0192      	lsls	r2, r2, #6
 8000758:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2202      	movs	r2, #2
 800075e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2202      	movs	r2, #2
 8000770:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	187b      	adds	r3, r7, r1
 8000774:	4a0a      	ldr	r2, [pc, #40]	@ (80007a0 <MX_GPIO_Init+0x12c>)
 8000776:	0019      	movs	r1, r3
 8000778:	0010      	movs	r0, r2
 800077a:	f001 faed 	bl	8001d58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	2007      	movs	r0, #7
 8000784:	f001 f8f2 	bl	800196c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000788:	2007      	movs	r0, #7
 800078a:	f001 f904 	bl	8001996 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b00b      	add	sp, #44	@ 0x2c
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	40021000 	.word	0x40021000
 800079c:	48000800 	.word	0x48000800
 80007a0:	48000400 	.word	0x48000400

080007a4 <_write>:

/* USER CODE BEGIN 4 */

/* UART PRINTF MAP */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	2301      	movs	r3, #1
 80007b6:	425b      	negs	r3, r3
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	4804      	ldr	r0, [pc, #16]	@ (80007cc <_write+0x28>)
 80007bc:	f003 f93c 	bl	8003a38 <HAL_UART_Transmit>
	return len;
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	0018      	movs	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b004      	add	sp, #16
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	20000158 	.word	0x20000158

080007d0 <HAL_GPIO_EXTI_Callback>:



/* IR TIMER AND DECODING */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	0002      	movs	r2, r0
 80007d8:	1dbb      	adds	r3, r7, #6
 80007da:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_6)
 80007dc:	1dbb      	adds	r3, r7, #6
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	2b40      	cmp	r3, #64	@ 0x40
 80007e2:	d168      	bne.n	80008b6 <HAL_GPIO_EXTI_Callback+0xe6>
  {
    if (__HAL_TIM_GET_COUNTER(&htim3) > 8000)
 80007e4:	4b36      	ldr	r3, [pc, #216]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007ea:	23fa      	movs	r3, #250	@ 0xfa
 80007ec:	015b      	lsls	r3, r3, #5
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d906      	bls.n	8000800 <HAL_GPIO_EXTI_Callback+0x30>
    {
      tempCode = 0;
 80007f2:	4b34      	ldr	r3, [pc, #208]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0xf4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
      bitIndex = 0;
 80007f8:	4b33      	ldr	r3, [pc, #204]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0xf8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	e031      	b.n	8000864 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim3) > 1700)
 8000800:	4b2f      	ldr	r3, [pc, #188]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000806:	4a31      	ldr	r2, [pc, #196]	@ (80008cc <HAL_GPIO_EXTI_Callback+0xfc>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d912      	bls.n	8000832 <HAL_GPIO_EXTI_Callback+0x62>
    {
      tempCode |= (1UL << (31-bitIndex));   // write 1
 800080c:	4b2e      	ldr	r3, [pc, #184]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0xf8>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	001a      	movs	r2, r3
 8000812:	2380      	movs	r3, #128	@ 0x80
 8000814:	061b      	lsls	r3, r3, #24
 8000816:	40d3      	lsrs	r3, r2
 8000818:	001a      	movs	r2, r3
 800081a:	4b2a      	ldr	r3, [pc, #168]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0xf4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	431a      	orrs	r2, r3
 8000820:	4b28      	ldr	r3, [pc, #160]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000822:	601a      	str	r2, [r3, #0]
      bitIndex++;
 8000824:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0xf8>)
 800082e:	701a      	strb	r2, [r3, #0]
 8000830:	e018      	b.n	8000864 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim3) > 1000)
 8000832:	4b23      	ldr	r3, [pc, #140]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000838:	23fa      	movs	r3, #250	@ 0xfa
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	429a      	cmp	r2, r3
 800083e:	d911      	bls.n	8000864 <HAL_GPIO_EXTI_Callback+0x94>
    {
      tempCode &= ~(1UL << (31-bitIndex));  // write 0
 8000840:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	001a      	movs	r2, r3
 8000846:	2380      	movs	r3, #128	@ 0x80
 8000848:	061b      	lsls	r3, r3, #24
 800084a:	40d3      	lsrs	r3, r2
 800084c:	43da      	mvns	r2, r3
 800084e:	4b1d      	ldr	r3, [pc, #116]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	401a      	ands	r2, r3
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000856:	601a      	str	r2, [r3, #0]
      bitIndex++;
 8000858:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0xf8>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000862:	701a      	strb	r2, [r3, #0]
    }
    if(bitIndex == 32)
 8000864:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b20      	cmp	r3, #32
 800086a:	d120      	bne.n	80008ae <HAL_GPIO_EXTI_Callback+0xde>
    {
      cmdli = ~tempCode; // Logical inverted last 8 bits
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0xf4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	43db      	mvns	r3, r3
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x100>)
 8000878:	701a      	strb	r2, [r3, #0]
      cmd = tempCode >> 8; // Second last 8 bits
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0xf4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x104>)
 8000884:	701a      	strb	r2, [r3, #0]
      if(cmdli == cmd) // Check for errors
 8000886:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x100>)
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x104>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d10a      	bne.n	80008a8 <HAL_GPIO_EXTI_Callback+0xd8>
      {
        code = tempCode; // If no bit errors
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x108>)
 8000898:	601a      	str	r2, [r3, #0]
        // Do your main work HERE
        printf("Data: %X\r\n",code);
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x108>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x10c>)
 80008a0:	0011      	movs	r1, r2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f003 fdda 	bl	800445c <iprintf>
      }
      bitIndex = 0;
 80008a8:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0xf8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
    }
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 80008ae:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0xf0>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	20000084 	.word	0x20000084
 80008c4:	200001e0 	.word	0x200001e0
 80008c8:	200001e4 	.word	0x200001e4
 80008cc:	000006a4 	.word	0x000006a4
 80008d0:	200001e6 	.word	0x200001e6
 80008d4:	200001e5 	.word	0x200001e5
 80008d8:	200001e8 	.word	0x200001e8
 80008dc:	080052bc 	.word	0x080052bc

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	e7fd      	b.n	80008e8 <Error_Handler+0x8>

080008ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <HAL_MspInit+0x44>)
 80008f4:	699a      	ldr	r2, [r3, #24]
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <HAL_MspInit+0x44>)
 80008f8:	2101      	movs	r1, #1
 80008fa:	430a      	orrs	r2, r1
 80008fc:	619a      	str	r2, [r3, #24]
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <HAL_MspInit+0x44>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	2201      	movs	r2, #1
 8000904:	4013      	ands	r3, r2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <HAL_MspInit+0x44>)
 800090c:	69da      	ldr	r2, [r3, #28]
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <HAL_MspInit+0x44>)
 8000910:	2180      	movs	r1, #128	@ 0x80
 8000912:	0549      	lsls	r1, r1, #21
 8000914:	430a      	orrs	r2, r1
 8000916:	61da      	str	r2, [r3, #28]
 8000918:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <HAL_MspInit+0x44>)
 800091a:	69da      	ldr	r2, [r3, #28]
 800091c:	2380      	movs	r3, #128	@ 0x80
 800091e:	055b      	lsls	r3, r3, #21
 8000920:	4013      	ands	r3, r2
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a30      	ldr	r2, [pc, #192]	@ (8000a04 <HAL_TIM_Base_MspInit+0xd0>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d10c      	bne.n	8000960 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000946:	4b30      	ldr	r3, [pc, #192]	@ (8000a08 <HAL_TIM_Base_MspInit+0xd4>)
 8000948:	69da      	ldr	r2, [r3, #28]
 800094a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a08 <HAL_TIM_Base_MspInit+0xd4>)
 800094c:	2102      	movs	r1, #2
 800094e:	430a      	orrs	r2, r1
 8000950:	61da      	str	r2, [r3, #28]
 8000952:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <HAL_TIM_Base_MspInit+0xd4>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	2202      	movs	r2, #2
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800095e:	e04c      	b.n	80009fa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM15)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a29      	ldr	r2, [pc, #164]	@ (8000a0c <HAL_TIM_Base_MspInit+0xd8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d147      	bne.n	80009fa <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800096a:	4b27      	ldr	r3, [pc, #156]	@ (8000a08 <HAL_TIM_Base_MspInit+0xd4>)
 800096c:	699a      	ldr	r2, [r3, #24]
 800096e:	4b26      	ldr	r3, [pc, #152]	@ (8000a08 <HAL_TIM_Base_MspInit+0xd4>)
 8000970:	2180      	movs	r1, #128	@ 0x80
 8000972:	0249      	lsls	r1, r1, #9
 8000974:	430a      	orrs	r2, r1
 8000976:	619a      	str	r2, [r3, #24]
 8000978:	4b23      	ldr	r3, [pc, #140]	@ (8000a08 <HAL_TIM_Base_MspInit+0xd4>)
 800097a:	699a      	ldr	r2, [r3, #24]
 800097c:	2380      	movs	r3, #128	@ 0x80
 800097e:	025b      	lsls	r3, r3, #9
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8000986:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 8000988:	4a22      	ldr	r2, [pc, #136]	@ (8000a14 <HAL_TIM_Base_MspInit+0xe0>)
 800098a:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800098c:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 800098e:	2210      	movs	r2, #16
 8000990:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8000992:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8000998:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 800099a:	2280      	movs	r2, #128	@ 0x80
 800099c:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800099e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 80009a0:	2280      	movs	r2, #128	@ 0x80
 80009a2:	0052      	lsls	r2, r2, #1
 80009a4:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 80009a8:	2280      	movs	r2, #128	@ 0x80
 80009aa:	00d2      	lsls	r2, r2, #3
 80009ac:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_CIRCULAR;
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 80009b0:	2220      	movs	r2, #32
 80009b2:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 80009bc:	0018      	movs	r0, r3
 80009be:	f001 f807 	bl	80019d0 <HAL_DMA_Init>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d001      	beq.n	80009ca <HAL_TIM_Base_MspInit+0x96>
      Error_Handler();
 80009c6:	f7ff ff8b 	bl	80008e0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a10      	ldr	r2, [pc, #64]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 80009ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 80009da:	621a      	str	r2, [r3, #32]
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 80009e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 80009f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_TIM_Base_MspInit+0xdc>)
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b004      	add	sp, #16
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	40000400 	.word	0x40000400
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40014000 	.word	0x40014000
 8000a10:	20000114 	.word	0x20000114
 8000a14:	40020058 	.word	0x40020058

08000a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b089      	sub	sp, #36	@ 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	240c      	movs	r4, #12
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	0018      	movs	r0, r3
 8000a26:	2314      	movs	r3, #20
 8000a28:	001a      	movs	r2, r3
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	f003 fd72 	bl	8004514 <memset>
  if(htim->Instance==TIM15)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a15      	ldr	r2, [pc, #84]	@ (8000a8c <HAL_TIM_MspPostInit+0x74>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d124      	bne.n	8000a84 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <HAL_TIM_MspPostInit+0x78>)
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <HAL_TIM_MspPostInit+0x78>)
 8000a40:	2180      	movs	r1, #128	@ 0x80
 8000a42:	0289      	lsls	r1, r1, #10
 8000a44:	430a      	orrs	r2, r1
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <HAL_TIM_MspPostInit+0x78>)
 8000a4a:	695a      	ldr	r2, [r3, #20]
 8000a4c:	2380      	movs	r3, #128	@ 0x80
 8000a4e:	029b      	lsls	r3, r3, #10
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a56:	0021      	movs	r1, r4
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2202      	movs	r2, #2
 8000a62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	187a      	adds	r2, r7, r1
 8000a78:	2390      	movs	r3, #144	@ 0x90
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f001 f96a 	bl	8001d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b009      	add	sp, #36	@ 0x24
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	40014000 	.word	0x40014000
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b08b      	sub	sp, #44	@ 0x2c
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	2414      	movs	r4, #20
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	2314      	movs	r3, #20
 8000aa4:	001a      	movs	r2, r3
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f003 fd34 	bl	8004514 <memset>
  if(huart->Instance==USART1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b28 <HAL_UART_MspInit+0x94>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d133      	bne.n	8000b1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000ab8:	699a      	ldr	r2, [r3, #24]
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	01c9      	lsls	r1, r1, #7
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	619a      	str	r2, [r3, #24]
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000ac6:	699a      	ldr	r2, [r3, #24]
 8000ac8:	2380      	movs	r3, #128	@ 0x80
 8000aca:	01db      	lsls	r3, r3, #7
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000ad4:	695a      	ldr	r2, [r3, #20]
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	0289      	lsls	r1, r1, #10
 8000adc:	430a      	orrs	r2, r1
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000ae2:	695a      	ldr	r2, [r3, #20]
 8000ae4:	2380      	movs	r3, #128	@ 0x80
 8000ae6:	029b      	lsls	r3, r3, #10
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	22c0      	movs	r2, #192	@ 0xc0
 8000af2:	00d2      	lsls	r2, r2, #3
 8000af4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	0021      	movs	r1, r4
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2202      	movs	r2, #2
 8000afc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2203      	movs	r2, #3
 8000b08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	187a      	adds	r2, r7, r1
 8000b12:	2390      	movs	r3, #144	@ 0x90
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	0011      	movs	r1, r2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 f91d 	bl	8001d58 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b00b      	add	sp, #44	@ 0x2c
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	40013800 	.word	0x40013800
 8000b2c:	40021000 	.word	0x40021000

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b34:	46c0      	nop			@ (mov r8, r8)
 8000b36:	e7fd      	b.n	8000b34 <NMI_Handler+0x4>

08000b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	e7fd      	b.n	8000b3c <HardFault_Handler+0x4>

08000b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 fe40 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000b66:	2040      	movs	r0, #64	@ 0x40
 8000b68:	f001 fa9e 	bl	80020a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 f802 	bl	8001b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	20000114 	.word	0x20000114

08000b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  return 1;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <_kill>:

int _kill(int pid, int sig)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ba2:	f003 fd0d 	bl	80045c0 <__errno>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	2216      	movs	r2, #22
 8000baa:	601a      	str	r2, [r3, #0]
  return -1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	425b      	negs	r3, r3
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_exit>:

void _exit (int status)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	425a      	negs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ffe5 	bl	8000b98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	e7fd      	b.n	8000bce <_exit+0x16>

08000bd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	60f8      	str	r0, [r7, #12]
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	e00a      	b.n	8000bfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000be4:	e000      	b.n	8000be8 <_read+0x16>
 8000be6:	bf00      	nop
 8000be8:	0001      	movs	r1, r0
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	60ba      	str	r2, [r7, #8]
 8000bf0:	b2ca      	uxtb	r2, r1
 8000bf2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	dbf0      	blt.n	8000be4 <_read+0x12>
  }

  return len;
 8000c02:	687b      	ldr	r3, [r7, #4]
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b006      	add	sp, #24
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	425b      	negs	r3, r3
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	2280      	movs	r2, #128	@ 0x80
 8000c2e:	0192      	lsls	r2, r2, #6
 8000c30:	605a      	str	r2, [r3, #4]
  return 0;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_isatty>:

int _isatty(int file)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c44:	2301      	movs	r3, #1
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b004      	add	sp, #16
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	@ (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	18d3      	adds	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f003 fc94 	bl	80045c0 <__errno>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	425b      	negs	r3, r3
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	18d2      	adds	r2, r2, r3
 8000cb2:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <_sbrk+0x64>)
 8000cb4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b006      	add	sp, #24
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20002000 	.word	0x20002000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	20000218 	.word	0x20000218
 8000ccc:	20000510 	.word	0x20000510

08000cd0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cd4:	46c0      	nop			@ (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <Wheel>:
#define Red(c) ((uint8_t)((c >> 16) & 0xFF))
#define Green(c) ((uint8_t)((c >> 8) & 0xFF))
#define Blue(c) ((uint8_t)(c & 0xFF))


uint32_t Wheel(uint8_t WheelPos) {
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	0002      	movs	r2, r0
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	701a      	strb	r2, [r3, #0]
  WheelPos = 255 - WheelPos;
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	1dfa      	adds	r2, r7, #7
 8000cea:	7812      	ldrb	r2, [r2, #0]
 8000cec:	43d2      	mvns	r2, r2
 8000cee:	701a      	strb	r2, [r3, #0]
  if(WheelPos < 85) {
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b54      	cmp	r3, #84	@ 0x54
 8000cf6:	d80d      	bhi.n	8000d14 <Wheel+0x3a>
    return newColor(255 - WheelPos * 3, 0, WheelPos * 3);
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	33ff      	adds	r3, #255	@ 0xff
 8000d04:	0419      	lsls	r1, r3, #16
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	0013      	movs	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	189b      	adds	r3, r3, r2
 8000d10:	430b      	orrs	r3, r1
 8000d12:	e029      	b.n	8000d68 <Wheel+0x8e>
  }
  if(WheelPos < 170) {
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2ba9      	cmp	r3, #169	@ 0xa9
 8000d1a:	d812      	bhi.n	8000d42 <Wheel+0x68>
    WheelPos -= 85;
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	1dfa      	adds	r2, r7, #7
 8000d20:	7812      	ldrb	r2, [r2, #0]
 8000d22:	3a55      	subs	r2, #85	@ 0x55
 8000d24:	701a      	strb	r2, [r3, #0]
    return newColor(0, WheelPos * 3, 255 - WheelPos * 3);
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	189b      	adds	r3, r3, r2
 8000d30:	021a      	lsls	r2, r3, #8
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	0019      	movs	r1, r3
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	1acb      	subs	r3, r1, r3
 8000d3c:	33ff      	adds	r3, #255	@ 0xff
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	e012      	b.n	8000d68 <Wheel+0x8e>
  }
  WheelPos -= 170;
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	1dfa      	adds	r2, r7, #7
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	3256      	adds	r2, #86	@ 0x56
 8000d4a:	701a      	strb	r2, [r3, #0]
  return newColor(WheelPos * 3, 255 - WheelPos * 3, 0);
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	0013      	movs	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	189b      	adds	r3, r3, r2
 8000d56:	041a      	lsls	r2, r3, #16
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	33ff      	adds	r3, #255	@ 0xff
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	4313      	orrs	r3, r2
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b002      	add	sp, #8
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <visRainbow>:




void visRainbow(uint8_t *frameBuffer, uint32_t frameBufferSize, uint32_t effectLength)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	static uint8_t x = 0;

	x += 1;
 8000d7c:	4b25      	ldr	r3, [pc, #148]	@ (8000e14 <visRainbow+0xa4>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b23      	ldr	r3, [pc, #140]	@ (8000e14 <visRainbow+0xa4>)
 8000d86:	701a      	strb	r2, [r3, #0]

	if(x == 256*5)
		x = 0;

	for( i = 0; i < frameBufferSize / 3; i++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	e032      	b.n	8000df4 <visRainbow+0x84>
	{
		uint32_t color = Wheel(((i * 256) / effectLength + x) & 0xFF);
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff f9c1 	bl	800011c <__udivsi3>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <visRainbow+0xa4>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	18d3      	adds	r3, r2, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	0018      	movs	r0, r3
 8000da8:	f7ff ff97 	bl	8000cda <Wheel>
 8000dac:	0003      	movs	r3, r0
 8000dae:	613b      	str	r3, [r7, #16]

		frameBuffer[i*3 + 0] = color & 0xFF;
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	0013      	movs	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	189b      	adds	r3, r3, r2
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	18d3      	adds	r3, r2, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 1] = color >> 8 & 0xFF;
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	0a19      	lsrs	r1, r3, #8
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	0013      	movs	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	189b      	adds	r3, r3, r2
 8000dce:	3301      	adds	r3, #1
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	18d3      	adds	r3, r2, r3
 8000dd4:	b2ca      	uxtb	r2, r1
 8000dd6:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 2] = color >> 16 & 0xFF;
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	0c19      	lsrs	r1, r3, #16
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	0013      	movs	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	189b      	adds	r3, r3, r2
 8000de4:	3302      	adds	r3, #2
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	18d3      	adds	r3, r2, r3
 8000dea:	b2ca      	uxtb	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < frameBufferSize / 3; i++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2103      	movs	r1, #3
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff f98f 	bl	800011c <__udivsi3>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	001a      	movs	r2, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d3c2      	bcc.n	8000d8e <visRainbow+0x1e>
	}
}
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b006      	add	sp, #24
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	2000030c 	.word	0x2000030c

08000e18 <visDots>:


void visDots(uint8_t *frameBuffer, uint32_t frameBufferSize, uint32_t random, uint32_t fadeOutFactor)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	603b      	str	r3, [r7, #0]
	uint32_t i;

	for( i = 0; i < frameBufferSize / 3; i++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e0c2      	b.n	8000fb2 <visDots+0x19a>
	{

		if(rand() % random == 0)
 8000e2c:	f003 fa14 	bl	8004258 <rand>
 8000e30:	0003      	movs	r3, r0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff f9f7 	bl	8000228 <__aeabi_uidivmod>
 8000e3a:	1e0b      	subs	r3, r1, #0
 8000e3c:	d119      	bne.n	8000e72 <visDots+0x5a>
		{
			frameBuffer[i*3 + 0] = 255;
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	0013      	movs	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	189b      	adds	r3, r3, r2
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	18d3      	adds	r3, r2, r3
 8000e4a:	22ff      	movs	r2, #255	@ 0xff
 8000e4c:	701a      	strb	r2, [r3, #0]
			frameBuffer[i*3 + 1] = 255;
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	0013      	movs	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	189b      	adds	r3, r3, r2
 8000e56:	3301      	adds	r3, #1
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	18d3      	adds	r3, r2, r3
 8000e5c:	22ff      	movs	r2, #255	@ 0xff
 8000e5e:	701a      	strb	r2, [r3, #0]
			frameBuffer[i*3 + 2] = 255;
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	0013      	movs	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	189b      	adds	r3, r3, r2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	18d3      	adds	r3, r2, r3
 8000e6e:	22ff      	movs	r2, #255	@ 0xff
 8000e70:	701a      	strb	r2, [r3, #0]
		}


		if(frameBuffer[i*3 + 0] > fadeOutFactor)
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	0013      	movs	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	189b      	adds	r3, r3, r2
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	18d3      	adds	r3, r2, r3
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	001a      	movs	r2, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d21d      	bcs.n	8000ec4 <visDots+0xac>
			frameBuffer[i*3 + 0] -= frameBuffer[i*3 + 0]/fadeOutFactor;
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	0013      	movs	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	189b      	adds	r3, r3, r2
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	18d3      	adds	r3, r2, r3
 8000e94:	781c      	ldrb	r4, [r3, #0]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	0013      	movs	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	189b      	adds	r3, r3, r2
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	18d3      	adds	r3, r2, r3
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff f938 	bl	800011c <__udivsi3>
 8000eac:	0003      	movs	r3, r0
 8000eae:	b2d9      	uxtb	r1, r3
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	0013      	movs	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	189b      	adds	r3, r3, r2
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	18d3      	adds	r3, r2, r3
 8000ebc:	1a62      	subs	r2, r4, r1
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	e007      	b.n	8000ed4 <visDots+0xbc>
		else
			frameBuffer[i*3 + 0] = 0;
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	0013      	movs	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	189b      	adds	r3, r3, r2
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	18d3      	adds	r3, r2, r3
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]

		if(frameBuffer[i*3 + 1] > fadeOutFactor)
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	189b      	adds	r3, r3, r2
 8000edc:	3301      	adds	r3, #1
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	18d3      	adds	r3, r2, r3
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d220      	bcs.n	8000f2e <visDots+0x116>
			frameBuffer[i*3 + 1] -= frameBuffer[i*3 + 1]/fadeOutFactor;
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	0013      	movs	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	189b      	adds	r3, r3, r2
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	18d3      	adds	r3, r2, r3
 8000efa:	781c      	ldrb	r4, [r3, #0]
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	0013      	movs	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	189b      	adds	r3, r3, r2
 8000f04:	3301      	adds	r3, #1
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	18d3      	adds	r3, r2, r3
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f7ff f904 	bl	800011c <__udivsi3>
 8000f14:	0003      	movs	r3, r0
 8000f16:	b2d9      	uxtb	r1, r3
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	0013      	movs	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	189b      	adds	r3, r3, r2
 8000f20:	3301      	adds	r3, #1
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	18d3      	adds	r3, r2, r3
 8000f26:	1a62      	subs	r2, r4, r1
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	e008      	b.n	8000f40 <visDots+0x128>
		else
			frameBuffer[i*3 + 1] = 0;
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	0013      	movs	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	189b      	adds	r3, r3, r2
 8000f36:	3301      	adds	r3, #1
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	18d3      	adds	r3, r2, r3
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]

		if(frameBuffer[i*3 + 2] > fadeOutFactor)
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	0013      	movs	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	189b      	adds	r3, r3, r2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	001a      	movs	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d220      	bcs.n	8000f9a <visDots+0x182>
			frameBuffer[i*3 + 2] -= frameBuffer[i*3 + 2]/fadeOutFactor;
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	0013      	movs	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	189b      	adds	r3, r3, r2
 8000f60:	3302      	adds	r3, #2
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	18d3      	adds	r3, r2, r3
 8000f66:	781c      	ldrb	r4, [r3, #0]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	0013      	movs	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	189b      	adds	r3, r3, r2
 8000f70:	3302      	adds	r3, #2
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	18d3      	adds	r3, r2, r3
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	6839      	ldr	r1, [r7, #0]
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f7ff f8ce 	bl	800011c <__udivsi3>
 8000f80:	0003      	movs	r3, r0
 8000f82:	b2d9      	uxtb	r1, r3
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	0013      	movs	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	189b      	adds	r3, r3, r2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	18d3      	adds	r3, r2, r3
 8000f92:	1a62      	subs	r2, r4, r1
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e008      	b.n	8000fac <visDots+0x194>
		else
			frameBuffer[i*3 + 2] = 0;
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	18d3      	adds	r3, r2, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < frameBufferSize / 3; i++)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff f8b0 	bl	800011c <__udivsi3>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d200      	bcs.n	8000fc8 <visDots+0x1b0>
 8000fc6:	e731      	b.n	8000e2c <visDots+0x14>
	}
}
 8000fc8:	46c0      	nop			@ (mov r8, r8)
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b007      	add	sp, #28
 8000fd0:	bd90      	pop	{r4, r7, pc}
	...

08000fd4 <visHandle2>:


// Animate effects
void visHandle2()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	static uint32_t timestamp;

	if(HAL_GetTick() - timestamp > 10)
 8000fd8:	f000 fc12 	bl	8001800 <HAL_GetTick>
 8000fdc:	0002      	movs	r2, r0
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <visHandle2+0x3c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b0a      	cmp	r3, #10
 8000fe6:	d910      	bls.n	800100a <visHandle2+0x36>
	{
		timestamp = HAL_GetTick();
 8000fe8:	f000 fc0a 	bl	8001800 <HAL_GetTick>
 8000fec:	0002      	movs	r2, r0
 8000fee:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <visHandle2+0x3c>)
 8000ff0:	601a      	str	r2, [r3, #0]

		// Animate next frame, each effect into each output RGB framebuffer
		visRainbow(frameBuffer, sizeof(frameBuffer), 15);
 8000ff2:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <visHandle2+0x40>)
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	21b4      	movs	r1, #180	@ 0xb4
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff feb9 	bl	8000d70 <visRainbow>
		visDots(frameBuffer2, sizeof(frameBuffer2), 50, 40);
 8000ffe:	4806      	ldr	r0, [pc, #24]	@ (8001018 <visHandle2+0x44>)
 8001000:	2328      	movs	r3, #40	@ 0x28
 8001002:	2232      	movs	r2, #50	@ 0x32
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f7ff ff07 	bl	8000e18 <visDots>
	}
}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000310 	.word	0x20000310
 8001014:	2000021c 	.word	0x2000021c
 8001018:	200002d0 	.word	0x200002d0

0800101c <visInit>:


void visInit()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0

	// 4 paralel output LED strips needs 18% overhead during TX
	// 8 paralel output LED strips overhead is 8us of 30us period which is 28% - see the debug output PD15/13

	// If you need more parallel LED strips, increase the WS2812_BUFFER_COUNT value
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e031      	b.n	800108e <visInit+0x72>
	{

		// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
		ws2812b.item[i].channel = i;
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4a1d      	ldr	r2, [pc, #116]	@ (80010a4 <visInit+0x88>)
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	18d3      	adds	r3, r2, r3
 8001034:	330c      	adds	r3, #12
 8001036:	1dfa      	adds	r2, r7, #7
 8001038:	7812      	ldrb	r2, [r2, #0]
 800103a:	701a      	strb	r2, [r3, #0]

		// Every even output line has second frameBuffer2 with different effect
		if(i % 2 == 0)
 800103c:	1dfb      	adds	r3, r7, #7
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2201      	movs	r2, #1
 8001042:	4013      	ands	r3, r2
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10e      	bne.n	8001068 <visInit+0x4c>
		{
			// Your RGB framebuffer
			ws2812b.item[i].frameBufferPointer = frameBuffer;
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <visInit+0x88>)
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	4915      	ldr	r1, [pc, #84]	@ (80010a8 <visInit+0x8c>)
 8001054:	50d1      	str	r1, [r2, r3]
			// RAW size of framebuffer
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer);
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <visInit+0x88>)
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	18d3      	adds	r3, r2, r3
 8001060:	3304      	adds	r3, #4
 8001062:	22b4      	movs	r2, #180	@ 0xb4
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e00d      	b.n	8001084 <visInit+0x68>
		} else {
			ws2812b.item[i].frameBufferPointer = frameBuffer2;
 8001068:	1dfb      	adds	r3, r7, #7
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <visInit+0x88>)
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	490e      	ldr	r1, [pc, #56]	@ (80010ac <visInit+0x90>)
 8001072:	50d1      	str	r1, [r2, r3]
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer2);
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <visInit+0x88>)
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	18d3      	adds	r3, r2, r3
 800107e:	3304      	adds	r3, #4
 8001080:	223c      	movs	r2, #60	@ 0x3c
 8001082:	601a      	str	r2, [r3, #0]
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	3201      	adds	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d9c9      	bls.n	800102a <visInit+0xe>
		}

	}


	ws2812b_init();
 8001096:	f000 fb0b 	bl	80016b0 <ws2812b_init>
}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	200001ec 	.word	0x200001ec
 80010a8:	2000021c 	.word	0x2000021c
 80010ac:	200002d0 	.word	0x200002d0

080010b0 <visHandle>:


void visHandle()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0

	if(ws2812b.transferComplete)
 80010b4:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <visHandle+0x24>)
 80010b6:	2220      	movs	r2, #32
 80010b8:	5c9b      	ldrb	r3, [r3, r2]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <visHandle+0x1e>
	{
		// Update your framebuffer here or swap buffers
		visHandle2();
 80010be:	f7ff ff89 	bl	8000fd4 <visHandle2>

		// Signal that buffer is changed and transfer new data
		ws2812b.startTransfer = 1;
 80010c2:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <visHandle+0x24>)
 80010c4:	2221      	movs	r2, #33	@ 0x21
 80010c6:	2101      	movs	r1, #1
 80010c8:	5499      	strb	r1, [r3, r2]
		ws2812b_handle();
 80010ca:	f000 fb03 	bl	80016d4 <ws2812b_handle>
	}
}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200001ec 	.word	0x200001ec

080010d8 <ws2812b_gpio_init>:
		144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
		177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
		215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

static void ws2812b_gpio_init(void)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b089      	sub	sp, #36	@ 0x24
 80010dc:	af00      	add	r7, sp, #0
	// WS2812B outputs
	WS2812B_GPIO_CLK_ENABLE();
 80010de:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <ws2812b_gpio_init+0xa8>)
 80010e0:	695a      	ldr	r2, [r3, #20]
 80010e2:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <ws2812b_gpio_init+0xa8>)
 80010e4:	2180      	movs	r1, #128	@ 0x80
 80010e6:	0309      	lsls	r1, r1, #12
 80010e8:	430a      	orrs	r2, r1
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <ws2812b_gpio_init+0xa8>)
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	031b      	lsls	r3, r3, #12
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 80010fa:	240c      	movs	r4, #12
 80010fc:	193b      	adds	r3, r7, r4
 80010fe:	2214      	movs	r2, #20
 8001100:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 8001102:	193b      	adds	r3, r7, r4
 8001104:	2201      	movs	r2, #1
 8001106:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001108:	193b      	adds	r3, r7, r4
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800110e:	193b      	adds	r3, r7, r4
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 8001114:	193a      	adds	r2, r7, r4
 8001116:	2390      	movs	r3, #144	@ 0x90
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f000 fe1b 	bl	8001d58 <HAL_GPIO_Init>

	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
#if defined(LED_BLUE_PORT) && defined(LED_ORANGE_PORT)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <ws2812b_gpio_init+0xa8>)
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <ws2812b_gpio_init+0xa8>)
 8001128:	2180      	movs	r1, #128	@ 0x80
 800112a:	0349      	lsls	r1, r1, #13
 800112c:	430a      	orrs	r2, r1
 800112e:	615a      	str	r2, [r3, #20]
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <ws2812b_gpio_init+0xa8>)
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	035b      	lsls	r3, r3, #13
 8001138:	4013      	ands	r3, r2
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	193b      	adds	r3, r7, r4
 8001140:	2201      	movs	r2, #1
 8001142:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	193b      	adds	r3, r7, r4
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114a:	193b      	adds	r3, r7, r4
 800114c:	2203      	movs	r2, #3
 800114e:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LED_BLUE_PIN;
 8001150:	193b      	adds	r3, r7, r4
 8001152:	2220      	movs	r2, #32
 8001154:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 8001156:	193b      	adds	r3, r7, r4
 8001158:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <ws2812b_gpio_init+0xac>)
 800115a:	0019      	movs	r1, r3
 800115c:	0010      	movs	r0, r2
 800115e:	f000 fdfb 	bl	8001d58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 8001162:	0021      	movs	r1, r4
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2210      	movs	r2, #16
 8001168:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 800116a:	187b      	adds	r3, r7, r1
 800116c:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <ws2812b_gpio_init+0xac>)
 800116e:	0019      	movs	r1, r3
 8001170:	0010      	movs	r0, r2
 8001172:	f000 fdf1 	bl	8001d58 <HAL_GPIO_Init>
#endif
}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b009      	add	sp, #36	@ 0x24
 800117c:	bd90      	pop	{r4, r7, pc}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	40021000 	.word	0x40021000
 8001184:	48000400 	.word	0x48000400

08001188 <TIM15_init>:

uint32_t tim_period;
uint32_t timer_reset_pulse_period;

static void TIM15_init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
	// TIM15 Periph clock enable
	__HAL_RCC_TIM15_CLK_ENABLE();
 800118e:	4b4a      	ldr	r3, [pc, #296]	@ (80012b8 <TIM15_init+0x130>)
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	4b49      	ldr	r3, [pc, #292]	@ (80012b8 <TIM15_init+0x130>)
 8001194:	2180      	movs	r1, #128	@ 0x80
 8001196:	0249      	lsls	r1, r1, #9
 8001198:	430a      	orrs	r2, r1
 800119a:	619a      	str	r2, [r3, #24]
 800119c:	4b46      	ldr	r3, [pc, #280]	@ (80012b8 <TIM15_init+0x130>)
 800119e:	699a      	ldr	r2, [r3, #24]
 80011a0:	2380      	movs	r3, #128	@ 0x80
 80011a2:	025b      	lsls	r3, r3, #9
 80011a4:	4013      	ands	r3, r2
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

	// This computation of pulse length should work ok,
	// at some slower core speeds it needs some tuning.
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 80011aa:	4b44      	ldr	r3, [pc, #272]	@ (80012bc <TIM15_init+0x134>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4944      	ldr	r1, [pc, #272]	@ (80012c0 <TIM15_init+0x138>)
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7fe ffb3 	bl	800011c <__udivsi3>
 80011b6:	0003      	movs	r3, r0
 80011b8:	001a      	movs	r2, r3
 80011ba:	4b42      	ldr	r3, [pc, #264]	@ (80012c4 <TIM15_init+0x13c>)
 80011bc:	601a      	str	r2, [r3, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 80011be:	4b3f      	ldr	r3, [pc, #252]	@ (80012bc <TIM15_init+0x134>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2296      	movs	r2, #150	@ 0x96
 80011c4:	01d1      	lsls	r1, r2, #7
 80011c6:	0018      	movs	r0, r3
 80011c8:	f7fe ffa8 	bl	800011c <__udivsi3>
 80011cc:	0003      	movs	r3, r0
 80011ce:	001a      	movs	r2, r3
 80011d0:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <TIM15_init+0x140>)
 80011d2:	601a      	str	r2, [r3, #0]

	uint32_t cc1 = (10 * tim_period) / 36;
 80011d4:	4b3b      	ldr	r3, [pc, #236]	@ (80012c4 <TIM15_init+0x13c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	0013      	movs	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	189b      	adds	r3, r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2124      	movs	r1, #36	@ 0x24
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7fe ff9a 	bl	800011c <__udivsi3>
 80011e8:	0003      	movs	r3, r0
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t cc2 = (10 * tim_period) / 15;
 80011ec:	4b35      	ldr	r3, [pc, #212]	@ (80012c4 <TIM15_init+0x13c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	0013      	movs	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	189b      	adds	r3, r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	210f      	movs	r1, #15
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7fe ff8e 	bl	800011c <__udivsi3>
 8001200:	0003      	movs	r3, r0
 8001202:	623b      	str	r3, [r7, #32]

	htim15.Instance = TIM15;
 8001204:	4b31      	ldr	r3, [pc, #196]	@ (80012cc <TIM15_init+0x144>)
 8001206:	4a32      	ldr	r2, [pc, #200]	@ (80012d0 <TIM15_init+0x148>)
 8001208:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 0;
 800120a:	4b30      	ldr	r3, [pc, #192]	@ (80012cc <TIM15_init+0x144>)
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b2e      	ldr	r3, [pc, #184]	@ (80012cc <TIM15_init+0x144>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = tim_period;
 8001216:	4b2b      	ldr	r3, [pc, #172]	@ (80012c4 <TIM15_init+0x13c>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b2c      	ldr	r3, [pc, #176]	@ (80012cc <TIM15_init+0x144>)
 800121c:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121e:	4b2b      	ldr	r3, [pc, #172]	@ (80012cc <TIM15_init+0x144>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8001224:	4b29      	ldr	r3, [pc, #164]	@ (80012cc <TIM15_init+0x144>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800122a:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <TIM15_init+0x144>)
 800122c:	2280      	movs	r2, #128	@ 0x80
 800122e:	619a      	str	r2, [r3, #24]

	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001230:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <TIM15_init+0x144>)
 8001232:	0018      	movs	r0, r3
 8001234:	f001 fd14 	bl	8002c60 <HAL_TIM_PWM_Init>
 8001238:	1e03      	subs	r3, r0, #0
 800123a:	d001      	beq.n	8001240 <TIM15_init+0xb8>
		Error_Handler();
 800123c:	f7ff fb50 	bl	80008e0 <Error_Handler>

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	0018      	movs	r0, r3
 8001244:	231c      	movs	r3, #28
 8001246:	001a      	movs	r2, r3
 8001248:	2100      	movs	r1, #0
 800124a:	f003 f963 	bl	8004514 <memset>

	// Configure TIM_CHANNEL_1
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2260      	movs	r2, #96	@ 0x60
 8001252:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = cc1; // Duty cycle for channel 1
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001258:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001266:	1d39      	adds	r1, r7, #4
 8001268:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <TIM15_init+0x144>)
 800126a:	2200      	movs	r2, #0
 800126c:	0018      	movs	r0, r3
 800126e:	f001 fe01 	bl	8002e74 <HAL_TIM_PWM_ConfigChannel>
 8001272:	1e03      	subs	r3, r0, #0
 8001274:	d001      	beq.n	800127a <TIM15_init+0xf2>
		Error_Handler();
 8001276:	f7ff fb33 	bl	80008e0 <Error_Handler>

	// Configure TIM_CHANNEL_2
	sConfigOC.Pulse = cc2; // Duty cycle for channel 2
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	6a3a      	ldr	r2, [r7, #32]
 800127e:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001280:	1d39      	adds	r1, r7, #4
 8001282:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <TIM15_init+0x144>)
 8001284:	2204      	movs	r2, #4
 8001286:	0018      	movs	r0, r3
 8001288:	f001 fdf4 	bl	8002e74 <HAL_TIM_PWM_ConfigChannel>
 800128c:	1e03      	subs	r3, r0, #0
 800128e:	d001      	beq.n	8001294 <TIM15_init+0x10c>
		Error_Handler();
 8001290:	f7ff fb26 	bl	80008e0 <Error_Handler>

	HAL_TIM_Base_Start(&htim15);
 8001294:	4b0d      	ldr	r3, [pc, #52]	@ (80012cc <TIM15_init+0x144>)
 8001296:	0018      	movs	r0, r3
 8001298:	f001 fc9e 	bl	8002bd8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <TIM15_init+0x144>)
 800129e:	2100      	movs	r1, #0
 80012a0:	0018      	movs	r0, r3
 80012a2:	f001 fd35 	bl	8002d10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <TIM15_init+0x144>)
 80012a8:	2104      	movs	r1, #4
 80012aa:	0018      	movs	r0, r3
 80012ac:	f001 fd30 	bl	8002d10 <HAL_TIM_PWM_Start>
}
 80012b0:	46c0      	nop			@ (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b00a      	add	sp, #40	@ 0x28
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	20000000 	.word	0x20000000
 80012c0:	000c3500 	.word	0x000c3500
 80012c4:	20000374 	.word	0x20000374
 80012c8:	20000378 	.word	0x20000378
 80012cc:	200000cc 	.word	0x200000cc
 80012d0:	40014000 	.word	0x40014000

080012d4 <DMA2_init>:

uint32_t dummy;


static void DMA2_init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b092      	sub	sp, #72	@ 0x48
 80012d8:	af00      	add	r7, sp, #0
    // Enable the DMA1 clock
    __HAL_RCC_DMA1_CLK_ENABLE();
 80012da:	4b23      	ldr	r3, [pc, #140]	@ (8001368 <DMA2_init+0x94>)
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <DMA2_init+0x94>)
 80012e0:	2101      	movs	r1, #1
 80012e2:	430a      	orrs	r2, r1
 80012e4:	615a      	str	r2, [r3, #20]
 80012e6:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <DMA2_init+0x94>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4013      	ands	r3, r2
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

    // DMA Configuration for TIM15 Update Event
    DMA_HandleTypeDef dmaUpdate;
    dmaUpdate.Instance = DMA1_Channel5; // Update DMA channel for TIM15 (check manual)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4a1d      	ldr	r2, [pc, #116]	@ (800136c <DMA2_init+0x98>)
 80012f6:	601a      	str	r2, [r3, #0]
    dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2210      	movs	r2, #16
 80012fc:	605a      	str	r2, [r3, #4]
    dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
    dmaUpdate.Init.MemInc = DMA_MINC_ENABLE; // Assuming bit buffer in memory
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2280      	movs	r2, #128	@ 0x80
 8001308:	60da      	str	r2, [r3, #12]
    dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2280      	movs	r2, #128	@ 0x80
 800130e:	0052      	lsls	r2, r2, #1
 8001310:	611a      	str	r2, [r3, #16]
    dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2280      	movs	r2, #128	@ 0x80
 8001316:	00d2      	lsls	r2, r2, #3
 8001318:	615a      	str	r2, [r3, #20]
    dmaUpdate.Init.Mode = DMA_CIRCULAR;
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2220      	movs	r2, #32
 800131e:	619a      	str	r2, [r3, #24]
    dmaUpdate.Init.Priority = DMA_PRIORITY_HIGH;
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2280      	movs	r2, #128	@ 0x80
 8001324:	0192      	lsls	r2, r2, #6
 8001326:	61da      	str	r2, [r3, #28]

    HAL_DMA_DeInit(&dmaUpdate); // Ensure clean state
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	0018      	movs	r0, r3
 800132c:	f000 fb98 	bl	8001a60 <HAL_DMA_DeInit>
    HAL_DMA_Init(&dmaUpdate);
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	0018      	movs	r0, r3
 8001334:	f000 fb4c 	bl	80019d0 <HAL_DMA_Init>

    // Link the DMA to TIM15 Update event
    __HAL_LINKDMA(&htim15, hdma[TIM_DMA_ID_UPDATE], dmaUpdate);
 8001338:	4b0d      	ldr	r3, [pc, #52]	@ (8001370 <DMA2_init+0x9c>)
 800133a:	1d3a      	adds	r2, r7, #4
 800133c:	621a      	str	r2, [r3, #32]
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4a0b      	ldr	r2, [pc, #44]	@ (8001370 <DMA2_init+0x9c>)
 8001342:	625a      	str	r2, [r3, #36]	@ 0x24

    // Configure NVIC for DMA interrupts
    HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	200b      	movs	r0, #11
 800134a:	f000 fb0f 	bl	800196c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800134e:	200b      	movs	r0, #11
 8001350:	f000 fb21 	bl	8001996 <HAL_NVIC_EnableIRQ>

    // Start DMA Transfer (example: bit buffer to GPIO BSRR for WS2812B)
    HAL_DMA_Start(&dmaUpdate, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 8001354:	4907      	ldr	r1, [pc, #28]	@ (8001374 <DMA2_init+0xa0>)
 8001356:	4a08      	ldr	r2, [pc, #32]	@ (8001378 <DMA2_init+0xa4>)
 8001358:	1d38      	adds	r0, r7, #4
 800135a:	2330      	movs	r3, #48	@ 0x30
 800135c:	f000 fbc9 	bl	8001af2 <HAL_DMA_Start>

    HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);

    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);*/
}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b012      	add	sp, #72	@ 0x48
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000
 800136c:	40020058 	.word	0x40020058
 8001370:	200000cc 	.word	0x200000cc
 8001374:	20000314 	.word	0x20000314
 8001378:	48000018 	.word	0x48000018

0800137c <loadNextFramebufferData>:




static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b089      	sub	sp, #36	@ 0x24
 8001380:	af02      	add	r7, sp, #8
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]

	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6819      	ldr	r1, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	1c58      	adds	r0, r3, #1
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6090      	str	r0, [r2, #8]
 8001394:	18cb      	adds	r3, r1, r3
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	617b      	str	r3, [r7, #20]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6819      	ldr	r1, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	1c58      	adds	r0, r3, #1
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	6090      	str	r0, [r2, #8]
 80013a8:	18cb      	adds	r3, r1, r3
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	613b      	str	r3, [r7, #16]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	1c58      	adds	r0, r3, #1
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6090      	str	r0, [r2, #8]
 80013bc:	18cb      	adds	r3, r1, r3
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]

	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d102      	bne.n	80013d4 <loadNextFramebufferData+0x58>
		bItem->frameBufferCounter = 0;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]

	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7b18      	ldrb	r0, [r3, #12]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b299      	uxth	r1, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	b2dc      	uxtb	r4, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	0023      	movs	r3, r4
 80013ec:	f000 f862 	bl	80014b4 <ws2812b_set_pixel>
}
 80013f0:	46c0      	nop			@ (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b007      	add	sp, #28
 80013f6:	bd90      	pop	{r4, r7, pc}

080013f8 <WS2812_sendbuf>:


// Transmit the framebuffer
static void WS2812_sendbuf()
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
    // Transmission complete flag
    ws2812b.transferComplete = 0;
 80013fe:	4b27      	ldr	r3, [pc, #156]	@ (800149c <WS2812_sendbuf+0xa4>)
 8001400:	2220      	movs	r2, #32
 8001402:	2100      	movs	r1, #0
 8001404:	5499      	strb	r1, [r3, r2]

    uint32_t i;

    for (i = 0; i < WS2812_BUFFER_COUNT; i++)
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	e019      	b.n	8001440 <WS2812_sendbuf+0x48>
    {
        ws2812b.item[i].frameBufferCounter = 0;
 800140c:	4a23      	ldr	r2, [pc, #140]	@ (800149c <WS2812_sendbuf+0xa4>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	18d3      	adds	r3, r2, r3
 8001414:	3308      	adds	r3, #8
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

        loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	011a      	lsls	r2, r3, #4
 800141e:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <WS2812_sendbuf+0xa4>)
 8001420:	18d3      	adds	r3, r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff ffa9 	bl	800137c <loadNextFramebufferData>
        loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	011a      	lsls	r2, r3, #4
 800142e:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <WS2812_sendbuf+0xa4>)
 8001430:	18d3      	adds	r3, r2, r3
 8001432:	2101      	movs	r1, #1
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff ffa1 	bl	800137c <loadNextFramebufferData>
    for (i = 0; i < WS2812_BUFFER_COUNT; i++)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3301      	adds	r3, #1
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d9e2      	bls.n	800140c <WS2812_sendbuf+0x14>
    }

    // Clear all DMA flags for DMA1
    __HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TC5 | DMA_FLAG_HT5 | DMA_FLAG_TE5);
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <WS2812_sendbuf+0xa8>)
 8001448:	22e0      	movs	r2, #224	@ 0xe0
 800144a:	0312      	lsls	r2, r2, #12
 800144c:	605a      	str	r2, [r3, #4]
    //dmaUpdate.Instance->CNDTR = BUFFER_SIZE;
    //dmaCC1.Instance->CNDTR = BUFFER_SIZE;
    //dmaCC2.Instance->CNDTR = BUFFER_SIZE;

    // Clear all TIM15 flags
    __HAL_TIM_CLEAR_FLAG(&htim15, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2);
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <WS2812_sendbuf+0xac>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2208      	movs	r2, #8
 8001454:	4252      	negs	r2, r2
 8001456:	611a      	str	r2, [r3, #16]

    // Enable DMA channels
    __HAL_DMA_ENABLE(&dmaUpdate);
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <WS2812_sendbuf+0xb0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <WS2812_sendbuf+0xb0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2101      	movs	r1, #1
 8001464:	430a      	orrs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
    //__HAL_DMA_ENABLE(&dmaCC1);
    //__HAL_DMA_ENABLE(&dmaCC2);

    // Enable the TIM15 DMA requests AFTER enabling the DMA channels
     __HAL_TIM_ENABLE_DMA(&htim15, TIM_DMA_UPDATE);
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <WS2812_sendbuf+0xac>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <WS2812_sendbuf+0xac>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2180      	movs	r1, #128	@ 0x80
 8001474:	0049      	lsls	r1, r1, #1
 8001476:	430a      	orrs	r2, r1
 8001478:	60da      	str	r2, [r3, #12]
   // __HAL_TIM_ENABLE_DMA(&htim15, TIM_DMA_CC1);
    //__HAL_TIM_ENABLE_DMA(&htim15, TIM_DMA_CC2);

    // Set TIM15 counter
    TIM15->CNT = tim_period - 1;
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <WS2812_sendbuf+0xb4>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <WS2812_sendbuf+0xb8>)
 8001480:	3a01      	subs	r2, #1
 8001482:	625a      	str	r2, [r3, #36]	@ 0x24

    // Start TIM15
    __HAL_TIM_ENABLE(&htim15);
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <WS2812_sendbuf+0xac>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <WS2812_sendbuf+0xac>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2101      	movs	r1, #1
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]
}
 8001494:	46c0      	nop			@ (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b002      	add	sp, #8
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200001ec 	.word	0x200001ec
 80014a0:	40020000 	.word	0x40020000
 80014a4:	200000cc 	.word	0x200000cc
 80014a8:	2000037c 	.word	0x2000037c
 80014ac:	20000374 	.word	0x20000374
 80014b0:	40014000 	.word	0x40014000

080014b4 <ws2812b_set_pixel>:
}



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	0005      	movs	r5, r0
 80014bc:	000c      	movs	r4, r1
 80014be:	0010      	movs	r0, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	1c2a      	adds	r2, r5, #0
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	1c22      	adds	r2, r4, #0
 80014cc:	801a      	strh	r2, [r3, #0]
 80014ce:	1dbb      	adds	r3, r7, #6
 80014d0:	1c02      	adds	r2, r0, #0
 80014d2:	701a      	strb	r2, [r3, #0]
 80014d4:	1cfb      	adds	r3, r7, #3
 80014d6:	1c0a      	adds	r2, r1, #0
 80014d8:	701a      	strb	r2, [r3, #0]

	// Apply gamma
	red = gammaTable[red];
 80014da:	1dbb      	adds	r3, r7, #6
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	1dbb      	adds	r3, r7, #6
 80014e0:	4971      	ldr	r1, [pc, #452]	@ (80016a8 <ws2812b_set_pixel+0x1f4>)
 80014e2:	5c8a      	ldrb	r2, [r1, r2]
 80014e4:	701a      	strb	r2, [r3, #0]
	green = gammaTable[green];
 80014e6:	1cfb      	adds	r3, r7, #3
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	1cfb      	adds	r3, r7, #3
 80014ec:	496e      	ldr	r1, [pc, #440]	@ (80016a8 <ws2812b_set_pixel+0x1f4>)
 80014ee:	5c8a      	ldrb	r2, [r1, r2]
 80014f0:	701a      	strb	r2, [r3, #0]
	blue = gammaTable[blue];
 80014f2:	2030      	movs	r0, #48	@ 0x30
 80014f4:	183b      	adds	r3, r7, r0
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	183b      	adds	r3, r7, r0
 80014fa:	496b      	ldr	r1, [pc, #428]	@ (80016a8 <ws2812b_set_pixel+0x1f4>)
 80014fc:	5c8a      	ldrb	r2, [r1, r2]
 80014fe:	701a      	strb	r2, [r3, #0]


	uint32_t calcCol = (column*24);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	881a      	ldrh	r2, [r3, #0]
 8001504:	0013      	movs	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	189b      	adds	r3, r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	61bb      	str	r3, [r7, #24]
	uint32_t invRed = ~red;
 800150e:	1dbb      	adds	r3, r7, #6
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	43db      	mvns	r3, r3
 8001514:	617b      	str	r3, [r7, #20]
	uint32_t invGreen = ~green;
 8001516:	1cfb      	adds	r3, r7, #3
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	43db      	mvns	r3, r3
 800151c:	613b      	str	r3, [r7, #16]
	uint32_t invBlue = ~blue;
 800151e:	183b      	adds	r3, r7, r0
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	43db      	mvns	r3, r3
 8001524:	60fb      	str	r3, [r7, #12]


#if defined(SETPIX_1)
	uint8_t i;
	uint32_t calcClearRow = ~((0x01<<row) << 0);
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	409a      	lsls	r2, r3
 800152e:	0013      	movs	r3, r2
 8001530:	43db      	mvns	r3, r3
 8001532:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++)
 8001534:	231f      	movs	r3, #31
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
 800153c:	e0a8      	b.n	8001690 <ws2812b_set_pixel+0x1dc>
	{
		// clear the data for pixel

		ws2812bDmaBitBuffer[(calcCol+i)] &= calcClearRow;
 800153e:	241f      	movs	r4, #31
 8001540:	193b      	adds	r3, r7, r4
 8001542:	781a      	ldrb	r2, [r3, #0]
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	18d2      	adds	r2, r2, r3
 8001548:	4b58      	ldr	r3, [pc, #352]	@ (80016ac <ws2812b_set_pixel+0x1f8>)
 800154a:	0052      	lsls	r2, r2, #1
 800154c:	5ad3      	ldrh	r3, [r2, r3]
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	b291      	uxth	r1, r2
 8001552:	193a      	adds	r2, r7, r4
 8001554:	7810      	ldrb	r0, [r2, #0]
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	1882      	adds	r2, r0, r2
 800155a:	400b      	ands	r3, r1
 800155c:	b299      	uxth	r1, r3
 800155e:	4b53      	ldr	r3, [pc, #332]	@ (80016ac <ws2812b_set_pixel+0x1f8>)
 8001560:	0052      	lsls	r2, r2, #1
 8001562:	52d1      	strh	r1, [r2, r3]
		ws2812bDmaBitBuffer[(calcCol+8+i)] &= calcClearRow;
 8001564:	0020      	movs	r0, r4
 8001566:	183b      	adds	r3, r7, r0
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	18d3      	adds	r3, r2, r3
 800156e:	3308      	adds	r3, #8
 8001570:	001a      	movs	r2, r3
 8001572:	4b4e      	ldr	r3, [pc, #312]	@ (80016ac <ws2812b_set_pixel+0x1f8>)
 8001574:	0052      	lsls	r2, r2, #1
 8001576:	5ad3      	ldrh	r3, [r2, r3]
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	b291      	uxth	r1, r2
 800157c:	0004      	movs	r4, r0
 800157e:	183a      	adds	r2, r7, r0
 8001580:	7810      	ldrb	r0, [r2, #0]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	1882      	adds	r2, r0, r2
 8001586:	3208      	adds	r2, #8
 8001588:	400b      	ands	r3, r1
 800158a:	b299      	uxth	r1, r3
 800158c:	4b47      	ldr	r3, [pc, #284]	@ (80016ac <ws2812b_set_pixel+0x1f8>)
 800158e:	0052      	lsls	r2, r2, #1
 8001590:	52d1      	strh	r1, [r2, r3]
		ws2812bDmaBitBuffer[(calcCol+16+i)] &= calcClearRow;
 8001592:	0020      	movs	r0, r4
 8001594:	183b      	adds	r3, r7, r0
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	18d3      	adds	r3, r2, r3
 800159c:	3310      	adds	r3, #16
 800159e:	001a      	movs	r2, r3
 80015a0:	4b42      	ldr	r3, [pc, #264]	@ (80016ac <ws2812b_set_pixel+0x1f8>)
 80015a2:	0052      	lsls	r2, r2, #1
 80015a4:	5ad3      	ldrh	r3, [r2, r3]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	b291      	uxth	r1, r2
 80015aa:	0004      	movs	r4, r0
 80015ac:	183a      	adds	r2, r7, r0
 80015ae:	7810      	ldrb	r0, [r2, #0]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	1882      	adds	r2, r0, r2
 80015b4:	3210      	adds	r2, #16
 80015b6:	400b      	ands	r3, r1
 80015b8:	b299      	uxth	r1, r3
 80015ba:	4b3c      	ldr	r3, [pc, #240]	@ (80016ac <ws2812b_set_pixel+0x1f8>)
 80015bc:	0052      	lsls	r2, r2, #1
 80015be:	52d1      	strh	r1, [r2, r3]

		// write new data for pixel
		ws2812bDmaBitBuffer[(calcCol+i)] |= (((((invGreen)<<i) & 0x80)>>7)<<(row+0));
 80015c0:	0020      	movs	r0, r4
 80015c2:	183b      	adds	r3, r7, r0
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	18d2      	adds	r2, r2, r3
 80015ca:	4b38      	ldr	r3, [pc, #224]	@ (80016ac <ws2812b_set_pixel+0x1f8>)
 80015cc:	0052      	lsls	r2, r2, #1
 80015ce:	5ad1      	ldrh	r1, [r2, r3]
 80015d0:	183b      	adds	r3, r7, r0
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	09db      	lsrs	r3, r3, #7
 80015dc:	2201      	movs	r2, #1
 80015de:	401a      	ands	r2, r3
 80015e0:	1dfb      	adds	r3, r7, #7
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	409a      	lsls	r2, r3
 80015e6:	0013      	movs	r3, r2
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	0004      	movs	r4, r0
 80015ec:	183a      	adds	r2, r7, r0
 80015ee:	7810      	ldrb	r0, [r2, #0]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	1882      	adds	r2, r0, r2
 80015f4:	430b      	orrs	r3, r1
 80015f6:	b299      	uxth	r1, r3
 80015f8:	4b2c      	ldr	r3, [pc, #176]	@ (80016ac <ws2812b_set_pixel+0x1f8>)
 80015fa:	0052      	lsls	r2, r2, #1
 80015fc:	52d1      	strh	r1, [r2, r3]
		ws2812bDmaBitBuffer[(calcCol+8+i)] |= (((((invRed)<<i) & 0x80)>>7)<<(row+0));
 80015fe:	0020      	movs	r0, r4
 8001600:	183b      	adds	r3, r7, r0
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	18d3      	adds	r3, r2, r3
 8001608:	3308      	adds	r3, #8
 800160a:	001a      	movs	r2, r3
 800160c:	4b27      	ldr	r3, [pc, #156]	@ (80016ac <ws2812b_set_pixel+0x1f8>)
 800160e:	0052      	lsls	r2, r2, #1
 8001610:	5ad1      	ldrh	r1, [r2, r3]
 8001612:	183b      	adds	r3, r7, r0
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	409a      	lsls	r2, r3
 800161a:	0013      	movs	r3, r2
 800161c:	09db      	lsrs	r3, r3, #7
 800161e:	2201      	movs	r2, #1
 8001620:	401a      	ands	r2, r3
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	409a      	lsls	r2, r3
 8001628:	0013      	movs	r3, r2
 800162a:	b29b      	uxth	r3, r3
 800162c:	0004      	movs	r4, r0
 800162e:	183a      	adds	r2, r7, r0
 8001630:	7810      	ldrb	r0, [r2, #0]
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	1882      	adds	r2, r0, r2
 8001636:	3208      	adds	r2, #8
 8001638:	430b      	orrs	r3, r1
 800163a:	b299      	uxth	r1, r3
 800163c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <ws2812b_set_pixel+0x1f8>)
 800163e:	0052      	lsls	r2, r2, #1
 8001640:	52d1      	strh	r1, [r2, r3]
		ws2812bDmaBitBuffer[(calcCol+16+i)] |= (((((invBlue)<<i) & 0x80)>>7)<<(row+0));
 8001642:	0020      	movs	r0, r4
 8001644:	183b      	adds	r3, r7, r0
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	18d3      	adds	r3, r2, r3
 800164c:	3310      	adds	r3, #16
 800164e:	001a      	movs	r2, r3
 8001650:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <ws2812b_set_pixel+0x1f8>)
 8001652:	0052      	lsls	r2, r2, #1
 8001654:	5ad1      	ldrh	r1, [r2, r3]
 8001656:	183b      	adds	r3, r7, r0
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	409a      	lsls	r2, r3
 800165e:	0013      	movs	r3, r2
 8001660:	09db      	lsrs	r3, r3, #7
 8001662:	2201      	movs	r2, #1
 8001664:	401a      	ands	r2, r3
 8001666:	1dfb      	adds	r3, r7, #7
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	b29b      	uxth	r3, r3
 8001670:	0004      	movs	r4, r0
 8001672:	183a      	adds	r2, r7, r0
 8001674:	7810      	ldrb	r0, [r2, #0]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	1882      	adds	r2, r0, r2
 800167a:	3210      	adds	r2, #16
 800167c:	430b      	orrs	r3, r1
 800167e:	b299      	uxth	r1, r3
 8001680:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <ws2812b_set_pixel+0x1f8>)
 8001682:	0052      	lsls	r2, r2, #1
 8001684:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < 8; i++)
 8001686:	193b      	adds	r3, r7, r4
 8001688:	781a      	ldrb	r2, [r3, #0]
 800168a:	193b      	adds	r3, r7, r4
 800168c:	3201      	adds	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
 8001690:	231f      	movs	r3, #31
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b07      	cmp	r3, #7
 8001698:	d800      	bhi.n	800169c <ws2812b_set_pixel+0x1e8>
 800169a:	e750      	b.n	800153e <ws2812b_set_pixel+0x8a>

	*bitBand = (invBlue >> 0);
	bitBand+=16;

#endif
}
 800169c:	46c0      	nop			@ (mov r8, r8)
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b008      	add	sp, #32
 80016a4:	bdb0      	pop	{r4, r5, r7, pc}
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	080052e0 	.word	0x080052e0
 80016ac:	20000314 	.word	0x20000314

080016b0 <ws2812b_init>:


void ws2812b_init()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	ws2812b_gpio_init();
 80016b4:	f7ff fd10 	bl	80010d8 <ws2812b_gpio_init>

	/*TIM2_init();
	DMA_init();*/


	DMA2_init();
 80016b8:	f7ff fe0c 	bl	80012d4 <DMA2_init>
	TIM15_init();
 80016bc:	f7ff fd64 	bl	8001188 <TIM15_init>


	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <ws2812b_init+0x20>)
 80016c2:	2220      	movs	r2, #32
 80016c4:	2101      	movs	r1, #1
 80016c6:	5499      	strb	r1, [r3, r2]
}
 80016c8:	46c0      	nop			@ (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	200001ec 	.word	0x200001ec

080016d4 <ws2812b_handle>:


void ws2812b_handle()
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	if(ws2812b.startTransfer) {
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <ws2812b_handle+0x20>)
 80016da:	2221      	movs	r2, #33	@ 0x21
 80016dc:	5c9b      	ldrb	r3, [r3, r2]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <ws2812b_handle+0x1a>
		ws2812b.startTransfer = 0;
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <ws2812b_handle+0x20>)
 80016e4:	2221      	movs	r2, #33	@ 0x21
 80016e6:	2100      	movs	r1, #0
 80016e8:	5499      	strb	r1, [r3, r2]
		WS2812_sendbuf();
 80016ea:	f7ff fe85 	bl	80013f8 <WS2812_sendbuf>
	}

}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200001ec 	.word	0x200001ec

080016f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016f8:	480d      	ldr	r0, [pc, #52]	@ (8001730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016fc:	f7ff fae8 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <LoopForever+0x6>)
  ldr r1, =_edata
 8001702:	490d      	ldr	r1, [pc, #52]	@ (8001738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001704:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <LoopForever+0xe>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001718:	4c0a      	ldr	r4, [pc, #40]	@ (8001744 <LoopForever+0x16>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001726:	f002 ff51 	bl	80045cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800172a:	f7fe fdb1 	bl	8000290 <main>

0800172e <LoopForever>:

LoopForever:
    b LoopForever
 800172e:	e7fe      	b.n	800172e <LoopForever>
  ldr   r0, =_estack
 8001730:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800173c:	080054e8 	.word	0x080054e8
  ldr r2, =_sbss
 8001740:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001744:	20000510 	.word	0x20000510

08001748 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC1_IRQHandler>
	...

0800174c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <HAL_Init+0x24>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_Init+0x24>)
 8001756:	2110      	movs	r1, #16
 8001758:	430a      	orrs	r2, r1
 800175a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800175c:	2003      	movs	r0, #3
 800175e:	f000 f809 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001762:	f7ff f8c3 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	40022000 	.word	0x40022000

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800177c:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <HAL_InitTick+0x5c>)
 800177e:	681c      	ldr	r4, [r3, #0]
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_InitTick+0x60>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	0019      	movs	r1, r3
 8001786:	23fa      	movs	r3, #250	@ 0xfa
 8001788:	0098      	lsls	r0, r3, #2
 800178a:	f7fe fcc7 	bl	800011c <__udivsi3>
 800178e:	0003      	movs	r3, r0
 8001790:	0019      	movs	r1, r3
 8001792:	0020      	movs	r0, r4
 8001794:	f7fe fcc2 	bl	800011c <__udivsi3>
 8001798:	0003      	movs	r3, r0
 800179a:	0018      	movs	r0, r3
 800179c:	f000 f90b 	bl	80019b6 <HAL_SYSTICK_Config>
 80017a0:	1e03      	subs	r3, r0, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e00f      	b.n	80017c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d80b      	bhi.n	80017c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	2301      	movs	r3, #1
 80017b2:	425b      	negs	r3, r3
 80017b4:	2200      	movs	r2, #0
 80017b6:	0018      	movs	r0, r3
 80017b8:	f000 f8d8 	bl	800196c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_InitTick+0x64>)
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b003      	add	sp, #12
 80017ce:	bd90      	pop	{r4, r7, pc}
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <HAL_IncTick+0x1c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	001a      	movs	r2, r3
 80017e6:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <HAL_IncTick+0x20>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	18d2      	adds	r2, r2, r3
 80017ec:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <HAL_IncTick+0x20>)
 80017ee:	601a      	str	r2, [r3, #0]
}
 80017f0:	46c0      	nop			@ (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	20000008 	.word	0x20000008
 80017fc:	200003c0 	.word	0x200003c0

08001800 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b02      	ldr	r3, [pc, #8]	@ (8001810 <HAL_GetTick+0x10>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			@ (mov r8, r8)
 8001810:	200003c0 	.word	0x200003c0

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	0002      	movs	r2, r0
 800181c:	1dfb      	adds	r3, r7, #7
 800181e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001820:	1dfb      	adds	r3, r7, #7
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b7f      	cmp	r3, #127	@ 0x7f
 8001826:	d809      	bhi.n	800183c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001828:	1dfb      	adds	r3, r7, #7
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	001a      	movs	r2, r3
 800182e:	231f      	movs	r3, #31
 8001830:	401a      	ands	r2, r3
 8001832:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <__NVIC_EnableIRQ+0x30>)
 8001834:	2101      	movs	r1, #1
 8001836:	4091      	lsls	r1, r2
 8001838:	000a      	movs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
  }
}
 800183c:	46c0      	nop			@ (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	0002      	movs	r2, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b7f      	cmp	r3, #127	@ 0x7f
 800185c:	d828      	bhi.n	80018b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800185e:	4a2f      	ldr	r2, [pc, #188]	@ (800191c <__NVIC_SetPriority+0xd4>)
 8001860:	1dfb      	adds	r3, r7, #7
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b25b      	sxtb	r3, r3
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	33c0      	adds	r3, #192	@ 0xc0
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	589b      	ldr	r3, [r3, r2]
 800186e:	1dfa      	adds	r2, r7, #7
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	0011      	movs	r1, r2
 8001874:	2203      	movs	r2, #3
 8001876:	400a      	ands	r2, r1
 8001878:	00d2      	lsls	r2, r2, #3
 800187a:	21ff      	movs	r1, #255	@ 0xff
 800187c:	4091      	lsls	r1, r2
 800187e:	000a      	movs	r2, r1
 8001880:	43d2      	mvns	r2, r2
 8001882:	401a      	ands	r2, r3
 8001884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	019b      	lsls	r3, r3, #6
 800188a:	22ff      	movs	r2, #255	@ 0xff
 800188c:	401a      	ands	r2, r3
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	0018      	movs	r0, r3
 8001894:	2303      	movs	r3, #3
 8001896:	4003      	ands	r3, r0
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800189c:	481f      	ldr	r0, [pc, #124]	@ (800191c <__NVIC_SetPriority+0xd4>)
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b25b      	sxtb	r3, r3
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	430a      	orrs	r2, r1
 80018a8:	33c0      	adds	r3, #192	@ 0xc0
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018ae:	e031      	b.n	8001914 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001920 <__NVIC_SetPriority+0xd8>)
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	0019      	movs	r1, r3
 80018b8:	230f      	movs	r3, #15
 80018ba:	400b      	ands	r3, r1
 80018bc:	3b08      	subs	r3, #8
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3306      	adds	r3, #6
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	18d3      	adds	r3, r2, r3
 80018c6:	3304      	adds	r3, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	1dfa      	adds	r2, r7, #7
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	0011      	movs	r1, r2
 80018d0:	2203      	movs	r2, #3
 80018d2:	400a      	ands	r2, r1
 80018d4:	00d2      	lsls	r2, r2, #3
 80018d6:	21ff      	movs	r1, #255	@ 0xff
 80018d8:	4091      	lsls	r1, r2
 80018da:	000a      	movs	r2, r1
 80018dc:	43d2      	mvns	r2, r2
 80018de:	401a      	ands	r2, r3
 80018e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	019b      	lsls	r3, r3, #6
 80018e6:	22ff      	movs	r2, #255	@ 0xff
 80018e8:	401a      	ands	r2, r3
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	0018      	movs	r0, r3
 80018f0:	2303      	movs	r3, #3
 80018f2:	4003      	ands	r3, r0
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f8:	4809      	ldr	r0, [pc, #36]	@ (8001920 <__NVIC_SetPriority+0xd8>)
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	001c      	movs	r4, r3
 8001900:	230f      	movs	r3, #15
 8001902:	4023      	ands	r3, r4
 8001904:	3b08      	subs	r3, #8
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	430a      	orrs	r2, r1
 800190a:	3306      	adds	r3, #6
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	18c3      	adds	r3, r0, r3
 8001910:	3304      	adds	r3, #4
 8001912:	601a      	str	r2, [r3, #0]
}
 8001914:	46c0      	nop			@ (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b003      	add	sp, #12
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	1e5a      	subs	r2, r3, #1
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	045b      	lsls	r3, r3, #17
 8001934:	429a      	cmp	r2, r3
 8001936:	d301      	bcc.n	800193c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001938:	2301      	movs	r3, #1
 800193a:	e010      	b.n	800195e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193c:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <SysTick_Config+0x44>)
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	3a01      	subs	r2, #1
 8001942:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001944:	2301      	movs	r3, #1
 8001946:	425b      	negs	r3, r3
 8001948:	2103      	movs	r1, #3
 800194a:	0018      	movs	r0, r3
 800194c:	f7ff ff7c 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <SysTick_Config+0x44>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <SysTick_Config+0x44>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	210f      	movs	r1, #15
 8001978:	187b      	adds	r3, r7, r1
 800197a:	1c02      	adds	r2, r0, #0
 800197c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	187b      	adds	r3, r7, r1
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b25b      	sxtb	r3, r3
 8001986:	0011      	movs	r1, r2
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b004      	add	sp, #16
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	0002      	movs	r2, r0
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b25b      	sxtb	r3, r3
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff ff33 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7ff ffaf 	bl	8001924 <SysTick_Config>
 80019c6:	0003      	movs	r3, r0
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b002      	add	sp, #8
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e036      	b.n	8001a54 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2221      	movs	r2, #33	@ 0x21
 80019ea:	2102      	movs	r1, #2
 80019ec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4a18      	ldr	r2, [pc, #96]	@ (8001a5c <HAL_DMA_Init+0x8c>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 f972 	bl	8001d20 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2221      	movs	r2, #33	@ 0x21
 8001a46:	2101      	movs	r1, #1
 8001a48:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	2100      	movs	r1, #0
 8001a50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b004      	add	sp, #16
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	ffffc00f 	.word	0xffffc00f

08001a60 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e03b      	b.n	8001aea <HAL_DMA_DeInit+0x8a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	438a      	bics	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f000 f93b 	bl	8001d20 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	4091      	lsls	r1, r2
 8001ab6:	000a      	movs	r2, r1
 8001ab8:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2221      	movs	r2, #33	@ 0x21
 8001adc:	2100      	movs	r1, #0
 8001ade:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	0018      	movs	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b002      	add	sp, #8
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b00:	2317      	movs	r3, #23
 8001b02:	18fb      	adds	r3, r7, r3
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	5c9b      	ldrb	r3, [r3, r2]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_DMA_Start+0x24>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e032      	b.n	8001b7c <HAL_DMA_Start+0x8a>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2221      	movs	r2, #33	@ 0x21
 8001b22:	5c9b      	ldrb	r3, [r3, r2]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d11d      	bne.n	8001b66 <HAL_DMA_Start+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2221      	movs	r2, #33	@ 0x21
 8001b2e:	2102      	movs	r1, #2
 8001b30:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2101      	movs	r1, #1
 8001b44:	438a      	bics	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 f8ba 	bl	8001cc8 <DMA_SetConfig>

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2101      	movs	r1, #1
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e007      	b.n	8001b76 <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b6e:	2317      	movs	r3, #23
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	2202      	movs	r2, #2
 8001b74:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001b76:	2317      	movs	r3, #23
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	781b      	ldrb	r3, [r3, #0]
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b006      	add	sp, #24
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d024      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x72>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2204      	movs	r2, #4
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d020      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d107      	bne.n	8001bd0 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2104      	movs	r1, #4
 8001bcc:	438a      	bics	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd8:	2104      	movs	r1, #4
 8001bda:	4091      	lsls	r1, r2
 8001bdc:	000a      	movs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d100      	bne.n	8001bea <HAL_DMA_IRQHandler+0x66>
 8001be8:	e06a      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	0010      	movs	r0, r2
 8001bf2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001bf4:	e064      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	0013      	movs	r3, r2
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4013      	ands	r3, r2
 8001c04:	d02b      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xda>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d027      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2220      	movs	r2, #32
 8001c16:	4013      	ands	r3, r2
 8001c18:	d10b      	bne.n	8001c32 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	210a      	movs	r1, #10
 8001c26:	438a      	bics	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2221      	movs	r2, #33	@ 0x21
 8001c2e:	2101      	movs	r1, #1
 8001c30:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	4091      	lsls	r1, r2
 8001c3e:	000a      	movs	r2, r1
 8001c40:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2220      	movs	r2, #32
 8001c46:	2100      	movs	r1, #0
 8001c48:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d036      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	0010      	movs	r0, r2
 8001c5a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c5c:	e030      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	2208      	movs	r2, #8
 8001c64:	409a      	lsls	r2, r3
 8001c66:	0013      	movs	r3, r2
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d028      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x13c>
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2208      	movs	r2, #8
 8001c72:	4013      	ands	r3, r2
 8001c74:	d024      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	210e      	movs	r1, #14
 8001c82:	438a      	bics	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c8e:	2101      	movs	r1, #1
 8001c90:	4091      	lsls	r1, r2
 8001c92:	000a      	movs	r2, r1
 8001c94:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2221      	movs	r2, #33	@ 0x21
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	2100      	movs	r1, #0
 8001caa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	0010      	movs	r0, r2
 8001cbc:	4798      	blx	r3
    }
  }
}
 8001cbe:	e7ff      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x13c>
 8001cc0:	46c0      	nop			@ (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b004      	add	sp, #16
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cde:	2101      	movs	r1, #1
 8001ce0:	4091      	lsls	r1, r2
 8001ce2:	000a      	movs	r2, r1
 8001ce4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d108      	bne.n	8001d08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d06:	e007      	b.n	8001d18 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	60da      	str	r2, [r3, #12]
}
 8001d18:	46c0      	nop			@ (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b004      	add	sp, #16
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a08      	ldr	r2, [pc, #32]	@ (8001d50 <DMA_CalcBaseAndBitshift+0x30>)
 8001d2e:	4694      	mov	ip, r2
 8001d30:	4463      	add	r3, ip
 8001d32:	2114      	movs	r1, #20
 8001d34:	0018      	movs	r0, r3
 8001d36:	f7fe f9f1 	bl	800011c <__udivsi3>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	009a      	lsls	r2, r3, #2
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a03      	ldr	r2, [pc, #12]	@ (8001d54 <DMA_CalcBaseAndBitshift+0x34>)
 8001d46:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001d48:	46c0      	nop			@ (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	bffdfff8 	.word	0xbffdfff8
 8001d54:	40020000 	.word	0x40020000

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d66:	e14f      	b.n	8002008 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4091      	lsls	r1, r2
 8001d72:	000a      	movs	r2, r1
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d100      	bne.n	8001d80 <HAL_GPIO_Init+0x28>
 8001d7e:	e140      	b.n	8002002 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2203      	movs	r2, #3
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d005      	beq.n	8001d98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d130      	bne.n	8001dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	409a      	lsls	r2, r3
 8001da6:	0013      	movs	r3, r2
 8001da8:	43da      	mvns	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	0013      	movs	r3, r2
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dce:	2201      	movs	r2, #1
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	0013      	movs	r3, r2
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	091b      	lsrs	r3, r3, #4
 8001de4:	2201      	movs	r2, #1
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
 8001dec:	0013      	movs	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2203      	movs	r2, #3
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d017      	beq.n	8001e36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	409a      	lsls	r2, r3
 8001e14:	0013      	movs	r3, r2
 8001e16:	43da      	mvns	r2, r3
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	409a      	lsls	r2, r3
 8001e28:	0013      	movs	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d123      	bne.n	8001e8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	58d3      	ldr	r3, [r2, r3]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2207      	movs	r2, #7
 8001e54:	4013      	ands	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	0013      	movs	r3, r2
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2107      	movs	r1, #7
 8001e6e:	400b      	ands	r3, r1
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	409a      	lsls	r2, r3
 8001e74:	0013      	movs	r3, r2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	08da      	lsrs	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3208      	adds	r2, #8
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	6939      	ldr	r1, [r7, #16]
 8001e88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	409a      	lsls	r2, r3
 8001e98:	0013      	movs	r3, r2
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	0013      	movs	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	23c0      	movs	r3, #192	@ 0xc0
 8001ec4:	029b      	lsls	r3, r3, #10
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d100      	bne.n	8001ecc <HAL_GPIO_Init+0x174>
 8001eca:	e09a      	b.n	8002002 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ecc:	4b54      	ldr	r3, [pc, #336]	@ (8002020 <HAL_GPIO_Init+0x2c8>)
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	4b53      	ldr	r3, [pc, #332]	@ (8002020 <HAL_GPIO_Init+0x2c8>)
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	619a      	str	r2, [r3, #24]
 8001ed8:	4b51      	ldr	r3, [pc, #324]	@ (8002020 <HAL_GPIO_Init+0x2c8>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2201      	movs	r2, #1
 8001ede:	4013      	ands	r3, r2
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee4:	4a4f      	ldr	r2, [pc, #316]	@ (8002024 <HAL_GPIO_Init+0x2cc>)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	3302      	adds	r3, #2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	589b      	ldr	r3, [r3, r2]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	220f      	movs	r2, #15
 8001efc:	409a      	lsls	r2, r3
 8001efe:	0013      	movs	r3, r2
 8001f00:	43da      	mvns	r2, r3
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	2390      	movs	r3, #144	@ 0x90
 8001f0c:	05db      	lsls	r3, r3, #23
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d013      	beq.n	8001f3a <HAL_GPIO_Init+0x1e2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a44      	ldr	r2, [pc, #272]	@ (8002028 <HAL_GPIO_Init+0x2d0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00d      	beq.n	8001f36 <HAL_GPIO_Init+0x1de>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a43      	ldr	r2, [pc, #268]	@ (800202c <HAL_GPIO_Init+0x2d4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d007      	beq.n	8001f32 <HAL_GPIO_Init+0x1da>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a42      	ldr	r2, [pc, #264]	@ (8002030 <HAL_GPIO_Init+0x2d8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <HAL_GPIO_Init+0x1d6>
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x1e4>
 8001f2e:	2305      	movs	r3, #5
 8001f30:	e004      	b.n	8001f3c <HAL_GPIO_Init+0x1e4>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e002      	b.n	8001f3c <HAL_GPIO_Init+0x1e4>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_GPIO_Init+0x1e4>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	2103      	movs	r1, #3
 8001f40:	400a      	ands	r2, r1
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	4093      	lsls	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f4c:	4935      	ldr	r1, [pc, #212]	@ (8002024 <HAL_GPIO_Init+0x2cc>)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f5a:	4b36      	ldr	r3, [pc, #216]	@ (8002034 <HAL_GPIO_Init+0x2dc>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43da      	mvns	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	2380      	movs	r3, #128	@ 0x80
 8001f70:	035b      	lsls	r3, r3, #13
 8001f72:	4013      	ands	r3, r2
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <HAL_GPIO_Init+0x2dc>)
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f84:	4b2b      	ldr	r3, [pc, #172]	@ (8002034 <HAL_GPIO_Init+0x2dc>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	2380      	movs	r3, #128	@ 0x80
 8001f9a:	039b      	lsls	r3, r3, #14
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fa8:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <HAL_GPIO_Init+0x2dc>)
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001fae:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <HAL_GPIO_Init+0x2dc>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	2380      	movs	r3, #128	@ 0x80
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fd2:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <HAL_GPIO_Init+0x2dc>)
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001fd8:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <HAL_GPIO_Init+0x2dc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	025b      	lsls	r3, r3, #9
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <HAL_GPIO_Init+0x2dc>)
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	40da      	lsrs	r2, r3
 8002010:	1e13      	subs	r3, r2, #0
 8002012:	d000      	beq.n	8002016 <HAL_GPIO_Init+0x2be>
 8002014:	e6a8      	b.n	8001d68 <HAL_GPIO_Init+0x10>
  } 
}
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	46c0      	nop			@ (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	b006      	add	sp, #24
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000
 8002028:	48000400 	.word	0x48000400
 800202c:	48000800 	.word	0x48000800
 8002030:	48000c00 	.word	0x48000c00
 8002034:	40010400 	.word	0x40010400

08002038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	0008      	movs	r0, r1
 8002042:	0011      	movs	r1, r2
 8002044:	1cbb      	adds	r3, r7, #2
 8002046:	1c02      	adds	r2, r0, #0
 8002048:	801a      	strh	r2, [r3, #0]
 800204a:	1c7b      	adds	r3, r7, #1
 800204c:	1c0a      	adds	r2, r1, #0
 800204e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002050:	1c7b      	adds	r3, r7, #1
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002058:	1cbb      	adds	r3, r7, #2
 800205a:	881a      	ldrh	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002060:	e003      	b.n	800206a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002062:	1cbb      	adds	r3, r7, #2
 8002064:	881a      	ldrh	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b002      	add	sp, #8
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	000a      	movs	r2, r1
 800207c:	1cbb      	adds	r3, r7, #2
 800207e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002086:	1cbb      	adds	r3, r7, #2
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4013      	ands	r3, r2
 800208e:	041a      	lsls	r2, r3, #16
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	43db      	mvns	r3, r3
 8002094:	1cb9      	adds	r1, r7, #2
 8002096:	8809      	ldrh	r1, [r1, #0]
 8002098:	400b      	ands	r3, r1
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
}
 80020a0:	46c0      	nop			@ (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b004      	add	sp, #16
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	0002      	movs	r2, r0
 80020b0:	1dbb      	adds	r3, r7, #6
 80020b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020b4:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	1dba      	adds	r2, r7, #6
 80020ba:	8812      	ldrh	r2, [r2, #0]
 80020bc:	4013      	ands	r3, r2
 80020be:	d008      	beq.n	80020d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020c2:	1dba      	adds	r2, r7, #6
 80020c4:	8812      	ldrh	r2, [r2, #0]
 80020c6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020c8:	1dbb      	adds	r3, r7, #6
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7fe fb7f 	bl	80007d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80020d2:	46c0      	nop			@ (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b002      	add	sp, #8
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	40010400 	.word	0x40010400

080020e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e301      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2201      	movs	r2, #1
 80020f8:	4013      	ands	r3, r2
 80020fa:	d100      	bne.n	80020fe <HAL_RCC_OscConfig+0x1e>
 80020fc:	e08d      	b.n	800221a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020fe:	4bc3      	ldr	r3, [pc, #780]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	220c      	movs	r2, #12
 8002104:	4013      	ands	r3, r2
 8002106:	2b04      	cmp	r3, #4
 8002108:	d00e      	beq.n	8002128 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800210a:	4bc0      	ldr	r3, [pc, #768]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	220c      	movs	r2, #12
 8002110:	4013      	ands	r3, r2
 8002112:	2b08      	cmp	r3, #8
 8002114:	d116      	bne.n	8002144 <HAL_RCC_OscConfig+0x64>
 8002116:	4bbd      	ldr	r3, [pc, #756]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	2380      	movs	r3, #128	@ 0x80
 800211c:	025b      	lsls	r3, r3, #9
 800211e:	401a      	ands	r2, r3
 8002120:	2380      	movs	r3, #128	@ 0x80
 8002122:	025b      	lsls	r3, r3, #9
 8002124:	429a      	cmp	r2, r3
 8002126:	d10d      	bne.n	8002144 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	4bb8      	ldr	r3, [pc, #736]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	029b      	lsls	r3, r3, #10
 8002130:	4013      	ands	r3, r2
 8002132:	d100      	bne.n	8002136 <HAL_RCC_OscConfig+0x56>
 8002134:	e070      	b.n	8002218 <HAL_RCC_OscConfig+0x138>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d000      	beq.n	8002140 <HAL_RCC_OscConfig+0x60>
 800213e:	e06b      	b.n	8002218 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e2d8      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d107      	bne.n	800215c <HAL_RCC_OscConfig+0x7c>
 800214c:	4baf      	ldr	r3, [pc, #700]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4bae      	ldr	r3, [pc, #696]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0249      	lsls	r1, r1, #9
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e02f      	b.n	80021bc <HAL_RCC_OscConfig+0xdc>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10c      	bne.n	800217e <HAL_RCC_OscConfig+0x9e>
 8002164:	4ba9      	ldr	r3, [pc, #676]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4ba8      	ldr	r3, [pc, #672]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 800216a:	49a9      	ldr	r1, [pc, #676]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 800216c:	400a      	ands	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	4ba6      	ldr	r3, [pc, #664]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4ba5      	ldr	r3, [pc, #660]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002176:	49a7      	ldr	r1, [pc, #668]	@ (8002414 <HAL_RCC_OscConfig+0x334>)
 8002178:	400a      	ands	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e01e      	b.n	80021bc <HAL_RCC_OscConfig+0xdc>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d10e      	bne.n	80021a4 <HAL_RCC_OscConfig+0xc4>
 8002186:	4ba1      	ldr	r3, [pc, #644]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4ba0      	ldr	r3, [pc, #640]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 800218c:	2180      	movs	r1, #128	@ 0x80
 800218e:	02c9      	lsls	r1, r1, #11
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	4b9d      	ldr	r3, [pc, #628]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b9c      	ldr	r3, [pc, #624]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 800219a:	2180      	movs	r1, #128	@ 0x80
 800219c:	0249      	lsls	r1, r1, #9
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0xdc>
 80021a4:	4b99      	ldr	r3, [pc, #612]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b98      	ldr	r3, [pc, #608]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 80021aa:	4999      	ldr	r1, [pc, #612]	@ (8002410 <HAL_RCC_OscConfig+0x330>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	4b96      	ldr	r3, [pc, #600]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b95      	ldr	r3, [pc, #596]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 80021b6:	4997      	ldr	r1, [pc, #604]	@ (8002414 <HAL_RCC_OscConfig+0x334>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d014      	beq.n	80021ee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff fb1c 	bl	8001800 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ce:	f7ff fb17 	bl	8001800 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b64      	cmp	r3, #100	@ 0x64
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e28a      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e0:	4b8a      	ldr	r3, [pc, #552]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	029b      	lsls	r3, r3, #10
 80021e8:	4013      	ands	r3, r2
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0xee>
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7ff fb07 	bl	8001800 <HAL_GetTick>
 80021f2:	0003      	movs	r3, r0
 80021f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff fb02 	bl	8001800 <HAL_GetTick>
 80021fc:	0002      	movs	r2, r0
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	@ 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e275      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b80      	ldr	r3, [pc, #512]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	029b      	lsls	r3, r3, #10
 8002212:	4013      	ands	r3, r2
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x118>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	d100      	bne.n	8002226 <HAL_RCC_OscConfig+0x146>
 8002224:	e069      	b.n	80022fa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002226:	4b79      	ldr	r3, [pc, #484]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	220c      	movs	r2, #12
 800222c:	4013      	ands	r3, r2
 800222e:	d00b      	beq.n	8002248 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002230:	4b76      	ldr	r3, [pc, #472]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	220c      	movs	r2, #12
 8002236:	4013      	ands	r3, r2
 8002238:	2b08      	cmp	r3, #8
 800223a:	d11c      	bne.n	8002276 <HAL_RCC_OscConfig+0x196>
 800223c:	4b73      	ldr	r3, [pc, #460]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	2380      	movs	r3, #128	@ 0x80
 8002242:	025b      	lsls	r3, r3, #9
 8002244:	4013      	ands	r3, r2
 8002246:	d116      	bne.n	8002276 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002248:	4b70      	ldr	r3, [pc, #448]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2202      	movs	r2, #2
 800224e:	4013      	ands	r3, r2
 8002250:	d005      	beq.n	800225e <HAL_RCC_OscConfig+0x17e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d001      	beq.n	800225e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e24b      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225e:	4b6b      	ldr	r3, [pc, #428]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	22f8      	movs	r2, #248	@ 0xf8
 8002264:	4393      	bics	r3, r2
 8002266:	0019      	movs	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	00da      	lsls	r2, r3, #3
 800226e:	4b67      	ldr	r3, [pc, #412]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002274:	e041      	b.n	80022fa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d024      	beq.n	80022c8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227e:	4b63      	ldr	r3, [pc, #396]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4b62      	ldr	r3, [pc, #392]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002284:	2101      	movs	r1, #1
 8002286:	430a      	orrs	r2, r1
 8002288:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7ff fab9 	bl	8001800 <HAL_GetTick>
 800228e:	0003      	movs	r3, r0
 8002290:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002294:	f7ff fab4 	bl	8001800 <HAL_GetTick>
 8002298:	0002      	movs	r2, r0
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e227      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	4b59      	ldr	r3, [pc, #356]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2202      	movs	r2, #2
 80022ac:	4013      	ands	r3, r2
 80022ae:	d0f1      	beq.n	8002294 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	4b56      	ldr	r3, [pc, #344]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	22f8      	movs	r2, #248	@ 0xf8
 80022b6:	4393      	bics	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00da      	lsls	r2, r3, #3
 80022c0:	4b52      	ldr	r3, [pc, #328]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 80022c2:	430a      	orrs	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	e018      	b.n	80022fa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c8:	4b50      	ldr	r3, [pc, #320]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b4f      	ldr	r3, [pc, #316]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 80022ce:	2101      	movs	r1, #1
 80022d0:	438a      	bics	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fa94 	bl	8001800 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022de:	f7ff fa8f 	bl	8001800 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e202      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f0:	4b46      	ldr	r3, [pc, #280]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2202      	movs	r2, #2
 80022f6:	4013      	ands	r3, r2
 80022f8:	d1f1      	bne.n	80022de <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2208      	movs	r2, #8
 8002300:	4013      	ands	r3, r2
 8002302:	d036      	beq.n	8002372 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d019      	beq.n	8002340 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230c:	4b3f      	ldr	r3, [pc, #252]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 800230e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002310:	4b3e      	ldr	r3, [pc, #248]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002312:	2101      	movs	r1, #1
 8002314:	430a      	orrs	r2, r1
 8002316:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002318:	f7ff fa72 	bl	8001800 <HAL_GetTick>
 800231c:	0003      	movs	r3, r0
 800231e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002322:	f7ff fa6d 	bl	8001800 <HAL_GetTick>
 8002326:	0002      	movs	r2, r0
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e1e0      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002334:	4b35      	ldr	r3, [pc, #212]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	2202      	movs	r2, #2
 800233a:	4013      	ands	r3, r2
 800233c:	d0f1      	beq.n	8002322 <HAL_RCC_OscConfig+0x242>
 800233e:	e018      	b.n	8002372 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002340:	4b32      	ldr	r3, [pc, #200]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002342:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002344:	4b31      	ldr	r3, [pc, #196]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002346:	2101      	movs	r1, #1
 8002348:	438a      	bics	r2, r1
 800234a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234c:	f7ff fa58 	bl	8001800 <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002356:	f7ff fa53 	bl	8001800 <HAL_GetTick>
 800235a:	0002      	movs	r2, r0
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1c6      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002368:	4b28      	ldr	r3, [pc, #160]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	2202      	movs	r2, #2
 800236e:	4013      	ands	r3, r2
 8002370:	d1f1      	bne.n	8002356 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2204      	movs	r2, #4
 8002378:	4013      	ands	r3, r2
 800237a:	d100      	bne.n	800237e <HAL_RCC_OscConfig+0x29e>
 800237c:	e0b4      	b.n	80024e8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	201f      	movs	r0, #31
 8002380:	183b      	adds	r3, r7, r0
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002386:	4b21      	ldr	r3, [pc, #132]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002388:	69da      	ldr	r2, [r3, #28]
 800238a:	2380      	movs	r3, #128	@ 0x80
 800238c:	055b      	lsls	r3, r3, #21
 800238e:	4013      	ands	r3, r2
 8002390:	d110      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b1e      	ldr	r3, [pc, #120]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	4b1d      	ldr	r3, [pc, #116]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002398:	2180      	movs	r1, #128	@ 0x80
 800239a:	0549      	lsls	r1, r1, #21
 800239c:	430a      	orrs	r2, r1
 800239e:	61da      	str	r2, [r3, #28]
 80023a0:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	055b      	lsls	r3, r3, #21
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023ae:	183b      	adds	r3, r7, r0
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	4b18      	ldr	r3, [pc, #96]	@ (8002418 <HAL_RCC_OscConfig+0x338>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	2380      	movs	r3, #128	@ 0x80
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4013      	ands	r3, r2
 80023be:	d11a      	bne.n	80023f6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c0:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <HAL_RCC_OscConfig+0x338>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <HAL_RCC_OscConfig+0x338>)
 80023c6:	2180      	movs	r1, #128	@ 0x80
 80023c8:	0049      	lsls	r1, r1, #1
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7ff fa17 	bl	8001800 <HAL_GetTick>
 80023d2:	0003      	movs	r3, r0
 80023d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d8:	f7ff fa12 	bl	8001800 <HAL_GetTick>
 80023dc:	0002      	movs	r2, r0
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	@ 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e185      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_RCC_OscConfig+0x338>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	2380      	movs	r3, #128	@ 0x80
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4013      	ands	r3, r2
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d10e      	bne.n	800241c <HAL_RCC_OscConfig+0x33c>
 80023fe:	4b03      	ldr	r3, [pc, #12]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002400:	6a1a      	ldr	r2, [r3, #32]
 8002402:	4b02      	ldr	r3, [pc, #8]	@ (800240c <HAL_RCC_OscConfig+0x32c>)
 8002404:	2101      	movs	r1, #1
 8002406:	430a      	orrs	r2, r1
 8002408:	621a      	str	r2, [r3, #32]
 800240a:	e035      	b.n	8002478 <HAL_RCC_OscConfig+0x398>
 800240c:	40021000 	.word	0x40021000
 8002410:	fffeffff 	.word	0xfffeffff
 8002414:	fffbffff 	.word	0xfffbffff
 8002418:	40007000 	.word	0x40007000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10c      	bne.n	800243e <HAL_RCC_OscConfig+0x35e>
 8002424:	4bb6      	ldr	r3, [pc, #728]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002426:	6a1a      	ldr	r2, [r3, #32]
 8002428:	4bb5      	ldr	r3, [pc, #724]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800242a:	2101      	movs	r1, #1
 800242c:	438a      	bics	r2, r1
 800242e:	621a      	str	r2, [r3, #32]
 8002430:	4bb3      	ldr	r3, [pc, #716]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002432:	6a1a      	ldr	r2, [r3, #32]
 8002434:	4bb2      	ldr	r3, [pc, #712]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002436:	2104      	movs	r1, #4
 8002438:	438a      	bics	r2, r1
 800243a:	621a      	str	r2, [r3, #32]
 800243c:	e01c      	b.n	8002478 <HAL_RCC_OscConfig+0x398>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b05      	cmp	r3, #5
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x380>
 8002446:	4bae      	ldr	r3, [pc, #696]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002448:	6a1a      	ldr	r2, [r3, #32]
 800244a:	4bad      	ldr	r3, [pc, #692]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800244c:	2104      	movs	r1, #4
 800244e:	430a      	orrs	r2, r1
 8002450:	621a      	str	r2, [r3, #32]
 8002452:	4bab      	ldr	r3, [pc, #684]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002454:	6a1a      	ldr	r2, [r3, #32]
 8002456:	4baa      	ldr	r3, [pc, #680]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002458:	2101      	movs	r1, #1
 800245a:	430a      	orrs	r2, r1
 800245c:	621a      	str	r2, [r3, #32]
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0x398>
 8002460:	4ba7      	ldr	r3, [pc, #668]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	4ba6      	ldr	r3, [pc, #664]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002466:	2101      	movs	r1, #1
 8002468:	438a      	bics	r2, r1
 800246a:	621a      	str	r2, [r3, #32]
 800246c:	4ba4      	ldr	r3, [pc, #656]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800246e:	6a1a      	ldr	r2, [r3, #32]
 8002470:	4ba3      	ldr	r3, [pc, #652]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002472:	2104      	movs	r1, #4
 8002474:	438a      	bics	r2, r1
 8002476:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d014      	beq.n	80024aa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002480:	f7ff f9be 	bl	8001800 <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	e009      	b.n	800249e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7ff f9b9 	bl	8001800 <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	4a9b      	ldr	r2, [pc, #620]	@ (8002704 <HAL_RCC_OscConfig+0x624>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e12b      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249e:	4b98      	ldr	r3, [pc, #608]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	2202      	movs	r2, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x3aa>
 80024a8:	e013      	b.n	80024d2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7ff f9a9 	bl	8001800 <HAL_GetTick>
 80024ae:	0003      	movs	r3, r0
 80024b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b2:	e009      	b.n	80024c8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7ff f9a4 	bl	8001800 <HAL_GetTick>
 80024b8:	0002      	movs	r2, r0
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	4a91      	ldr	r2, [pc, #580]	@ (8002704 <HAL_RCC_OscConfig+0x624>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e116      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c8:	4b8d      	ldr	r3, [pc, #564]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	2202      	movs	r2, #2
 80024ce:	4013      	ands	r3, r2
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024d2:	231f      	movs	r3, #31
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024dc:	4b88      	ldr	r3, [pc, #544]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	4b87      	ldr	r3, [pc, #540]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 80024e2:	4989      	ldr	r1, [pc, #548]	@ (8002708 <HAL_RCC_OscConfig+0x628>)
 80024e4:	400a      	ands	r2, r1
 80024e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2210      	movs	r2, #16
 80024ee:	4013      	ands	r3, r2
 80024f0:	d063      	beq.n	80025ba <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d12a      	bne.n	8002550 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024fa:	4b81      	ldr	r3, [pc, #516]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 80024fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024fe:	4b80      	ldr	r3, [pc, #512]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002500:	2104      	movs	r1, #4
 8002502:	430a      	orrs	r2, r1
 8002504:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002506:	4b7e      	ldr	r3, [pc, #504]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800250a:	4b7d      	ldr	r3, [pc, #500]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800250c:	2101      	movs	r1, #1
 800250e:	430a      	orrs	r2, r1
 8002510:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7ff f975 	bl	8001800 <HAL_GetTick>
 8002516:	0003      	movs	r3, r0
 8002518:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800251c:	f7ff f970 	bl	8001800 <HAL_GetTick>
 8002520:	0002      	movs	r2, r0
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e0e3      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800252e:	4b74      	ldr	r3, [pc, #464]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002532:	2202      	movs	r2, #2
 8002534:	4013      	ands	r3, r2
 8002536:	d0f1      	beq.n	800251c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002538:	4b71      	ldr	r3, [pc, #452]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800253a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800253c:	22f8      	movs	r2, #248	@ 0xf8
 800253e:	4393      	bics	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	00da      	lsls	r2, r3, #3
 8002548:	4b6d      	ldr	r3, [pc, #436]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800254a:	430a      	orrs	r2, r1
 800254c:	635a      	str	r2, [r3, #52]	@ 0x34
 800254e:	e034      	b.n	80025ba <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	3305      	adds	r3, #5
 8002556:	d111      	bne.n	800257c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002558:	4b69      	ldr	r3, [pc, #420]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800255a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800255c:	4b68      	ldr	r3, [pc, #416]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800255e:	2104      	movs	r1, #4
 8002560:	438a      	bics	r2, r1
 8002562:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002564:	4b66      	ldr	r3, [pc, #408]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002568:	22f8      	movs	r2, #248	@ 0xf8
 800256a:	4393      	bics	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	00da      	lsls	r2, r3, #3
 8002574:	4b62      	ldr	r3, [pc, #392]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002576:	430a      	orrs	r2, r1
 8002578:	635a      	str	r2, [r3, #52]	@ 0x34
 800257a:	e01e      	b.n	80025ba <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800257c:	4b60      	ldr	r3, [pc, #384]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800257e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002580:	4b5f      	ldr	r3, [pc, #380]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002582:	2104      	movs	r1, #4
 8002584:	430a      	orrs	r2, r1
 8002586:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002588:	4b5d      	ldr	r3, [pc, #372]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800258a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800258c:	4b5c      	ldr	r3, [pc, #368]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800258e:	2101      	movs	r1, #1
 8002590:	438a      	bics	r2, r1
 8002592:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002594:	f7ff f934 	bl	8001800 <HAL_GetTick>
 8002598:	0003      	movs	r3, r0
 800259a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800259e:	f7ff f92f 	bl	8001800 <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0a2      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025b0:	4b53      	ldr	r3, [pc, #332]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 80025b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b4:	2202      	movs	r2, #2
 80025b6:	4013      	ands	r3, r2
 80025b8:	d1f1      	bne.n	800259e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d100      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4e4>
 80025c2:	e097      	b.n	80026f4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c4:	4b4e      	ldr	r3, [pc, #312]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	220c      	movs	r2, #12
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d100      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4f2>
 80025d0:	e06b      	b.n	80026aa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d14c      	bne.n	8002674 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	4b49      	ldr	r3, [pc, #292]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4b48      	ldr	r3, [pc, #288]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 80025e0:	494a      	ldr	r1, [pc, #296]	@ (800270c <HAL_RCC_OscConfig+0x62c>)
 80025e2:	400a      	ands	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7ff f90b 	bl	8001800 <HAL_GetTick>
 80025ea:	0003      	movs	r3, r0
 80025ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f0:	f7ff f906 	bl	8001800 <HAL_GetTick>
 80025f4:	0002      	movs	r2, r0
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e079      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002602:	4b3f      	ldr	r3, [pc, #252]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	2380      	movs	r3, #128	@ 0x80
 8002608:	049b      	lsls	r3, r3, #18
 800260a:	4013      	ands	r3, r2
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800260e:	4b3c      	ldr	r3, [pc, #240]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002612:	220f      	movs	r2, #15
 8002614:	4393      	bics	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800261c:	4b38      	ldr	r3, [pc, #224]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800261e:	430a      	orrs	r2, r1
 8002620:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002622:	4b37      	ldr	r3, [pc, #220]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4a3a      	ldr	r2, [pc, #232]	@ (8002710 <HAL_RCC_OscConfig+0x630>)
 8002628:	4013      	ands	r3, r2
 800262a:	0019      	movs	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	431a      	orrs	r2, r3
 8002636:	4b32      	ldr	r3, [pc, #200]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800263c:	4b30      	ldr	r3, [pc, #192]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b2f      	ldr	r3, [pc, #188]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002642:	2180      	movs	r1, #128	@ 0x80
 8002644:	0449      	lsls	r1, r1, #17
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264a:	f7ff f8d9 	bl	8001800 <HAL_GetTick>
 800264e:	0003      	movs	r3, r0
 8002650:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002654:	f7ff f8d4 	bl	8001800 <HAL_GetTick>
 8002658:	0002      	movs	r2, r0
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e047      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002666:	4b26      	ldr	r3, [pc, #152]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	2380      	movs	r3, #128	@ 0x80
 800266c:	049b      	lsls	r3, r3, #18
 800266e:	4013      	ands	r3, r2
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x574>
 8002672:	e03f      	b.n	80026f4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002674:	4b22      	ldr	r3, [pc, #136]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b21      	ldr	r3, [pc, #132]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800267a:	4924      	ldr	r1, [pc, #144]	@ (800270c <HAL_RCC_OscConfig+0x62c>)
 800267c:	400a      	ands	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff f8be 	bl	8001800 <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268a:	f7ff f8b9 	bl	8001800 <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e02c      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269c:	4b18      	ldr	r3, [pc, #96]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2380      	movs	r3, #128	@ 0x80
 80026a2:	049b      	lsls	r3, r3, #18
 80026a4:	4013      	ands	r3, r2
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x5aa>
 80026a8:	e024      	b.n	80026f4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e01f      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80026b6:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026bc:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <HAL_RCC_OscConfig+0x620>)
 80026be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	025b      	lsls	r3, r3, #9
 80026c8:	401a      	ands	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d10e      	bne.n	80026f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	220f      	movs	r2, #15
 80026d6:	401a      	ands	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	23f0      	movs	r3, #240	@ 0xf0
 80026e4:	039b      	lsls	r3, r3, #14
 80026e6:	401a      	ands	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	0018      	movs	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b008      	add	sp, #32
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	40021000 	.word	0x40021000
 8002704:	00001388 	.word	0x00001388
 8002708:	efffffff 	.word	0xefffffff
 800270c:	feffffff 	.word	0xfeffffff
 8002710:	ffc2ffff 	.word	0xffc2ffff

08002714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0b3      	b.n	8002890 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b5b      	ldr	r3, [pc, #364]	@ (8002898 <HAL_RCC_ClockConfig+0x184>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2201      	movs	r2, #1
 800272e:	4013      	ands	r3, r2
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d911      	bls.n	800275a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b58      	ldr	r3, [pc, #352]	@ (8002898 <HAL_RCC_ClockConfig+0x184>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2201      	movs	r2, #1
 800273c:	4393      	bics	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	4b55      	ldr	r3, [pc, #340]	@ (8002898 <HAL_RCC_ClockConfig+0x184>)
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002748:	4b53      	ldr	r3, [pc, #332]	@ (8002898 <HAL_RCC_ClockConfig+0x184>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2201      	movs	r2, #1
 800274e:	4013      	ands	r3, r2
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d001      	beq.n	800275a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e09a      	b.n	8002890 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2202      	movs	r2, #2
 8002760:	4013      	ands	r3, r2
 8002762:	d015      	beq.n	8002790 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2204      	movs	r2, #4
 800276a:	4013      	ands	r3, r2
 800276c:	d006      	beq.n	800277c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800276e:	4b4b      	ldr	r3, [pc, #300]	@ (800289c <HAL_RCC_ClockConfig+0x188>)
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4b4a      	ldr	r3, [pc, #296]	@ (800289c <HAL_RCC_ClockConfig+0x188>)
 8002774:	21e0      	movs	r1, #224	@ 0xe0
 8002776:	00c9      	lsls	r1, r1, #3
 8002778:	430a      	orrs	r2, r1
 800277a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b47      	ldr	r3, [pc, #284]	@ (800289c <HAL_RCC_ClockConfig+0x188>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	22f0      	movs	r2, #240	@ 0xf0
 8002782:	4393      	bics	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	4b44      	ldr	r3, [pc, #272]	@ (800289c <HAL_RCC_ClockConfig+0x188>)
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2201      	movs	r2, #1
 8002796:	4013      	ands	r3, r2
 8002798:	d040      	beq.n	800281c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b3e      	ldr	r3, [pc, #248]	@ (800289c <HAL_RCC_ClockConfig+0x188>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	029b      	lsls	r3, r3, #10
 80027aa:	4013      	ands	r3, r2
 80027ac:	d114      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06e      	b.n	8002890 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b38      	ldr	r3, [pc, #224]	@ (800289c <HAL_RCC_ClockConfig+0x188>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	049b      	lsls	r3, r3, #18
 80027c2:	4013      	ands	r3, r2
 80027c4:	d108      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e062      	b.n	8002890 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	4b34      	ldr	r3, [pc, #208]	@ (800289c <HAL_RCC_ClockConfig+0x188>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2202      	movs	r2, #2
 80027d0:	4013      	ands	r3, r2
 80027d2:	d101      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e05b      	b.n	8002890 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d8:	4b30      	ldr	r3, [pc, #192]	@ (800289c <HAL_RCC_ClockConfig+0x188>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2203      	movs	r2, #3
 80027de:	4393      	bics	r3, r2
 80027e0:	0019      	movs	r1, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4b2d      	ldr	r3, [pc, #180]	@ (800289c <HAL_RCC_ClockConfig+0x188>)
 80027e8:	430a      	orrs	r2, r1
 80027ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ec:	f7ff f808 	bl	8001800 <HAL_GetTick>
 80027f0:	0003      	movs	r3, r0
 80027f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f4:	e009      	b.n	800280a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f6:	f7ff f803 	bl	8001800 <HAL_GetTick>
 80027fa:	0002      	movs	r2, r0
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	4a27      	ldr	r2, [pc, #156]	@ (80028a0 <HAL_RCC_ClockConfig+0x18c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e042      	b.n	8002890 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b24      	ldr	r3, [pc, #144]	@ (800289c <HAL_RCC_ClockConfig+0x188>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	220c      	movs	r2, #12
 8002810:	401a      	ands	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1ec      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_RCC_ClockConfig+0x184>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d211      	bcs.n	800284e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <HAL_RCC_ClockConfig+0x184>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2201      	movs	r2, #1
 8002830:	4393      	bics	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	4b18      	ldr	r3, [pc, #96]	@ (8002898 <HAL_RCC_ClockConfig+0x184>)
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283c:	4b16      	ldr	r3, [pc, #88]	@ (8002898 <HAL_RCC_ClockConfig+0x184>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2201      	movs	r2, #1
 8002842:	4013      	ands	r3, r2
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d001      	beq.n	800284e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e020      	b.n	8002890 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2204      	movs	r2, #4
 8002854:	4013      	ands	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4b10      	ldr	r3, [pc, #64]	@ (800289c <HAL_RCC_ClockConfig+0x188>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a11      	ldr	r2, [pc, #68]	@ (80028a4 <HAL_RCC_ClockConfig+0x190>)
 800285e:	4013      	ands	r3, r2
 8002860:	0019      	movs	r1, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <HAL_RCC_ClockConfig+0x188>)
 8002868:	430a      	orrs	r2, r1
 800286a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800286c:	f000 f820 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8002870:	0001      	movs	r1, r0
 8002872:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <HAL_RCC_ClockConfig+0x188>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	220f      	movs	r2, #15
 800287a:	4013      	ands	r3, r2
 800287c:	4a0a      	ldr	r2, [pc, #40]	@ (80028a8 <HAL_RCC_ClockConfig+0x194>)
 800287e:	5cd3      	ldrb	r3, [r2, r3]
 8002880:	000a      	movs	r2, r1
 8002882:	40da      	lsrs	r2, r3
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <HAL_RCC_ClockConfig+0x198>)
 8002886:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002888:	2003      	movs	r0, #3
 800288a:	f7fe ff73 	bl	8001774 <HAL_InitTick>
  
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	b004      	add	sp, #16
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40022000 	.word	0x40022000
 800289c:	40021000 	.word	0x40021000
 80028a0:	00001388 	.word	0x00001388
 80028a4:	fffff8ff 	.word	0xfffff8ff
 80028a8:	080052c8 	.word	0x080052c8
 80028ac:	20000000 	.word	0x20000000

080028b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028ca:	4b20      	ldr	r3, [pc, #128]	@ (800294c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	220c      	movs	r2, #12
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x30>
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0x36>
 80028de:	e02c      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028e2:	613b      	str	r3, [r7, #16]
      break;
 80028e4:	e02c      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	0c9b      	lsrs	r3, r3, #18
 80028ea:	220f      	movs	r2, #15
 80028ec:	4013      	ands	r3, r2
 80028ee:	4a19      	ldr	r2, [pc, #100]	@ (8002954 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028f0:	5cd3      	ldrb	r3, [r2, r3]
 80028f2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028f4:	4b15      	ldr	r3, [pc, #84]	@ (800294c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f8:	220f      	movs	r2, #15
 80028fa:	4013      	ands	r3, r2
 80028fc:	4a16      	ldr	r2, [pc, #88]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xa8>)
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	025b      	lsls	r3, r3, #9
 8002908:	4013      	ands	r3, r2
 800290a:	d009      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	4810      	ldr	r0, [pc, #64]	@ (8002950 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002910:	f7fd fc04 	bl	800011c <__udivsi3>
 8002914:	0003      	movs	r3, r0
 8002916:	001a      	movs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4353      	muls	r3, r2
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e009      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	000a      	movs	r2, r1
 8002924:	0152      	lsls	r2, r2, #5
 8002926:	1a52      	subs	r2, r2, r1
 8002928:	0193      	lsls	r3, r2, #6
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	185b      	adds	r3, r3, r1
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	613b      	str	r3, [r7, #16]
      break;
 8002938:	e002      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800293a:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <HAL_RCC_GetSysClockFreq+0xa0>)
 800293c:	613b      	str	r3, [r7, #16]
      break;
 800293e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002940:	693b      	ldr	r3, [r7, #16]
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b006      	add	sp, #24
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			@ (mov r8, r8)
 800294c:	40021000 	.word	0x40021000
 8002950:	007a1200 	.word	0x007a1200
 8002954:	080053e0 	.word	0x080053e0
 8002958:	080053f0 	.word	0x080053f0

0800295c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002960:	4b02      	ldr	r3, [pc, #8]	@ (800296c <HAL_RCC_GetHCLKFreq+0x10>)
 8002962:	681b      	ldr	r3, [r3, #0]
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	20000000 	.word	0x20000000

08002970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002974:	f7ff fff2 	bl	800295c <HAL_RCC_GetHCLKFreq>
 8002978:	0001      	movs	r1, r0
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	2207      	movs	r2, #7
 8002982:	4013      	ands	r3, r2
 8002984:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002986:	5cd3      	ldrb	r3, [r2, r3]
 8002988:	40d9      	lsrs	r1, r3
 800298a:	000b      	movs	r3, r1
}    
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	40021000 	.word	0x40021000
 8002998:	080052d8 	.word	0x080052d8

0800299c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	@ 0x80
 80029b2:	025b      	lsls	r3, r3, #9
 80029b4:	4013      	ands	r3, r2
 80029b6:	d100      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80029b8:	e08e      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80029ba:	2017      	movs	r0, #23
 80029bc:	183b      	adds	r3, r7, r0
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c2:	4b57      	ldr	r3, [pc, #348]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	2380      	movs	r3, #128	@ 0x80
 80029c8:	055b      	lsls	r3, r3, #21
 80029ca:	4013      	ands	r3, r2
 80029cc:	d110      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	4b54      	ldr	r3, [pc, #336]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	4b53      	ldr	r3, [pc, #332]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029d4:	2180      	movs	r1, #128	@ 0x80
 80029d6:	0549      	lsls	r1, r1, #21
 80029d8:	430a      	orrs	r2, r1
 80029da:	61da      	str	r2, [r3, #28]
 80029dc:	4b50      	ldr	r3, [pc, #320]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029de:	69da      	ldr	r2, [r3, #28]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	055b      	lsls	r3, r3, #21
 80029e4:	4013      	ands	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ea:	183b      	adds	r3, r7, r0
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	2380      	movs	r3, #128	@ 0x80
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4013      	ands	r3, r2
 80029fa:	d11a      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fc:	4b49      	ldr	r3, [pc, #292]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b48      	ldr	r3, [pc, #288]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a02:	2180      	movs	r1, #128	@ 0x80
 8002a04:	0049      	lsls	r1, r1, #1
 8002a06:	430a      	orrs	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fef9 	bl	8001800 <HAL_GetTick>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a12:	e008      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a14:	f7fe fef4 	bl	8001800 <HAL_GetTick>
 8002a18:	0002      	movs	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	@ 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e077      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a26:	4b3f      	ldr	r3, [pc, #252]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	2380      	movs	r3, #128	@ 0x80
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a32:	4b3b      	ldr	r3, [pc, #236]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a34:	6a1a      	ldr	r2, [r3, #32]
 8002a36:	23c0      	movs	r3, #192	@ 0xc0
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d034      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	23c0      	movs	r3, #192	@ 0xc0
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d02c      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a54:	4b32      	ldr	r3, [pc, #200]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4a33      	ldr	r2, [pc, #204]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a5e:	4b30      	ldr	r3, [pc, #192]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a60:	6a1a      	ldr	r2, [r3, #32]
 8002a62:	4b2f      	ldr	r3, [pc, #188]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a64:	2180      	movs	r1, #128	@ 0x80
 8002a66:	0249      	lsls	r1, r1, #9
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a72:	492e      	ldr	r1, [pc, #184]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002a74:	400a      	ands	r2, r1
 8002a76:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a78:	4b29      	ldr	r3, [pc, #164]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe febb 	bl	8001800 <HAL_GetTick>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8e:	e009      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe feb6 	bl	8001800 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	4a25      	ldr	r2, [pc, #148]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e038      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aae:	4b1c      	ldr	r3, [pc, #112]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ac2:	2317      	movs	r3, #23
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002acc:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	4b13      	ldr	r3, [pc, #76]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ad2:	4918      	ldr	r1, [pc, #96]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	4393      	bics	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2220      	movs	r2, #32
 8002afc:	4013      	ands	r3, r2
 8002afe:	d009      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b00:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	2210      	movs	r2, #16
 8002b06:	4393      	bics	r3, r2
 8002b08:	0019      	movs	r1, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	4b04      	ldr	r3, [pc, #16]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b10:	430a      	orrs	r2, r1
 8002b12:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	0018      	movs	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b006      	add	sp, #24
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40007000 	.word	0x40007000
 8002b28:	fffffcff 	.word	0xfffffcff
 8002b2c:	fffeffff 	.word	0xfffeffff
 8002b30:	00001388 	.word	0x00001388
 8002b34:	efffffff 	.word	0xefffffff

08002b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e042      	b.n	8002bd0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223d      	movs	r2, #61	@ 0x3d
 8002b4e:	5c9b      	ldrb	r3, [r3, r2]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d107      	bne.n	8002b66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	223c      	movs	r2, #60	@ 0x3c
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7fd fee7 	bl	8000934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	223d      	movs	r2, #61	@ 0x3d
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	0019      	movs	r1, r3
 8002b78:	0010      	movs	r0, r2
 8002b7a:	f000 fb15 	bl	80031a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2246      	movs	r2, #70	@ 0x46
 8002b82:	2101      	movs	r1, #1
 8002b84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	223e      	movs	r2, #62	@ 0x3e
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	5499      	strb	r1, [r3, r2]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	223f      	movs	r2, #63	@ 0x3f
 8002b92:	2101      	movs	r1, #1
 8002b94:	5499      	strb	r1, [r3, r2]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2240      	movs	r2, #64	@ 0x40
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	5499      	strb	r1, [r3, r2]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2241      	movs	r2, #65	@ 0x41
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2242      	movs	r2, #66	@ 0x42
 8002baa:	2101      	movs	r1, #1
 8002bac:	5499      	strb	r1, [r3, r2]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2243      	movs	r2, #67	@ 0x43
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2244      	movs	r2, #68	@ 0x44
 8002bba:	2101      	movs	r1, #1
 8002bbc:	5499      	strb	r1, [r3, r2]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2245      	movs	r2, #69	@ 0x45
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	223d      	movs	r2, #61	@ 0x3d
 8002bca:	2101      	movs	r1, #1
 8002bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b002      	add	sp, #8
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	223d      	movs	r2, #61	@ 0x3d
 8002be4:	5c9b      	ldrb	r3, [r3, r2]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d001      	beq.n	8002bf0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e02d      	b.n	8002c4c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	223d      	movs	r2, #61	@ 0x3d
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a15      	ldr	r2, [pc, #84]	@ (8002c54 <HAL_TIM_Base_Start+0x7c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d009      	beq.n	8002c16 <HAL_TIM_Base_Start+0x3e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a14      	ldr	r2, [pc, #80]	@ (8002c58 <HAL_TIM_Base_Start+0x80>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d004      	beq.n	8002c16 <HAL_TIM_Base_Start+0x3e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a12      	ldr	r2, [pc, #72]	@ (8002c5c <HAL_TIM_Base_Start+0x84>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d111      	bne.n	8002c3a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2207      	movs	r2, #7
 8002c1e:	4013      	ands	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b06      	cmp	r3, #6
 8002c26:	d010      	beq.n	8002c4a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2101      	movs	r1, #1
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c38:	e007      	b.n	8002c4a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2101      	movs	r1, #1
 8002c46:	430a      	orrs	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b004      	add	sp, #16
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40014000 	.word	0x40014000

08002c60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e042      	b.n	8002cf8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	223d      	movs	r2, #61	@ 0x3d
 8002c76:	5c9b      	ldrb	r3, [r3, r2]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	223c      	movs	r2, #60	@ 0x3c
 8002c82:	2100      	movs	r1, #0
 8002c84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f000 f839 	bl	8002d00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	223d      	movs	r2, #61	@ 0x3d
 8002c92:	2102      	movs	r1, #2
 8002c94:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	0010      	movs	r0, r2
 8002ca2:	f000 fa81 	bl	80031a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2246      	movs	r2, #70	@ 0x46
 8002caa:	2101      	movs	r1, #1
 8002cac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	223e      	movs	r2, #62	@ 0x3e
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	5499      	strb	r1, [r3, r2]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	223f      	movs	r2, #63	@ 0x3f
 8002cba:	2101      	movs	r1, #1
 8002cbc:	5499      	strb	r1, [r3, r2]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2240      	movs	r2, #64	@ 0x40
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	5499      	strb	r1, [r3, r2]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2241      	movs	r2, #65	@ 0x41
 8002cca:	2101      	movs	r1, #1
 8002ccc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2242      	movs	r2, #66	@ 0x42
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2243      	movs	r2, #67	@ 0x43
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2244      	movs	r2, #68	@ 0x44
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5499      	strb	r1, [r3, r2]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2245      	movs	r2, #69	@ 0x45
 8002cea:	2101      	movs	r1, #1
 8002cec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	223d      	movs	r2, #61	@ 0x3d
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b002      	add	sp, #8
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d08:	46c0      	nop			@ (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d108      	bne.n	8002d32 <HAL_TIM_PWM_Start+0x22>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	223e      	movs	r2, #62	@ 0x3e
 8002d24:	5c9b      	ldrb	r3, [r3, r2]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	1e5a      	subs	r2, r3, #1
 8002d2c:	4193      	sbcs	r3, r2
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	e01f      	b.n	8002d72 <HAL_TIM_PWM_Start+0x62>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d108      	bne.n	8002d4a <HAL_TIM_PWM_Start+0x3a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	223f      	movs	r2, #63	@ 0x3f
 8002d3c:	5c9b      	ldrb	r3, [r3, r2]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	1e5a      	subs	r2, r3, #1
 8002d44:	4193      	sbcs	r3, r2
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	e013      	b.n	8002d72 <HAL_TIM_PWM_Start+0x62>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d108      	bne.n	8002d62 <HAL_TIM_PWM_Start+0x52>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2240      	movs	r2, #64	@ 0x40
 8002d54:	5c9b      	ldrb	r3, [r3, r2]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	1e5a      	subs	r2, r3, #1
 8002d5c:	4193      	sbcs	r3, r2
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	e007      	b.n	8002d72 <HAL_TIM_PWM_Start+0x62>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2241      	movs	r2, #65	@ 0x41
 8002d66:	5c9b      	ldrb	r3, [r3, r2]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	1e5a      	subs	r2, r3, #1
 8002d6e:	4193      	sbcs	r3, r2
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e06e      	b.n	8002e58 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d104      	bne.n	8002d8a <HAL_TIM_PWM_Start+0x7a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	223e      	movs	r2, #62	@ 0x3e
 8002d84:	2102      	movs	r1, #2
 8002d86:	5499      	strb	r1, [r3, r2]
 8002d88:	e013      	b.n	8002db2 <HAL_TIM_PWM_Start+0xa2>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d104      	bne.n	8002d9a <HAL_TIM_PWM_Start+0x8a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	223f      	movs	r2, #63	@ 0x3f
 8002d94:	2102      	movs	r1, #2
 8002d96:	5499      	strb	r1, [r3, r2]
 8002d98:	e00b      	b.n	8002db2 <HAL_TIM_PWM_Start+0xa2>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d104      	bne.n	8002daa <HAL_TIM_PWM_Start+0x9a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2240      	movs	r2, #64	@ 0x40
 8002da4:	2102      	movs	r1, #2
 8002da6:	5499      	strb	r1, [r3, r2]
 8002da8:	e003      	b.n	8002db2 <HAL_TIM_PWM_Start+0xa2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2241      	movs	r2, #65	@ 0x41
 8002dae:	2102      	movs	r1, #2
 8002db0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6839      	ldr	r1, [r7, #0]
 8002db8:	2201      	movs	r2, #1
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 fd0e 	bl	80037dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a26      	ldr	r2, [pc, #152]	@ (8002e60 <HAL_TIM_PWM_Start+0x150>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00e      	beq.n	8002de8 <HAL_TIM_PWM_Start+0xd8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a25      	ldr	r2, [pc, #148]	@ (8002e64 <HAL_TIM_PWM_Start+0x154>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d009      	beq.n	8002de8 <HAL_TIM_PWM_Start+0xd8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a23      	ldr	r2, [pc, #140]	@ (8002e68 <HAL_TIM_PWM_Start+0x158>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <HAL_TIM_PWM_Start+0xd8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a22      	ldr	r2, [pc, #136]	@ (8002e6c <HAL_TIM_PWM_Start+0x15c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_TIM_PWM_Start+0xdc>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_TIM_PWM_Start+0xde>
 8002dec:	2300      	movs	r3, #0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2180      	movs	r1, #128	@ 0x80
 8002dfe:	0209      	lsls	r1, r1, #8
 8002e00:	430a      	orrs	r2, r1
 8002e02:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a15      	ldr	r2, [pc, #84]	@ (8002e60 <HAL_TIM_PWM_Start+0x150>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_TIM_PWM_Start+0x112>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a17      	ldr	r2, [pc, #92]	@ (8002e70 <HAL_TIM_PWM_Start+0x160>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_TIM_PWM_Start+0x112>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a11      	ldr	r2, [pc, #68]	@ (8002e64 <HAL_TIM_PWM_Start+0x154>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d111      	bne.n	8002e46 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2207      	movs	r2, #7
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b06      	cmp	r3, #6
 8002e32:	d010      	beq.n	8002e56 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2101      	movs	r1, #1
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e44:	e007      	b.n	8002e56 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2101      	movs	r1, #1
 8002e52:	430a      	orrs	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b004      	add	sp, #16
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40014000 	.word	0x40014000
 8002e68:	40014400 	.word	0x40014400
 8002e6c:	40014800 	.word	0x40014800
 8002e70:	40000400 	.word	0x40000400

08002e74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e80:	2317      	movs	r3, #23
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	223c      	movs	r2, #60	@ 0x3c
 8002e8c:	5c9b      	ldrb	r3, [r3, r2]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e0ad      	b.n	8002ff2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	223c      	movs	r2, #60	@ 0x3c
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b0c      	cmp	r3, #12
 8002ea2:	d100      	bne.n	8002ea6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002ea4:	e076      	b.n	8002f94 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b0c      	cmp	r3, #12
 8002eaa:	d900      	bls.n	8002eae <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002eac:	e095      	b.n	8002fda <HAL_TIM_PWM_ConfigChannel+0x166>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d04e      	beq.n	8002f52 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d900      	bls.n	8002ebc <HAL_TIM_PWM_ConfigChannel+0x48>
 8002eba:	e08e      	b.n	8002fda <HAL_TIM_PWM_ConfigChannel+0x166>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x56>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d021      	beq.n	8002f0c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002ec8:	e087      	b.n	8002fda <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	0011      	movs	r1, r2
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f000 f9ec 	bl	80032b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2108      	movs	r1, #8
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	438a      	bics	r2, r1
 8002ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6999      	ldr	r1, [r3, #24]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	619a      	str	r2, [r3, #24]
      break;
 8002f0a:	e06b      	b.n	8002fe4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 fa53 	bl	80033c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2180      	movs	r1, #128	@ 0x80
 8002f26:	0109      	lsls	r1, r1, #4
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4931      	ldr	r1, [pc, #196]	@ (8002ffc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002f38:	400a      	ands	r2, r1
 8002f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6999      	ldr	r1, [r3, #24]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	021a      	lsls	r2, r3, #8
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	619a      	str	r2, [r3, #24]
      break;
 8002f50:	e048      	b.n	8002fe4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	0011      	movs	r1, r2
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 fab4 	bl	80034c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2108      	movs	r1, #8
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	438a      	bics	r2, r1
 8002f7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69d9      	ldr	r1, [r3, #28]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	61da      	str	r2, [r3, #28]
      break;
 8002f92:	e027      	b.n	8002fe4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	f000 fb19 	bl	80035d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2180      	movs	r1, #128	@ 0x80
 8002fae:	0109      	lsls	r1, r1, #4
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69da      	ldr	r2, [r3, #28]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	490f      	ldr	r1, [pc, #60]	@ (8002ffc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69d9      	ldr	r1, [r3, #28]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	021a      	lsls	r2, r3, #8
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	61da      	str	r2, [r3, #28]
      break;
 8002fd8:	e004      	b.n	8002fe4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002fda:	2317      	movs	r3, #23
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
      break;
 8002fe2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	223c      	movs	r2, #60	@ 0x3c
 8002fe8:	2100      	movs	r1, #0
 8002fea:	5499      	strb	r1, [r3, r2]

  return status;
 8002fec:	2317      	movs	r3, #23
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	781b      	ldrb	r3, [r3, #0]
}
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b006      	add	sp, #24
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	fffffbff 	.word	0xfffffbff

08003000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800300a:	230f      	movs	r3, #15
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	223c      	movs	r2, #60	@ 0x3c
 8003016:	5c9b      	ldrb	r3, [r3, r2]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_TIM_ConfigClockSource+0x20>
 800301c:	2302      	movs	r3, #2
 800301e:	e0bc      	b.n	800319a <HAL_TIM_ConfigClockSource+0x19a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	223c      	movs	r2, #60	@ 0x3c
 8003024:	2101      	movs	r1, #1
 8003026:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	223d      	movs	r2, #61	@ 0x3d
 800302c:	2102      	movs	r1, #2
 800302e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2277      	movs	r2, #119	@ 0x77
 800303c:	4393      	bics	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4a58      	ldr	r2, [pc, #352]	@ (80031a4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003044:	4013      	ands	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2280      	movs	r2, #128	@ 0x80
 8003056:	0192      	lsls	r2, r2, #6
 8003058:	4293      	cmp	r3, r2
 800305a:	d040      	beq.n	80030de <HAL_TIM_ConfigClockSource+0xde>
 800305c:	2280      	movs	r2, #128	@ 0x80
 800305e:	0192      	lsls	r2, r2, #6
 8003060:	4293      	cmp	r3, r2
 8003062:	d900      	bls.n	8003066 <HAL_TIM_ConfigClockSource+0x66>
 8003064:	e088      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x178>
 8003066:	2280      	movs	r2, #128	@ 0x80
 8003068:	0152      	lsls	r2, r2, #5
 800306a:	4293      	cmp	r3, r2
 800306c:	d100      	bne.n	8003070 <HAL_TIM_ConfigClockSource+0x70>
 800306e:	e088      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x182>
 8003070:	2280      	movs	r2, #128	@ 0x80
 8003072:	0152      	lsls	r2, r2, #5
 8003074:	4293      	cmp	r3, r2
 8003076:	d900      	bls.n	800307a <HAL_TIM_ConfigClockSource+0x7a>
 8003078:	e07e      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x178>
 800307a:	2b70      	cmp	r3, #112	@ 0x70
 800307c:	d018      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0xb0>
 800307e:	d900      	bls.n	8003082 <HAL_TIM_ConfigClockSource+0x82>
 8003080:	e07a      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x178>
 8003082:	2b60      	cmp	r3, #96	@ 0x60
 8003084:	d04f      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0x126>
 8003086:	d900      	bls.n	800308a <HAL_TIM_ConfigClockSource+0x8a>
 8003088:	e076      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x178>
 800308a:	2b50      	cmp	r3, #80	@ 0x50
 800308c:	d03b      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x106>
 800308e:	d900      	bls.n	8003092 <HAL_TIM_ConfigClockSource+0x92>
 8003090:	e072      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x178>
 8003092:	2b40      	cmp	r3, #64	@ 0x40
 8003094:	d057      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x146>
 8003096:	d900      	bls.n	800309a <HAL_TIM_ConfigClockSource+0x9a>
 8003098:	e06e      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x178>
 800309a:	2b30      	cmp	r3, #48	@ 0x30
 800309c:	d063      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x166>
 800309e:	d86b      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x178>
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d060      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x166>
 80030a4:	d868      	bhi.n	8003178 <HAL_TIM_ConfigClockSource+0x178>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d05d      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x166>
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d05b      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x166>
 80030ae:	e063      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030c0:	f000 fb6c 	bl	800379c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2277      	movs	r2, #119	@ 0x77
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	609a      	str	r2, [r3, #8]
      break;
 80030dc:	e052      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030ee:	f000 fb55 	bl	800379c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2180      	movs	r1, #128	@ 0x80
 80030fe:	01c9      	lsls	r1, r1, #7
 8003100:	430a      	orrs	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
      break;
 8003104:	e03e      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003112:	001a      	movs	r2, r3
 8003114:	f000 fac8 	bl	80036a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2150      	movs	r1, #80	@ 0x50
 800311e:	0018      	movs	r0, r3
 8003120:	f000 fb22 	bl	8003768 <TIM_ITRx_SetConfig>
      break;
 8003124:	e02e      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003132:	001a      	movs	r2, r3
 8003134:	f000 fae6 	bl	8003704 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2160      	movs	r1, #96	@ 0x60
 800313e:	0018      	movs	r0, r3
 8003140:	f000 fb12 	bl	8003768 <TIM_ITRx_SetConfig>
      break;
 8003144:	e01e      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003152:	001a      	movs	r2, r3
 8003154:	f000 faa8 	bl	80036a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2140      	movs	r1, #64	@ 0x40
 800315e:	0018      	movs	r0, r3
 8003160:	f000 fb02 	bl	8003768 <TIM_ITRx_SetConfig>
      break;
 8003164:	e00e      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	0019      	movs	r1, r3
 8003170:	0010      	movs	r0, r2
 8003172:	f000 faf9 	bl	8003768 <TIM_ITRx_SetConfig>
      break;
 8003176:	e005      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003178:	230f      	movs	r3, #15
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
      break;
 8003180:	e000      	b.n	8003184 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003182:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	223d      	movs	r2, #61	@ 0x3d
 8003188:	2101      	movs	r1, #1
 800318a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	223c      	movs	r2, #60	@ 0x3c
 8003190:	2100      	movs	r1, #0
 8003192:	5499      	strb	r1, [r3, r2]

  return status;
 8003194:	230f      	movs	r3, #15
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	781b      	ldrb	r3, [r3, #0]
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	b004      	add	sp, #16
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	ffff00ff 	.word	0xffff00ff

080031a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a36      	ldr	r2, [pc, #216]	@ (8003294 <TIM_Base_SetConfig+0xec>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d003      	beq.n	80031c8 <TIM_Base_SetConfig+0x20>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a35      	ldr	r2, [pc, #212]	@ (8003298 <TIM_Base_SetConfig+0xf0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d108      	bne.n	80031da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2270      	movs	r2, #112	@ 0x70
 80031cc:	4393      	bics	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003294 <TIM_Base_SetConfig+0xec>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <TIM_Base_SetConfig+0x62>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003298 <TIM_Base_SetConfig+0xf0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00f      	beq.n	800320a <TIM_Base_SetConfig+0x62>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	@ (800329c <TIM_Base_SetConfig+0xf4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00b      	beq.n	800320a <TIM_Base_SetConfig+0x62>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a2a      	ldr	r2, [pc, #168]	@ (80032a0 <TIM_Base_SetConfig+0xf8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <TIM_Base_SetConfig+0x62>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a29      	ldr	r2, [pc, #164]	@ (80032a4 <TIM_Base_SetConfig+0xfc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d003      	beq.n	800320a <TIM_Base_SetConfig+0x62>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a28      	ldr	r2, [pc, #160]	@ (80032a8 <TIM_Base_SetConfig+0x100>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d108      	bne.n	800321c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a27      	ldr	r2, [pc, #156]	@ (80032ac <TIM_Base_SetConfig+0x104>)
 800320e:	4013      	ands	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2280      	movs	r2, #128	@ 0x80
 8003220:	4393      	bics	r3, r2
 8003222:	001a      	movs	r2, r3
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a13      	ldr	r2, [pc, #76]	@ (8003294 <TIM_Base_SetConfig+0xec>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00b      	beq.n	8003262 <TIM_Base_SetConfig+0xba>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <TIM_Base_SetConfig+0xf8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d007      	beq.n	8003262 <TIM_Base_SetConfig+0xba>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a13      	ldr	r2, [pc, #76]	@ (80032a4 <TIM_Base_SetConfig+0xfc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d003      	beq.n	8003262 <TIM_Base_SetConfig+0xba>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a12      	ldr	r2, [pc, #72]	@ (80032a8 <TIM_Base_SetConfig+0x100>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d103      	bne.n	800326a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2201      	movs	r2, #1
 8003276:	4013      	ands	r3, r2
 8003278:	2b01      	cmp	r3, #1
 800327a:	d106      	bne.n	800328a <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2201      	movs	r2, #1
 8003282:	4393      	bics	r3, r2
 8003284:	001a      	movs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	611a      	str	r2, [r3, #16]
  }
}
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	46bd      	mov	sp, r7
 800328e:	b004      	add	sp, #16
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40000400 	.word	0x40000400
 800329c:	40002000 	.word	0x40002000
 80032a0:	40014000 	.word	0x40014000
 80032a4:	40014400 	.word	0x40014400
 80032a8:	40014800 	.word	0x40014800
 80032ac:	fffffcff 	.word	0xfffffcff

080032b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	2201      	movs	r2, #1
 80032c6:	4393      	bics	r3, r2
 80032c8:	001a      	movs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2270      	movs	r2, #112	@ 0x70
 80032de:	4393      	bics	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2203      	movs	r2, #3
 80032e6:	4393      	bics	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2202      	movs	r2, #2
 80032f8:	4393      	bics	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a27      	ldr	r2, [pc, #156]	@ (80033a8 <TIM_OC1_SetConfig+0xf8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00b      	beq.n	8003326 <TIM_OC1_SetConfig+0x76>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a26      	ldr	r2, [pc, #152]	@ (80033ac <TIM_OC1_SetConfig+0xfc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d007      	beq.n	8003326 <TIM_OC1_SetConfig+0x76>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a25      	ldr	r2, [pc, #148]	@ (80033b0 <TIM_OC1_SetConfig+0x100>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d003      	beq.n	8003326 <TIM_OC1_SetConfig+0x76>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a24      	ldr	r2, [pc, #144]	@ (80033b4 <TIM_OC1_SetConfig+0x104>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d10c      	bne.n	8003340 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2208      	movs	r2, #8
 800332a:	4393      	bics	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2204      	movs	r2, #4
 800333c:	4393      	bics	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a19      	ldr	r2, [pc, #100]	@ (80033a8 <TIM_OC1_SetConfig+0xf8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00b      	beq.n	8003360 <TIM_OC1_SetConfig+0xb0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a18      	ldr	r2, [pc, #96]	@ (80033ac <TIM_OC1_SetConfig+0xfc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d007      	beq.n	8003360 <TIM_OC1_SetConfig+0xb0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a17      	ldr	r2, [pc, #92]	@ (80033b0 <TIM_OC1_SetConfig+0x100>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_OC1_SetConfig+0xb0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a16      	ldr	r2, [pc, #88]	@ (80033b4 <TIM_OC1_SetConfig+0x104>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d111      	bne.n	8003384 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4a15      	ldr	r2, [pc, #84]	@ (80033b8 <TIM_OC1_SetConfig+0x108>)
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4a14      	ldr	r2, [pc, #80]	@ (80033bc <TIM_OC1_SetConfig+0x10c>)
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	621a      	str	r2, [r3, #32]
}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b006      	add	sp, #24
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800
 80033b8:	fffffeff 	.word	0xfffffeff
 80033bc:	fffffdff 	.word	0xfffffdff

080033c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	2210      	movs	r2, #16
 80033d6:	4393      	bics	r3, r2
 80033d8:	001a      	movs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a2e      	ldr	r2, [pc, #184]	@ (80034a8 <TIM_OC2_SetConfig+0xe8>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a2d      	ldr	r2, [pc, #180]	@ (80034ac <TIM_OC2_SetConfig+0xec>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2220      	movs	r2, #32
 800340a:	4393      	bics	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a24      	ldr	r2, [pc, #144]	@ (80034b0 <TIM_OC2_SetConfig+0xf0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d10d      	bne.n	800343e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2280      	movs	r2, #128	@ 0x80
 8003426:	4393      	bics	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2240      	movs	r2, #64	@ 0x40
 800343a:	4393      	bics	r3, r2
 800343c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a1b      	ldr	r2, [pc, #108]	@ (80034b0 <TIM_OC2_SetConfig+0xf0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00b      	beq.n	800345e <TIM_OC2_SetConfig+0x9e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a1a      	ldr	r2, [pc, #104]	@ (80034b4 <TIM_OC2_SetConfig+0xf4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d007      	beq.n	800345e <TIM_OC2_SetConfig+0x9e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a19      	ldr	r2, [pc, #100]	@ (80034b8 <TIM_OC2_SetConfig+0xf8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d003      	beq.n	800345e <TIM_OC2_SetConfig+0x9e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a18      	ldr	r2, [pc, #96]	@ (80034bc <TIM_OC2_SetConfig+0xfc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d113      	bne.n	8003486 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4a17      	ldr	r2, [pc, #92]	@ (80034c0 <TIM_OC2_SetConfig+0x100>)
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4a16      	ldr	r2, [pc, #88]	@ (80034c4 <TIM_OC2_SetConfig+0x104>)
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	621a      	str	r2, [r3, #32]
}
 80034a0:	46c0      	nop			@ (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b006      	add	sp, #24
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	ffff8fff 	.word	0xffff8fff
 80034ac:	fffffcff 	.word	0xfffffcff
 80034b0:	40012c00 	.word	0x40012c00
 80034b4:	40014000 	.word	0x40014000
 80034b8:	40014400 	.word	0x40014400
 80034bc:	40014800 	.word	0x40014800
 80034c0:	fffffbff 	.word	0xfffffbff
 80034c4:	fffff7ff 	.word	0xfffff7ff

080034c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4a33      	ldr	r2, [pc, #204]	@ (80035ac <TIM_OC3_SetConfig+0xe4>)
 80034de:	401a      	ands	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2270      	movs	r2, #112	@ 0x70
 80034f4:	4393      	bics	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2203      	movs	r2, #3
 80034fc:	4393      	bics	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	4a28      	ldr	r2, [pc, #160]	@ (80035b0 <TIM_OC3_SetConfig+0xe8>)
 800350e:	4013      	ands	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a24      	ldr	r2, [pc, #144]	@ (80035b4 <TIM_OC3_SetConfig+0xec>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10d      	bne.n	8003542 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	4a23      	ldr	r2, [pc, #140]	@ (80035b8 <TIM_OC3_SetConfig+0xf0>)
 800352a:	4013      	ands	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	4a1f      	ldr	r2, [pc, #124]	@ (80035bc <TIM_OC3_SetConfig+0xf4>)
 800353e:	4013      	ands	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a1b      	ldr	r2, [pc, #108]	@ (80035b4 <TIM_OC3_SetConfig+0xec>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00b      	beq.n	8003562 <TIM_OC3_SetConfig+0x9a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1c      	ldr	r2, [pc, #112]	@ (80035c0 <TIM_OC3_SetConfig+0xf8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d007      	beq.n	8003562 <TIM_OC3_SetConfig+0x9a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1b      	ldr	r2, [pc, #108]	@ (80035c4 <TIM_OC3_SetConfig+0xfc>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d003      	beq.n	8003562 <TIM_OC3_SetConfig+0x9a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a1a      	ldr	r2, [pc, #104]	@ (80035c8 <TIM_OC3_SetConfig+0x100>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d113      	bne.n	800358a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4a19      	ldr	r2, [pc, #100]	@ (80035cc <TIM_OC3_SetConfig+0x104>)
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4a18      	ldr	r2, [pc, #96]	@ (80035d0 <TIM_OC3_SetConfig+0x108>)
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	621a      	str	r2, [r3, #32]
}
 80035a4:	46c0      	nop			@ (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b006      	add	sp, #24
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	fffffeff 	.word	0xfffffeff
 80035b0:	fffffdff 	.word	0xfffffdff
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	fffff7ff 	.word	0xfffff7ff
 80035bc:	fffffbff 	.word	0xfffffbff
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40014400 	.word	0x40014400
 80035c8:	40014800 	.word	0x40014800
 80035cc:	ffffefff 	.word	0xffffefff
 80035d0:	ffffdfff 	.word	0xffffdfff

080035d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	4a26      	ldr	r2, [pc, #152]	@ (8003684 <TIM_OC4_SetConfig+0xb0>)
 80035ea:	401a      	ands	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a22      	ldr	r2, [pc, #136]	@ (8003688 <TIM_OC4_SetConfig+0xb4>)
 8003600:	4013      	ands	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a21      	ldr	r2, [pc, #132]	@ (800368c <TIM_OC4_SetConfig+0xb8>)
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4a1d      	ldr	r2, [pc, #116]	@ (8003690 <TIM_OC4_SetConfig+0xbc>)
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	031b      	lsls	r3, r3, #12
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a19      	ldr	r2, [pc, #100]	@ (8003694 <TIM_OC4_SetConfig+0xc0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00b      	beq.n	800364c <TIM_OC4_SetConfig+0x78>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a18      	ldr	r2, [pc, #96]	@ (8003698 <TIM_OC4_SetConfig+0xc4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d007      	beq.n	800364c <TIM_OC4_SetConfig+0x78>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a17      	ldr	r2, [pc, #92]	@ (800369c <TIM_OC4_SetConfig+0xc8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_OC4_SetConfig+0x78>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a16      	ldr	r2, [pc, #88]	@ (80036a0 <TIM_OC4_SetConfig+0xcc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d109      	bne.n	8003660 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	4a15      	ldr	r2, [pc, #84]	@ (80036a4 <TIM_OC4_SetConfig+0xd0>)
 8003650:	4013      	ands	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	019b      	lsls	r3, r3, #6
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b006      	add	sp, #24
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	ffffefff 	.word	0xffffefff
 8003688:	ffff8fff 	.word	0xffff8fff
 800368c:	fffffcff 	.word	0xfffffcff
 8003690:	ffffdfff 	.word	0xffffdfff
 8003694:	40012c00 	.word	0x40012c00
 8003698:	40014000 	.word	0x40014000
 800369c:	40014400 	.word	0x40014400
 80036a0:	40014800 	.word	0x40014800
 80036a4:	ffffbfff 	.word	0xffffbfff

080036a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	2201      	movs	r2, #1
 80036c0:	4393      	bics	r3, r2
 80036c2:	001a      	movs	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	22f0      	movs	r2, #240	@ 0xf0
 80036d2:	4393      	bics	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	220a      	movs	r2, #10
 80036e4:	4393      	bics	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	621a      	str	r2, [r3, #32]
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b006      	add	sp, #24
 8003702:	bd80      	pop	{r7, pc}

08003704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	2210      	movs	r2, #16
 800371c:	4393      	bics	r3, r2
 800371e:	001a      	movs	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4a0d      	ldr	r2, [pc, #52]	@ (8003764 <TIM_TI2_ConfigInputStage+0x60>)
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	031b      	lsls	r3, r3, #12
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	22a0      	movs	r2, #160	@ 0xa0
 8003740:	4393      	bics	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b006      	add	sp, #24
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	ffff0fff 	.word	0xffff0fff

08003768 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2270      	movs	r2, #112	@ 0x70
 800377c:	4393      	bics	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	2207      	movs	r2, #7
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	609a      	str	r2, [r3, #8]
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b004      	add	sp, #16
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4a09      	ldr	r2, [pc, #36]	@ (80037d8 <TIM_ETR_SetConfig+0x3c>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	021a      	lsls	r2, r3, #8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	431a      	orrs	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	609a      	str	r2, [r3, #8]
}
 80037d0:	46c0      	nop			@ (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b006      	add	sp, #24
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	ffff00ff 	.word	0xffff00ff

080037dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	221f      	movs	r2, #31
 80037ec:	4013      	ands	r3, r2
 80037ee:	2201      	movs	r2, #1
 80037f0:	409a      	lsls	r2, r3
 80037f2:	0013      	movs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	43d2      	mvns	r2, r2
 80037fe:	401a      	ands	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	211f      	movs	r1, #31
 800380c:	400b      	ands	r3, r1
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4099      	lsls	r1, r3
 8003812:	000b      	movs	r3, r1
 8003814:	431a      	orrs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	b006      	add	sp, #24
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	223c      	movs	r2, #60	@ 0x3c
 8003832:	5c9b      	ldrb	r3, [r3, r2]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003838:	2302      	movs	r3, #2
 800383a:	e041      	b.n	80038c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	223c      	movs	r2, #60	@ 0x3c
 8003840:	2101      	movs	r1, #1
 8003842:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	223d      	movs	r2, #61	@ 0x3d
 8003848:	2102      	movs	r1, #2
 800384a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2270      	movs	r2, #112	@ 0x70
 8003860:	4393      	bics	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a13      	ldr	r2, [pc, #76]	@ (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d009      	beq.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a11      	ldr	r2, [pc, #68]	@ (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a10      	ldr	r2, [pc, #64]	@ (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d10c      	bne.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2280      	movs	r2, #128	@ 0x80
 8003898:	4393      	bics	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	223d      	movs	r2, #61	@ 0x3d
 80038b2:	2101      	movs	r1, #1
 80038b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	223c      	movs	r2, #60	@ 0x3c
 80038ba:	2100      	movs	r1, #0
 80038bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	0018      	movs	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b004      	add	sp, #16
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40012c00 	.word	0x40012c00
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40014000 	.word	0x40014000

080038d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	223c      	movs	r2, #60	@ 0x3c
 80038e6:	5c9b      	ldrb	r3, [r3, r2]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e03e      	b.n	800396e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	223c      	movs	r2, #60	@ 0x3c
 80038f4:	2101      	movs	r1, #1
 80038f6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	22ff      	movs	r2, #255	@ 0xff
 80038fc:	4393      	bics	r3, r2
 80038fe:	001a      	movs	r2, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a1b      	ldr	r2, [pc, #108]	@ (8003978 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800390c:	401a      	ands	r2, r3
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a18      	ldr	r2, [pc, #96]	@ (800397c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800391a:	401a      	ands	r2, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a16      	ldr	r2, [pc, #88]	@ (8003980 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003928:	401a      	ands	r2, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4a13      	ldr	r2, [pc, #76]	@ (8003984 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003936:	401a      	ands	r2, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a11      	ldr	r2, [pc, #68]	@ (8003988 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003944:	401a      	ands	r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4a0e      	ldr	r2, [pc, #56]	@ (800398c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003952:	401a      	ands	r2, r3
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	223c      	movs	r2, #60	@ 0x3c
 8003968:	2100      	movs	r1, #0
 800396a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b004      	add	sp, #16
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	fffffcff 	.word	0xfffffcff
 800397c:	fffffbff 	.word	0xfffffbff
 8003980:	fffff7ff 	.word	0xfffff7ff
 8003984:	ffffefff 	.word	0xffffefff
 8003988:	ffffdfff 	.word	0xffffdfff
 800398c:	ffffbfff 	.word	0xffffbfff

08003990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e044      	b.n	8003a2c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d107      	bne.n	80039ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2278      	movs	r2, #120	@ 0x78
 80039ae:	2100      	movs	r1, #0
 80039b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7fd f86d 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2224      	movs	r2, #36	@ 0x24
 80039be:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2101      	movs	r1, #1
 80039cc:	438a      	bics	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	0018      	movs	r0, r3
 80039dc:	f000 fa0c 	bl	8003df8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	0018      	movs	r0, r3
 80039e4:	f000 f8c8 	bl	8003b78 <UART_SetConfig>
 80039e8:	0003      	movs	r3, r0
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e01c      	b.n	8003a2c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	490d      	ldr	r1, [pc, #52]	@ (8003a34 <HAL_UART_Init+0xa4>)
 80039fe:	400a      	ands	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2108      	movs	r1, #8
 8003a0e:	438a      	bics	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f000 fa9b 	bl	8003f60 <UART_CheckIdleState>
 8003a2a:	0003      	movs	r3, r0
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b002      	add	sp, #8
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	fffff7ff 	.word	0xfffff7ff

08003a38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	@ 0x28
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	1dbb      	adds	r3, r7, #6
 8003a46:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d000      	beq.n	8003a52 <HAL_UART_Transmit+0x1a>
 8003a50:	e08c      	b.n	8003b6c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_UART_Transmit+0x28>
 8003a58:	1dbb      	adds	r3, r7, #6
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e084      	b.n	8003b6e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	2380      	movs	r3, #128	@ 0x80
 8003a6a:	015b      	lsls	r3, r3, #5
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d109      	bne.n	8003a84 <HAL_UART_Transmit+0x4c>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e074      	b.n	8003b6e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2284      	movs	r2, #132	@ 0x84
 8003a88:	2100      	movs	r1, #0
 8003a8a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2221      	movs	r2, #33	@ 0x21
 8003a90:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a92:	f7fd feb5 	bl	8001800 <HAL_GetTick>
 8003a96:	0003      	movs	r3, r0
 8003a98:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1dba      	adds	r2, r7, #6
 8003a9e:	2150      	movs	r1, #80	@ 0x50
 8003aa0:	8812      	ldrh	r2, [r2, #0]
 8003aa2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1dba      	adds	r2, r7, #6
 8003aa8:	2152      	movs	r1, #82	@ 0x52
 8003aaa:	8812      	ldrh	r2, [r2, #0]
 8003aac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	2380      	movs	r3, #128	@ 0x80
 8003ab4:	015b      	lsls	r3, r3, #5
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d108      	bne.n	8003acc <HAL_UART_Transmit+0x94>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e003      	b.n	8003ad4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ad4:	e02f      	b.n	8003b36 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	0013      	movs	r3, r2
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2180      	movs	r1, #128	@ 0x80
 8003ae4:	f000 fae4 	bl	80040b0 <UART_WaitOnFlagUntilTimeout>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d004      	beq.n	8003af6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e03b      	b.n	8003b6e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10b      	bne.n	8003b14 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	881a      	ldrh	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	05d2      	lsls	r2, r2, #23
 8003b06:	0dd2      	lsrs	r2, r2, #23
 8003b08:	b292      	uxth	r2, r2
 8003b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	3302      	adds	r3, #2
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	e007      	b.n	8003b24 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	781a      	ldrb	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3301      	adds	r3, #1
 8003b22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2252      	movs	r2, #82	@ 0x52
 8003b28:	5a9b      	ldrh	r3, [r3, r2]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b299      	uxth	r1, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2252      	movs	r2, #82	@ 0x52
 8003b34:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2252      	movs	r2, #82	@ 0x52
 8003b3a:	5a9b      	ldrh	r3, [r3, r2]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1c9      	bne.n	8003ad6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	0013      	movs	r3, r2
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2140      	movs	r1, #64	@ 0x40
 8003b50:	f000 faae 	bl	80040b0 <UART_WaitOnFlagUntilTimeout>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d004      	beq.n	8003b62 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e005      	b.n	8003b6e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b008      	add	sp, #32
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b80:	231e      	movs	r3, #30
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a8d      	ldr	r2, [pc, #564]	@ (8003ddc <UART_SetConfig+0x264>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4a88      	ldr	r2, [pc, #544]	@ (8003de0 <UART_SetConfig+0x268>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	0019      	movs	r1, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4a7f      	ldr	r2, [pc, #508]	@ (8003de4 <UART_SetConfig+0x26c>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	0019      	movs	r1, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a7b      	ldr	r2, [pc, #492]	@ (8003de8 <UART_SetConfig+0x270>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d127      	bne.n	8003c4e <UART_SetConfig+0xd6>
 8003bfe:	4b7b      	ldr	r3, [pc, #492]	@ (8003dec <UART_SetConfig+0x274>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c02:	2203      	movs	r2, #3
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d00d      	beq.n	8003c26 <UART_SetConfig+0xae>
 8003c0a:	d81b      	bhi.n	8003c44 <UART_SetConfig+0xcc>
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d014      	beq.n	8003c3a <UART_SetConfig+0xc2>
 8003c10:	d818      	bhi.n	8003c44 <UART_SetConfig+0xcc>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <UART_SetConfig+0xa4>
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d00a      	beq.n	8003c30 <UART_SetConfig+0xb8>
 8003c1a:	e013      	b.n	8003c44 <UART_SetConfig+0xcc>
 8003c1c:	231f      	movs	r3, #31
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]
 8003c24:	e021      	b.n	8003c6a <UART_SetConfig+0xf2>
 8003c26:	231f      	movs	r3, #31
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e01c      	b.n	8003c6a <UART_SetConfig+0xf2>
 8003c30:	231f      	movs	r3, #31
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	2204      	movs	r2, #4
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	e017      	b.n	8003c6a <UART_SetConfig+0xf2>
 8003c3a:	231f      	movs	r3, #31
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	2208      	movs	r2, #8
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	e012      	b.n	8003c6a <UART_SetConfig+0xf2>
 8003c44:	231f      	movs	r3, #31
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	2210      	movs	r2, #16
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	e00d      	b.n	8003c6a <UART_SetConfig+0xf2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a67      	ldr	r2, [pc, #412]	@ (8003df0 <UART_SetConfig+0x278>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d104      	bne.n	8003c62 <UART_SetConfig+0xea>
 8003c58:	231f      	movs	r3, #31
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	e003      	b.n	8003c6a <UART_SetConfig+0xf2>
 8003c62:	231f      	movs	r3, #31
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	2210      	movs	r2, #16
 8003c68:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69da      	ldr	r2, [r3, #28]
 8003c6e:	2380      	movs	r3, #128	@ 0x80
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d15c      	bne.n	8003d30 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003c76:	231f      	movs	r3, #31
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d015      	beq.n	8003cac <UART_SetConfig+0x134>
 8003c80:	dc18      	bgt.n	8003cb4 <UART_SetConfig+0x13c>
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d00d      	beq.n	8003ca2 <UART_SetConfig+0x12a>
 8003c86:	dc15      	bgt.n	8003cb4 <UART_SetConfig+0x13c>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <UART_SetConfig+0x11a>
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d005      	beq.n	8003c9c <UART_SetConfig+0x124>
 8003c90:	e010      	b.n	8003cb4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c92:	f7fe fe6d 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003c96:	0003      	movs	r3, r0
 8003c98:	61bb      	str	r3, [r7, #24]
        break;
 8003c9a:	e012      	b.n	8003cc2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c9c:	4b55      	ldr	r3, [pc, #340]	@ (8003df4 <UART_SetConfig+0x27c>)
 8003c9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ca0:	e00f      	b.n	8003cc2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca2:	f7fe fe05 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	61bb      	str	r3, [r7, #24]
        break;
 8003caa:	e00a      	b.n	8003cc2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cac:	2380      	movs	r3, #128	@ 0x80
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	61bb      	str	r3, [r7, #24]
        break;
 8003cb2:	e006      	b.n	8003cc2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cb8:	231e      	movs	r3, #30
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
        break;
 8003cc0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d100      	bne.n	8003cca <UART_SetConfig+0x152>
 8003cc8:	e07a      	b.n	8003dc0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	005a      	lsls	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	18d2      	adds	r2, r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	0019      	movs	r1, r3
 8003cdc:	0010      	movs	r0, r2
 8003cde:	f7fc fa1d 	bl	800011c <__udivsi3>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	2b0f      	cmp	r3, #15
 8003cea:	d91c      	bls.n	8003d26 <UART_SetConfig+0x1ae>
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	2380      	movs	r3, #128	@ 0x80
 8003cf0:	025b      	lsls	r3, r3, #9
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d217      	bcs.n	8003d26 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	200e      	movs	r0, #14
 8003cfc:	183b      	adds	r3, r7, r0
 8003cfe:	210f      	movs	r1, #15
 8003d00:	438a      	bics	r2, r1
 8003d02:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	085b      	lsrs	r3, r3, #1
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2207      	movs	r2, #7
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	b299      	uxth	r1, r3
 8003d10:	183b      	adds	r3, r7, r0
 8003d12:	183a      	adds	r2, r7, r0
 8003d14:	8812      	ldrh	r2, [r2, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	183a      	adds	r2, r7, r0
 8003d20:	8812      	ldrh	r2, [r2, #0]
 8003d22:	60da      	str	r2, [r3, #12]
 8003d24:	e04c      	b.n	8003dc0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003d26:	231e      	movs	r3, #30
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	e047      	b.n	8003dc0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d30:	231f      	movs	r3, #31
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d015      	beq.n	8003d66 <UART_SetConfig+0x1ee>
 8003d3a:	dc18      	bgt.n	8003d6e <UART_SetConfig+0x1f6>
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d00d      	beq.n	8003d5c <UART_SetConfig+0x1e4>
 8003d40:	dc15      	bgt.n	8003d6e <UART_SetConfig+0x1f6>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <UART_SetConfig+0x1d4>
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d005      	beq.n	8003d56 <UART_SetConfig+0x1de>
 8003d4a:	e010      	b.n	8003d6e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f7fe fe10 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003d50:	0003      	movs	r3, r0
 8003d52:	61bb      	str	r3, [r7, #24]
        break;
 8003d54:	e012      	b.n	8003d7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d56:	4b27      	ldr	r3, [pc, #156]	@ (8003df4 <UART_SetConfig+0x27c>)
 8003d58:	61bb      	str	r3, [r7, #24]
        break;
 8003d5a:	e00f      	b.n	8003d7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5c:	f7fe fda8 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8003d60:	0003      	movs	r3, r0
 8003d62:	61bb      	str	r3, [r7, #24]
        break;
 8003d64:	e00a      	b.n	8003d7c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d66:	2380      	movs	r3, #128	@ 0x80
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	61bb      	str	r3, [r7, #24]
        break;
 8003d6c:	e006      	b.n	8003d7c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d72:	231e      	movs	r3, #30
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	2201      	movs	r2, #1
 8003d78:	701a      	strb	r2, [r3, #0]
        break;
 8003d7a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01e      	beq.n	8003dc0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	085a      	lsrs	r2, r3, #1
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	18d2      	adds	r2, r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	0019      	movs	r1, r3
 8003d92:	0010      	movs	r0, r2
 8003d94:	f7fc f9c2 	bl	800011c <__udivsi3>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b0f      	cmp	r3, #15
 8003da0:	d90a      	bls.n	8003db8 <UART_SetConfig+0x240>
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	2380      	movs	r3, #128	@ 0x80
 8003da6:	025b      	lsls	r3, r3, #9
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d205      	bcs.n	8003db8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	e003      	b.n	8003dc0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003db8:	231e      	movs	r3, #30
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003dcc:	231e      	movs	r3, #30
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	781b      	ldrb	r3, [r3, #0]
}
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	b008      	add	sp, #32
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	ffff69f3 	.word	0xffff69f3
 8003de0:	ffffcfff 	.word	0xffffcfff
 8003de4:	fffff4ff 	.word	0xfffff4ff
 8003de8:	40013800 	.word	0x40013800
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40004400 	.word	0x40004400
 8003df4:	007a1200 	.word	0x007a1200

08003df8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	2208      	movs	r2, #8
 8003e06:	4013      	ands	r3, r2
 8003e08:	d00b      	beq.n	8003e22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a4a      	ldr	r2, [pc, #296]	@ (8003f3c <UART_AdvFeatureConfig+0x144>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	0019      	movs	r1, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	2201      	movs	r2, #1
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d00b      	beq.n	8003e44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4a43      	ldr	r2, [pc, #268]	@ (8003f40 <UART_AdvFeatureConfig+0x148>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	0019      	movs	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	2202      	movs	r2, #2
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d00b      	beq.n	8003e66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4a3b      	ldr	r2, [pc, #236]	@ (8003f44 <UART_AdvFeatureConfig+0x14c>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d00b      	beq.n	8003e88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	4a34      	ldr	r2, [pc, #208]	@ (8003f48 <UART_AdvFeatureConfig+0x150>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	0019      	movs	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	2210      	movs	r2, #16
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d00b      	beq.n	8003eaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4a2c      	ldr	r2, [pc, #176]	@ (8003f4c <UART_AdvFeatureConfig+0x154>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	0019      	movs	r1, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	2220      	movs	r2, #32
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d00b      	beq.n	8003ecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	4a25      	ldr	r2, [pc, #148]	@ (8003f50 <UART_AdvFeatureConfig+0x158>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	0019      	movs	r1, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	2240      	movs	r2, #64	@ 0x40
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d01d      	beq.n	8003f12 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f54 <UART_AdvFeatureConfig+0x15c>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	035b      	lsls	r3, r3, #13
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d10b      	bne.n	8003f12 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4a15      	ldr	r2, [pc, #84]	@ (8003f58 <UART_AdvFeatureConfig+0x160>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	2280      	movs	r2, #128	@ 0x80
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d00b      	beq.n	8003f34 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4a0e      	ldr	r2, [pc, #56]	@ (8003f5c <UART_AdvFeatureConfig+0x164>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	0019      	movs	r1, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
  }
}
 8003f34:	46c0      	nop			@ (mov r8, r8)
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	ffff7fff 	.word	0xffff7fff
 8003f40:	fffdffff 	.word	0xfffdffff
 8003f44:	fffeffff 	.word	0xfffeffff
 8003f48:	fffbffff 	.word	0xfffbffff
 8003f4c:	ffffefff 	.word	0xffffefff
 8003f50:	ffffdfff 	.word	0xffffdfff
 8003f54:	ffefffff 	.word	0xffefffff
 8003f58:	ff9fffff 	.word	0xff9fffff
 8003f5c:	fff7ffff 	.word	0xfff7ffff

08003f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b092      	sub	sp, #72	@ 0x48
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2284      	movs	r2, #132	@ 0x84
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f70:	f7fd fc46 	bl	8001800 <HAL_GetTick>
 8003f74:	0003      	movs	r3, r0
 8003f76:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2208      	movs	r2, #8
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d12c      	bne.n	8003fe0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f88:	2280      	movs	r2, #128	@ 0x80
 8003f8a:	0391      	lsls	r1, r2, #14
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4a46      	ldr	r2, [pc, #280]	@ (80040a8 <UART_CheckIdleState+0x148>)
 8003f90:	9200      	str	r2, [sp, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f000 f88c 	bl	80040b0 <UART_WaitOnFlagUntilTimeout>
 8003f98:	1e03      	subs	r3, r0, #0
 8003f9a:	d021      	beq.n	8003fe0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fac:	f383 8810 	msr	PRIMASK, r3
}
 8003fb0:	46c0      	nop			@ (mov r8, r8)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2180      	movs	r1, #128	@ 0x80
 8003fbe:	438a      	bics	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc8:	f383 8810 	msr	PRIMASK, r3
}
 8003fcc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2278      	movs	r2, #120	@ 0x78
 8003fd8:	2100      	movs	r1, #0
 8003fda:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e05f      	b.n	80040a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d146      	bne.n	800407c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff0:	2280      	movs	r2, #128	@ 0x80
 8003ff2:	03d1      	lsls	r1, r2, #15
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80040a8 <UART_CheckIdleState+0x148>)
 8003ff8:	9200      	str	r2, [sp, #0]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f000 f858 	bl	80040b0 <UART_WaitOnFlagUntilTimeout>
 8004000:	1e03      	subs	r3, r0, #0
 8004002:	d03b      	beq.n	800407c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004004:	f3ef 8310 	mrs	r3, PRIMASK
 8004008:	60fb      	str	r3, [r7, #12]
  return(result);
 800400a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400c:	637b      	str	r3, [r7, #52]	@ 0x34
 800400e:	2301      	movs	r3, #1
 8004010:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f383 8810 	msr	PRIMASK, r3
}
 8004018:	46c0      	nop			@ (mov r8, r8)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4921      	ldr	r1, [pc, #132]	@ (80040ac <UART_CheckIdleState+0x14c>)
 8004026:	400a      	ands	r2, r1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f383 8810 	msr	PRIMASK, r3
}
 8004034:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004036:	f3ef 8310 	mrs	r3, PRIMASK
 800403a:	61bb      	str	r3, [r7, #24]
  return(result);
 800403c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004040:	2301      	movs	r3, #1
 8004042:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f383 8810 	msr	PRIMASK, r3
}
 800404a:	46c0      	nop			@ (mov r8, r8)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2101      	movs	r1, #1
 8004058:	438a      	bics	r2, r1
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	f383 8810 	msr	PRIMASK, r3
}
 8004066:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2280      	movs	r2, #128	@ 0x80
 800406c:	2120      	movs	r1, #32
 800406e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2278      	movs	r2, #120	@ 0x78
 8004074:	2100      	movs	r1, #0
 8004076:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e011      	b.n	80040a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2280      	movs	r2, #128	@ 0x80
 8004086:	2120      	movs	r1, #32
 8004088:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2278      	movs	r2, #120	@ 0x78
 800409a:	2100      	movs	r1, #0
 800409c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b010      	add	sp, #64	@ 0x40
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	01ffffff 	.word	0x01ffffff
 80040ac:	fffffedf 	.word	0xfffffedf

080040b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	1dfb      	adds	r3, r7, #7
 80040be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c0:	e051      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	3301      	adds	r3, #1
 80040c6:	d04e      	beq.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c8:	f7fd fb9a 	bl	8001800 <HAL_GetTick>
 80040cc:	0002      	movs	r2, r0
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d302      	bcc.n	80040de <UART_WaitOnFlagUntilTimeout+0x2e>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e051      	b.n	8004186 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2204      	movs	r2, #4
 80040ea:	4013      	ands	r3, r2
 80040ec:	d03b      	beq.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb6>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b80      	cmp	r3, #128	@ 0x80
 80040f2:	d038      	beq.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb6>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b40      	cmp	r3, #64	@ 0x40
 80040f8:	d035      	beq.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	2208      	movs	r2, #8
 8004102:	4013      	ands	r3, r2
 8004104:	2b08      	cmp	r3, #8
 8004106:	d111      	bne.n	800412c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2208      	movs	r2, #8
 800410e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	0018      	movs	r0, r3
 8004114:	f000 f83c 	bl	8004190 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2284      	movs	r2, #132	@ 0x84
 800411c:	2108      	movs	r1, #8
 800411e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2278      	movs	r2, #120	@ 0x78
 8004124:	2100      	movs	r1, #0
 8004126:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e02c      	b.n	8004186 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69da      	ldr	r2, [r3, #28]
 8004132:	2380      	movs	r3, #128	@ 0x80
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	401a      	ands	r2, r3
 8004138:	2380      	movs	r3, #128	@ 0x80
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	429a      	cmp	r2, r3
 800413e:	d112      	bne.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2280      	movs	r2, #128	@ 0x80
 8004146:	0112      	lsls	r2, r2, #4
 8004148:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	0018      	movs	r0, r3
 800414e:	f000 f81f 	bl	8004190 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2284      	movs	r2, #132	@ 0x84
 8004156:	2120      	movs	r1, #32
 8004158:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2278      	movs	r2, #120	@ 0x78
 800415e:	2100      	movs	r1, #0
 8004160:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e00f      	b.n	8004186 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	4013      	ands	r3, r2
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	425a      	negs	r2, r3
 8004176:	4153      	adcs	r3, r2
 8004178:	b2db      	uxtb	r3, r3
 800417a:	001a      	movs	r2, r3
 800417c:	1dfb      	adds	r3, r7, #7
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d09e      	beq.n	80040c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	0018      	movs	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	b004      	add	sp, #16
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08e      	sub	sp, #56	@ 0x38
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004198:	f3ef 8310 	mrs	r3, PRIMASK
 800419c:	617b      	str	r3, [r7, #20]
  return(result);
 800419e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a2:	2301      	movs	r3, #1
 80041a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	f383 8810 	msr	PRIMASK, r3
}
 80041ac:	46c0      	nop			@ (mov r8, r8)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4926      	ldr	r1, [pc, #152]	@ (8004254 <UART_EndRxTransfer+0xc4>)
 80041ba:	400a      	ands	r2, r1
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f383 8810 	msr	PRIMASK, r3
}
 80041c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ca:	f3ef 8310 	mrs	r3, PRIMASK
 80041ce:	623b      	str	r3, [r7, #32]
  return(result);
 80041d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80041d4:	2301      	movs	r3, #1
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	f383 8810 	msr	PRIMASK, r3
}
 80041de:	46c0      	nop			@ (mov r8, r8)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2101      	movs	r1, #1
 80041ec:	438a      	bics	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f6:	f383 8810 	msr	PRIMASK, r3
}
 80041fa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004200:	2b01      	cmp	r3, #1
 8004202:	d118      	bne.n	8004236 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004204:	f3ef 8310 	mrs	r3, PRIMASK
 8004208:	60bb      	str	r3, [r7, #8]
  return(result);
 800420a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800420e:	2301      	movs	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f383 8810 	msr	PRIMASK, r3
}
 8004218:	46c0      	nop			@ (mov r8, r8)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2110      	movs	r1, #16
 8004226:	438a      	bics	r2, r1
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f383 8810 	msr	PRIMASK, r3
}
 8004234:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2280      	movs	r2, #128	@ 0x80
 800423a:	2120      	movs	r1, #32
 800423c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800424a:	46c0      	nop			@ (mov r8, r8)
 800424c:	46bd      	mov	sp, r7
 800424e:	b00e      	add	sp, #56	@ 0x38
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	fffffedf 	.word	0xfffffedf

08004258 <rand>:
 8004258:	4b16      	ldr	r3, [pc, #88]	@ (80042b4 <rand+0x5c>)
 800425a:	b510      	push	{r4, lr}
 800425c:	681c      	ldr	r4, [r3, #0]
 800425e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <rand+0x3a>
 8004264:	2018      	movs	r0, #24
 8004266:	f000 fa41 	bl	80046ec <malloc>
 800426a:	1e02      	subs	r2, r0, #0
 800426c:	6320      	str	r0, [r4, #48]	@ 0x30
 800426e:	d104      	bne.n	800427a <rand+0x22>
 8004270:	2152      	movs	r1, #82	@ 0x52
 8004272:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <rand+0x60>)
 8004274:	4811      	ldr	r0, [pc, #68]	@ (80042bc <rand+0x64>)
 8004276:	f000 f9d1 	bl	800461c <__assert_func>
 800427a:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <rand+0x68>)
 800427c:	2100      	movs	r1, #0
 800427e:	6003      	str	r3, [r0, #0]
 8004280:	4b10      	ldr	r3, [pc, #64]	@ (80042c4 <rand+0x6c>)
 8004282:	6043      	str	r3, [r0, #4]
 8004284:	4b10      	ldr	r3, [pc, #64]	@ (80042c8 <rand+0x70>)
 8004286:	6083      	str	r3, [r0, #8]
 8004288:	230b      	movs	r3, #11
 800428a:	8183      	strh	r3, [r0, #12]
 800428c:	2001      	movs	r0, #1
 800428e:	6110      	str	r0, [r2, #16]
 8004290:	6151      	str	r1, [r2, #20]
 8004292:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8004294:	4a0d      	ldr	r2, [pc, #52]	@ (80042cc <rand+0x74>)
 8004296:	6920      	ldr	r0, [r4, #16]
 8004298:	6961      	ldr	r1, [r4, #20]
 800429a:	4b0d      	ldr	r3, [pc, #52]	@ (80042d0 <rand+0x78>)
 800429c:	f7fb ffca 	bl	8000234 <__aeabi_lmul>
 80042a0:	2201      	movs	r2, #1
 80042a2:	2300      	movs	r3, #0
 80042a4:	1880      	adds	r0, r0, r2
 80042a6:	4159      	adcs	r1, r3
 80042a8:	6120      	str	r0, [r4, #16]
 80042aa:	6161      	str	r1, [r4, #20]
 80042ac:	0048      	lsls	r0, r1, #1
 80042ae:	0840      	lsrs	r0, r0, #1
 80042b0:	bd10      	pop	{r4, pc}
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	20000018 	.word	0x20000018
 80042b8:	08005400 	.word	0x08005400
 80042bc:	08005417 	.word	0x08005417
 80042c0:	abcd330e 	.word	0xabcd330e
 80042c4:	e66d1234 	.word	0xe66d1234
 80042c8:	0005deec 	.word	0x0005deec
 80042cc:	4c957f2d 	.word	0x4c957f2d
 80042d0:	5851f42d 	.word	0x5851f42d

080042d4 <std>:
 80042d4:	2300      	movs	r3, #0
 80042d6:	b510      	push	{r4, lr}
 80042d8:	0004      	movs	r4, r0
 80042da:	6003      	str	r3, [r0, #0]
 80042dc:	6043      	str	r3, [r0, #4]
 80042de:	6083      	str	r3, [r0, #8]
 80042e0:	8181      	strh	r1, [r0, #12]
 80042e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80042e4:	81c2      	strh	r2, [r0, #14]
 80042e6:	6103      	str	r3, [r0, #16]
 80042e8:	6143      	str	r3, [r0, #20]
 80042ea:	6183      	str	r3, [r0, #24]
 80042ec:	0019      	movs	r1, r3
 80042ee:	2208      	movs	r2, #8
 80042f0:	305c      	adds	r0, #92	@ 0x5c
 80042f2:	f000 f90f 	bl	8004514 <memset>
 80042f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <std+0x50>)
 80042f8:	6224      	str	r4, [r4, #32]
 80042fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80042fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <std+0x54>)
 80042fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004300:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <std+0x58>)
 8004302:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004304:	4b0a      	ldr	r3, [pc, #40]	@ (8004330 <std+0x5c>)
 8004306:	6323      	str	r3, [r4, #48]	@ 0x30
 8004308:	4b0a      	ldr	r3, [pc, #40]	@ (8004334 <std+0x60>)
 800430a:	429c      	cmp	r4, r3
 800430c:	d005      	beq.n	800431a <std+0x46>
 800430e:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <std+0x64>)
 8004310:	429c      	cmp	r4, r3
 8004312:	d002      	beq.n	800431a <std+0x46>
 8004314:	4b09      	ldr	r3, [pc, #36]	@ (800433c <std+0x68>)
 8004316:	429c      	cmp	r4, r3
 8004318:	d103      	bne.n	8004322 <std+0x4e>
 800431a:	0020      	movs	r0, r4
 800431c:	3058      	adds	r0, #88	@ 0x58
 800431e:	f000 f979 	bl	8004614 <__retarget_lock_init_recursive>
 8004322:	bd10      	pop	{r4, pc}
 8004324:	0800447d 	.word	0x0800447d
 8004328:	080044a5 	.word	0x080044a5
 800432c:	080044dd 	.word	0x080044dd
 8004330:	08004509 	.word	0x08004509
 8004334:	200003c4 	.word	0x200003c4
 8004338:	2000042c 	.word	0x2000042c
 800433c:	20000494 	.word	0x20000494

08004340 <stdio_exit_handler>:
 8004340:	b510      	push	{r4, lr}
 8004342:	4a03      	ldr	r2, [pc, #12]	@ (8004350 <stdio_exit_handler+0x10>)
 8004344:	4903      	ldr	r1, [pc, #12]	@ (8004354 <stdio_exit_handler+0x14>)
 8004346:	4804      	ldr	r0, [pc, #16]	@ (8004358 <stdio_exit_handler+0x18>)
 8004348:	f000 f86c 	bl	8004424 <_fwalk_sglue>
 800434c:	bd10      	pop	{r4, pc}
 800434e:	46c0      	nop			@ (mov r8, r8)
 8004350:	2000000c 	.word	0x2000000c
 8004354:	08004ef5 	.word	0x08004ef5
 8004358:	2000001c 	.word	0x2000001c

0800435c <cleanup_stdio>:
 800435c:	6841      	ldr	r1, [r0, #4]
 800435e:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <cleanup_stdio+0x30>)
 8004360:	b510      	push	{r4, lr}
 8004362:	0004      	movs	r4, r0
 8004364:	4299      	cmp	r1, r3
 8004366:	d001      	beq.n	800436c <cleanup_stdio+0x10>
 8004368:	f000 fdc4 	bl	8004ef4 <_fflush_r>
 800436c:	68a1      	ldr	r1, [r4, #8]
 800436e:	4b08      	ldr	r3, [pc, #32]	@ (8004390 <cleanup_stdio+0x34>)
 8004370:	4299      	cmp	r1, r3
 8004372:	d002      	beq.n	800437a <cleanup_stdio+0x1e>
 8004374:	0020      	movs	r0, r4
 8004376:	f000 fdbd 	bl	8004ef4 <_fflush_r>
 800437a:	68e1      	ldr	r1, [r4, #12]
 800437c:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <cleanup_stdio+0x38>)
 800437e:	4299      	cmp	r1, r3
 8004380:	d002      	beq.n	8004388 <cleanup_stdio+0x2c>
 8004382:	0020      	movs	r0, r4
 8004384:	f000 fdb6 	bl	8004ef4 <_fflush_r>
 8004388:	bd10      	pop	{r4, pc}
 800438a:	46c0      	nop			@ (mov r8, r8)
 800438c:	200003c4 	.word	0x200003c4
 8004390:	2000042c 	.word	0x2000042c
 8004394:	20000494 	.word	0x20000494

08004398 <global_stdio_init.part.0>:
 8004398:	b510      	push	{r4, lr}
 800439a:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <global_stdio_init.part.0+0x28>)
 800439c:	4a09      	ldr	r2, [pc, #36]	@ (80043c4 <global_stdio_init.part.0+0x2c>)
 800439e:	2104      	movs	r1, #4
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	4809      	ldr	r0, [pc, #36]	@ (80043c8 <global_stdio_init.part.0+0x30>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	f7ff ff95 	bl	80042d4 <std>
 80043aa:	2201      	movs	r2, #1
 80043ac:	2109      	movs	r1, #9
 80043ae:	4807      	ldr	r0, [pc, #28]	@ (80043cc <global_stdio_init.part.0+0x34>)
 80043b0:	f7ff ff90 	bl	80042d4 <std>
 80043b4:	2202      	movs	r2, #2
 80043b6:	2112      	movs	r1, #18
 80043b8:	4805      	ldr	r0, [pc, #20]	@ (80043d0 <global_stdio_init.part.0+0x38>)
 80043ba:	f7ff ff8b 	bl	80042d4 <std>
 80043be:	bd10      	pop	{r4, pc}
 80043c0:	200004fc 	.word	0x200004fc
 80043c4:	08004341 	.word	0x08004341
 80043c8:	200003c4 	.word	0x200003c4
 80043cc:	2000042c 	.word	0x2000042c
 80043d0:	20000494 	.word	0x20000494

080043d4 <__sfp_lock_acquire>:
 80043d4:	b510      	push	{r4, lr}
 80043d6:	4802      	ldr	r0, [pc, #8]	@ (80043e0 <__sfp_lock_acquire+0xc>)
 80043d8:	f000 f91d 	bl	8004616 <__retarget_lock_acquire_recursive>
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	20000505 	.word	0x20000505

080043e4 <__sfp_lock_release>:
 80043e4:	b510      	push	{r4, lr}
 80043e6:	4802      	ldr	r0, [pc, #8]	@ (80043f0 <__sfp_lock_release+0xc>)
 80043e8:	f000 f916 	bl	8004618 <__retarget_lock_release_recursive>
 80043ec:	bd10      	pop	{r4, pc}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	20000505 	.word	0x20000505

080043f4 <__sinit>:
 80043f4:	b510      	push	{r4, lr}
 80043f6:	0004      	movs	r4, r0
 80043f8:	f7ff ffec 	bl	80043d4 <__sfp_lock_acquire>
 80043fc:	6a23      	ldr	r3, [r4, #32]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <__sinit+0x14>
 8004402:	f7ff ffef 	bl	80043e4 <__sfp_lock_release>
 8004406:	bd10      	pop	{r4, pc}
 8004408:	4b04      	ldr	r3, [pc, #16]	@ (800441c <__sinit+0x28>)
 800440a:	6223      	str	r3, [r4, #32]
 800440c:	4b04      	ldr	r3, [pc, #16]	@ (8004420 <__sinit+0x2c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f6      	bne.n	8004402 <__sinit+0xe>
 8004414:	f7ff ffc0 	bl	8004398 <global_stdio_init.part.0>
 8004418:	e7f3      	b.n	8004402 <__sinit+0xe>
 800441a:	46c0      	nop			@ (mov r8, r8)
 800441c:	0800435d 	.word	0x0800435d
 8004420:	200004fc 	.word	0x200004fc

08004424 <_fwalk_sglue>:
 8004424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004426:	0014      	movs	r4, r2
 8004428:	2600      	movs	r6, #0
 800442a:	9000      	str	r0, [sp, #0]
 800442c:	9101      	str	r1, [sp, #4]
 800442e:	68a5      	ldr	r5, [r4, #8]
 8004430:	6867      	ldr	r7, [r4, #4]
 8004432:	3f01      	subs	r7, #1
 8004434:	d504      	bpl.n	8004440 <_fwalk_sglue+0x1c>
 8004436:	6824      	ldr	r4, [r4, #0]
 8004438:	2c00      	cmp	r4, #0
 800443a:	d1f8      	bne.n	800442e <_fwalk_sglue+0xa>
 800443c:	0030      	movs	r0, r6
 800443e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004440:	89ab      	ldrh	r3, [r5, #12]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d908      	bls.n	8004458 <_fwalk_sglue+0x34>
 8004446:	220e      	movs	r2, #14
 8004448:	5eab      	ldrsh	r3, [r5, r2]
 800444a:	3301      	adds	r3, #1
 800444c:	d004      	beq.n	8004458 <_fwalk_sglue+0x34>
 800444e:	0029      	movs	r1, r5
 8004450:	9800      	ldr	r0, [sp, #0]
 8004452:	9b01      	ldr	r3, [sp, #4]
 8004454:	4798      	blx	r3
 8004456:	4306      	orrs	r6, r0
 8004458:	3568      	adds	r5, #104	@ 0x68
 800445a:	e7ea      	b.n	8004432 <_fwalk_sglue+0xe>

0800445c <iprintf>:
 800445c:	b40f      	push	{r0, r1, r2, r3}
 800445e:	b507      	push	{r0, r1, r2, lr}
 8004460:	4905      	ldr	r1, [pc, #20]	@ (8004478 <iprintf+0x1c>)
 8004462:	ab04      	add	r3, sp, #16
 8004464:	6808      	ldr	r0, [r1, #0]
 8004466:	cb04      	ldmia	r3!, {r2}
 8004468:	6881      	ldr	r1, [r0, #8]
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	f000 fa22 	bl	80048b4 <_vfiprintf_r>
 8004470:	b003      	add	sp, #12
 8004472:	bc08      	pop	{r3}
 8004474:	b004      	add	sp, #16
 8004476:	4718      	bx	r3
 8004478:	20000018 	.word	0x20000018

0800447c <__sread>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	000c      	movs	r4, r1
 8004480:	250e      	movs	r5, #14
 8004482:	5f49      	ldrsh	r1, [r1, r5]
 8004484:	f000 f874 	bl	8004570 <_read_r>
 8004488:	2800      	cmp	r0, #0
 800448a:	db03      	blt.n	8004494 <__sread+0x18>
 800448c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800448e:	181b      	adds	r3, r3, r0
 8004490:	6563      	str	r3, [r4, #84]	@ 0x54
 8004492:	bd70      	pop	{r4, r5, r6, pc}
 8004494:	89a3      	ldrh	r3, [r4, #12]
 8004496:	4a02      	ldr	r2, [pc, #8]	@ (80044a0 <__sread+0x24>)
 8004498:	4013      	ands	r3, r2
 800449a:	81a3      	strh	r3, [r4, #12]
 800449c:	e7f9      	b.n	8004492 <__sread+0x16>
 800449e:	46c0      	nop			@ (mov r8, r8)
 80044a0:	ffffefff 	.word	0xffffefff

080044a4 <__swrite>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	001f      	movs	r7, r3
 80044a8:	898b      	ldrh	r3, [r1, #12]
 80044aa:	0005      	movs	r5, r0
 80044ac:	000c      	movs	r4, r1
 80044ae:	0016      	movs	r6, r2
 80044b0:	05db      	lsls	r3, r3, #23
 80044b2:	d505      	bpl.n	80044c0 <__swrite+0x1c>
 80044b4:	230e      	movs	r3, #14
 80044b6:	5ec9      	ldrsh	r1, [r1, r3]
 80044b8:	2200      	movs	r2, #0
 80044ba:	2302      	movs	r3, #2
 80044bc:	f000 f844 	bl	8004548 <_lseek_r>
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	4a05      	ldr	r2, [pc, #20]	@ (80044d8 <__swrite+0x34>)
 80044c4:	0028      	movs	r0, r5
 80044c6:	4013      	ands	r3, r2
 80044c8:	81a3      	strh	r3, [r4, #12]
 80044ca:	0032      	movs	r2, r6
 80044cc:	230e      	movs	r3, #14
 80044ce:	5ee1      	ldrsh	r1, [r4, r3]
 80044d0:	003b      	movs	r3, r7
 80044d2:	f000 f861 	bl	8004598 <_write_r>
 80044d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044d8:	ffffefff 	.word	0xffffefff

080044dc <__sseek>:
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	000c      	movs	r4, r1
 80044e0:	250e      	movs	r5, #14
 80044e2:	5f49      	ldrsh	r1, [r1, r5]
 80044e4:	f000 f830 	bl	8004548 <_lseek_r>
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	1c42      	adds	r2, r0, #1
 80044ec:	d103      	bne.n	80044f6 <__sseek+0x1a>
 80044ee:	4a05      	ldr	r2, [pc, #20]	@ (8004504 <__sseek+0x28>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	81a3      	strh	r3, [r4, #12]
 80044f4:	bd70      	pop	{r4, r5, r6, pc}
 80044f6:	2280      	movs	r2, #128	@ 0x80
 80044f8:	0152      	lsls	r2, r2, #5
 80044fa:	4313      	orrs	r3, r2
 80044fc:	81a3      	strh	r3, [r4, #12]
 80044fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8004500:	e7f8      	b.n	80044f4 <__sseek+0x18>
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	ffffefff 	.word	0xffffefff

08004508 <__sclose>:
 8004508:	b510      	push	{r4, lr}
 800450a:	230e      	movs	r3, #14
 800450c:	5ec9      	ldrsh	r1, [r1, r3]
 800450e:	f000 f809 	bl	8004524 <_close_r>
 8004512:	bd10      	pop	{r4, pc}

08004514 <memset>:
 8004514:	0003      	movs	r3, r0
 8004516:	1882      	adds	r2, r0, r2
 8004518:	4293      	cmp	r3, r2
 800451a:	d100      	bne.n	800451e <memset+0xa>
 800451c:	4770      	bx	lr
 800451e:	7019      	strb	r1, [r3, #0]
 8004520:	3301      	adds	r3, #1
 8004522:	e7f9      	b.n	8004518 <memset+0x4>

08004524 <_close_r>:
 8004524:	2300      	movs	r3, #0
 8004526:	b570      	push	{r4, r5, r6, lr}
 8004528:	4d06      	ldr	r5, [pc, #24]	@ (8004544 <_close_r+0x20>)
 800452a:	0004      	movs	r4, r0
 800452c:	0008      	movs	r0, r1
 800452e:	602b      	str	r3, [r5, #0]
 8004530:	f7fc fb6c 	bl	8000c0c <_close>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d103      	bne.n	8004540 <_close_r+0x1c>
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d000      	beq.n	8004540 <_close_r+0x1c>
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	bd70      	pop	{r4, r5, r6, pc}
 8004542:	46c0      	nop			@ (mov r8, r8)
 8004544:	20000500 	.word	0x20000500

08004548 <_lseek_r>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	0004      	movs	r4, r0
 800454c:	0008      	movs	r0, r1
 800454e:	0011      	movs	r1, r2
 8004550:	001a      	movs	r2, r3
 8004552:	2300      	movs	r3, #0
 8004554:	4d05      	ldr	r5, [pc, #20]	@ (800456c <_lseek_r+0x24>)
 8004556:	602b      	str	r3, [r5, #0]
 8004558:	f7fc fb79 	bl	8000c4e <_lseek>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	d103      	bne.n	8004568 <_lseek_r+0x20>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d000      	beq.n	8004568 <_lseek_r+0x20>
 8004566:	6023      	str	r3, [r4, #0]
 8004568:	bd70      	pop	{r4, r5, r6, pc}
 800456a:	46c0      	nop			@ (mov r8, r8)
 800456c:	20000500 	.word	0x20000500

08004570 <_read_r>:
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	0004      	movs	r4, r0
 8004574:	0008      	movs	r0, r1
 8004576:	0011      	movs	r1, r2
 8004578:	001a      	movs	r2, r3
 800457a:	2300      	movs	r3, #0
 800457c:	4d05      	ldr	r5, [pc, #20]	@ (8004594 <_read_r+0x24>)
 800457e:	602b      	str	r3, [r5, #0]
 8004580:	f7fc fb27 	bl	8000bd2 <_read>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d103      	bne.n	8004590 <_read_r+0x20>
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d000      	beq.n	8004590 <_read_r+0x20>
 800458e:	6023      	str	r3, [r4, #0]
 8004590:	bd70      	pop	{r4, r5, r6, pc}
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	20000500 	.word	0x20000500

08004598 <_write_r>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	0004      	movs	r4, r0
 800459c:	0008      	movs	r0, r1
 800459e:	0011      	movs	r1, r2
 80045a0:	001a      	movs	r2, r3
 80045a2:	2300      	movs	r3, #0
 80045a4:	4d05      	ldr	r5, [pc, #20]	@ (80045bc <_write_r+0x24>)
 80045a6:	602b      	str	r3, [r5, #0]
 80045a8:	f7fc f8fc 	bl	80007a4 <_write>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d103      	bne.n	80045b8 <_write_r+0x20>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d000      	beq.n	80045b8 <_write_r+0x20>
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	20000500 	.word	0x20000500

080045c0 <__errno>:
 80045c0:	4b01      	ldr	r3, [pc, #4]	@ (80045c8 <__errno+0x8>)
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	4770      	bx	lr
 80045c6:	46c0      	nop			@ (mov r8, r8)
 80045c8:	20000018 	.word	0x20000018

080045cc <__libc_init_array>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	2600      	movs	r6, #0
 80045d0:	4c0c      	ldr	r4, [pc, #48]	@ (8004604 <__libc_init_array+0x38>)
 80045d2:	4d0d      	ldr	r5, [pc, #52]	@ (8004608 <__libc_init_array+0x3c>)
 80045d4:	1b64      	subs	r4, r4, r5
 80045d6:	10a4      	asrs	r4, r4, #2
 80045d8:	42a6      	cmp	r6, r4
 80045da:	d109      	bne.n	80045f0 <__libc_init_array+0x24>
 80045dc:	2600      	movs	r6, #0
 80045de:	f000 fe61 	bl	80052a4 <_init>
 80045e2:	4c0a      	ldr	r4, [pc, #40]	@ (800460c <__libc_init_array+0x40>)
 80045e4:	4d0a      	ldr	r5, [pc, #40]	@ (8004610 <__libc_init_array+0x44>)
 80045e6:	1b64      	subs	r4, r4, r5
 80045e8:	10a4      	asrs	r4, r4, #2
 80045ea:	42a6      	cmp	r6, r4
 80045ec:	d105      	bne.n	80045fa <__libc_init_array+0x2e>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	00b3      	lsls	r3, r6, #2
 80045f2:	58eb      	ldr	r3, [r5, r3]
 80045f4:	4798      	blx	r3
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7ee      	b.n	80045d8 <__libc_init_array+0xc>
 80045fa:	00b3      	lsls	r3, r6, #2
 80045fc:	58eb      	ldr	r3, [r5, r3]
 80045fe:	4798      	blx	r3
 8004600:	3601      	adds	r6, #1
 8004602:	e7f2      	b.n	80045ea <__libc_init_array+0x1e>
 8004604:	080054e0 	.word	0x080054e0
 8004608:	080054e0 	.word	0x080054e0
 800460c:	080054e4 	.word	0x080054e4
 8004610:	080054e0 	.word	0x080054e0

08004614 <__retarget_lock_init_recursive>:
 8004614:	4770      	bx	lr

08004616 <__retarget_lock_acquire_recursive>:
 8004616:	4770      	bx	lr

08004618 <__retarget_lock_release_recursive>:
 8004618:	4770      	bx	lr
	...

0800461c <__assert_func>:
 800461c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800461e:	0014      	movs	r4, r2
 8004620:	001a      	movs	r2, r3
 8004622:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <__assert_func+0x2c>)
 8004624:	0005      	movs	r5, r0
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	000e      	movs	r6, r1
 800462a:	68d8      	ldr	r0, [r3, #12]
 800462c:	4b07      	ldr	r3, [pc, #28]	@ (800464c <__assert_func+0x30>)
 800462e:	2c00      	cmp	r4, #0
 8004630:	d101      	bne.n	8004636 <__assert_func+0x1a>
 8004632:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <__assert_func+0x34>)
 8004634:	001c      	movs	r4, r3
 8004636:	4907      	ldr	r1, [pc, #28]	@ (8004654 <__assert_func+0x38>)
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	9402      	str	r4, [sp, #8]
 800463c:	002b      	movs	r3, r5
 800463e:	9600      	str	r6, [sp, #0]
 8004640:	f000 fc84 	bl	8004f4c <fiprintf>
 8004644:	f000 fd4f 	bl	80050e6 <abort>
 8004648:	20000018 	.word	0x20000018
 800464c:	0800546f 	.word	0x0800546f
 8004650:	080054aa 	.word	0x080054aa
 8004654:	0800547c 	.word	0x0800547c

08004658 <_free_r>:
 8004658:	b570      	push	{r4, r5, r6, lr}
 800465a:	0005      	movs	r5, r0
 800465c:	1e0c      	subs	r4, r1, #0
 800465e:	d010      	beq.n	8004682 <_free_r+0x2a>
 8004660:	3c04      	subs	r4, #4
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	da00      	bge.n	800466a <_free_r+0x12>
 8004668:	18e4      	adds	r4, r4, r3
 800466a:	0028      	movs	r0, r5
 800466c:	f000 f8ea 	bl	8004844 <__malloc_lock>
 8004670:	4a1d      	ldr	r2, [pc, #116]	@ (80046e8 <_free_r+0x90>)
 8004672:	6813      	ldr	r3, [r2, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d105      	bne.n	8004684 <_free_r+0x2c>
 8004678:	6063      	str	r3, [r4, #4]
 800467a:	6014      	str	r4, [r2, #0]
 800467c:	0028      	movs	r0, r5
 800467e:	f000 f8e9 	bl	8004854 <__malloc_unlock>
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	42a3      	cmp	r3, r4
 8004686:	d908      	bls.n	800469a <_free_r+0x42>
 8004688:	6820      	ldr	r0, [r4, #0]
 800468a:	1821      	adds	r1, r4, r0
 800468c:	428b      	cmp	r3, r1
 800468e:	d1f3      	bne.n	8004678 <_free_r+0x20>
 8004690:	6819      	ldr	r1, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	1809      	adds	r1, r1, r0
 8004696:	6021      	str	r1, [r4, #0]
 8004698:	e7ee      	b.n	8004678 <_free_r+0x20>
 800469a:	001a      	movs	r2, r3
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <_free_r+0x4e>
 80046a2:	42a3      	cmp	r3, r4
 80046a4:	d9f9      	bls.n	800469a <_free_r+0x42>
 80046a6:	6811      	ldr	r1, [r2, #0]
 80046a8:	1850      	adds	r0, r2, r1
 80046aa:	42a0      	cmp	r0, r4
 80046ac:	d10b      	bne.n	80046c6 <_free_r+0x6e>
 80046ae:	6820      	ldr	r0, [r4, #0]
 80046b0:	1809      	adds	r1, r1, r0
 80046b2:	1850      	adds	r0, r2, r1
 80046b4:	6011      	str	r1, [r2, #0]
 80046b6:	4283      	cmp	r3, r0
 80046b8:	d1e0      	bne.n	800467c <_free_r+0x24>
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	1841      	adds	r1, r0, r1
 80046c0:	6011      	str	r1, [r2, #0]
 80046c2:	6053      	str	r3, [r2, #4]
 80046c4:	e7da      	b.n	800467c <_free_r+0x24>
 80046c6:	42a0      	cmp	r0, r4
 80046c8:	d902      	bls.n	80046d0 <_free_r+0x78>
 80046ca:	230c      	movs	r3, #12
 80046cc:	602b      	str	r3, [r5, #0]
 80046ce:	e7d5      	b.n	800467c <_free_r+0x24>
 80046d0:	6820      	ldr	r0, [r4, #0]
 80046d2:	1821      	adds	r1, r4, r0
 80046d4:	428b      	cmp	r3, r1
 80046d6:	d103      	bne.n	80046e0 <_free_r+0x88>
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	1809      	adds	r1, r1, r0
 80046de:	6021      	str	r1, [r4, #0]
 80046e0:	6063      	str	r3, [r4, #4]
 80046e2:	6054      	str	r4, [r2, #4]
 80046e4:	e7ca      	b.n	800467c <_free_r+0x24>
 80046e6:	46c0      	nop			@ (mov r8, r8)
 80046e8:	2000050c 	.word	0x2000050c

080046ec <malloc>:
 80046ec:	b510      	push	{r4, lr}
 80046ee:	4b03      	ldr	r3, [pc, #12]	@ (80046fc <malloc+0x10>)
 80046f0:	0001      	movs	r1, r0
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	f000 f826 	bl	8004744 <_malloc_r>
 80046f8:	bd10      	pop	{r4, pc}
 80046fa:	46c0      	nop			@ (mov r8, r8)
 80046fc:	20000018 	.word	0x20000018

08004700 <sbrk_aligned>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	4e0f      	ldr	r6, [pc, #60]	@ (8004740 <sbrk_aligned+0x40>)
 8004704:	000d      	movs	r5, r1
 8004706:	6831      	ldr	r1, [r6, #0]
 8004708:	0004      	movs	r4, r0
 800470a:	2900      	cmp	r1, #0
 800470c:	d102      	bne.n	8004714 <sbrk_aligned+0x14>
 800470e:	f000 fccd 	bl	80050ac <_sbrk_r>
 8004712:	6030      	str	r0, [r6, #0]
 8004714:	0029      	movs	r1, r5
 8004716:	0020      	movs	r0, r4
 8004718:	f000 fcc8 	bl	80050ac <_sbrk_r>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d103      	bne.n	8004728 <sbrk_aligned+0x28>
 8004720:	2501      	movs	r5, #1
 8004722:	426d      	negs	r5, r5
 8004724:	0028      	movs	r0, r5
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	2303      	movs	r3, #3
 800472a:	1cc5      	adds	r5, r0, #3
 800472c:	439d      	bics	r5, r3
 800472e:	42a8      	cmp	r0, r5
 8004730:	d0f8      	beq.n	8004724 <sbrk_aligned+0x24>
 8004732:	1a29      	subs	r1, r5, r0
 8004734:	0020      	movs	r0, r4
 8004736:	f000 fcb9 	bl	80050ac <_sbrk_r>
 800473a:	3001      	adds	r0, #1
 800473c:	d1f2      	bne.n	8004724 <sbrk_aligned+0x24>
 800473e:	e7ef      	b.n	8004720 <sbrk_aligned+0x20>
 8004740:	20000508 	.word	0x20000508

08004744 <_malloc_r>:
 8004744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004746:	2203      	movs	r2, #3
 8004748:	1ccb      	adds	r3, r1, #3
 800474a:	4393      	bics	r3, r2
 800474c:	3308      	adds	r3, #8
 800474e:	0005      	movs	r5, r0
 8004750:	001f      	movs	r7, r3
 8004752:	2b0c      	cmp	r3, #12
 8004754:	d234      	bcs.n	80047c0 <_malloc_r+0x7c>
 8004756:	270c      	movs	r7, #12
 8004758:	42b9      	cmp	r1, r7
 800475a:	d833      	bhi.n	80047c4 <_malloc_r+0x80>
 800475c:	0028      	movs	r0, r5
 800475e:	f000 f871 	bl	8004844 <__malloc_lock>
 8004762:	4e37      	ldr	r6, [pc, #220]	@ (8004840 <_malloc_r+0xfc>)
 8004764:	6833      	ldr	r3, [r6, #0]
 8004766:	001c      	movs	r4, r3
 8004768:	2c00      	cmp	r4, #0
 800476a:	d12f      	bne.n	80047cc <_malloc_r+0x88>
 800476c:	0039      	movs	r1, r7
 800476e:	0028      	movs	r0, r5
 8004770:	f7ff ffc6 	bl	8004700 <sbrk_aligned>
 8004774:	0004      	movs	r4, r0
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	d15f      	bne.n	800483a <_malloc_r+0xf6>
 800477a:	6834      	ldr	r4, [r6, #0]
 800477c:	9400      	str	r4, [sp, #0]
 800477e:	9b00      	ldr	r3, [sp, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d14a      	bne.n	800481a <_malloc_r+0xd6>
 8004784:	2c00      	cmp	r4, #0
 8004786:	d052      	beq.n	800482e <_malloc_r+0xea>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	0028      	movs	r0, r5
 800478c:	18e3      	adds	r3, r4, r3
 800478e:	9900      	ldr	r1, [sp, #0]
 8004790:	9301      	str	r3, [sp, #4]
 8004792:	f000 fc8b 	bl	80050ac <_sbrk_r>
 8004796:	9b01      	ldr	r3, [sp, #4]
 8004798:	4283      	cmp	r3, r0
 800479a:	d148      	bne.n	800482e <_malloc_r+0xea>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	0028      	movs	r0, r5
 80047a0:	1aff      	subs	r7, r7, r3
 80047a2:	0039      	movs	r1, r7
 80047a4:	f7ff ffac 	bl	8004700 <sbrk_aligned>
 80047a8:	3001      	adds	r0, #1
 80047aa:	d040      	beq.n	800482e <_malloc_r+0xea>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	19db      	adds	r3, r3, r7
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	6833      	ldr	r3, [r6, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	2a00      	cmp	r2, #0
 80047b8:	d133      	bne.n	8004822 <_malloc_r+0xde>
 80047ba:	9b00      	ldr	r3, [sp, #0]
 80047bc:	6033      	str	r3, [r6, #0]
 80047be:	e019      	b.n	80047f4 <_malloc_r+0xb0>
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	dac9      	bge.n	8004758 <_malloc_r+0x14>
 80047c4:	230c      	movs	r3, #12
 80047c6:	602b      	str	r3, [r5, #0]
 80047c8:	2000      	movs	r0, #0
 80047ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047cc:	6821      	ldr	r1, [r4, #0]
 80047ce:	1bc9      	subs	r1, r1, r7
 80047d0:	d420      	bmi.n	8004814 <_malloc_r+0xd0>
 80047d2:	290b      	cmp	r1, #11
 80047d4:	d90a      	bls.n	80047ec <_malloc_r+0xa8>
 80047d6:	19e2      	adds	r2, r4, r7
 80047d8:	6027      	str	r7, [r4, #0]
 80047da:	42a3      	cmp	r3, r4
 80047dc:	d104      	bne.n	80047e8 <_malloc_r+0xa4>
 80047de:	6032      	str	r2, [r6, #0]
 80047e0:	6863      	ldr	r3, [r4, #4]
 80047e2:	6011      	str	r1, [r2, #0]
 80047e4:	6053      	str	r3, [r2, #4]
 80047e6:	e005      	b.n	80047f4 <_malloc_r+0xb0>
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	e7f9      	b.n	80047e0 <_malloc_r+0x9c>
 80047ec:	6862      	ldr	r2, [r4, #4]
 80047ee:	42a3      	cmp	r3, r4
 80047f0:	d10e      	bne.n	8004810 <_malloc_r+0xcc>
 80047f2:	6032      	str	r2, [r6, #0]
 80047f4:	0028      	movs	r0, r5
 80047f6:	f000 f82d 	bl	8004854 <__malloc_unlock>
 80047fa:	0020      	movs	r0, r4
 80047fc:	2207      	movs	r2, #7
 80047fe:	300b      	adds	r0, #11
 8004800:	1d23      	adds	r3, r4, #4
 8004802:	4390      	bics	r0, r2
 8004804:	1ac2      	subs	r2, r0, r3
 8004806:	4298      	cmp	r0, r3
 8004808:	d0df      	beq.n	80047ca <_malloc_r+0x86>
 800480a:	1a1b      	subs	r3, r3, r0
 800480c:	50a3      	str	r3, [r4, r2]
 800480e:	e7dc      	b.n	80047ca <_malloc_r+0x86>
 8004810:	605a      	str	r2, [r3, #4]
 8004812:	e7ef      	b.n	80047f4 <_malloc_r+0xb0>
 8004814:	0023      	movs	r3, r4
 8004816:	6864      	ldr	r4, [r4, #4]
 8004818:	e7a6      	b.n	8004768 <_malloc_r+0x24>
 800481a:	9c00      	ldr	r4, [sp, #0]
 800481c:	6863      	ldr	r3, [r4, #4]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	e7ad      	b.n	800477e <_malloc_r+0x3a>
 8004822:	001a      	movs	r2, r3
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	42a3      	cmp	r3, r4
 8004828:	d1fb      	bne.n	8004822 <_malloc_r+0xde>
 800482a:	2300      	movs	r3, #0
 800482c:	e7da      	b.n	80047e4 <_malloc_r+0xa0>
 800482e:	230c      	movs	r3, #12
 8004830:	0028      	movs	r0, r5
 8004832:	602b      	str	r3, [r5, #0]
 8004834:	f000 f80e 	bl	8004854 <__malloc_unlock>
 8004838:	e7c6      	b.n	80047c8 <_malloc_r+0x84>
 800483a:	6007      	str	r7, [r0, #0]
 800483c:	e7da      	b.n	80047f4 <_malloc_r+0xb0>
 800483e:	46c0      	nop			@ (mov r8, r8)
 8004840:	2000050c 	.word	0x2000050c

08004844 <__malloc_lock>:
 8004844:	b510      	push	{r4, lr}
 8004846:	4802      	ldr	r0, [pc, #8]	@ (8004850 <__malloc_lock+0xc>)
 8004848:	f7ff fee5 	bl	8004616 <__retarget_lock_acquire_recursive>
 800484c:	bd10      	pop	{r4, pc}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	20000504 	.word	0x20000504

08004854 <__malloc_unlock>:
 8004854:	b510      	push	{r4, lr}
 8004856:	4802      	ldr	r0, [pc, #8]	@ (8004860 <__malloc_unlock+0xc>)
 8004858:	f7ff fede 	bl	8004618 <__retarget_lock_release_recursive>
 800485c:	bd10      	pop	{r4, pc}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	20000504 	.word	0x20000504

08004864 <__sfputc_r>:
 8004864:	6893      	ldr	r3, [r2, #8]
 8004866:	b510      	push	{r4, lr}
 8004868:	3b01      	subs	r3, #1
 800486a:	6093      	str	r3, [r2, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	da04      	bge.n	800487a <__sfputc_r+0x16>
 8004870:	6994      	ldr	r4, [r2, #24]
 8004872:	42a3      	cmp	r3, r4
 8004874:	db07      	blt.n	8004886 <__sfputc_r+0x22>
 8004876:	290a      	cmp	r1, #10
 8004878:	d005      	beq.n	8004886 <__sfputc_r+0x22>
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	1c58      	adds	r0, r3, #1
 800487e:	6010      	str	r0, [r2, #0]
 8004880:	7019      	strb	r1, [r3, #0]
 8004882:	0008      	movs	r0, r1
 8004884:	bd10      	pop	{r4, pc}
 8004886:	f000 fb71 	bl	8004f6c <__swbuf_r>
 800488a:	0001      	movs	r1, r0
 800488c:	e7f9      	b.n	8004882 <__sfputc_r+0x1e>

0800488e <__sfputs_r>:
 800488e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004890:	0006      	movs	r6, r0
 8004892:	000f      	movs	r7, r1
 8004894:	0014      	movs	r4, r2
 8004896:	18d5      	adds	r5, r2, r3
 8004898:	42ac      	cmp	r4, r5
 800489a:	d101      	bne.n	80048a0 <__sfputs_r+0x12>
 800489c:	2000      	movs	r0, #0
 800489e:	e007      	b.n	80048b0 <__sfputs_r+0x22>
 80048a0:	7821      	ldrb	r1, [r4, #0]
 80048a2:	003a      	movs	r2, r7
 80048a4:	0030      	movs	r0, r6
 80048a6:	f7ff ffdd 	bl	8004864 <__sfputc_r>
 80048aa:	3401      	adds	r4, #1
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d1f3      	bne.n	8004898 <__sfputs_r+0xa>
 80048b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048b4 <_vfiprintf_r>:
 80048b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b6:	b0a1      	sub	sp, #132	@ 0x84
 80048b8:	000f      	movs	r7, r1
 80048ba:	0015      	movs	r5, r2
 80048bc:	001e      	movs	r6, r3
 80048be:	9003      	str	r0, [sp, #12]
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d004      	beq.n	80048ce <_vfiprintf_r+0x1a>
 80048c4:	6a03      	ldr	r3, [r0, #32]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <_vfiprintf_r+0x1a>
 80048ca:	f7ff fd93 	bl	80043f4 <__sinit>
 80048ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048d0:	07db      	lsls	r3, r3, #31
 80048d2:	d405      	bmi.n	80048e0 <_vfiprintf_r+0x2c>
 80048d4:	89bb      	ldrh	r3, [r7, #12]
 80048d6:	059b      	lsls	r3, r3, #22
 80048d8:	d402      	bmi.n	80048e0 <_vfiprintf_r+0x2c>
 80048da:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80048dc:	f7ff fe9b 	bl	8004616 <__retarget_lock_acquire_recursive>
 80048e0:	89bb      	ldrh	r3, [r7, #12]
 80048e2:	071b      	lsls	r3, r3, #28
 80048e4:	d502      	bpl.n	80048ec <_vfiprintf_r+0x38>
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d113      	bne.n	8004914 <_vfiprintf_r+0x60>
 80048ec:	0039      	movs	r1, r7
 80048ee:	9803      	ldr	r0, [sp, #12]
 80048f0:	f000 fb7e 	bl	8004ff0 <__swsetup_r>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d00d      	beq.n	8004914 <_vfiprintf_r+0x60>
 80048f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048fa:	07db      	lsls	r3, r3, #31
 80048fc:	d503      	bpl.n	8004906 <_vfiprintf_r+0x52>
 80048fe:	2001      	movs	r0, #1
 8004900:	4240      	negs	r0, r0
 8004902:	b021      	add	sp, #132	@ 0x84
 8004904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004906:	89bb      	ldrh	r3, [r7, #12]
 8004908:	059b      	lsls	r3, r3, #22
 800490a:	d4f8      	bmi.n	80048fe <_vfiprintf_r+0x4a>
 800490c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800490e:	f7ff fe83 	bl	8004618 <__retarget_lock_release_recursive>
 8004912:	e7f4      	b.n	80048fe <_vfiprintf_r+0x4a>
 8004914:	2300      	movs	r3, #0
 8004916:	ac08      	add	r4, sp, #32
 8004918:	6163      	str	r3, [r4, #20]
 800491a:	3320      	adds	r3, #32
 800491c:	7663      	strb	r3, [r4, #25]
 800491e:	3310      	adds	r3, #16
 8004920:	76a3      	strb	r3, [r4, #26]
 8004922:	9607      	str	r6, [sp, #28]
 8004924:	002e      	movs	r6, r5
 8004926:	7833      	ldrb	r3, [r6, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <_vfiprintf_r+0x7c>
 800492c:	2b25      	cmp	r3, #37	@ 0x25
 800492e:	d148      	bne.n	80049c2 <_vfiprintf_r+0x10e>
 8004930:	1b73      	subs	r3, r6, r5
 8004932:	9305      	str	r3, [sp, #20]
 8004934:	42ae      	cmp	r6, r5
 8004936:	d00b      	beq.n	8004950 <_vfiprintf_r+0x9c>
 8004938:	002a      	movs	r2, r5
 800493a:	0039      	movs	r1, r7
 800493c:	9803      	ldr	r0, [sp, #12]
 800493e:	f7ff ffa6 	bl	800488e <__sfputs_r>
 8004942:	3001      	adds	r0, #1
 8004944:	d100      	bne.n	8004948 <_vfiprintf_r+0x94>
 8004946:	e0ae      	b.n	8004aa6 <_vfiprintf_r+0x1f2>
 8004948:	6963      	ldr	r3, [r4, #20]
 800494a:	9a05      	ldr	r2, [sp, #20]
 800494c:	189b      	adds	r3, r3, r2
 800494e:	6163      	str	r3, [r4, #20]
 8004950:	7833      	ldrb	r3, [r6, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d100      	bne.n	8004958 <_vfiprintf_r+0xa4>
 8004956:	e0a6      	b.n	8004aa6 <_vfiprintf_r+0x1f2>
 8004958:	2201      	movs	r2, #1
 800495a:	2300      	movs	r3, #0
 800495c:	4252      	negs	r2, r2
 800495e:	6062      	str	r2, [r4, #4]
 8004960:	a904      	add	r1, sp, #16
 8004962:	3254      	adds	r2, #84	@ 0x54
 8004964:	1852      	adds	r2, r2, r1
 8004966:	1c75      	adds	r5, r6, #1
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	60e3      	str	r3, [r4, #12]
 800496c:	60a3      	str	r3, [r4, #8]
 800496e:	7013      	strb	r3, [r2, #0]
 8004970:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004972:	4b59      	ldr	r3, [pc, #356]	@ (8004ad8 <_vfiprintf_r+0x224>)
 8004974:	2205      	movs	r2, #5
 8004976:	0018      	movs	r0, r3
 8004978:	7829      	ldrb	r1, [r5, #0]
 800497a:	9305      	str	r3, [sp, #20]
 800497c:	f000 fba8 	bl	80050d0 <memchr>
 8004980:	1c6e      	adds	r6, r5, #1
 8004982:	2800      	cmp	r0, #0
 8004984:	d11f      	bne.n	80049c6 <_vfiprintf_r+0x112>
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	06d3      	lsls	r3, r2, #27
 800498a:	d504      	bpl.n	8004996 <_vfiprintf_r+0xe2>
 800498c:	2353      	movs	r3, #83	@ 0x53
 800498e:	a904      	add	r1, sp, #16
 8004990:	185b      	adds	r3, r3, r1
 8004992:	2120      	movs	r1, #32
 8004994:	7019      	strb	r1, [r3, #0]
 8004996:	0713      	lsls	r3, r2, #28
 8004998:	d504      	bpl.n	80049a4 <_vfiprintf_r+0xf0>
 800499a:	2353      	movs	r3, #83	@ 0x53
 800499c:	a904      	add	r1, sp, #16
 800499e:	185b      	adds	r3, r3, r1
 80049a0:	212b      	movs	r1, #43	@ 0x2b
 80049a2:	7019      	strb	r1, [r3, #0]
 80049a4:	782b      	ldrb	r3, [r5, #0]
 80049a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80049a8:	d016      	beq.n	80049d8 <_vfiprintf_r+0x124>
 80049aa:	002e      	movs	r6, r5
 80049ac:	2100      	movs	r1, #0
 80049ae:	200a      	movs	r0, #10
 80049b0:	68e3      	ldr	r3, [r4, #12]
 80049b2:	7832      	ldrb	r2, [r6, #0]
 80049b4:	1c75      	adds	r5, r6, #1
 80049b6:	3a30      	subs	r2, #48	@ 0x30
 80049b8:	2a09      	cmp	r2, #9
 80049ba:	d950      	bls.n	8004a5e <_vfiprintf_r+0x1aa>
 80049bc:	2900      	cmp	r1, #0
 80049be:	d111      	bne.n	80049e4 <_vfiprintf_r+0x130>
 80049c0:	e017      	b.n	80049f2 <_vfiprintf_r+0x13e>
 80049c2:	3601      	adds	r6, #1
 80049c4:	e7af      	b.n	8004926 <_vfiprintf_r+0x72>
 80049c6:	9b05      	ldr	r3, [sp, #20]
 80049c8:	6822      	ldr	r2, [r4, #0]
 80049ca:	1ac0      	subs	r0, r0, r3
 80049cc:	2301      	movs	r3, #1
 80049ce:	4083      	lsls	r3, r0
 80049d0:	4313      	orrs	r3, r2
 80049d2:	0035      	movs	r5, r6
 80049d4:	6023      	str	r3, [r4, #0]
 80049d6:	e7cc      	b.n	8004972 <_vfiprintf_r+0xbe>
 80049d8:	9b07      	ldr	r3, [sp, #28]
 80049da:	1d19      	adds	r1, r3, #4
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	9107      	str	r1, [sp, #28]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	db01      	blt.n	80049e8 <_vfiprintf_r+0x134>
 80049e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049e6:	e004      	b.n	80049f2 <_vfiprintf_r+0x13e>
 80049e8:	425b      	negs	r3, r3
 80049ea:	60e3      	str	r3, [r4, #12]
 80049ec:	2302      	movs	r3, #2
 80049ee:	4313      	orrs	r3, r2
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	7833      	ldrb	r3, [r6, #0]
 80049f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80049f6:	d10c      	bne.n	8004a12 <_vfiprintf_r+0x15e>
 80049f8:	7873      	ldrb	r3, [r6, #1]
 80049fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80049fc:	d134      	bne.n	8004a68 <_vfiprintf_r+0x1b4>
 80049fe:	9b07      	ldr	r3, [sp, #28]
 8004a00:	3602      	adds	r6, #2
 8004a02:	1d1a      	adds	r2, r3, #4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	9207      	str	r2, [sp, #28]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	da01      	bge.n	8004a10 <_vfiprintf_r+0x15c>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	425b      	negs	r3, r3
 8004a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a12:	4d32      	ldr	r5, [pc, #200]	@ (8004adc <_vfiprintf_r+0x228>)
 8004a14:	2203      	movs	r2, #3
 8004a16:	0028      	movs	r0, r5
 8004a18:	7831      	ldrb	r1, [r6, #0]
 8004a1a:	f000 fb59 	bl	80050d0 <memchr>
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d006      	beq.n	8004a30 <_vfiprintf_r+0x17c>
 8004a22:	2340      	movs	r3, #64	@ 0x40
 8004a24:	1b40      	subs	r0, r0, r5
 8004a26:	4083      	lsls	r3, r0
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	3601      	adds	r6, #1
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	6023      	str	r3, [r4, #0]
 8004a30:	7831      	ldrb	r1, [r6, #0]
 8004a32:	2206      	movs	r2, #6
 8004a34:	482a      	ldr	r0, [pc, #168]	@ (8004ae0 <_vfiprintf_r+0x22c>)
 8004a36:	1c75      	adds	r5, r6, #1
 8004a38:	7621      	strb	r1, [r4, #24]
 8004a3a:	f000 fb49 	bl	80050d0 <memchr>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	d040      	beq.n	8004ac4 <_vfiprintf_r+0x210>
 8004a42:	4b28      	ldr	r3, [pc, #160]	@ (8004ae4 <_vfiprintf_r+0x230>)
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d122      	bne.n	8004a8e <_vfiprintf_r+0x1da>
 8004a48:	2207      	movs	r2, #7
 8004a4a:	9b07      	ldr	r3, [sp, #28]
 8004a4c:	3307      	adds	r3, #7
 8004a4e:	4393      	bics	r3, r2
 8004a50:	3308      	adds	r3, #8
 8004a52:	9307      	str	r3, [sp, #28]
 8004a54:	6963      	ldr	r3, [r4, #20]
 8004a56:	9a04      	ldr	r2, [sp, #16]
 8004a58:	189b      	adds	r3, r3, r2
 8004a5a:	6163      	str	r3, [r4, #20]
 8004a5c:	e762      	b.n	8004924 <_vfiprintf_r+0x70>
 8004a5e:	4343      	muls	r3, r0
 8004a60:	002e      	movs	r6, r5
 8004a62:	2101      	movs	r1, #1
 8004a64:	189b      	adds	r3, r3, r2
 8004a66:	e7a4      	b.n	80049b2 <_vfiprintf_r+0xfe>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	200a      	movs	r0, #10
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	3601      	adds	r6, #1
 8004a70:	6063      	str	r3, [r4, #4]
 8004a72:	7832      	ldrb	r2, [r6, #0]
 8004a74:	1c75      	adds	r5, r6, #1
 8004a76:	3a30      	subs	r2, #48	@ 0x30
 8004a78:	2a09      	cmp	r2, #9
 8004a7a:	d903      	bls.n	8004a84 <_vfiprintf_r+0x1d0>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0c8      	beq.n	8004a12 <_vfiprintf_r+0x15e>
 8004a80:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a82:	e7c6      	b.n	8004a12 <_vfiprintf_r+0x15e>
 8004a84:	4341      	muls	r1, r0
 8004a86:	002e      	movs	r6, r5
 8004a88:	2301      	movs	r3, #1
 8004a8a:	1889      	adds	r1, r1, r2
 8004a8c:	e7f1      	b.n	8004a72 <_vfiprintf_r+0x1be>
 8004a8e:	aa07      	add	r2, sp, #28
 8004a90:	9200      	str	r2, [sp, #0]
 8004a92:	0021      	movs	r1, r4
 8004a94:	003a      	movs	r2, r7
 8004a96:	4b14      	ldr	r3, [pc, #80]	@ (8004ae8 <_vfiprintf_r+0x234>)
 8004a98:	9803      	ldr	r0, [sp, #12]
 8004a9a:	e000      	b.n	8004a9e <_vfiprintf_r+0x1ea>
 8004a9c:	bf00      	nop
 8004a9e:	9004      	str	r0, [sp, #16]
 8004aa0:	9b04      	ldr	r3, [sp, #16]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	d1d6      	bne.n	8004a54 <_vfiprintf_r+0x1a0>
 8004aa6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004aa8:	07db      	lsls	r3, r3, #31
 8004aaa:	d405      	bmi.n	8004ab8 <_vfiprintf_r+0x204>
 8004aac:	89bb      	ldrh	r3, [r7, #12]
 8004aae:	059b      	lsls	r3, r3, #22
 8004ab0:	d402      	bmi.n	8004ab8 <_vfiprintf_r+0x204>
 8004ab2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004ab4:	f7ff fdb0 	bl	8004618 <__retarget_lock_release_recursive>
 8004ab8:	89bb      	ldrh	r3, [r7, #12]
 8004aba:	065b      	lsls	r3, r3, #25
 8004abc:	d500      	bpl.n	8004ac0 <_vfiprintf_r+0x20c>
 8004abe:	e71e      	b.n	80048fe <_vfiprintf_r+0x4a>
 8004ac0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004ac2:	e71e      	b.n	8004902 <_vfiprintf_r+0x4e>
 8004ac4:	aa07      	add	r2, sp, #28
 8004ac6:	9200      	str	r2, [sp, #0]
 8004ac8:	0021      	movs	r1, r4
 8004aca:	003a      	movs	r2, r7
 8004acc:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <_vfiprintf_r+0x234>)
 8004ace:	9803      	ldr	r0, [sp, #12]
 8004ad0:	f000 f87c 	bl	8004bcc <_printf_i>
 8004ad4:	e7e3      	b.n	8004a9e <_vfiprintf_r+0x1ea>
 8004ad6:	46c0      	nop			@ (mov r8, r8)
 8004ad8:	080054ab 	.word	0x080054ab
 8004adc:	080054b1 	.word	0x080054b1
 8004ae0:	080054b5 	.word	0x080054b5
 8004ae4:	00000000 	.word	0x00000000
 8004ae8:	0800488f 	.word	0x0800488f

08004aec <_printf_common>:
 8004aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aee:	0016      	movs	r6, r2
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	688a      	ldr	r2, [r1, #8]
 8004af4:	690b      	ldr	r3, [r1, #16]
 8004af6:	000c      	movs	r4, r1
 8004af8:	9000      	str	r0, [sp, #0]
 8004afa:	4293      	cmp	r3, r2
 8004afc:	da00      	bge.n	8004b00 <_printf_common+0x14>
 8004afe:	0013      	movs	r3, r2
 8004b00:	0022      	movs	r2, r4
 8004b02:	6033      	str	r3, [r6, #0]
 8004b04:	3243      	adds	r2, #67	@ 0x43
 8004b06:	7812      	ldrb	r2, [r2, #0]
 8004b08:	2a00      	cmp	r2, #0
 8004b0a:	d001      	beq.n	8004b10 <_printf_common+0x24>
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	6033      	str	r3, [r6, #0]
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	069b      	lsls	r3, r3, #26
 8004b14:	d502      	bpl.n	8004b1c <_printf_common+0x30>
 8004b16:	6833      	ldr	r3, [r6, #0]
 8004b18:	3302      	adds	r3, #2
 8004b1a:	6033      	str	r3, [r6, #0]
 8004b1c:	6822      	ldr	r2, [r4, #0]
 8004b1e:	2306      	movs	r3, #6
 8004b20:	0015      	movs	r5, r2
 8004b22:	401d      	ands	r5, r3
 8004b24:	421a      	tst	r2, r3
 8004b26:	d027      	beq.n	8004b78 <_printf_common+0x8c>
 8004b28:	0023      	movs	r3, r4
 8004b2a:	3343      	adds	r3, #67	@ 0x43
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	1e5a      	subs	r2, r3, #1
 8004b30:	4193      	sbcs	r3, r2
 8004b32:	6822      	ldr	r2, [r4, #0]
 8004b34:	0692      	lsls	r2, r2, #26
 8004b36:	d430      	bmi.n	8004b9a <_printf_common+0xae>
 8004b38:	0022      	movs	r2, r4
 8004b3a:	9901      	ldr	r1, [sp, #4]
 8004b3c:	9800      	ldr	r0, [sp, #0]
 8004b3e:	9d08      	ldr	r5, [sp, #32]
 8004b40:	3243      	adds	r2, #67	@ 0x43
 8004b42:	47a8      	blx	r5
 8004b44:	3001      	adds	r0, #1
 8004b46:	d025      	beq.n	8004b94 <_printf_common+0xa8>
 8004b48:	2206      	movs	r2, #6
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	2500      	movs	r5, #0
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d105      	bne.n	8004b60 <_printf_common+0x74>
 8004b54:	6833      	ldr	r3, [r6, #0]
 8004b56:	68e5      	ldr	r5, [r4, #12]
 8004b58:	1aed      	subs	r5, r5, r3
 8004b5a:	43eb      	mvns	r3, r5
 8004b5c:	17db      	asrs	r3, r3, #31
 8004b5e:	401d      	ands	r5, r3
 8004b60:	68a3      	ldr	r3, [r4, #8]
 8004b62:	6922      	ldr	r2, [r4, #16]
 8004b64:	4293      	cmp	r3, r2
 8004b66:	dd01      	ble.n	8004b6c <_printf_common+0x80>
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	18ed      	adds	r5, r5, r3
 8004b6c:	2600      	movs	r6, #0
 8004b6e:	42b5      	cmp	r5, r6
 8004b70:	d120      	bne.n	8004bb4 <_printf_common+0xc8>
 8004b72:	2000      	movs	r0, #0
 8004b74:	e010      	b.n	8004b98 <_printf_common+0xac>
 8004b76:	3501      	adds	r5, #1
 8004b78:	68e3      	ldr	r3, [r4, #12]
 8004b7a:	6832      	ldr	r2, [r6, #0]
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	42ab      	cmp	r3, r5
 8004b80:	ddd2      	ble.n	8004b28 <_printf_common+0x3c>
 8004b82:	0022      	movs	r2, r4
 8004b84:	2301      	movs	r3, #1
 8004b86:	9901      	ldr	r1, [sp, #4]
 8004b88:	9800      	ldr	r0, [sp, #0]
 8004b8a:	9f08      	ldr	r7, [sp, #32]
 8004b8c:	3219      	adds	r2, #25
 8004b8e:	47b8      	blx	r7
 8004b90:	3001      	adds	r0, #1
 8004b92:	d1f0      	bne.n	8004b76 <_printf_common+0x8a>
 8004b94:	2001      	movs	r0, #1
 8004b96:	4240      	negs	r0, r0
 8004b98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b9a:	2030      	movs	r0, #48	@ 0x30
 8004b9c:	18e1      	adds	r1, r4, r3
 8004b9e:	3143      	adds	r1, #67	@ 0x43
 8004ba0:	7008      	strb	r0, [r1, #0]
 8004ba2:	0021      	movs	r1, r4
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	3145      	adds	r1, #69	@ 0x45
 8004ba8:	7809      	ldrb	r1, [r1, #0]
 8004baa:	18a2      	adds	r2, r4, r2
 8004bac:	3243      	adds	r2, #67	@ 0x43
 8004bae:	3302      	adds	r3, #2
 8004bb0:	7011      	strb	r1, [r2, #0]
 8004bb2:	e7c1      	b.n	8004b38 <_printf_common+0x4c>
 8004bb4:	0022      	movs	r2, r4
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	9901      	ldr	r1, [sp, #4]
 8004bba:	9800      	ldr	r0, [sp, #0]
 8004bbc:	9f08      	ldr	r7, [sp, #32]
 8004bbe:	321a      	adds	r2, #26
 8004bc0:	47b8      	blx	r7
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d0e6      	beq.n	8004b94 <_printf_common+0xa8>
 8004bc6:	3601      	adds	r6, #1
 8004bc8:	e7d1      	b.n	8004b6e <_printf_common+0x82>
	...

08004bcc <_printf_i>:
 8004bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bce:	b08b      	sub	sp, #44	@ 0x2c
 8004bd0:	9206      	str	r2, [sp, #24]
 8004bd2:	000a      	movs	r2, r1
 8004bd4:	3243      	adds	r2, #67	@ 0x43
 8004bd6:	9307      	str	r3, [sp, #28]
 8004bd8:	9005      	str	r0, [sp, #20]
 8004bda:	9203      	str	r2, [sp, #12]
 8004bdc:	7e0a      	ldrb	r2, [r1, #24]
 8004bde:	000c      	movs	r4, r1
 8004be0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004be2:	2a78      	cmp	r2, #120	@ 0x78
 8004be4:	d809      	bhi.n	8004bfa <_printf_i+0x2e>
 8004be6:	2a62      	cmp	r2, #98	@ 0x62
 8004be8:	d80b      	bhi.n	8004c02 <_printf_i+0x36>
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	d100      	bne.n	8004bf0 <_printf_i+0x24>
 8004bee:	e0bc      	b.n	8004d6a <_printf_i+0x19e>
 8004bf0:	497b      	ldr	r1, [pc, #492]	@ (8004de0 <_printf_i+0x214>)
 8004bf2:	9104      	str	r1, [sp, #16]
 8004bf4:	2a58      	cmp	r2, #88	@ 0x58
 8004bf6:	d100      	bne.n	8004bfa <_printf_i+0x2e>
 8004bf8:	e090      	b.n	8004d1c <_printf_i+0x150>
 8004bfa:	0025      	movs	r5, r4
 8004bfc:	3542      	adds	r5, #66	@ 0x42
 8004bfe:	702a      	strb	r2, [r5, #0]
 8004c00:	e022      	b.n	8004c48 <_printf_i+0x7c>
 8004c02:	0010      	movs	r0, r2
 8004c04:	3863      	subs	r0, #99	@ 0x63
 8004c06:	2815      	cmp	r0, #21
 8004c08:	d8f7      	bhi.n	8004bfa <_printf_i+0x2e>
 8004c0a:	f7fb fa7d 	bl	8000108 <__gnu_thumb1_case_shi>
 8004c0e:	0016      	.short	0x0016
 8004c10:	fff6001f 	.word	0xfff6001f
 8004c14:	fff6fff6 	.word	0xfff6fff6
 8004c18:	001ffff6 	.word	0x001ffff6
 8004c1c:	fff6fff6 	.word	0xfff6fff6
 8004c20:	fff6fff6 	.word	0xfff6fff6
 8004c24:	003600a1 	.word	0x003600a1
 8004c28:	fff60080 	.word	0xfff60080
 8004c2c:	00b2fff6 	.word	0x00b2fff6
 8004c30:	0036fff6 	.word	0x0036fff6
 8004c34:	fff6fff6 	.word	0xfff6fff6
 8004c38:	0084      	.short	0x0084
 8004c3a:	0025      	movs	r5, r4
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	3542      	adds	r5, #66	@ 0x42
 8004c40:	1d11      	adds	r1, r2, #4
 8004c42:	6019      	str	r1, [r3, #0]
 8004c44:	6813      	ldr	r3, [r2, #0]
 8004c46:	702b      	strb	r3, [r5, #0]
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0a0      	b.n	8004d8e <_printf_i+0x1c2>
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	6809      	ldr	r1, [r1, #0]
 8004c50:	1d02      	adds	r2, r0, #4
 8004c52:	060d      	lsls	r5, r1, #24
 8004c54:	d50b      	bpl.n	8004c6e <_printf_i+0xa2>
 8004c56:	6806      	ldr	r6, [r0, #0]
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	2e00      	cmp	r6, #0
 8004c5c:	da03      	bge.n	8004c66 <_printf_i+0x9a>
 8004c5e:	232d      	movs	r3, #45	@ 0x2d
 8004c60:	9a03      	ldr	r2, [sp, #12]
 8004c62:	4276      	negs	r6, r6
 8004c64:	7013      	strb	r3, [r2, #0]
 8004c66:	4b5e      	ldr	r3, [pc, #376]	@ (8004de0 <_printf_i+0x214>)
 8004c68:	270a      	movs	r7, #10
 8004c6a:	9304      	str	r3, [sp, #16]
 8004c6c:	e018      	b.n	8004ca0 <_printf_i+0xd4>
 8004c6e:	6806      	ldr	r6, [r0, #0]
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	0649      	lsls	r1, r1, #25
 8004c74:	d5f1      	bpl.n	8004c5a <_printf_i+0x8e>
 8004c76:	b236      	sxth	r6, r6
 8004c78:	e7ef      	b.n	8004c5a <_printf_i+0x8e>
 8004c7a:	6808      	ldr	r0, [r1, #0]
 8004c7c:	6819      	ldr	r1, [r3, #0]
 8004c7e:	c940      	ldmia	r1!, {r6}
 8004c80:	0605      	lsls	r5, r0, #24
 8004c82:	d402      	bmi.n	8004c8a <_printf_i+0xbe>
 8004c84:	0640      	lsls	r0, r0, #25
 8004c86:	d500      	bpl.n	8004c8a <_printf_i+0xbe>
 8004c88:	b2b6      	uxth	r6, r6
 8004c8a:	6019      	str	r1, [r3, #0]
 8004c8c:	4b54      	ldr	r3, [pc, #336]	@ (8004de0 <_printf_i+0x214>)
 8004c8e:	270a      	movs	r7, #10
 8004c90:	9304      	str	r3, [sp, #16]
 8004c92:	2a6f      	cmp	r2, #111	@ 0x6f
 8004c94:	d100      	bne.n	8004c98 <_printf_i+0xcc>
 8004c96:	3f02      	subs	r7, #2
 8004c98:	0023      	movs	r3, r4
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	3343      	adds	r3, #67	@ 0x43
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	6863      	ldr	r3, [r4, #4]
 8004ca2:	60a3      	str	r3, [r4, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	db03      	blt.n	8004cb0 <_printf_i+0xe4>
 8004ca8:	2104      	movs	r1, #4
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	438a      	bics	r2, r1
 8004cae:	6022      	str	r2, [r4, #0]
 8004cb0:	2e00      	cmp	r6, #0
 8004cb2:	d102      	bne.n	8004cba <_printf_i+0xee>
 8004cb4:	9d03      	ldr	r5, [sp, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00c      	beq.n	8004cd4 <_printf_i+0x108>
 8004cba:	9d03      	ldr	r5, [sp, #12]
 8004cbc:	0030      	movs	r0, r6
 8004cbe:	0039      	movs	r1, r7
 8004cc0:	f7fb fab2 	bl	8000228 <__aeabi_uidivmod>
 8004cc4:	9b04      	ldr	r3, [sp, #16]
 8004cc6:	3d01      	subs	r5, #1
 8004cc8:	5c5b      	ldrb	r3, [r3, r1]
 8004cca:	702b      	strb	r3, [r5, #0]
 8004ccc:	0033      	movs	r3, r6
 8004cce:	0006      	movs	r6, r0
 8004cd0:	429f      	cmp	r7, r3
 8004cd2:	d9f3      	bls.n	8004cbc <_printf_i+0xf0>
 8004cd4:	2f08      	cmp	r7, #8
 8004cd6:	d109      	bne.n	8004cec <_printf_i+0x120>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	07db      	lsls	r3, r3, #31
 8004cdc:	d506      	bpl.n	8004cec <_printf_i+0x120>
 8004cde:	6862      	ldr	r2, [r4, #4]
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	dc02      	bgt.n	8004cec <_printf_i+0x120>
 8004ce6:	2330      	movs	r3, #48	@ 0x30
 8004ce8:	3d01      	subs	r5, #1
 8004cea:	702b      	strb	r3, [r5, #0]
 8004cec:	9b03      	ldr	r3, [sp, #12]
 8004cee:	1b5b      	subs	r3, r3, r5
 8004cf0:	6123      	str	r3, [r4, #16]
 8004cf2:	9b07      	ldr	r3, [sp, #28]
 8004cf4:	0021      	movs	r1, r4
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	9805      	ldr	r0, [sp, #20]
 8004cfa:	9b06      	ldr	r3, [sp, #24]
 8004cfc:	aa09      	add	r2, sp, #36	@ 0x24
 8004cfe:	f7ff fef5 	bl	8004aec <_printf_common>
 8004d02:	3001      	adds	r0, #1
 8004d04:	d148      	bne.n	8004d98 <_printf_i+0x1cc>
 8004d06:	2001      	movs	r0, #1
 8004d08:	4240      	negs	r0, r0
 8004d0a:	b00b      	add	sp, #44	@ 0x2c
 8004d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d0e:	2220      	movs	r2, #32
 8004d10:	6809      	ldr	r1, [r1, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	6022      	str	r2, [r4, #0]
 8004d16:	2278      	movs	r2, #120	@ 0x78
 8004d18:	4932      	ldr	r1, [pc, #200]	@ (8004de4 <_printf_i+0x218>)
 8004d1a:	9104      	str	r1, [sp, #16]
 8004d1c:	0021      	movs	r1, r4
 8004d1e:	3145      	adds	r1, #69	@ 0x45
 8004d20:	700a      	strb	r2, [r1, #0]
 8004d22:	6819      	ldr	r1, [r3, #0]
 8004d24:	6822      	ldr	r2, [r4, #0]
 8004d26:	c940      	ldmia	r1!, {r6}
 8004d28:	0610      	lsls	r0, r2, #24
 8004d2a:	d402      	bmi.n	8004d32 <_printf_i+0x166>
 8004d2c:	0650      	lsls	r0, r2, #25
 8004d2e:	d500      	bpl.n	8004d32 <_printf_i+0x166>
 8004d30:	b2b6      	uxth	r6, r6
 8004d32:	6019      	str	r1, [r3, #0]
 8004d34:	07d3      	lsls	r3, r2, #31
 8004d36:	d502      	bpl.n	8004d3e <_printf_i+0x172>
 8004d38:	2320      	movs	r3, #32
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	2e00      	cmp	r6, #0
 8004d40:	d001      	beq.n	8004d46 <_printf_i+0x17a>
 8004d42:	2710      	movs	r7, #16
 8004d44:	e7a8      	b.n	8004c98 <_printf_i+0xcc>
 8004d46:	2220      	movs	r2, #32
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	4393      	bics	r3, r2
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	e7f8      	b.n	8004d42 <_printf_i+0x176>
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	680d      	ldr	r5, [r1, #0]
 8004d54:	1d10      	adds	r0, r2, #4
 8004d56:	6949      	ldr	r1, [r1, #20]
 8004d58:	6018      	str	r0, [r3, #0]
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	062e      	lsls	r6, r5, #24
 8004d5e:	d501      	bpl.n	8004d64 <_printf_i+0x198>
 8004d60:	6019      	str	r1, [r3, #0]
 8004d62:	e002      	b.n	8004d6a <_printf_i+0x19e>
 8004d64:	066d      	lsls	r5, r5, #25
 8004d66:	d5fb      	bpl.n	8004d60 <_printf_i+0x194>
 8004d68:	8019      	strh	r1, [r3, #0]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9d03      	ldr	r5, [sp, #12]
 8004d6e:	6123      	str	r3, [r4, #16]
 8004d70:	e7bf      	b.n	8004cf2 <_printf_i+0x126>
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	1d11      	adds	r1, r2, #4
 8004d76:	6019      	str	r1, [r3, #0]
 8004d78:	6815      	ldr	r5, [r2, #0]
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	0028      	movs	r0, r5
 8004d7e:	6862      	ldr	r2, [r4, #4]
 8004d80:	f000 f9a6 	bl	80050d0 <memchr>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d001      	beq.n	8004d8c <_printf_i+0x1c0>
 8004d88:	1b40      	subs	r0, r0, r5
 8004d8a:	6060      	str	r0, [r4, #4]
 8004d8c:	6863      	ldr	r3, [r4, #4]
 8004d8e:	6123      	str	r3, [r4, #16]
 8004d90:	2300      	movs	r3, #0
 8004d92:	9a03      	ldr	r2, [sp, #12]
 8004d94:	7013      	strb	r3, [r2, #0]
 8004d96:	e7ac      	b.n	8004cf2 <_printf_i+0x126>
 8004d98:	002a      	movs	r2, r5
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	9906      	ldr	r1, [sp, #24]
 8004d9e:	9805      	ldr	r0, [sp, #20]
 8004da0:	9d07      	ldr	r5, [sp, #28]
 8004da2:	47a8      	blx	r5
 8004da4:	3001      	adds	r0, #1
 8004da6:	d0ae      	beq.n	8004d06 <_printf_i+0x13a>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	079b      	lsls	r3, r3, #30
 8004dac:	d415      	bmi.n	8004dda <_printf_i+0x20e>
 8004dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004db0:	68e0      	ldr	r0, [r4, #12]
 8004db2:	4298      	cmp	r0, r3
 8004db4:	daa9      	bge.n	8004d0a <_printf_i+0x13e>
 8004db6:	0018      	movs	r0, r3
 8004db8:	e7a7      	b.n	8004d0a <_printf_i+0x13e>
 8004dba:	0022      	movs	r2, r4
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	9906      	ldr	r1, [sp, #24]
 8004dc0:	9805      	ldr	r0, [sp, #20]
 8004dc2:	9e07      	ldr	r6, [sp, #28]
 8004dc4:	3219      	adds	r2, #25
 8004dc6:	47b0      	blx	r6
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d09c      	beq.n	8004d06 <_printf_i+0x13a>
 8004dcc:	3501      	adds	r5, #1
 8004dce:	68e3      	ldr	r3, [r4, #12]
 8004dd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	42ab      	cmp	r3, r5
 8004dd6:	dcf0      	bgt.n	8004dba <_printf_i+0x1ee>
 8004dd8:	e7e9      	b.n	8004dae <_printf_i+0x1e2>
 8004dda:	2500      	movs	r5, #0
 8004ddc:	e7f7      	b.n	8004dce <_printf_i+0x202>
 8004dde:	46c0      	nop			@ (mov r8, r8)
 8004de0:	080054bc 	.word	0x080054bc
 8004de4:	080054cd 	.word	0x080054cd

08004de8 <__sflush_r>:
 8004de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dea:	220c      	movs	r2, #12
 8004dec:	5e8b      	ldrsh	r3, [r1, r2]
 8004dee:	0005      	movs	r5, r0
 8004df0:	000c      	movs	r4, r1
 8004df2:	071a      	lsls	r2, r3, #28
 8004df4:	d456      	bmi.n	8004ea4 <__sflush_r+0xbc>
 8004df6:	684a      	ldr	r2, [r1, #4]
 8004df8:	2a00      	cmp	r2, #0
 8004dfa:	dc02      	bgt.n	8004e02 <__sflush_r+0x1a>
 8004dfc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004dfe:	2a00      	cmp	r2, #0
 8004e00:	dd4e      	ble.n	8004ea0 <__sflush_r+0xb8>
 8004e02:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004e04:	2f00      	cmp	r7, #0
 8004e06:	d04b      	beq.n	8004ea0 <__sflush_r+0xb8>
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2080      	movs	r0, #128	@ 0x80
 8004e0c:	682e      	ldr	r6, [r5, #0]
 8004e0e:	602a      	str	r2, [r5, #0]
 8004e10:	001a      	movs	r2, r3
 8004e12:	0140      	lsls	r0, r0, #5
 8004e14:	6a21      	ldr	r1, [r4, #32]
 8004e16:	4002      	ands	r2, r0
 8004e18:	4203      	tst	r3, r0
 8004e1a:	d033      	beq.n	8004e84 <__sflush_r+0x9c>
 8004e1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	075b      	lsls	r3, r3, #29
 8004e22:	d506      	bpl.n	8004e32 <__sflush_r+0x4a>
 8004e24:	6863      	ldr	r3, [r4, #4]
 8004e26:	1ad2      	subs	r2, r2, r3
 8004e28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <__sflush_r+0x4a>
 8004e2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e30:	1ad2      	subs	r2, r2, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	0028      	movs	r0, r5
 8004e36:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004e38:	6a21      	ldr	r1, [r4, #32]
 8004e3a:	47b8      	blx	r7
 8004e3c:	89a2      	ldrh	r2, [r4, #12]
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	d106      	bne.n	8004e50 <__sflush_r+0x68>
 8004e42:	6829      	ldr	r1, [r5, #0]
 8004e44:	291d      	cmp	r1, #29
 8004e46:	d846      	bhi.n	8004ed6 <__sflush_r+0xee>
 8004e48:	4b29      	ldr	r3, [pc, #164]	@ (8004ef0 <__sflush_r+0x108>)
 8004e4a:	410b      	asrs	r3, r1
 8004e4c:	07db      	lsls	r3, r3, #31
 8004e4e:	d442      	bmi.n	8004ed6 <__sflush_r+0xee>
 8004e50:	2300      	movs	r3, #0
 8004e52:	6063      	str	r3, [r4, #4]
 8004e54:	6923      	ldr	r3, [r4, #16]
 8004e56:	6023      	str	r3, [r4, #0]
 8004e58:	04d2      	lsls	r2, r2, #19
 8004e5a:	d505      	bpl.n	8004e68 <__sflush_r+0x80>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <__sflush_r+0x7e>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d100      	bne.n	8004e68 <__sflush_r+0x80>
 8004e66:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e6a:	602e      	str	r6, [r5, #0]
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	d017      	beq.n	8004ea0 <__sflush_r+0xb8>
 8004e70:	0023      	movs	r3, r4
 8004e72:	3344      	adds	r3, #68	@ 0x44
 8004e74:	4299      	cmp	r1, r3
 8004e76:	d002      	beq.n	8004e7e <__sflush_r+0x96>
 8004e78:	0028      	movs	r0, r5
 8004e7a:	f7ff fbed 	bl	8004658 <_free_r>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e82:	e00d      	b.n	8004ea0 <__sflush_r+0xb8>
 8004e84:	2301      	movs	r3, #1
 8004e86:	0028      	movs	r0, r5
 8004e88:	47b8      	blx	r7
 8004e8a:	0002      	movs	r2, r0
 8004e8c:	1c43      	adds	r3, r0, #1
 8004e8e:	d1c6      	bne.n	8004e1e <__sflush_r+0x36>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0c3      	beq.n	8004e1e <__sflush_r+0x36>
 8004e96:	2b1d      	cmp	r3, #29
 8004e98:	d001      	beq.n	8004e9e <__sflush_r+0xb6>
 8004e9a:	2b16      	cmp	r3, #22
 8004e9c:	d11a      	bne.n	8004ed4 <__sflush_r+0xec>
 8004e9e:	602e      	str	r6, [r5, #0]
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	e01e      	b.n	8004ee2 <__sflush_r+0xfa>
 8004ea4:	690e      	ldr	r6, [r1, #16]
 8004ea6:	2e00      	cmp	r6, #0
 8004ea8:	d0fa      	beq.n	8004ea0 <__sflush_r+0xb8>
 8004eaa:	680f      	ldr	r7, [r1, #0]
 8004eac:	600e      	str	r6, [r1, #0]
 8004eae:	1bba      	subs	r2, r7, r6
 8004eb0:	9201      	str	r2, [sp, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	079b      	lsls	r3, r3, #30
 8004eb6:	d100      	bne.n	8004eba <__sflush_r+0xd2>
 8004eb8:	694a      	ldr	r2, [r1, #20]
 8004eba:	60a2      	str	r2, [r4, #8]
 8004ebc:	9b01      	ldr	r3, [sp, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	ddee      	ble.n	8004ea0 <__sflush_r+0xb8>
 8004ec2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004ec4:	0032      	movs	r2, r6
 8004ec6:	001f      	movs	r7, r3
 8004ec8:	0028      	movs	r0, r5
 8004eca:	9b01      	ldr	r3, [sp, #4]
 8004ecc:	6a21      	ldr	r1, [r4, #32]
 8004ece:	47b8      	blx	r7
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	dc07      	bgt.n	8004ee4 <__sflush_r+0xfc>
 8004ed4:	89a2      	ldrh	r2, [r4, #12]
 8004ed6:	2340      	movs	r3, #64	@ 0x40
 8004ed8:	2001      	movs	r0, #1
 8004eda:	4313      	orrs	r3, r2
 8004edc:	b21b      	sxth	r3, r3
 8004ede:	81a3      	strh	r3, [r4, #12]
 8004ee0:	4240      	negs	r0, r0
 8004ee2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ee4:	9b01      	ldr	r3, [sp, #4]
 8004ee6:	1836      	adds	r6, r6, r0
 8004ee8:	1a1b      	subs	r3, r3, r0
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	e7e6      	b.n	8004ebc <__sflush_r+0xd4>
 8004eee:	46c0      	nop			@ (mov r8, r8)
 8004ef0:	dfbffffe 	.word	0xdfbffffe

08004ef4 <_fflush_r>:
 8004ef4:	690b      	ldr	r3, [r1, #16]
 8004ef6:	b570      	push	{r4, r5, r6, lr}
 8004ef8:	0005      	movs	r5, r0
 8004efa:	000c      	movs	r4, r1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <_fflush_r+0x12>
 8004f00:	2500      	movs	r5, #0
 8004f02:	0028      	movs	r0, r5
 8004f04:	bd70      	pop	{r4, r5, r6, pc}
 8004f06:	2800      	cmp	r0, #0
 8004f08:	d004      	beq.n	8004f14 <_fflush_r+0x20>
 8004f0a:	6a03      	ldr	r3, [r0, #32]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <_fflush_r+0x20>
 8004f10:	f7ff fa70 	bl	80043f4 <__sinit>
 8004f14:	220c      	movs	r2, #12
 8004f16:	5ea3      	ldrsh	r3, [r4, r2]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f1      	beq.n	8004f00 <_fflush_r+0xc>
 8004f1c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f1e:	07d2      	lsls	r2, r2, #31
 8004f20:	d404      	bmi.n	8004f2c <_fflush_r+0x38>
 8004f22:	059b      	lsls	r3, r3, #22
 8004f24:	d402      	bmi.n	8004f2c <_fflush_r+0x38>
 8004f26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f28:	f7ff fb75 	bl	8004616 <__retarget_lock_acquire_recursive>
 8004f2c:	0028      	movs	r0, r5
 8004f2e:	0021      	movs	r1, r4
 8004f30:	f7ff ff5a 	bl	8004de8 <__sflush_r>
 8004f34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f36:	0005      	movs	r5, r0
 8004f38:	07db      	lsls	r3, r3, #31
 8004f3a:	d4e2      	bmi.n	8004f02 <_fflush_r+0xe>
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	059b      	lsls	r3, r3, #22
 8004f40:	d4df      	bmi.n	8004f02 <_fflush_r+0xe>
 8004f42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f44:	f7ff fb68 	bl	8004618 <__retarget_lock_release_recursive>
 8004f48:	e7db      	b.n	8004f02 <_fflush_r+0xe>
	...

08004f4c <fiprintf>:
 8004f4c:	b40e      	push	{r1, r2, r3}
 8004f4e:	b517      	push	{r0, r1, r2, r4, lr}
 8004f50:	4c05      	ldr	r4, [pc, #20]	@ (8004f68 <fiprintf+0x1c>)
 8004f52:	ab05      	add	r3, sp, #20
 8004f54:	cb04      	ldmia	r3!, {r2}
 8004f56:	0001      	movs	r1, r0
 8004f58:	6820      	ldr	r0, [r4, #0]
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	f7ff fcaa 	bl	80048b4 <_vfiprintf_r>
 8004f60:	bc1e      	pop	{r1, r2, r3, r4}
 8004f62:	bc08      	pop	{r3}
 8004f64:	b003      	add	sp, #12
 8004f66:	4718      	bx	r3
 8004f68:	20000018 	.word	0x20000018

08004f6c <__swbuf_r>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	0006      	movs	r6, r0
 8004f70:	000d      	movs	r5, r1
 8004f72:	0014      	movs	r4, r2
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d004      	beq.n	8004f82 <__swbuf_r+0x16>
 8004f78:	6a03      	ldr	r3, [r0, #32]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <__swbuf_r+0x16>
 8004f7e:	f7ff fa39 	bl	80043f4 <__sinit>
 8004f82:	69a3      	ldr	r3, [r4, #24]
 8004f84:	60a3      	str	r3, [r4, #8]
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	071b      	lsls	r3, r3, #28
 8004f8a:	d502      	bpl.n	8004f92 <__swbuf_r+0x26>
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <__swbuf_r+0x3a>
 8004f92:	0021      	movs	r1, r4
 8004f94:	0030      	movs	r0, r6
 8004f96:	f000 f82b 	bl	8004ff0 <__swsetup_r>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d003      	beq.n	8004fa6 <__swbuf_r+0x3a>
 8004f9e:	2501      	movs	r5, #1
 8004fa0:	426d      	negs	r5, r5
 8004fa2:	0028      	movs	r0, r5
 8004fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	6820      	ldr	r0, [r4, #0]
 8004faa:	b2ef      	uxtb	r7, r5
 8004fac:	1ac0      	subs	r0, r0, r3
 8004fae:	6963      	ldr	r3, [r4, #20]
 8004fb0:	b2ed      	uxtb	r5, r5
 8004fb2:	4283      	cmp	r3, r0
 8004fb4:	dc05      	bgt.n	8004fc2 <__swbuf_r+0x56>
 8004fb6:	0021      	movs	r1, r4
 8004fb8:	0030      	movs	r0, r6
 8004fba:	f7ff ff9b 	bl	8004ef4 <_fflush_r>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d1ed      	bne.n	8004f9e <__swbuf_r+0x32>
 8004fc2:	68a3      	ldr	r3, [r4, #8]
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	60a3      	str	r3, [r4, #8]
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	6022      	str	r2, [r4, #0]
 8004fd0:	701f      	strb	r7, [r3, #0]
 8004fd2:	6963      	ldr	r3, [r4, #20]
 8004fd4:	4283      	cmp	r3, r0
 8004fd6:	d004      	beq.n	8004fe2 <__swbuf_r+0x76>
 8004fd8:	89a3      	ldrh	r3, [r4, #12]
 8004fda:	07db      	lsls	r3, r3, #31
 8004fdc:	d5e1      	bpl.n	8004fa2 <__swbuf_r+0x36>
 8004fde:	2d0a      	cmp	r5, #10
 8004fe0:	d1df      	bne.n	8004fa2 <__swbuf_r+0x36>
 8004fe2:	0021      	movs	r1, r4
 8004fe4:	0030      	movs	r0, r6
 8004fe6:	f7ff ff85 	bl	8004ef4 <_fflush_r>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d0d9      	beq.n	8004fa2 <__swbuf_r+0x36>
 8004fee:	e7d6      	b.n	8004f9e <__swbuf_r+0x32>

08004ff0 <__swsetup_r>:
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80050a8 <__swsetup_r+0xb8>)
 8004ff2:	b570      	push	{r4, r5, r6, lr}
 8004ff4:	0005      	movs	r5, r0
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	000c      	movs	r4, r1
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d004      	beq.n	8005008 <__swsetup_r+0x18>
 8004ffe:	6a03      	ldr	r3, [r0, #32]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <__swsetup_r+0x18>
 8005004:	f7ff f9f6 	bl	80043f4 <__sinit>
 8005008:	230c      	movs	r3, #12
 800500a:	5ee2      	ldrsh	r2, [r4, r3]
 800500c:	0713      	lsls	r3, r2, #28
 800500e:	d423      	bmi.n	8005058 <__swsetup_r+0x68>
 8005010:	06d3      	lsls	r3, r2, #27
 8005012:	d407      	bmi.n	8005024 <__swsetup_r+0x34>
 8005014:	2309      	movs	r3, #9
 8005016:	602b      	str	r3, [r5, #0]
 8005018:	2340      	movs	r3, #64	@ 0x40
 800501a:	2001      	movs	r0, #1
 800501c:	4313      	orrs	r3, r2
 800501e:	81a3      	strh	r3, [r4, #12]
 8005020:	4240      	negs	r0, r0
 8005022:	e03a      	b.n	800509a <__swsetup_r+0xaa>
 8005024:	0752      	lsls	r2, r2, #29
 8005026:	d513      	bpl.n	8005050 <__swsetup_r+0x60>
 8005028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800502a:	2900      	cmp	r1, #0
 800502c:	d008      	beq.n	8005040 <__swsetup_r+0x50>
 800502e:	0023      	movs	r3, r4
 8005030:	3344      	adds	r3, #68	@ 0x44
 8005032:	4299      	cmp	r1, r3
 8005034:	d002      	beq.n	800503c <__swsetup_r+0x4c>
 8005036:	0028      	movs	r0, r5
 8005038:	f7ff fb0e 	bl	8004658 <_free_r>
 800503c:	2300      	movs	r3, #0
 800503e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005040:	2224      	movs	r2, #36	@ 0x24
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	4393      	bics	r3, r2
 8005046:	81a3      	strh	r3, [r4, #12]
 8005048:	2300      	movs	r3, #0
 800504a:	6063      	str	r3, [r4, #4]
 800504c:	6923      	ldr	r3, [r4, #16]
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	2308      	movs	r3, #8
 8005052:	89a2      	ldrh	r2, [r4, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	6923      	ldr	r3, [r4, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10b      	bne.n	8005076 <__swsetup_r+0x86>
 800505e:	21a0      	movs	r1, #160	@ 0xa0
 8005060:	2280      	movs	r2, #128	@ 0x80
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	0089      	lsls	r1, r1, #2
 8005066:	0092      	lsls	r2, r2, #2
 8005068:	400b      	ands	r3, r1
 800506a:	4293      	cmp	r3, r2
 800506c:	d003      	beq.n	8005076 <__swsetup_r+0x86>
 800506e:	0021      	movs	r1, r4
 8005070:	0028      	movs	r0, r5
 8005072:	f000 f869 	bl	8005148 <__smakebuf_r>
 8005076:	230c      	movs	r3, #12
 8005078:	5ee2      	ldrsh	r2, [r4, r3]
 800507a:	2101      	movs	r1, #1
 800507c:	0013      	movs	r3, r2
 800507e:	400b      	ands	r3, r1
 8005080:	420a      	tst	r2, r1
 8005082:	d00b      	beq.n	800509c <__swsetup_r+0xac>
 8005084:	2300      	movs	r3, #0
 8005086:	60a3      	str	r3, [r4, #8]
 8005088:	6963      	ldr	r3, [r4, #20]
 800508a:	425b      	negs	r3, r3
 800508c:	61a3      	str	r3, [r4, #24]
 800508e:	2000      	movs	r0, #0
 8005090:	6923      	ldr	r3, [r4, #16]
 8005092:	4283      	cmp	r3, r0
 8005094:	d101      	bne.n	800509a <__swsetup_r+0xaa>
 8005096:	0613      	lsls	r3, r2, #24
 8005098:	d4be      	bmi.n	8005018 <__swsetup_r+0x28>
 800509a:	bd70      	pop	{r4, r5, r6, pc}
 800509c:	0791      	lsls	r1, r2, #30
 800509e:	d400      	bmi.n	80050a2 <__swsetup_r+0xb2>
 80050a0:	6963      	ldr	r3, [r4, #20]
 80050a2:	60a3      	str	r3, [r4, #8]
 80050a4:	e7f3      	b.n	800508e <__swsetup_r+0x9e>
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	20000018 	.word	0x20000018

080050ac <_sbrk_r>:
 80050ac:	2300      	movs	r3, #0
 80050ae:	b570      	push	{r4, r5, r6, lr}
 80050b0:	4d06      	ldr	r5, [pc, #24]	@ (80050cc <_sbrk_r+0x20>)
 80050b2:	0004      	movs	r4, r0
 80050b4:	0008      	movs	r0, r1
 80050b6:	602b      	str	r3, [r5, #0]
 80050b8:	f7fb fdd4 	bl	8000c64 <_sbrk>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d103      	bne.n	80050c8 <_sbrk_r+0x1c>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d000      	beq.n	80050c8 <_sbrk_r+0x1c>
 80050c6:	6023      	str	r3, [r4, #0]
 80050c8:	bd70      	pop	{r4, r5, r6, pc}
 80050ca:	46c0      	nop			@ (mov r8, r8)
 80050cc:	20000500 	.word	0x20000500

080050d0 <memchr>:
 80050d0:	b2c9      	uxtb	r1, r1
 80050d2:	1882      	adds	r2, r0, r2
 80050d4:	4290      	cmp	r0, r2
 80050d6:	d101      	bne.n	80050dc <memchr+0xc>
 80050d8:	2000      	movs	r0, #0
 80050da:	4770      	bx	lr
 80050dc:	7803      	ldrb	r3, [r0, #0]
 80050de:	428b      	cmp	r3, r1
 80050e0:	d0fb      	beq.n	80050da <memchr+0xa>
 80050e2:	3001      	adds	r0, #1
 80050e4:	e7f6      	b.n	80050d4 <memchr+0x4>

080050e6 <abort>:
 80050e6:	2006      	movs	r0, #6
 80050e8:	b510      	push	{r4, lr}
 80050ea:	f000 f897 	bl	800521c <raise>
 80050ee:	2001      	movs	r0, #1
 80050f0:	f7fb fd62 	bl	8000bb8 <_exit>

080050f4 <__swhatbuf_r>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	000e      	movs	r6, r1
 80050f8:	001d      	movs	r5, r3
 80050fa:	230e      	movs	r3, #14
 80050fc:	5ec9      	ldrsh	r1, [r1, r3]
 80050fe:	0014      	movs	r4, r2
 8005100:	b096      	sub	sp, #88	@ 0x58
 8005102:	2900      	cmp	r1, #0
 8005104:	da0c      	bge.n	8005120 <__swhatbuf_r+0x2c>
 8005106:	89b2      	ldrh	r2, [r6, #12]
 8005108:	2380      	movs	r3, #128	@ 0x80
 800510a:	0011      	movs	r1, r2
 800510c:	4019      	ands	r1, r3
 800510e:	421a      	tst	r2, r3
 8005110:	d114      	bne.n	800513c <__swhatbuf_r+0x48>
 8005112:	2380      	movs	r3, #128	@ 0x80
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	2000      	movs	r0, #0
 8005118:	6029      	str	r1, [r5, #0]
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	b016      	add	sp, #88	@ 0x58
 800511e:	bd70      	pop	{r4, r5, r6, pc}
 8005120:	466a      	mov	r2, sp
 8005122:	f000 f885 	bl	8005230 <_fstat_r>
 8005126:	2800      	cmp	r0, #0
 8005128:	dbed      	blt.n	8005106 <__swhatbuf_r+0x12>
 800512a:	23f0      	movs	r3, #240	@ 0xf0
 800512c:	9901      	ldr	r1, [sp, #4]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	4019      	ands	r1, r3
 8005132:	4b04      	ldr	r3, [pc, #16]	@ (8005144 <__swhatbuf_r+0x50>)
 8005134:	18c9      	adds	r1, r1, r3
 8005136:	424b      	negs	r3, r1
 8005138:	4159      	adcs	r1, r3
 800513a:	e7ea      	b.n	8005112 <__swhatbuf_r+0x1e>
 800513c:	2100      	movs	r1, #0
 800513e:	2340      	movs	r3, #64	@ 0x40
 8005140:	e7e9      	b.n	8005116 <__swhatbuf_r+0x22>
 8005142:	46c0      	nop			@ (mov r8, r8)
 8005144:	ffffe000 	.word	0xffffe000

08005148 <__smakebuf_r>:
 8005148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800514a:	2602      	movs	r6, #2
 800514c:	898b      	ldrh	r3, [r1, #12]
 800514e:	0005      	movs	r5, r0
 8005150:	000c      	movs	r4, r1
 8005152:	b085      	sub	sp, #20
 8005154:	4233      	tst	r3, r6
 8005156:	d007      	beq.n	8005168 <__smakebuf_r+0x20>
 8005158:	0023      	movs	r3, r4
 800515a:	3347      	adds	r3, #71	@ 0x47
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	6123      	str	r3, [r4, #16]
 8005160:	2301      	movs	r3, #1
 8005162:	6163      	str	r3, [r4, #20]
 8005164:	b005      	add	sp, #20
 8005166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005168:	ab03      	add	r3, sp, #12
 800516a:	aa02      	add	r2, sp, #8
 800516c:	f7ff ffc2 	bl	80050f4 <__swhatbuf_r>
 8005170:	9f02      	ldr	r7, [sp, #8]
 8005172:	9001      	str	r0, [sp, #4]
 8005174:	0039      	movs	r1, r7
 8005176:	0028      	movs	r0, r5
 8005178:	f7ff fae4 	bl	8004744 <_malloc_r>
 800517c:	2800      	cmp	r0, #0
 800517e:	d108      	bne.n	8005192 <__smakebuf_r+0x4a>
 8005180:	220c      	movs	r2, #12
 8005182:	5ea3      	ldrsh	r3, [r4, r2]
 8005184:	059a      	lsls	r2, r3, #22
 8005186:	d4ed      	bmi.n	8005164 <__smakebuf_r+0x1c>
 8005188:	2203      	movs	r2, #3
 800518a:	4393      	bics	r3, r2
 800518c:	431e      	orrs	r6, r3
 800518e:	81a6      	strh	r6, [r4, #12]
 8005190:	e7e2      	b.n	8005158 <__smakebuf_r+0x10>
 8005192:	2380      	movs	r3, #128	@ 0x80
 8005194:	89a2      	ldrh	r2, [r4, #12]
 8005196:	6020      	str	r0, [r4, #0]
 8005198:	4313      	orrs	r3, r2
 800519a:	81a3      	strh	r3, [r4, #12]
 800519c:	9b03      	ldr	r3, [sp, #12]
 800519e:	6120      	str	r0, [r4, #16]
 80051a0:	6167      	str	r7, [r4, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00c      	beq.n	80051c0 <__smakebuf_r+0x78>
 80051a6:	0028      	movs	r0, r5
 80051a8:	230e      	movs	r3, #14
 80051aa:	5ee1      	ldrsh	r1, [r4, r3]
 80051ac:	f000 f852 	bl	8005254 <_isatty_r>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d005      	beq.n	80051c0 <__smakebuf_r+0x78>
 80051b4:	2303      	movs	r3, #3
 80051b6:	89a2      	ldrh	r2, [r4, #12]
 80051b8:	439a      	bics	r2, r3
 80051ba:	3b02      	subs	r3, #2
 80051bc:	4313      	orrs	r3, r2
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	89a3      	ldrh	r3, [r4, #12]
 80051c2:	9a01      	ldr	r2, [sp, #4]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	81a3      	strh	r3, [r4, #12]
 80051c8:	e7cc      	b.n	8005164 <__smakebuf_r+0x1c>

080051ca <_raise_r>:
 80051ca:	b570      	push	{r4, r5, r6, lr}
 80051cc:	0004      	movs	r4, r0
 80051ce:	000d      	movs	r5, r1
 80051d0:	291f      	cmp	r1, #31
 80051d2:	d904      	bls.n	80051de <_raise_r+0x14>
 80051d4:	2316      	movs	r3, #22
 80051d6:	6003      	str	r3, [r0, #0]
 80051d8:	2001      	movs	r0, #1
 80051da:	4240      	negs	r0, r0
 80051dc:	bd70      	pop	{r4, r5, r6, pc}
 80051de:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d004      	beq.n	80051ee <_raise_r+0x24>
 80051e4:	008a      	lsls	r2, r1, #2
 80051e6:	189b      	adds	r3, r3, r2
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	2a00      	cmp	r2, #0
 80051ec:	d108      	bne.n	8005200 <_raise_r+0x36>
 80051ee:	0020      	movs	r0, r4
 80051f0:	f000 f854 	bl	800529c <_getpid_r>
 80051f4:	002a      	movs	r2, r5
 80051f6:	0001      	movs	r1, r0
 80051f8:	0020      	movs	r0, r4
 80051fa:	f000 f83d 	bl	8005278 <_kill_r>
 80051fe:	e7ed      	b.n	80051dc <_raise_r+0x12>
 8005200:	2a01      	cmp	r2, #1
 8005202:	d009      	beq.n	8005218 <_raise_r+0x4e>
 8005204:	1c51      	adds	r1, r2, #1
 8005206:	d103      	bne.n	8005210 <_raise_r+0x46>
 8005208:	2316      	movs	r3, #22
 800520a:	6003      	str	r3, [r0, #0]
 800520c:	2001      	movs	r0, #1
 800520e:	e7e5      	b.n	80051dc <_raise_r+0x12>
 8005210:	2100      	movs	r1, #0
 8005212:	0028      	movs	r0, r5
 8005214:	6019      	str	r1, [r3, #0]
 8005216:	4790      	blx	r2
 8005218:	2000      	movs	r0, #0
 800521a:	e7df      	b.n	80051dc <_raise_r+0x12>

0800521c <raise>:
 800521c:	b510      	push	{r4, lr}
 800521e:	4b03      	ldr	r3, [pc, #12]	@ (800522c <raise+0x10>)
 8005220:	0001      	movs	r1, r0
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	f7ff ffd1 	bl	80051ca <_raise_r>
 8005228:	bd10      	pop	{r4, pc}
 800522a:	46c0      	nop			@ (mov r8, r8)
 800522c:	20000018 	.word	0x20000018

08005230 <_fstat_r>:
 8005230:	2300      	movs	r3, #0
 8005232:	b570      	push	{r4, r5, r6, lr}
 8005234:	4d06      	ldr	r5, [pc, #24]	@ (8005250 <_fstat_r+0x20>)
 8005236:	0004      	movs	r4, r0
 8005238:	0008      	movs	r0, r1
 800523a:	0011      	movs	r1, r2
 800523c:	602b      	str	r3, [r5, #0]
 800523e:	f7fb fcef 	bl	8000c20 <_fstat>
 8005242:	1c43      	adds	r3, r0, #1
 8005244:	d103      	bne.n	800524e <_fstat_r+0x1e>
 8005246:	682b      	ldr	r3, [r5, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d000      	beq.n	800524e <_fstat_r+0x1e>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	bd70      	pop	{r4, r5, r6, pc}
 8005250:	20000500 	.word	0x20000500

08005254 <_isatty_r>:
 8005254:	2300      	movs	r3, #0
 8005256:	b570      	push	{r4, r5, r6, lr}
 8005258:	4d06      	ldr	r5, [pc, #24]	@ (8005274 <_isatty_r+0x20>)
 800525a:	0004      	movs	r4, r0
 800525c:	0008      	movs	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fb fcec 	bl	8000c3c <_isatty>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d103      	bne.n	8005270 <_isatty_r+0x1c>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d000      	beq.n	8005270 <_isatty_r+0x1c>
 800526e:	6023      	str	r3, [r4, #0]
 8005270:	bd70      	pop	{r4, r5, r6, pc}
 8005272:	46c0      	nop			@ (mov r8, r8)
 8005274:	20000500 	.word	0x20000500

08005278 <_kill_r>:
 8005278:	2300      	movs	r3, #0
 800527a:	b570      	push	{r4, r5, r6, lr}
 800527c:	4d06      	ldr	r5, [pc, #24]	@ (8005298 <_kill_r+0x20>)
 800527e:	0004      	movs	r4, r0
 8005280:	0008      	movs	r0, r1
 8005282:	0011      	movs	r1, r2
 8005284:	602b      	str	r3, [r5, #0]
 8005286:	f7fb fc87 	bl	8000b98 <_kill>
 800528a:	1c43      	adds	r3, r0, #1
 800528c:	d103      	bne.n	8005296 <_kill_r+0x1e>
 800528e:	682b      	ldr	r3, [r5, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d000      	beq.n	8005296 <_kill_r+0x1e>
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	bd70      	pop	{r4, r5, r6, pc}
 8005298:	20000500 	.word	0x20000500

0800529c <_getpid_r>:
 800529c:	b510      	push	{r4, lr}
 800529e:	f7fb fc75 	bl	8000b8c <_getpid>
 80052a2:	bd10      	pop	{r4, pc}

080052a4 <_init>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	46c0      	nop			@ (mov r8, r8)
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr

080052b0 <_fini>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	46c0      	nop			@ (mov r8, r8)
 80052b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b6:	bc08      	pop	{r3}
 80052b8:	469e      	mov	lr, r3
 80052ba:	4770      	bx	lr
