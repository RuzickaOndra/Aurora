
IR_decoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f34  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003ff4  08003ff4  00004ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004084  08004084  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004084  08004084  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004084  08004084  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004084  08004084  00005084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004088  08004088  00005088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800408c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000068  080040f4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080040f4  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c790  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ced  00000000  00000000  00012820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00014510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096a  00000000  00000000  00015100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011098  00000000  00000000  00015a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e389  00000000  00000000  00026b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066d57  00000000  00000000  00034e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009bbe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003214  00000000  00000000  0009bc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  0009ee3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003fdc 	.word	0x08003fdc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003fdc 	.word	0x08003fdc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fbda 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f824 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f92e 	bl	80004a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000244:	f000 f8fc 	bl	8000440 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000248:	f000 f87e 	bl	8000348 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // Start TIM3 Channel 1 in Input Capture mode
 800024c:	4b0b      	ldr	r3, [pc, #44]	@ (800027c <main+0x48>)
 800024e:	2100      	movs	r1, #0
 8000250:	0018      	movs	r0, r3
 8000252:	f001 fc71 	bl	8001b38 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (event == 1) {
 8000256:	4b0a      	ldr	r3, [pc, #40]	@ (8000280 <main+0x4c>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b01      	cmp	r3, #1
 800025e:	d102      	bne.n	8000266 <main+0x32>
			//printf("Data: %X, bitIndex: %d\r\n",dataBuffer, bitIndex);
			event = 0;
 8000260:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <main+0x4c>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
		}
		if (dataReady == 1) {
 8000266:	4b07      	ldr	r3, [pc, #28]	@ (8000284 <main+0x50>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	b2db      	uxtb	r3, r3
 800026c:	2b01      	cmp	r3, #1
 800026e:	d1f2      	bne.n	8000256 <main+0x22>
			decodeIR();
 8000270:	f000 f9e8 	bl	8000644 <decodeIR>
			dataReady = 0;
 8000274:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <main+0x50>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
		if (event == 1) {
 800027a:	e7ec      	b.n	8000256 <main+0x22>
 800027c:	20000084 	.word	0x20000084
 8000280:	20000161 	.word	0x20000161
 8000284:	20000160 	.word	0x20000160

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b095      	sub	sp, #84	@ 0x54
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	2420      	movs	r4, #32
 8000290:	193b      	adds	r3, r7, r4
 8000292:	0018      	movs	r0, r3
 8000294:	2330      	movs	r3, #48	@ 0x30
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f003 f85d 	bl	8003358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029e:	2310      	movs	r3, #16
 80002a0:	18fb      	adds	r3, r7, r3
 80002a2:	0018      	movs	r0, r3
 80002a4:	2310      	movs	r3, #16
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f003 f855 	bl	8003358 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ae:	003b      	movs	r3, r7
 80002b0:	0018      	movs	r0, r3
 80002b2:	2310      	movs	r3, #16
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f003 f84e 	bl	8003358 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002bc:	0021      	movs	r1, r4
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2201      	movs	r2, #1
 80002c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2201      	movs	r2, #1
 80002c8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2202      	movs	r2, #2
 80002ce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2280      	movs	r2, #128	@ 0x80
 80002d4:	0252      	lsls	r2, r2, #9
 80002d6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2280      	movs	r2, #128	@ 0x80
 80002dc:	0352      	lsls	r2, r2, #13
 80002de:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2200      	movs	r2, #0
 80002e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	0018      	movs	r0, r3
 80002ea:	f000 fe51 	bl	8000f90 <HAL_RCC_OscConfig>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002f2:	f000 f9dd 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f6:	2110      	movs	r1, #16
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2207      	movs	r2, #7
 80002fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2202      	movs	r2, #2
 8000302:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2101      	movs	r1, #1
 8000314:	0018      	movs	r0, r3
 8000316:	f001 f955 	bl	80015c4 <HAL_RCC_ClockConfig>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800031e:	f000 f9c7 	bl	80006b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000322:	003b      	movs	r3, r7
 8000324:	2201      	movs	r2, #1
 8000326:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000328:	003b      	movs	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032e:	003b      	movs	r3, r7
 8000330:	0018      	movs	r0, r3
 8000332:	f001 fa8b 	bl	800184c <HAL_RCCEx_PeriphCLKConfig>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800033a:	f000 f9b9 	bl	80006b0 <Error_Handler>
  }
}
 800033e:	46c0      	nop			@ (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b015      	add	sp, #84	@ 0x54
 8000344:	bd90      	pop	{r4, r7, pc}
	...

08000348 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b08a      	sub	sp, #40	@ 0x28
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034e:	2318      	movs	r3, #24
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	0018      	movs	r0, r3
 8000354:	2310      	movs	r3, #16
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f002 fffd 	bl	8003358 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800035e:	2310      	movs	r3, #16
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	0018      	movs	r0, r3
 8000364:	2308      	movs	r3, #8
 8000366:	001a      	movs	r2, r3
 8000368:	2100      	movs	r1, #0
 800036a:	f002 fff5 	bl	8003358 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800036e:	003b      	movs	r3, r7
 8000370:	0018      	movs	r0, r3
 8000372:	2310      	movs	r3, #16
 8000374:	001a      	movs	r2, r3
 8000376:	2100      	movs	r1, #0
 8000378:	f002 ffee 	bl	8003358 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800037c:	4b2d      	ldr	r3, [pc, #180]	@ (8000434 <MX_TIM3_Init+0xec>)
 800037e:	4a2e      	ldr	r2, [pc, #184]	@ (8000438 <MX_TIM3_Init+0xf0>)
 8000380:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8000382:	4b2c      	ldr	r3, [pc, #176]	@ (8000434 <MX_TIM3_Init+0xec>)
 8000384:	2230      	movs	r2, #48	@ 0x30
 8000386:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000388:	4b2a      	ldr	r3, [pc, #168]	@ (8000434 <MX_TIM3_Init+0xec>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800038e:	4b29      	ldr	r3, [pc, #164]	@ (8000434 <MX_TIM3_Init+0xec>)
 8000390:	4a2a      	ldr	r2, [pc, #168]	@ (800043c <MX_TIM3_Init+0xf4>)
 8000392:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000394:	4b27      	ldr	r3, [pc, #156]	@ (8000434 <MX_TIM3_Init+0xec>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800039a:	4b26      	ldr	r3, [pc, #152]	@ (8000434 <MX_TIM3_Init+0xec>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003a0:	4b24      	ldr	r3, [pc, #144]	@ (8000434 <MX_TIM3_Init+0xec>)
 80003a2:	0018      	movs	r0, r3
 80003a4:	f001 fb20 	bl	80019e8 <HAL_TIM_Base_Init>
 80003a8:	1e03      	subs	r3, r0, #0
 80003aa:	d001      	beq.n	80003b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80003ac:	f000 f980 	bl	80006b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003b0:	2118      	movs	r1, #24
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2280      	movs	r2, #128	@ 0x80
 80003b6:	0152      	lsls	r2, r2, #5
 80003b8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003ba:	187a      	adds	r2, r7, r1
 80003bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000434 <MX_TIM3_Init+0xec>)
 80003be:	0011      	movs	r1, r2
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 fe53 	bl	800206c <HAL_TIM_ConfigClockSource>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80003ca:	f000 f971 	bl	80006b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80003ce:	4b19      	ldr	r3, [pc, #100]	@ (8000434 <MX_TIM3_Init+0xec>)
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 fb59 	bl	8001a88 <HAL_TIM_IC_Init>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80003da:	f000 f969 	bl	80006b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003de:	2110      	movs	r1, #16
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2200      	movs	r2, #0
 80003ea:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003ec:	187a      	adds	r2, r7, r1
 80003ee:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <MX_TIM3_Init+0xec>)
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f002 f9c4 	bl	8002780 <HAL_TIMEx_MasterConfigSynchronization>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80003fc:	f000 f958 	bl	80006b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000400:	003b      	movs	r3, r7
 8000402:	2202      	movs	r2, #2
 8000404:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000406:	003b      	movs	r3, r7
 8000408:	2201      	movs	r2, #1
 800040a:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800040c:	003b      	movs	r3, r7
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000412:	003b      	movs	r3, r7
 8000414:	2200      	movs	r2, #0
 8000416:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000418:	0039      	movs	r1, r7
 800041a:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <MX_TIM3_Init+0xec>)
 800041c:	2200      	movs	r2, #0
 800041e:	0018      	movs	r0, r3
 8000420:	f001 fd80 	bl	8001f24 <HAL_TIM_IC_ConfigChannel>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000428:	f000 f942 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800042c:	46c0      	nop			@ (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b00a      	add	sp, #40	@ 0x28
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000084 	.word	0x20000084
 8000438:	40000400 	.word	0x40000400
 800043c:	0000ffff 	.word	0x0000ffff

08000440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000444:	4b14      	ldr	r3, [pc, #80]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000446:	4a15      	ldr	r2, [pc, #84]	@ (800049c <MX_USART1_UART_Init+0x5c>)
 8000448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800044a:	4b13      	ldr	r3, [pc, #76]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 800044c:	22e1      	movs	r2, #225	@ 0xe1
 800044e:	0252      	lsls	r2, r2, #9
 8000450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000458:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800045e:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000464:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000466:	220c      	movs	r2, #12
 8000468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000470:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000476:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000482:	4b05      	ldr	r3, [pc, #20]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000484:	0018      	movs	r0, r3
 8000486:	f002 f9e3 	bl	8002850 <HAL_UART_Init>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800048e:	f000 f90f 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	200000cc 	.word	0x200000cc
 800049c:	40013800 	.word	0x40013800

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b089      	sub	sp, #36	@ 0x24
 80004a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	240c      	movs	r4, #12
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	0018      	movs	r0, r3
 80004ac:	2314      	movs	r3, #20
 80004ae:	001a      	movs	r2, r3
 80004b0:	2100      	movs	r1, #0
 80004b2:	f002 ff51 	bl	8003358 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b6:	4b24      	ldr	r3, [pc, #144]	@ (8000548 <MX_GPIO_Init+0xa8>)
 80004b8:	695a      	ldr	r2, [r3, #20]
 80004ba:	4b23      	ldr	r3, [pc, #140]	@ (8000548 <MX_GPIO_Init+0xa8>)
 80004bc:	2180      	movs	r1, #128	@ 0x80
 80004be:	0309      	lsls	r1, r1, #12
 80004c0:	430a      	orrs	r2, r1
 80004c2:	615a      	str	r2, [r3, #20]
 80004c4:	4b20      	ldr	r3, [pc, #128]	@ (8000548 <MX_GPIO_Init+0xa8>)
 80004c6:	695a      	ldr	r2, [r3, #20]
 80004c8:	2380      	movs	r3, #128	@ 0x80
 80004ca:	031b      	lsls	r3, r3, #12
 80004cc:	4013      	ands	r3, r2
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000548 <MX_GPIO_Init+0xa8>)
 80004d4:	695a      	ldr	r2, [r3, #20]
 80004d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <MX_GPIO_Init+0xa8>)
 80004d8:	2180      	movs	r1, #128	@ 0x80
 80004da:	03c9      	lsls	r1, r1, #15
 80004dc:	430a      	orrs	r2, r1
 80004de:	615a      	str	r2, [r3, #20]
 80004e0:	4b19      	ldr	r3, [pc, #100]	@ (8000548 <MX_GPIO_Init+0xa8>)
 80004e2:	695a      	ldr	r2, [r3, #20]
 80004e4:	2380      	movs	r3, #128	@ 0x80
 80004e6:	03db      	lsls	r3, r3, #15
 80004e8:	4013      	ands	r3, r2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b16      	ldr	r3, [pc, #88]	@ (8000548 <MX_GPIO_Init+0xa8>)
 80004f0:	695a      	ldr	r2, [r3, #20]
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <MX_GPIO_Init+0xa8>)
 80004f4:	2180      	movs	r1, #128	@ 0x80
 80004f6:	0289      	lsls	r1, r1, #10
 80004f8:	430a      	orrs	r2, r1
 80004fa:	615a      	str	r2, [r3, #20]
 80004fc:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <MX_GPIO_Init+0xa8>)
 80004fe:	695a      	ldr	r2, [r3, #20]
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	029b      	lsls	r3, r3, #10
 8000504:	4013      	ands	r3, r2
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800050a:	2380      	movs	r3, #128	@ 0x80
 800050c:	019b      	lsls	r3, r3, #6
 800050e:	480f      	ldr	r0, [pc, #60]	@ (800054c <MX_GPIO_Init+0xac>)
 8000510:	2200      	movs	r2, #0
 8000512:	0019      	movs	r1, r3
 8000514:	f000 fd1e 	bl	8000f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	0192      	lsls	r2, r2, #6
 800051e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2201      	movs	r2, #1
 8000524:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000532:	193b      	adds	r3, r7, r4
 8000534:	4a05      	ldr	r2, [pc, #20]	@ (800054c <MX_GPIO_Init+0xac>)
 8000536:	0019      	movs	r1, r3
 8000538:	0010      	movs	r0, r2
 800053a:	f000 fb9b 	bl	8000c74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b009      	add	sp, #36	@ 0x24
 8000544:	bd90      	pop	{r4, r7, pc}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	40021000 	.word	0x40021000
 800054c:	48000800 	.word	0x48000800

08000550 <_write>:

/* USER CODE BEGIN 4 */

#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	b29a      	uxth	r2, r3
 8000560:	2301      	movs	r3, #1
 8000562:	425b      	negs	r3, r3
 8000564:	68b9      	ldr	r1, [r7, #8]
 8000566:	4804      	ldr	r0, [pc, #16]	@ (8000578 <_write+0x28>)
 8000568:	f002 f9c6 	bl	80028f8 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	return len;
 800056c:	687b      	ldr	r3, [r7, #4]
}
 800056e:	0018      	movs	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	b004      	add	sp, #16
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	200000cc 	.word	0x200000cc

0800057c <HAL_TIM_IC_CaptureCallback>:
	//HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	return ch;
}

// TIM3 Capture Callback for detecting edges
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a27      	ldr	r2, [pc, #156]	@ (8000628 <HAL_TIM_IC_CaptureCallback+0xac>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d148      	bne.n	8000620 <HAL_TIM_IC_CaptureCallback+0xa4>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	7f1b      	ldrb	r3, [r3, #28]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d144      	bne.n	8000620 <HAL_TIM_IC_CaptureCallback+0xa4>
		uint32_t capture = HAL_TIM_ReadCapturedValue(htim,
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2100      	movs	r1, #0
 800059a:	0018      	movs	r0, r3
 800059c:	f001 fe3a 	bl	8002214 <HAL_TIM_ReadCapturedValue>
 80005a0:	0003      	movs	r3, r0
 80005a2:	60fb      	str	r3, [r7, #12]
		TIM_CHANNEL_1);
		uint32_t pulseWidth = capture - lastCapture;
 80005a4:	4b21      	ldr	r3, [pc, #132]	@ (800062c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	60bb      	str	r3, [r7, #8]
		lastCapture = capture;
 80005ae:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	601a      	str	r2, [r3, #0]
		if (pulseWidth > 9000) { // Large gap (e.g., >10ms) indicates a new data frame
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000630 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d906      	bls.n	80005ca <HAL_TIM_IC_CaptureCallback+0x4e>
			bitIndex = 0;
 80005bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
			dataBuffer = 0;
 80005c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
				bitIndex = 0;
			}

		}
	}
}
 80005c8:	e02a      	b.n	8000620 <HAL_TIM_IC_CaptureCallback+0xa4>
		} else if (pulseWidth > 1000 && pulseWidth < 3000) { // Data pulses
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	23fa      	movs	r3, #250	@ 0xfa
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d925      	bls.n	8000620 <HAL_TIM_IC_CaptureCallback+0xa4>
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	4a19      	ldr	r2, [pc, #100]	@ (800063c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d821      	bhi.n	8000620 <HAL_TIM_IC_CaptureCallback+0xa4>
			dataBuffer <<= 1;
 80005dc:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	005a      	lsls	r2, r3, #1
 80005e2:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80005e4:	601a      	str	r2, [r3, #0]
			if (pulseWidth > 2000) {
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	23fa      	movs	r3, #250	@ 0xfa
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d905      	bls.n	80005fc <HAL_TIM_IC_CaptureCallback+0x80>
				dataBuffer |= 1; // Long pulse represents a 1
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2201      	movs	r2, #1
 80005f6:	431a      	orrs	r2, r3
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80005fa:	601a      	str	r2, [r3, #0]
			bitIndex++;
 80005fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	3301      	adds	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000608:	701a      	strb	r2, [r3, #0]
			if (bitIndex >= 32) {
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b1f      	cmp	r3, #31
 8000612:	d905      	bls.n	8000620 <HAL_TIM_IC_CaptureCallback+0xa4>
				dataReady = 1;
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
				bitIndex = 0;
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
}
 8000620:	46c0      	nop			@ (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b004      	add	sp, #16
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40000400 	.word	0x40000400
 800062c:	20000154 	.word	0x20000154
 8000630:	00002328 	.word	0x00002328
 8000634:	20000158 	.word	0x20000158
 8000638:	2000015c 	.word	0x2000015c
 800063c:	00000bb7 	.word	0x00000bb7
 8000640:	20000160 	.word	0x20000160

08000644 <decodeIR>:

void decodeIR() {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	uint8_t address = (dataBuffer >> 24) & 0xFF;
 800064a:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <decodeIR+0x64>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	0e1a      	lsrs	r2, r3, #24
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	701a      	strb	r2, [r3, #0]
	uint8_t invertedAddress = (dataBuffer >> 16) & 0xFF;
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <decodeIR+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	0c1a      	lsrs	r2, r3, #16
 800065a:	1dbb      	adds	r3, r7, #6
 800065c:	701a      	strb	r2, [r3, #0]
	uint8_t command = (dataBuffer >> 8) & 0xFF;
 800065e:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <decodeIR+0x64>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	0a1a      	lsrs	r2, r3, #8
 8000664:	1d7b      	adds	r3, r7, #5
 8000666:	701a      	strb	r2, [r3, #0]
	uint8_t invertedCommand = dataBuffer & 0xFF;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <decodeIR+0x64>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	701a      	strb	r2, [r3, #0]

	// Check if address and command are valid (address == ~invertedAddress, etc.)
	if ((address == (uint8_t) ~invertedAddress)
 8000670:	1dbb      	adds	r3, r7, #6
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	43db      	mvns	r3, r3
 8000676:	b2db      	uxtb	r3, r3
 8000678:	1dfa      	adds	r2, r7, #7
 800067a:	7812      	ldrb	r2, [r2, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	d10f      	bne.n	80006a0 <decodeIR+0x5c>
			&& (command == (uint8_t) ~invertedCommand)) {
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	43db      	mvns	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	1d7a      	adds	r2, r7, #5
 800068a:	7812      	ldrb	r2, [r2, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	d107      	bne.n	80006a0 <decodeIR+0x5c>
		printf("Address: 0x%02X, Command: 0x%02X\r\n", address, command);
 8000690:	1dfb      	adds	r3, r7, #7
 8000692:	7819      	ldrb	r1, [r3, #0]
 8000694:	1d7b      	adds	r3, r7, #5
 8000696:	781a      	ldrb	r2, [r3, #0]
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <decodeIR+0x68>)
 800069a:	0018      	movs	r0, r3
 800069c:	f002 fe00 	bl	80032a0 <iprintf>
	}
}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b002      	add	sp, #8
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000015c 	.word	0x2000015c
 80006ac:	08003ff4 	.word	0x08003ff4

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006b8:	46c0      	nop			@ (mov r8, r8)
 80006ba:	e7fd      	b.n	80006b8 <Error_Handler+0x8>

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <HAL_MspInit+0x44>)
 80006c4:	699a      	ldr	r2, [r3, #24]
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <HAL_MspInit+0x44>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	430a      	orrs	r2, r1
 80006cc:	619a      	str	r2, [r3, #24]
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <HAL_MspInit+0x44>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	2201      	movs	r2, #1
 80006d4:	4013      	ands	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <HAL_MspInit+0x44>)
 80006dc:	69da      	ldr	r2, [r3, #28]
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <HAL_MspInit+0x44>)
 80006e0:	2180      	movs	r1, #128	@ 0x80
 80006e2:	0549      	lsls	r1, r1, #21
 80006e4:	430a      	orrs	r2, r1
 80006e6:	61da      	str	r2, [r3, #28]
 80006e8:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <HAL_MspInit+0x44>)
 80006ea:	69da      	ldr	r2, [r3, #28]
 80006ec:	2380      	movs	r3, #128	@ 0x80
 80006ee:	055b      	lsls	r3, r3, #21
 80006f0:	4013      	ands	r3, r2
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b002      	add	sp, #8
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	2414      	movs	r4, #20
 800070e:	193b      	adds	r3, r7, r4
 8000710:	0018      	movs	r0, r3
 8000712:	2314      	movs	r3, #20
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f002 fe1e 	bl	8003358 <memset>
  if(htim_base->Instance==TIM3)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a1f      	ldr	r2, [pc, #124]	@ (80007a0 <HAL_TIM_Base_MspInit+0x9c>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d138      	bne.n	8000798 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000726:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa0>)
 8000728:	69da      	ldr	r2, [r3, #28]
 800072a:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa0>)
 800072c:	2102      	movs	r1, #2
 800072e:	430a      	orrs	r2, r1
 8000730:	61da      	str	r2, [r3, #28]
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa0>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	2202      	movs	r2, #2
 8000738:	4013      	ands	r3, r2
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa0>)
 8000740:	695a      	ldr	r2, [r3, #20]
 8000742:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa0>)
 8000744:	2180      	movs	r1, #128	@ 0x80
 8000746:	0289      	lsls	r1, r1, #10
 8000748:	430a      	orrs	r2, r1
 800074a:	615a      	str	r2, [r3, #20]
 800074c:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <HAL_TIM_Base_MspInit+0xa0>)
 800074e:	695a      	ldr	r2, [r3, #20]
 8000750:	2380      	movs	r3, #128	@ 0x80
 8000752:	029b      	lsls	r3, r3, #10
 8000754:	4013      	ands	r3, r2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800075a:	0021      	movs	r1, r4
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2240      	movs	r2, #64	@ 0x40
 8000760:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2202      	movs	r2, #2
 8000766:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2201      	movs	r2, #1
 8000778:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	187a      	adds	r2, r7, r1
 800077c:	2390      	movs	r3, #144	@ 0x90
 800077e:	05db      	lsls	r3, r3, #23
 8000780:	0011      	movs	r1, r2
 8000782:	0018      	movs	r0, r3
 8000784:	f000 fa76 	bl	8000c74 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2100      	movs	r1, #0
 800078c:	2010      	movs	r0, #16
 800078e:	f000 fa3f 	bl	8000c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000792:	2010      	movs	r0, #16
 8000794:	f000 fa51 	bl	8000c3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b00b      	add	sp, #44	@ 0x2c
 800079e:	bd90      	pop	{r4, r7, pc}
 80007a0:	40000400 	.word	0x40000400
 80007a4:	40021000 	.word	0x40021000

080007a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b08b      	sub	sp, #44	@ 0x2c
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	2414      	movs	r4, #20
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	0018      	movs	r0, r3
 80007b6:	2314      	movs	r3, #20
 80007b8:	001a      	movs	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	f002 fdcc 	bl	8003358 <memset>
  if(huart->Instance==USART1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a1d      	ldr	r2, [pc, #116]	@ (800083c <HAL_UART_MspInit+0x94>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d133      	bne.n	8000832 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000840 <HAL_UART_MspInit+0x98>)
 80007cc:	699a      	ldr	r2, [r3, #24]
 80007ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <HAL_UART_MspInit+0x98>)
 80007d0:	2180      	movs	r1, #128	@ 0x80
 80007d2:	01c9      	lsls	r1, r1, #7
 80007d4:	430a      	orrs	r2, r1
 80007d6:	619a      	str	r2, [r3, #24]
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <HAL_UART_MspInit+0x98>)
 80007da:	699a      	ldr	r2, [r3, #24]
 80007dc:	2380      	movs	r3, #128	@ 0x80
 80007de:	01db      	lsls	r3, r3, #7
 80007e0:	4013      	ands	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <HAL_UART_MspInit+0x98>)
 80007e8:	695a      	ldr	r2, [r3, #20]
 80007ea:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <HAL_UART_MspInit+0x98>)
 80007ec:	2180      	movs	r1, #128	@ 0x80
 80007ee:	0289      	lsls	r1, r1, #10
 80007f0:	430a      	orrs	r2, r1
 80007f2:	615a      	str	r2, [r3, #20]
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <HAL_UART_MspInit+0x98>)
 80007f6:	695a      	ldr	r2, [r3, #20]
 80007f8:	2380      	movs	r3, #128	@ 0x80
 80007fa:	029b      	lsls	r3, r3, #10
 80007fc:	4013      	ands	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	22c0      	movs	r2, #192	@ 0xc0
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	0021      	movs	r1, r4
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2202      	movs	r2, #2
 8000810:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2203      	movs	r2, #3
 800081c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2201      	movs	r2, #1
 8000822:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	187a      	adds	r2, r7, r1
 8000826:	2390      	movs	r3, #144	@ 0x90
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f000 fa21 	bl	8000c74 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b00b      	add	sp, #44	@ 0x2c
 8000838:	bd90      	pop	{r4, r7, pc}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	40013800 	.word	0x40013800
 8000840:	40021000 	.word	0x40021000

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	e7fd      	b.n	8000848 <NMI_Handler+0x4>

0800084c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	e7fd      	b.n	8000850 <HardFault_Handler+0x4>

08000854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 f908 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800087c:	4b03      	ldr	r3, [pc, #12]	@ (800088c <TIM3_IRQHandler+0x14>)
 800087e:	0018      	movs	r0, r3
 8000880:	f001 fa62 	bl	8001d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	20000084 	.word	0x20000084

08000890 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	e00a      	b.n	80008b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008a2:	e000      	b.n	80008a6 <_read+0x16>
 80008a4:	bf00      	nop
 80008a6:	0001      	movs	r1, r0
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	60ba      	str	r2, [r7, #8]
 80008ae:	b2ca      	uxtb	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3301      	adds	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	dbf0      	blt.n	80008a2 <_read+0x12>
  }

  return len;
 80008c0:	687b      	ldr	r3, [r7, #4]
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b006      	add	sp, #24
 80008c8:	bd80      	pop	{r7, pc}

080008ca <_close>:
  }
  return len;
}

int _close(int file)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	425b      	negs	r3, r3
}
 80008d6:	0018      	movs	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}

080008de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2280      	movs	r2, #128	@ 0x80
 80008ec:	0192      	lsls	r2, r2, #6
 80008ee:	605a      	str	r2, [r3, #4]
  return 0;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	0018      	movs	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b002      	add	sp, #8
 80008f8:	bd80      	pop	{r7, pc}

080008fa <_isatty>:

int _isatty(int file)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000902:	2301      	movs	r3, #1
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}

0800090c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	0018      	movs	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	b004      	add	sp, #16
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800092c:	4a14      	ldr	r2, [pc, #80]	@ (8000980 <_sbrk+0x5c>)
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <_sbrk+0x60>)
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d102      	bne.n	8000946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000940:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <_sbrk+0x64>)
 8000942:	4a12      	ldr	r2, [pc, #72]	@ (800098c <_sbrk+0x68>)
 8000944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	18d3      	adds	r3, r2, r3
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	429a      	cmp	r2, r3
 8000952:	d207      	bcs.n	8000964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000954:	f002 fd56 	bl	8003404 <__errno>
 8000958:	0003      	movs	r3, r0
 800095a:	220c      	movs	r2, #12
 800095c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800095e:	2301      	movs	r3, #1
 8000960:	425b      	negs	r3, r3
 8000962:	e009      	b.n	8000978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000964:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096a:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	18d2      	adds	r2, r2, r3
 8000972:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <_sbrk+0x64>)
 8000974:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	0018      	movs	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	b006      	add	sp, #24
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20002000 	.word	0x20002000
 8000984:	00000400 	.word	0x00000400
 8000988:	20000164 	.word	0x20000164
 800098c:	200002b8 	.word	0x200002b8

08000990 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800099c:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a0:	f7ff fff6 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a4:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a6:	490d      	ldr	r1, [pc, #52]	@ (80009dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a8:	4a0d      	ldr	r2, [pc, #52]	@ (80009e0 <LoopForever+0xe>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009bc:	4c0a      	ldr	r4, [pc, #40]	@ (80009e8 <LoopForever+0x16>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ca:	f002 fd21 	bl	8003410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ce:	f7ff fc31 	bl	8000234 <main>

080009d2 <LoopForever>:

LoopForever:
    b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>
  ldr   r0, =_estack
 80009d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009e0:	0800408c 	.word	0x0800408c
  ldr r2, =_sbss
 80009e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009e8:	200002b8 	.word	0x200002b8

080009ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_IRQHandler>
	...

080009f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <HAL_Init+0x24>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_Init+0x24>)
 80009fa:	2110      	movs	r1, #16
 80009fc:	430a      	orrs	r2, r1
 80009fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f809 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a06:	f7ff fe59 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <HAL_InitTick+0x5c>)
 8000a22:	681c      	ldr	r4, [r3, #0]
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <HAL_InitTick+0x60>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	0019      	movs	r1, r3
 8000a2a:	23fa      	movs	r3, #250	@ 0xfa
 8000a2c:	0098      	lsls	r0, r3, #2
 8000a2e:	f7ff fb75 	bl	800011c <__udivsi3>
 8000a32:	0003      	movs	r3, r0
 8000a34:	0019      	movs	r1, r3
 8000a36:	0020      	movs	r0, r4
 8000a38:	f7ff fb70 	bl	800011c <__udivsi3>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 f90b 	bl	8000c5a <HAL_SYSTICK_Config>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e00f      	b.n	8000a6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	d80b      	bhi.n	8000a6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	2301      	movs	r3, #1
 8000a56:	425b      	negs	r3, r3
 8000a58:	2200      	movs	r2, #0
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 f8d8 	bl	8000c10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_InitTick+0x64>)
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b003      	add	sp, #12
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <HAL_IncTick+0x1c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	001a      	movs	r2, r3
 8000a8a:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <HAL_IncTick+0x20>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	18d2      	adds	r2, r2, r3
 8000a90:	4b03      	ldr	r3, [pc, #12]	@ (8000aa0 <HAL_IncTick+0x20>)
 8000a92:	601a      	str	r2, [r3, #0]
}
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000168 	.word	0x20000168

08000aa4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b02      	ldr	r3, [pc, #8]	@ (8000ab4 <HAL_GetTick+0x10>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	0018      	movs	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	20000168 	.word	0x20000168

08000ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	0002      	movs	r2, r0
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aca:	d809      	bhi.n	8000ae0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	231f      	movs	r3, #31
 8000ad4:	401a      	ands	r2, r3
 8000ad6:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <__NVIC_EnableIRQ+0x30>)
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4091      	lsls	r1, r2
 8000adc:	000a      	movs	r2, r1
 8000ade:	601a      	str	r2, [r3, #0]
  }
}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	e000e100 	.word	0xe000e100

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	0002      	movs	r2, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b00:	d828      	bhi.n	8000b54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b02:	4a2f      	ldr	r2, [pc, #188]	@ (8000bc0 <__NVIC_SetPriority+0xd4>)
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	33c0      	adds	r3, #192	@ 0xc0
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	589b      	ldr	r3, [r3, r2]
 8000b12:	1dfa      	adds	r2, r7, #7
 8000b14:	7812      	ldrb	r2, [r2, #0]
 8000b16:	0011      	movs	r1, r2
 8000b18:	2203      	movs	r2, #3
 8000b1a:	400a      	ands	r2, r1
 8000b1c:	00d2      	lsls	r2, r2, #3
 8000b1e:	21ff      	movs	r1, #255	@ 0xff
 8000b20:	4091      	lsls	r1, r2
 8000b22:	000a      	movs	r2, r1
 8000b24:	43d2      	mvns	r2, r2
 8000b26:	401a      	ands	r2, r3
 8000b28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	019b      	lsls	r3, r3, #6
 8000b2e:	22ff      	movs	r2, #255	@ 0xff
 8000b30:	401a      	ands	r2, r3
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	0018      	movs	r0, r3
 8000b38:	2303      	movs	r3, #3
 8000b3a:	4003      	ands	r3, r0
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b40:	481f      	ldr	r0, [pc, #124]	@ (8000bc0 <__NVIC_SetPriority+0xd4>)
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b25b      	sxtb	r3, r3
 8000b48:	089b      	lsrs	r3, r3, #2
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	33c0      	adds	r3, #192	@ 0xc0
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b52:	e031      	b.n	8000bb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b54:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc4 <__NVIC_SetPriority+0xd8>)
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	0019      	movs	r1, r3
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	400b      	ands	r3, r1
 8000b60:	3b08      	subs	r3, #8
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	3306      	adds	r3, #6
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	18d3      	adds	r3, r2, r3
 8000b6a:	3304      	adds	r3, #4
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	1dfa      	adds	r2, r7, #7
 8000b70:	7812      	ldrb	r2, [r2, #0]
 8000b72:	0011      	movs	r1, r2
 8000b74:	2203      	movs	r2, #3
 8000b76:	400a      	ands	r2, r1
 8000b78:	00d2      	lsls	r2, r2, #3
 8000b7a:	21ff      	movs	r1, #255	@ 0xff
 8000b7c:	4091      	lsls	r1, r2
 8000b7e:	000a      	movs	r2, r1
 8000b80:	43d2      	mvns	r2, r2
 8000b82:	401a      	ands	r2, r3
 8000b84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	019b      	lsls	r3, r3, #6
 8000b8a:	22ff      	movs	r2, #255	@ 0xff
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	0018      	movs	r0, r3
 8000b94:	2303      	movs	r3, #3
 8000b96:	4003      	ands	r3, r0
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9c:	4809      	ldr	r0, [pc, #36]	@ (8000bc4 <__NVIC_SetPriority+0xd8>)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	001c      	movs	r4, r3
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	4023      	ands	r3, r4
 8000ba8:	3b08      	subs	r3, #8
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	430a      	orrs	r2, r1
 8000bae:	3306      	adds	r3, #6
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	18c3      	adds	r3, r0, r3
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	601a      	str	r2, [r3, #0]
}
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b003      	add	sp, #12
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	1e5a      	subs	r2, r3, #1
 8000bd4:	2380      	movs	r3, #128	@ 0x80
 8000bd6:	045b      	lsls	r3, r3, #17
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d301      	bcc.n	8000be0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e010      	b.n	8000c02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <SysTick_Config+0x44>)
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	3a01      	subs	r2, #1
 8000be6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be8:	2301      	movs	r3, #1
 8000bea:	425b      	negs	r3, r3
 8000bec:	2103      	movs	r1, #3
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff ff7c 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <SysTick_Config+0x44>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <SysTick_Config+0x44>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	1c02      	adds	r2, r0, #0
 8000c20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff ff5d 	bl	8000aec <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b004      	add	sp, #16
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	0002      	movs	r2, r0
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff ff33 	bl	8000ab8 <__NVIC_EnableIRQ>
}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b002      	add	sp, #8
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0018      	movs	r0, r3
 8000c66:	f7ff ffaf 	bl	8000bc8 <SysTick_Config>
 8000c6a:	0003      	movs	r3, r0
}
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c82:	e14f      	b.n	8000f24 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2101      	movs	r1, #1
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	000a      	movs	r2, r1
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d100      	bne.n	8000c9c <HAL_GPIO_Init+0x28>
 8000c9a:	e140      	b.n	8000f1e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d005      	beq.n	8000cb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2203      	movs	r2, #3
 8000cae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d130      	bne.n	8000d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	0013      	movs	r3, r2
 8000cc4:	43da      	mvns	r2, r3
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	0013      	movs	r3, r2
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cea:	2201      	movs	r2, #1
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	091b      	lsrs	r3, r3, #4
 8000d00:	2201      	movs	r2, #1
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d017      	beq.n	8000d52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	43da      	mvns	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2203      	movs	r2, #3
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d123      	bne.n	8000da6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	0092      	lsls	r2, r2, #2
 8000d68:	58d3      	ldr	r3, [r2, r3]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	2207      	movs	r2, #7
 8000d70:	4013      	ands	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	220f      	movs	r2, #15
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	691a      	ldr	r2, [r3, #16]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	2107      	movs	r1, #7
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	08da      	lsrs	r2, r3, #3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	0092      	lsls	r2, r2, #2
 8000da2:	6939      	ldr	r1, [r7, #16]
 8000da4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	43da      	mvns	r2, r3
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	23c0      	movs	r3, #192	@ 0xc0
 8000de0:	029b      	lsls	r3, r3, #10
 8000de2:	4013      	ands	r3, r2
 8000de4:	d100      	bne.n	8000de8 <HAL_GPIO_Init+0x174>
 8000de6:	e09a      	b.n	8000f1e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de8:	4b54      	ldr	r3, [pc, #336]	@ (8000f3c <HAL_GPIO_Init+0x2c8>)
 8000dea:	699a      	ldr	r2, [r3, #24]
 8000dec:	4b53      	ldr	r3, [pc, #332]	@ (8000f3c <HAL_GPIO_Init+0x2c8>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	430a      	orrs	r2, r1
 8000df2:	619a      	str	r2, [r3, #24]
 8000df4:	4b51      	ldr	r3, [pc, #324]	@ (8000f3c <HAL_GPIO_Init+0x2c8>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e00:	4a4f      	ldr	r2, [pc, #316]	@ (8000f40 <HAL_GPIO_Init+0x2cc>)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	589b      	ldr	r3, [r3, r2]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2203      	movs	r2, #3
 8000e12:	4013      	ands	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	0013      	movs	r3, r2
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	2390      	movs	r3, #144	@ 0x90
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x1e2>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a44      	ldr	r2, [pc, #272]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x1de>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a43      	ldr	r2, [pc, #268]	@ (8000f48 <HAL_GPIO_Init+0x2d4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x1da>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a42      	ldr	r2, [pc, #264]	@ (8000f4c <HAL_GPIO_Init+0x2d8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x1d6>
 8000e46:	2303      	movs	r3, #3
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x1e4>
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	e004      	b.n	8000e58 <HAL_GPIO_Init+0x1e4>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_Init+0x1e4>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <HAL_GPIO_Init+0x1e4>
 8000e56:	2300      	movs	r3, #0
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	4093      	lsls	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e68:	4935      	ldr	r1, [pc, #212]	@ (8000f40 <HAL_GPIO_Init+0x2cc>)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e76:	4b36      	ldr	r3, [pc, #216]	@ (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	2380      	movs	r3, #128	@ 0x80
 8000e8c:	035b      	lsls	r3, r3, #13
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43da      	mvns	r2, r3
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	2380      	movs	r3, #128	@ 0x80
 8000eb6:	039b      	lsls	r3, r3, #14
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ec4:	4b22      	ldr	r3, [pc, #136]	@ (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000eca:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	2380      	movs	r3, #128	@ 0x80
 8000ee0:	029b      	lsls	r3, r3, #10
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43da      	mvns	r2, r3
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	2380      	movs	r3, #128	@ 0x80
 8000f0a:	025b      	lsls	r3, r3, #9
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f18:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	40da      	lsrs	r2, r3
 8000f2c:	1e13      	subs	r3, r2, #0
 8000f2e:	d000      	beq.n	8000f32 <HAL_GPIO_Init+0x2be>
 8000f30:	e6a8      	b.n	8000c84 <HAL_GPIO_Init+0x10>
  } 
}
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b006      	add	sp, #24
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010000 	.word	0x40010000
 8000f44:	48000400 	.word	0x48000400
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	48000c00 	.word	0x48000c00
 8000f50:	40010400 	.word	0x40010400

08000f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	0008      	movs	r0, r1
 8000f5e:	0011      	movs	r1, r2
 8000f60:	1cbb      	adds	r3, r7, #2
 8000f62:	1c02      	adds	r2, r0, #0
 8000f64:	801a      	strh	r2, [r3, #0]
 8000f66:	1c7b      	adds	r3, r7, #1
 8000f68:	1c0a      	adds	r2, r1, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f6c:	1c7b      	adds	r3, r7, #1
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d004      	beq.n	8000f7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f74:	1cbb      	adds	r3, r7, #2
 8000f76:	881a      	ldrh	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f7c:	e003      	b.n	8000f86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f7e:	1cbb      	adds	r3, r7, #2
 8000f80:	881a      	ldrh	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e301      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d100      	bne.n	8000fae <HAL_RCC_OscConfig+0x1e>
 8000fac:	e08d      	b.n	80010ca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fae:	4bc3      	ldr	r3, [pc, #780]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d00e      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fba:	4bc0      	ldr	r3, [pc, #768]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d116      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x64>
 8000fc6:	4bbd      	ldr	r3, [pc, #756]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	2380      	movs	r3, #128	@ 0x80
 8000fcc:	025b      	lsls	r3, r3, #9
 8000fce:	401a      	ands	r2, r3
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	025b      	lsls	r3, r3, #9
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d10d      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd8:	4bb8      	ldr	r3, [pc, #736]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	029b      	lsls	r3, r3, #10
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d100      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x56>
 8000fe4:	e070      	b.n	80010c8 <HAL_RCC_OscConfig+0x138>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d000      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x60>
 8000fee:	e06b      	b.n	80010c8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e2d8      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d107      	bne.n	800100c <HAL_RCC_OscConfig+0x7c>
 8000ffc:	4baf      	ldr	r3, [pc, #700]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4bae      	ldr	r3, [pc, #696]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001002:	2180      	movs	r1, #128	@ 0x80
 8001004:	0249      	lsls	r1, r1, #9
 8001006:	430a      	orrs	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e02f      	b.n	800106c <HAL_RCC_OscConfig+0xdc>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10c      	bne.n	800102e <HAL_RCC_OscConfig+0x9e>
 8001014:	4ba9      	ldr	r3, [pc, #676]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4ba8      	ldr	r3, [pc, #672]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 800101a:	49a9      	ldr	r1, [pc, #676]	@ (80012c0 <HAL_RCC_OscConfig+0x330>)
 800101c:	400a      	ands	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	4ba6      	ldr	r3, [pc, #664]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4ba5      	ldr	r3, [pc, #660]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001026:	49a7      	ldr	r1, [pc, #668]	@ (80012c4 <HAL_RCC_OscConfig+0x334>)
 8001028:	400a      	ands	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e01e      	b.n	800106c <HAL_RCC_OscConfig+0xdc>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b05      	cmp	r3, #5
 8001034:	d10e      	bne.n	8001054 <HAL_RCC_OscConfig+0xc4>
 8001036:	4ba1      	ldr	r3, [pc, #644]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4ba0      	ldr	r3, [pc, #640]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	02c9      	lsls	r1, r1, #11
 8001040:	430a      	orrs	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	4b9d      	ldr	r3, [pc, #628]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b9c      	ldr	r3, [pc, #624]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 800104a:	2180      	movs	r1, #128	@ 0x80
 800104c:	0249      	lsls	r1, r1, #9
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e00b      	b.n	800106c <HAL_RCC_OscConfig+0xdc>
 8001054:	4b99      	ldr	r3, [pc, #612]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b98      	ldr	r3, [pc, #608]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 800105a:	4999      	ldr	r1, [pc, #612]	@ (80012c0 <HAL_RCC_OscConfig+0x330>)
 800105c:	400a      	ands	r2, r1
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	4b96      	ldr	r3, [pc, #600]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b95      	ldr	r3, [pc, #596]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001066:	4997      	ldr	r1, [pc, #604]	@ (80012c4 <HAL_RCC_OscConfig+0x334>)
 8001068:	400a      	ands	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d014      	beq.n	800109e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fd16 	bl	8000aa4 <HAL_GetTick>
 8001078:	0003      	movs	r3, r0
 800107a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800107e:	f7ff fd11 	bl	8000aa4 <HAL_GetTick>
 8001082:	0002      	movs	r2, r0
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b64      	cmp	r3, #100	@ 0x64
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e28a      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001090:	4b8a      	ldr	r3, [pc, #552]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2380      	movs	r3, #128	@ 0x80
 8001096:	029b      	lsls	r3, r3, #10
 8001098:	4013      	ands	r3, r2
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0xee>
 800109c:	e015      	b.n	80010ca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff fd01 	bl	8000aa4 <HAL_GetTick>
 80010a2:	0003      	movs	r3, r0
 80010a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff fcfc 	bl	8000aa4 <HAL_GetTick>
 80010ac:	0002      	movs	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	@ 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e275      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ba:	4b80      	ldr	r3, [pc, #512]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	2380      	movs	r3, #128	@ 0x80
 80010c0:	029b      	lsls	r3, r3, #10
 80010c2:	4013      	ands	r3, r2
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x118>
 80010c6:	e000      	b.n	80010ca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d100      	bne.n	80010d6 <HAL_RCC_OscConfig+0x146>
 80010d4:	e069      	b.n	80011aa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010d6:	4b79      	ldr	r3, [pc, #484]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	220c      	movs	r2, #12
 80010dc:	4013      	ands	r3, r2
 80010de:	d00b      	beq.n	80010f8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010e0:	4b76      	ldr	r3, [pc, #472]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	220c      	movs	r2, #12
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d11c      	bne.n	8001126 <HAL_RCC_OscConfig+0x196>
 80010ec:	4b73      	ldr	r3, [pc, #460]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	025b      	lsls	r3, r3, #9
 80010f4:	4013      	ands	r3, r2
 80010f6:	d116      	bne.n	8001126 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f8:	4b70      	ldr	r3, [pc, #448]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2202      	movs	r2, #2
 80010fe:	4013      	ands	r3, r2
 8001100:	d005      	beq.n	800110e <HAL_RCC_OscConfig+0x17e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d001      	beq.n	800110e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e24b      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110e:	4b6b      	ldr	r3, [pc, #428]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	22f8      	movs	r2, #248	@ 0xf8
 8001114:	4393      	bics	r3, r2
 8001116:	0019      	movs	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	00da      	lsls	r2, r3, #3
 800111e:	4b67      	ldr	r3, [pc, #412]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001124:	e041      	b.n	80011aa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d024      	beq.n	8001178 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800112e:	4b63      	ldr	r3, [pc, #396]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b62      	ldr	r3, [pc, #392]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001134:	2101      	movs	r1, #1
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113a:	f7ff fcb3 	bl	8000aa4 <HAL_GetTick>
 800113e:	0003      	movs	r3, r0
 8001140:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001144:	f7ff fcae 	bl	8000aa4 <HAL_GetTick>
 8001148:	0002      	movs	r2, r0
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e227      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	4b59      	ldr	r3, [pc, #356]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2202      	movs	r2, #2
 800115c:	4013      	ands	r3, r2
 800115e:	d0f1      	beq.n	8001144 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b56      	ldr	r3, [pc, #344]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	22f8      	movs	r2, #248	@ 0xf8
 8001166:	4393      	bics	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	00da      	lsls	r2, r3, #3
 8001170:	4b52      	ldr	r3, [pc, #328]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e018      	b.n	80011aa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001178:	4b50      	ldr	r3, [pc, #320]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b4f      	ldr	r3, [pc, #316]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 800117e:	2101      	movs	r1, #1
 8001180:	438a      	bics	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fc8e 	bl	8000aa4 <HAL_GetTick>
 8001188:	0003      	movs	r3, r0
 800118a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff fc89 	bl	8000aa4 <HAL_GetTick>
 8001192:	0002      	movs	r2, r0
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e202      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a0:	4b46      	ldr	r3, [pc, #280]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2202      	movs	r2, #2
 80011a6:	4013      	ands	r3, r2
 80011a8:	d1f1      	bne.n	800118e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2208      	movs	r2, #8
 80011b0:	4013      	ands	r3, r2
 80011b2:	d036      	beq.n	8001222 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d019      	beq.n	80011f0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011bc:	4b3f      	ldr	r3, [pc, #252]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011c0:	4b3e      	ldr	r3, [pc, #248]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011c2:	2101      	movs	r1, #1
 80011c4:	430a      	orrs	r2, r1
 80011c6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c8:	f7ff fc6c 	bl	8000aa4 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d2:	f7ff fc67 	bl	8000aa4 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e1e0      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e4:	4b35      	ldr	r3, [pc, #212]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e8:	2202      	movs	r2, #2
 80011ea:	4013      	ands	r3, r2
 80011ec:	d0f1      	beq.n	80011d2 <HAL_RCC_OscConfig+0x242>
 80011ee:	e018      	b.n	8001222 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f0:	4b32      	ldr	r3, [pc, #200]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011f4:	4b31      	ldr	r3, [pc, #196]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011f6:	2101      	movs	r1, #1
 80011f8:	438a      	bics	r2, r1
 80011fa:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fc:	f7ff fc52 	bl	8000aa4 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001206:	f7ff fc4d 	bl	8000aa4 <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e1c6      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121c:	2202      	movs	r2, #2
 800121e:	4013      	ands	r3, r2
 8001220:	d1f1      	bne.n	8001206 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2204      	movs	r2, #4
 8001228:	4013      	ands	r3, r2
 800122a:	d100      	bne.n	800122e <HAL_RCC_OscConfig+0x29e>
 800122c:	e0b4      	b.n	8001398 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122e:	201f      	movs	r0, #31
 8001230:	183b      	adds	r3, r7, r0
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001236:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	2380      	movs	r3, #128	@ 0x80
 800123c:	055b      	lsls	r3, r3, #21
 800123e:	4013      	ands	r3, r2
 8001240:	d110      	bne.n	8001264 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001244:	69da      	ldr	r2, [r3, #28]
 8001246:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001248:	2180      	movs	r1, #128	@ 0x80
 800124a:	0549      	lsls	r1, r1, #21
 800124c:	430a      	orrs	r2, r1
 800124e:	61da      	str	r2, [r3, #28]
 8001250:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001252:	69da      	ldr	r2, [r3, #28]
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	055b      	lsls	r3, r3, #21
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800125e:	183b      	adds	r3, r7, r0
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001264:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <HAL_RCC_OscConfig+0x338>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2380      	movs	r3, #128	@ 0x80
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4013      	ands	r3, r2
 800126e:	d11a      	bne.n	80012a6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <HAL_RCC_OscConfig+0x338>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <HAL_RCC_OscConfig+0x338>)
 8001276:	2180      	movs	r1, #128	@ 0x80
 8001278:	0049      	lsls	r1, r1, #1
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127e:	f7ff fc11 	bl	8000aa4 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001288:	f7ff fc0c 	bl	8000aa4 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	@ 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e185      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_RCC_OscConfig+0x338>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	2380      	movs	r3, #128	@ 0x80
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4013      	ands	r3, r2
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10e      	bne.n	80012cc <HAL_RCC_OscConfig+0x33c>
 80012ae:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 80012b0:	6a1a      	ldr	r2, [r3, #32]
 80012b2:	4b02      	ldr	r3, [pc, #8]	@ (80012bc <HAL_RCC_OscConfig+0x32c>)
 80012b4:	2101      	movs	r1, #1
 80012b6:	430a      	orrs	r2, r1
 80012b8:	621a      	str	r2, [r3, #32]
 80012ba:	e035      	b.n	8001328 <HAL_RCC_OscConfig+0x398>
 80012bc:	40021000 	.word	0x40021000
 80012c0:	fffeffff 	.word	0xfffeffff
 80012c4:	fffbffff 	.word	0xfffbffff
 80012c8:	40007000 	.word	0x40007000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x35e>
 80012d4:	4bb6      	ldr	r3, [pc, #728]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012d6:	6a1a      	ldr	r2, [r3, #32]
 80012d8:	4bb5      	ldr	r3, [pc, #724]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012da:	2101      	movs	r1, #1
 80012dc:	438a      	bics	r2, r1
 80012de:	621a      	str	r2, [r3, #32]
 80012e0:	4bb3      	ldr	r3, [pc, #716]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	4bb2      	ldr	r3, [pc, #712]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012e6:	2104      	movs	r1, #4
 80012e8:	438a      	bics	r2, r1
 80012ea:	621a      	str	r2, [r3, #32]
 80012ec:	e01c      	b.n	8001328 <HAL_RCC_OscConfig+0x398>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x380>
 80012f6:	4bae      	ldr	r3, [pc, #696]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012f8:	6a1a      	ldr	r2, [r3, #32]
 80012fa:	4bad      	ldr	r3, [pc, #692]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012fc:	2104      	movs	r1, #4
 80012fe:	430a      	orrs	r2, r1
 8001300:	621a      	str	r2, [r3, #32]
 8001302:	4bab      	ldr	r3, [pc, #684]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001304:	6a1a      	ldr	r2, [r3, #32]
 8001306:	4baa      	ldr	r3, [pc, #680]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001308:	2101      	movs	r1, #1
 800130a:	430a      	orrs	r2, r1
 800130c:	621a      	str	r2, [r3, #32]
 800130e:	e00b      	b.n	8001328 <HAL_RCC_OscConfig+0x398>
 8001310:	4ba7      	ldr	r3, [pc, #668]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001312:	6a1a      	ldr	r2, [r3, #32]
 8001314:	4ba6      	ldr	r3, [pc, #664]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001316:	2101      	movs	r1, #1
 8001318:	438a      	bics	r2, r1
 800131a:	621a      	str	r2, [r3, #32]
 800131c:	4ba4      	ldr	r3, [pc, #656]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 800131e:	6a1a      	ldr	r2, [r3, #32]
 8001320:	4ba3      	ldr	r3, [pc, #652]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001322:	2104      	movs	r1, #4
 8001324:	438a      	bics	r2, r1
 8001326:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d014      	beq.n	800135a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001330:	f7ff fbb8 	bl	8000aa4 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001338:	e009      	b.n	800134e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133a:	f7ff fbb3 	bl	8000aa4 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4a9b      	ldr	r2, [pc, #620]	@ (80015b4 <HAL_RCC_OscConfig+0x624>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e12b      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134e:	4b98      	ldr	r3, [pc, #608]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	2202      	movs	r2, #2
 8001354:	4013      	ands	r3, r2
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x3aa>
 8001358:	e013      	b.n	8001382 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff fba3 	bl	8000aa4 <HAL_GetTick>
 800135e:	0003      	movs	r3, r0
 8001360:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001362:	e009      	b.n	8001378 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001364:	f7ff fb9e 	bl	8000aa4 <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4a91      	ldr	r2, [pc, #580]	@ (80015b4 <HAL_RCC_OscConfig+0x624>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e116      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001378:	4b8d      	ldr	r3, [pc, #564]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	2202      	movs	r2, #2
 800137e:	4013      	ands	r3, r2
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001382:	231f      	movs	r3, #31
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138c:	4b88      	ldr	r3, [pc, #544]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 800138e:	69da      	ldr	r2, [r3, #28]
 8001390:	4b87      	ldr	r3, [pc, #540]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001392:	4989      	ldr	r1, [pc, #548]	@ (80015b8 <HAL_RCC_OscConfig+0x628>)
 8001394:	400a      	ands	r2, r1
 8001396:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2210      	movs	r2, #16
 800139e:	4013      	ands	r3, r2
 80013a0:	d063      	beq.n	800146a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d12a      	bne.n	8001400 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013aa:	4b81      	ldr	r3, [pc, #516]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ae:	4b80      	ldr	r3, [pc, #512]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013b0:	2104      	movs	r1, #4
 80013b2:	430a      	orrs	r2, r1
 80013b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013b6:	4b7e      	ldr	r3, [pc, #504]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ba:	4b7d      	ldr	r3, [pc, #500]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013bc:	2101      	movs	r1, #1
 80013be:	430a      	orrs	r2, r1
 80013c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fb6f 	bl	8000aa4 <HAL_GetTick>
 80013c6:	0003      	movs	r3, r0
 80013c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013cc:	f7ff fb6a 	bl	8000aa4 <HAL_GetTick>
 80013d0:	0002      	movs	r2, r0
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e0e3      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013de:	4b74      	ldr	r3, [pc, #464]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0f1      	beq.n	80013cc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013e8:	4b71      	ldr	r3, [pc, #452]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013ec:	22f8      	movs	r2, #248	@ 0xf8
 80013ee:	4393      	bics	r3, r2
 80013f0:	0019      	movs	r1, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	00da      	lsls	r2, r3, #3
 80013f8:	4b6d      	ldr	r3, [pc, #436]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013fa:	430a      	orrs	r2, r1
 80013fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80013fe:	e034      	b.n	800146a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	3305      	adds	r3, #5
 8001406:	d111      	bne.n	800142c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001408:	4b69      	ldr	r3, [pc, #420]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 800140a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800140c:	4b68      	ldr	r3, [pc, #416]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 800140e:	2104      	movs	r1, #4
 8001410:	438a      	bics	r2, r1
 8001412:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001414:	4b66      	ldr	r3, [pc, #408]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001418:	22f8      	movs	r2, #248	@ 0xf8
 800141a:	4393      	bics	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	00da      	lsls	r2, r3, #3
 8001424:	4b62      	ldr	r3, [pc, #392]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001426:	430a      	orrs	r2, r1
 8001428:	635a      	str	r2, [r3, #52]	@ 0x34
 800142a:	e01e      	b.n	800146a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800142c:	4b60      	ldr	r3, [pc, #384]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 800142e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001430:	4b5f      	ldr	r3, [pc, #380]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001432:	2104      	movs	r1, #4
 8001434:	430a      	orrs	r2, r1
 8001436:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001438:	4b5d      	ldr	r3, [pc, #372]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 800143a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800143c:	4b5c      	ldr	r3, [pc, #368]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 800143e:	2101      	movs	r1, #1
 8001440:	438a      	bics	r2, r1
 8001442:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff fb2e 	bl	8000aa4 <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800144e:	f7ff fb29 	bl	8000aa4 <HAL_GetTick>
 8001452:	0002      	movs	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e0a2      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001460:	4b53      	ldr	r3, [pc, #332]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001464:	2202      	movs	r2, #2
 8001466:	4013      	ands	r3, r2
 8001468:	d1f1      	bne.n	800144e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d100      	bne.n	8001474 <HAL_RCC_OscConfig+0x4e4>
 8001472:	e097      	b.n	80015a4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001474:	4b4e      	ldr	r3, [pc, #312]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	220c      	movs	r2, #12
 800147a:	4013      	ands	r3, r2
 800147c:	2b08      	cmp	r3, #8
 800147e:	d100      	bne.n	8001482 <HAL_RCC_OscConfig+0x4f2>
 8001480:	e06b      	b.n	800155a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d14c      	bne.n	8001524 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148a:	4b49      	ldr	r3, [pc, #292]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b48      	ldr	r3, [pc, #288]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001490:	494a      	ldr	r1, [pc, #296]	@ (80015bc <HAL_RCC_OscConfig+0x62c>)
 8001492:	400a      	ands	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fb05 	bl	8000aa4 <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fb00 	bl	8000aa4 <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e079      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b2:	4b3f      	ldr	r3, [pc, #252]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	049b      	lsls	r3, r3, #18
 80014ba:	4013      	ands	r3, r2
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014be:	4b3c      	ldr	r3, [pc, #240]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c2:	220f      	movs	r2, #15
 80014c4:	4393      	bics	r3, r2
 80014c6:	0019      	movs	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014cc:	4b38      	ldr	r3, [pc, #224]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014ce:	430a      	orrs	r2, r1
 80014d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014d2:	4b37      	ldr	r3, [pc, #220]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4a3a      	ldr	r2, [pc, #232]	@ (80015c0 <HAL_RCC_OscConfig+0x630>)
 80014d8:	4013      	ands	r3, r2
 80014da:	0019      	movs	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e4:	431a      	orrs	r2, r3
 80014e6:	4b32      	ldr	r3, [pc, #200]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014e8:	430a      	orrs	r2, r1
 80014ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ec:	4b30      	ldr	r3, [pc, #192]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b2f      	ldr	r3, [pc, #188]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014f2:	2180      	movs	r1, #128	@ 0x80
 80014f4:	0449      	lsls	r1, r1, #17
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fad3 	bl	8000aa4 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff face 	bl	8000aa4 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e047      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001516:	4b26      	ldr	r3, [pc, #152]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2380      	movs	r3, #128	@ 0x80
 800151c:	049b      	lsls	r3, r3, #18
 800151e:	4013      	ands	r3, r2
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x574>
 8001522:	e03f      	b.n	80015a4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001524:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 800152a:	4924      	ldr	r1, [pc, #144]	@ (80015bc <HAL_RCC_OscConfig+0x62c>)
 800152c:	400a      	ands	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fab8 	bl	8000aa4 <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fab3 	bl	8000aa4 <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e02c      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	049b      	lsls	r3, r3, #18
 8001554:	4013      	ands	r3, r2
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x5aa>
 8001558:	e024      	b.n	80015a4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e01f      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001566:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800156c:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <HAL_RCC_OscConfig+0x620>)
 800156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001570:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	2380      	movs	r3, #128	@ 0x80
 8001576:	025b      	lsls	r3, r3, #9
 8001578:	401a      	ands	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157e:	429a      	cmp	r2, r3
 8001580:	d10e      	bne.n	80015a0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	220f      	movs	r2, #15
 8001586:	401a      	ands	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	23f0      	movs	r3, #240	@ 0xf0
 8001594:	039b      	lsls	r3, r3, #14
 8001596:	401a      	ands	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b008      	add	sp, #32
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	40021000 	.word	0x40021000
 80015b4:	00001388 	.word	0x00001388
 80015b8:	efffffff 	.word	0xefffffff
 80015bc:	feffffff 	.word	0xfeffffff
 80015c0:	ffc2ffff 	.word	0xffc2ffff

080015c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0b3      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001748 <HAL_RCC_ClockConfig+0x184>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2201      	movs	r2, #1
 80015de:	4013      	ands	r3, r2
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d911      	bls.n	800160a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e6:	4b58      	ldr	r3, [pc, #352]	@ (8001748 <HAL_RCC_ClockConfig+0x184>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4393      	bics	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	4b55      	ldr	r3, [pc, #340]	@ (8001748 <HAL_RCC_ClockConfig+0x184>)
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f8:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <HAL_RCC_ClockConfig+0x184>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4013      	ands	r3, r2
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d001      	beq.n	800160a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e09a      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2202      	movs	r2, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d015      	beq.n	8001640 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2204      	movs	r2, #4
 800161a:	4013      	ands	r3, r2
 800161c:	d006      	beq.n	800162c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800161e:	4b4b      	ldr	r3, [pc, #300]	@ (800174c <HAL_RCC_ClockConfig+0x188>)
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4b4a      	ldr	r3, [pc, #296]	@ (800174c <HAL_RCC_ClockConfig+0x188>)
 8001624:	21e0      	movs	r1, #224	@ 0xe0
 8001626:	00c9      	lsls	r1, r1, #3
 8001628:	430a      	orrs	r2, r1
 800162a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162c:	4b47      	ldr	r3, [pc, #284]	@ (800174c <HAL_RCC_ClockConfig+0x188>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	22f0      	movs	r2, #240	@ 0xf0
 8001632:	4393      	bics	r3, r2
 8001634:	0019      	movs	r1, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	4b44      	ldr	r3, [pc, #272]	@ (800174c <HAL_RCC_ClockConfig+0x188>)
 800163c:	430a      	orrs	r2, r1
 800163e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2201      	movs	r2, #1
 8001646:	4013      	ands	r3, r2
 8001648:	d040      	beq.n	80016cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b3e      	ldr	r3, [pc, #248]	@ (800174c <HAL_RCC_ClockConfig+0x188>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	029b      	lsls	r3, r3, #10
 800165a:	4013      	ands	r3, r2
 800165c:	d114      	bne.n	8001688 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06e      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b38      	ldr	r3, [pc, #224]	@ (800174c <HAL_RCC_ClockConfig+0x188>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	2380      	movs	r3, #128	@ 0x80
 8001670:	049b      	lsls	r3, r3, #18
 8001672:	4013      	ands	r3, r2
 8001674:	d108      	bne.n	8001688 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e062      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167a:	4b34      	ldr	r3, [pc, #208]	@ (800174c <HAL_RCC_ClockConfig+0x188>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e05b      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001688:	4b30      	ldr	r3, [pc, #192]	@ (800174c <HAL_RCC_ClockConfig+0x188>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2203      	movs	r2, #3
 800168e:	4393      	bics	r3, r2
 8001690:	0019      	movs	r1, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4b2d      	ldr	r3, [pc, #180]	@ (800174c <HAL_RCC_ClockConfig+0x188>)
 8001698:	430a      	orrs	r2, r1
 800169a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff fa02 	bl	8000aa4 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a4:	e009      	b.n	80016ba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a6:	f7ff f9fd 	bl	8000aa4 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4a27      	ldr	r2, [pc, #156]	@ (8001750 <HAL_RCC_ClockConfig+0x18c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e042      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	4b24      	ldr	r3, [pc, #144]	@ (800174c <HAL_RCC_ClockConfig+0x188>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	220c      	movs	r2, #12
 80016c0:	401a      	ands	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d1ec      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <HAL_RCC_ClockConfig+0x184>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4013      	ands	r3, r2
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d211      	bcs.n	80016fe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <HAL_RCC_ClockConfig+0x184>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2201      	movs	r2, #1
 80016e0:	4393      	bics	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <HAL_RCC_ClockConfig+0x184>)
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ec:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <HAL_RCC_ClockConfig+0x184>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2201      	movs	r2, #1
 80016f2:	4013      	ands	r3, r2
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e020      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2204      	movs	r2, #4
 8001704:	4013      	ands	r3, r2
 8001706:	d009      	beq.n	800171c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <HAL_RCC_ClockConfig+0x188>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a11      	ldr	r2, [pc, #68]	@ (8001754 <HAL_RCC_ClockConfig+0x190>)
 800170e:	4013      	ands	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <HAL_RCC_ClockConfig+0x188>)
 8001718:	430a      	orrs	r2, r1
 800171a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800171c:	f000 f820 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 8001720:	0001      	movs	r1, r0
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <HAL_RCC_ClockConfig+0x188>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	220f      	movs	r2, #15
 800172a:	4013      	ands	r3, r2
 800172c:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_RCC_ClockConfig+0x194>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	000a      	movs	r2, r1
 8001732:	40da      	lsrs	r2, r3
 8001734:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_RCC_ClockConfig+0x198>)
 8001736:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001738:	2003      	movs	r0, #3
 800173a:	f7ff f96d 	bl	8000a18 <HAL_InitTick>
  
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40022000 	.word	0x40022000
 800174c:	40021000 	.word	0x40021000
 8001750:	00001388 	.word	0x00001388
 8001754:	fffff8ff 	.word	0xfffff8ff
 8001758:	08004018 	.word	0x08004018
 800175c:	20000000 	.word	0x20000000

08001760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800177a:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x9c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	220c      	movs	r2, #12
 8001784:	4013      	ands	r3, r2
 8001786:	2b04      	cmp	r3, #4
 8001788:	d002      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x30>
 800178a:	2b08      	cmp	r3, #8
 800178c:	d003      	beq.n	8001796 <HAL_RCC_GetSysClockFreq+0x36>
 800178e:	e02c      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001792:	613b      	str	r3, [r7, #16]
      break;
 8001794:	e02c      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	0c9b      	lsrs	r3, r3, #18
 800179a:	220f      	movs	r2, #15
 800179c:	4013      	ands	r3, r2
 800179e:	4a19      	ldr	r2, [pc, #100]	@ (8001804 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017a0:	5cd3      	ldrb	r3, [r2, r3]
 80017a2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80017a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a8:	220f      	movs	r2, #15
 80017aa:	4013      	ands	r3, r2
 80017ac:	4a16      	ldr	r2, [pc, #88]	@ (8001808 <HAL_RCC_GetSysClockFreq+0xa8>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	2380      	movs	r3, #128	@ 0x80
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	4013      	ands	r3, r2
 80017ba:	d009      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	4810      	ldr	r0, [pc, #64]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017c0:	f7fe fcac 	bl	800011c <__udivsi3>
 80017c4:	0003      	movs	r3, r0
 80017c6:	001a      	movs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4353      	muls	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e009      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	000a      	movs	r2, r1
 80017d4:	0152      	lsls	r2, r2, #5
 80017d6:	1a52      	subs	r2, r2, r1
 80017d8:	0193      	lsls	r3, r2, #6
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	185b      	adds	r3, r3, r1
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
      break;
 80017e8:	e002      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017ea:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017ec:	613b      	str	r3, [r7, #16]
      break;
 80017ee:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017f0:	693b      	ldr	r3, [r7, #16]
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b006      	add	sp, #24
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	40021000 	.word	0x40021000
 8001800:	007a1200 	.word	0x007a1200
 8001804:	08004030 	.word	0x08004030
 8001808:	08004040 	.word	0x08004040

0800180c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001810:	4b02      	ldr	r3, [pc, #8]	@ (800181c <HAL_RCC_GetHCLKFreq+0x10>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	20000000 	.word	0x20000000

08001820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001824:	f7ff fff2 	bl	800180c <HAL_RCC_GetHCLKFreq>
 8001828:	0001      	movs	r1, r0
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	2207      	movs	r2, #7
 8001832:	4013      	ands	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	40d9      	lsrs	r1, r3
 800183a:	000b      	movs	r3, r1
}    
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	40021000 	.word	0x40021000
 8001848:	08004028 	.word	0x08004028

0800184c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2380      	movs	r3, #128	@ 0x80
 8001862:	025b      	lsls	r3, r3, #9
 8001864:	4013      	ands	r3, r2
 8001866:	d100      	bne.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001868:	e08e      	b.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800186a:	2017      	movs	r0, #23
 800186c:	183b      	adds	r3, r7, r0
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001872:	4b57      	ldr	r3, [pc, #348]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	2380      	movs	r3, #128	@ 0x80
 8001878:	055b      	lsls	r3, r3, #21
 800187a:	4013      	ands	r3, r2
 800187c:	d110      	bne.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b54      	ldr	r3, [pc, #336]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	4b53      	ldr	r3, [pc, #332]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001884:	2180      	movs	r1, #128	@ 0x80
 8001886:	0549      	lsls	r1, r1, #21
 8001888:	430a      	orrs	r2, r1
 800188a:	61da      	str	r2, [r3, #28]
 800188c:	4b50      	ldr	r3, [pc, #320]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800188e:	69da      	ldr	r2, [r3, #28]
 8001890:	2380      	movs	r3, #128	@ 0x80
 8001892:	055b      	lsls	r3, r3, #21
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189a:	183b      	adds	r3, r7, r0
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	4b4c      	ldr	r3, [pc, #304]	@ (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4013      	ands	r3, r2
 80018aa:	d11a      	bne.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ac:	4b49      	ldr	r3, [pc, #292]	@ (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b48      	ldr	r3, [pc, #288]	@ (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018b2:	2180      	movs	r1, #128	@ 0x80
 80018b4:	0049      	lsls	r1, r1, #1
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ba:	f7ff f8f3 	bl	8000aa4 <HAL_GetTick>
 80018be:	0003      	movs	r3, r0
 80018c0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c2:	e008      	b.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c4:	f7ff f8ee 	bl	8000aa4 <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b64      	cmp	r3, #100	@ 0x64
 80018d0:	d901      	bls.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e077      	b.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	4b3f      	ldr	r3, [pc, #252]	@ (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	2380      	movs	r3, #128	@ 0x80
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4013      	ands	r3, r2
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018e2:	4b3b      	ldr	r3, [pc, #236]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018e4:	6a1a      	ldr	r2, [r3, #32]
 80018e6:	23c0      	movs	r3, #192	@ 0xc0
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d034      	beq.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	23c0      	movs	r3, #192	@ 0xc0
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4013      	ands	r3, r2
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d02c      	beq.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001904:	4b32      	ldr	r3, [pc, #200]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4a33      	ldr	r2, [pc, #204]	@ (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800190a:	4013      	ands	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800190e:	4b30      	ldr	r3, [pc, #192]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001910:	6a1a      	ldr	r2, [r3, #32]
 8001912:	4b2f      	ldr	r3, [pc, #188]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001914:	2180      	movs	r1, #128	@ 0x80
 8001916:	0249      	lsls	r1, r1, #9
 8001918:	430a      	orrs	r2, r1
 800191a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800191c:	4b2c      	ldr	r3, [pc, #176]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800191e:	6a1a      	ldr	r2, [r3, #32]
 8001920:	4b2b      	ldr	r3, [pc, #172]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001922:	492e      	ldr	r1, [pc, #184]	@ (80019dc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001924:	400a      	ands	r2, r1
 8001926:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001928:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	4013      	ands	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff f8b5 	bl	8000aa4 <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193e:	e009      	b.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff f8b0 	bl	8000aa4 <HAL_GetTick>
 8001944:	0002      	movs	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	4a25      	ldr	r2, [pc, #148]	@ (80019e0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e038      	b.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001954:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d0f0      	beq.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800195e:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4a1d      	ldr	r2, [pc, #116]	@ (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001964:	4013      	ands	r3, r2
 8001966:	0019      	movs	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800196e:	430a      	orrs	r2, r1
 8001970:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001972:	2317      	movs	r3, #23
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800197e:	69da      	ldr	r2, [r3, #28]
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001982:	4918      	ldr	r1, [pc, #96]	@ (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001984:	400a      	ands	r2, r1
 8001986:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	d009      	beq.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001992:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	2203      	movs	r2, #3
 8001998:	4393      	bics	r3, r2
 800199a:	0019      	movs	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019a2:	430a      	orrs	r2, r1
 80019a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2220      	movs	r2, #32
 80019ac:	4013      	ands	r3, r2
 80019ae:	d009      	beq.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019b0:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b4:	2210      	movs	r2, #16
 80019b6:	4393      	bics	r3, r2
 80019b8:	0019      	movs	r1, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019c0:	430a      	orrs	r2, r1
 80019c2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b006      	add	sp, #24
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40007000 	.word	0x40007000
 80019d8:	fffffcff 	.word	0xfffffcff
 80019dc:	fffeffff 	.word	0xfffeffff
 80019e0:	00001388 	.word	0x00001388
 80019e4:	efffffff 	.word	0xefffffff

080019e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e042      	b.n	8001a80 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	223d      	movs	r2, #61	@ 0x3d
 80019fe:	5c9b      	ldrb	r3, [r3, r2]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d107      	bne.n	8001a16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	223c      	movs	r2, #60	@ 0x3c
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7fe fe77 	bl	8000704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	223d      	movs	r2, #61	@ 0x3d
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3304      	adds	r3, #4
 8001a26:	0019      	movs	r1, r3
 8001a28:	0010      	movs	r0, r2
 8001a2a:	f000 fc47 	bl	80022bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2246      	movs	r2, #70	@ 0x46
 8001a32:	2101      	movs	r1, #1
 8001a34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	223e      	movs	r2, #62	@ 0x3e
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	5499      	strb	r1, [r3, r2]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	223f      	movs	r2, #63	@ 0x3f
 8001a42:	2101      	movs	r1, #1
 8001a44:	5499      	strb	r1, [r3, r2]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2240      	movs	r2, #64	@ 0x40
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	5499      	strb	r1, [r3, r2]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2241      	movs	r2, #65	@ 0x41
 8001a52:	2101      	movs	r1, #1
 8001a54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2242      	movs	r2, #66	@ 0x42
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	5499      	strb	r1, [r3, r2]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2243      	movs	r2, #67	@ 0x43
 8001a62:	2101      	movs	r1, #1
 8001a64:	5499      	strb	r1, [r3, r2]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2244      	movs	r2, #68	@ 0x44
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	5499      	strb	r1, [r3, r2]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2245      	movs	r2, #69	@ 0x45
 8001a72:	2101      	movs	r1, #1
 8001a74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	223d      	movs	r2, #61	@ 0x3d
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b002      	add	sp, #8
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e042      	b.n	8001b20 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	223d      	movs	r2, #61	@ 0x3d
 8001a9e:	5c9b      	ldrb	r3, [r3, r2]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d107      	bne.n	8001ab6 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	223c      	movs	r2, #60	@ 0x3c
 8001aaa:	2100      	movs	r1, #0
 8001aac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 f839 	bl	8001b28 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	223d      	movs	r2, #61	@ 0x3d
 8001aba:	2102      	movs	r1, #2
 8001abc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	0010      	movs	r0, r2
 8001aca:	f000 fbf7 	bl	80022bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2246      	movs	r2, #70	@ 0x46
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	223e      	movs	r2, #62	@ 0x3e
 8001ada:	2101      	movs	r1, #1
 8001adc:	5499      	strb	r1, [r3, r2]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	223f      	movs	r2, #63	@ 0x3f
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	5499      	strb	r1, [r3, r2]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2240      	movs	r2, #64	@ 0x40
 8001aea:	2101      	movs	r1, #1
 8001aec:	5499      	strb	r1, [r3, r2]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2241      	movs	r2, #65	@ 0x41
 8001af2:	2101      	movs	r1, #1
 8001af4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2242      	movs	r2, #66	@ 0x42
 8001afa:	2101      	movs	r1, #1
 8001afc:	5499      	strb	r1, [r3, r2]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2243      	movs	r2, #67	@ 0x43
 8001b02:	2101      	movs	r1, #1
 8001b04:	5499      	strb	r1, [r3, r2]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2244      	movs	r2, #68	@ 0x44
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	5499      	strb	r1, [r3, r2]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2245      	movs	r2, #69	@ 0x45
 8001b12:	2101      	movs	r1, #1
 8001b14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	223d      	movs	r2, #61	@ 0x3d
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b002      	add	sp, #8
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001b30:	46c0      	nop			@ (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b42:	230f      	movs	r3, #15
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d104      	bne.n	8001b5a <HAL_TIM_IC_Start_IT+0x22>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	223e      	movs	r2, #62	@ 0x3e
 8001b54:	5c9b      	ldrb	r3, [r3, r2]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	e013      	b.n	8001b82 <HAL_TIM_IC_Start_IT+0x4a>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d104      	bne.n	8001b6a <HAL_TIM_IC_Start_IT+0x32>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	223f      	movs	r2, #63	@ 0x3f
 8001b64:	5c9b      	ldrb	r3, [r3, r2]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	e00b      	b.n	8001b82 <HAL_TIM_IC_Start_IT+0x4a>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d104      	bne.n	8001b7a <HAL_TIM_IC_Start_IT+0x42>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2240      	movs	r2, #64	@ 0x40
 8001b74:	5c9b      	ldrb	r3, [r3, r2]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	e003      	b.n	8001b82 <HAL_TIM_IC_Start_IT+0x4a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2241      	movs	r2, #65	@ 0x41
 8001b7e:	5c9b      	ldrb	r3, [r3, r2]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	220e      	movs	r2, #14
 8001b84:	18ba      	adds	r2, r7, r2
 8001b86:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d104      	bne.n	8001b98 <HAL_TIM_IC_Start_IT+0x60>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2242      	movs	r2, #66	@ 0x42
 8001b92:	5c9b      	ldrb	r3, [r3, r2]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	e013      	b.n	8001bc0 <HAL_TIM_IC_Start_IT+0x88>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d104      	bne.n	8001ba8 <HAL_TIM_IC_Start_IT+0x70>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2243      	movs	r2, #67	@ 0x43
 8001ba2:	5c9b      	ldrb	r3, [r3, r2]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	e00b      	b.n	8001bc0 <HAL_TIM_IC_Start_IT+0x88>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d104      	bne.n	8001bb8 <HAL_TIM_IC_Start_IT+0x80>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2244      	movs	r2, #68	@ 0x44
 8001bb2:	5c9b      	ldrb	r3, [r3, r2]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	e003      	b.n	8001bc0 <HAL_TIM_IC_Start_IT+0x88>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2245      	movs	r2, #69	@ 0x45
 8001bbc:	5c9b      	ldrb	r3, [r3, r2]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	210d      	movs	r1, #13
 8001bc2:	187a      	adds	r2, r7, r1
 8001bc4:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001bc6:	230e      	movs	r3, #14
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d103      	bne.n	8001bd8 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d001      	beq.n	8001bdc <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0ab      	b.n	8001d34 <HAL_TIM_IC_Start_IT+0x1fc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d104      	bne.n	8001bec <HAL_TIM_IC_Start_IT+0xb4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	223e      	movs	r2, #62	@ 0x3e
 8001be6:	2102      	movs	r1, #2
 8001be8:	5499      	strb	r1, [r3, r2]
 8001bea:	e013      	b.n	8001c14 <HAL_TIM_IC_Start_IT+0xdc>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d104      	bne.n	8001bfc <HAL_TIM_IC_Start_IT+0xc4>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	223f      	movs	r2, #63	@ 0x3f
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	5499      	strb	r1, [r3, r2]
 8001bfa:	e00b      	b.n	8001c14 <HAL_TIM_IC_Start_IT+0xdc>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d104      	bne.n	8001c0c <HAL_TIM_IC_Start_IT+0xd4>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2240      	movs	r2, #64	@ 0x40
 8001c06:	2102      	movs	r1, #2
 8001c08:	5499      	strb	r1, [r3, r2]
 8001c0a:	e003      	b.n	8001c14 <HAL_TIM_IC_Start_IT+0xdc>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2241      	movs	r2, #65	@ 0x41
 8001c10:	2102      	movs	r1, #2
 8001c12:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d104      	bne.n	8001c24 <HAL_TIM_IC_Start_IT+0xec>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2242      	movs	r2, #66	@ 0x42
 8001c1e:	2102      	movs	r1, #2
 8001c20:	5499      	strb	r1, [r3, r2]
 8001c22:	e013      	b.n	8001c4c <HAL_TIM_IC_Start_IT+0x114>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d104      	bne.n	8001c34 <HAL_TIM_IC_Start_IT+0xfc>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2243      	movs	r2, #67	@ 0x43
 8001c2e:	2102      	movs	r1, #2
 8001c30:	5499      	strb	r1, [r3, r2]
 8001c32:	e00b      	b.n	8001c4c <HAL_TIM_IC_Start_IT+0x114>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d104      	bne.n	8001c44 <HAL_TIM_IC_Start_IT+0x10c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2244      	movs	r2, #68	@ 0x44
 8001c3e:	2102      	movs	r1, #2
 8001c40:	5499      	strb	r1, [r3, r2]
 8001c42:	e003      	b.n	8001c4c <HAL_TIM_IC_Start_IT+0x114>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2245      	movs	r2, #69	@ 0x45
 8001c48:	2102      	movs	r1, #2
 8001c4a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	d02a      	beq.n	8001ca8 <HAL_TIM_IC_Start_IT+0x170>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	d830      	bhi.n	8001cba <HAL_TIM_IC_Start_IT+0x182>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d01b      	beq.n	8001c96 <HAL_TIM_IC_Start_IT+0x15e>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d82a      	bhi.n	8001cba <HAL_TIM_IC_Start_IT+0x182>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_TIM_IC_Start_IT+0x13a>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d009      	beq.n	8001c84 <HAL_TIM_IC_Start_IT+0x14c>
 8001c70:	e023      	b.n	8001cba <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	60da      	str	r2, [r3, #12]
      break;
 8001c82:	e01f      	b.n	8001cc4 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2104      	movs	r1, #4
 8001c90:	430a      	orrs	r2, r1
 8001c92:	60da      	str	r2, [r3, #12]
      break;
 8001c94:	e016      	b.n	8001cc4 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2108      	movs	r1, #8
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	60da      	str	r2, [r3, #12]
      break;
 8001ca6:	e00d      	b.n	8001cc4 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2110      	movs	r1, #16
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	60da      	str	r2, [r3, #12]
      break;
 8001cb8:	e004      	b.n	8001cc4 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8001cba:	230f      	movs	r3, #15
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
      break;
 8001cc2:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d12f      	bne.n	8001d2e <HAL_TIM_IC_Start_IT+0x1f6>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f000 fd2e 	bl	8002738 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a16      	ldr	r2, [pc, #88]	@ (8001d3c <HAL_TIM_IC_Start_IT+0x204>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d009      	beq.n	8001cfa <HAL_TIM_IC_Start_IT+0x1c2>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a15      	ldr	r2, [pc, #84]	@ (8001d40 <HAL_TIM_IC_Start_IT+0x208>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d004      	beq.n	8001cfa <HAL_TIM_IC_Start_IT+0x1c2>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a13      	ldr	r2, [pc, #76]	@ (8001d44 <HAL_TIM_IC_Start_IT+0x20c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d111      	bne.n	8001d1e <HAL_TIM_IC_Start_IT+0x1e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2207      	movs	r2, #7
 8001d02:	4013      	ands	r3, r2
 8001d04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b06      	cmp	r3, #6
 8001d0a:	d010      	beq.n	8001d2e <HAL_TIM_IC_Start_IT+0x1f6>
      {
        __HAL_TIM_ENABLE(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2101      	movs	r1, #1
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1c:	e007      	b.n	8001d2e <HAL_TIM_IC_Start_IT+0x1f6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001d2e:	230f      	movs	r3, #15
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	781b      	ldrb	r3, [r3, #0]
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b004      	add	sp, #16
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40012c00 	.word	0x40012c00
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40014000 	.word	0x40014000

08001d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2202      	movs	r2, #2
 8001d64:	4013      	ands	r3, r2
 8001d66:	d021      	beq.n	8001dac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d01d      	beq.n	8001dac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2203      	movs	r2, #3
 8001d76:	4252      	negs	r2, r2
 8001d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2203      	movs	r2, #3
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d004      	beq.n	8001d96 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f7fe fbf4 	bl	800057c <HAL_TIM_IC_CaptureCallback>
 8001d94:	e007      	b.n	8001da6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 fa77 	bl	800228c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f000 fa7b 	bl	800229c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2204      	movs	r2, #4
 8001db0:	4013      	ands	r3, r2
 8001db2:	d022      	beq.n	8001dfa <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2204      	movs	r2, #4
 8001db8:	4013      	ands	r3, r2
 8001dba:	d01e      	beq.n	8001dfa <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2205      	movs	r2, #5
 8001dc2:	4252      	negs	r2, r2
 8001dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	23c0      	movs	r3, #192	@ 0xc0
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d004      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7fe fbcd 	bl	800057c <HAL_TIM_IC_CaptureCallback>
 8001de2:	e007      	b.n	8001df4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	0018      	movs	r0, r3
 8001de8:	f000 fa50 	bl	800228c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 fa54 	bl	800229c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d021      	beq.n	8001e46 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2208      	movs	r2, #8
 8001e06:	4013      	ands	r3, r2
 8001e08:	d01d      	beq.n	8001e46 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2209      	movs	r2, #9
 8001e10:	4252      	negs	r2, r2
 8001e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2204      	movs	r2, #4
 8001e18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2203      	movs	r2, #3
 8001e22:	4013      	ands	r3, r2
 8001e24:	d004      	beq.n	8001e30 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7fe fba7 	bl	800057c <HAL_TIM_IC_CaptureCallback>
 8001e2e:	e007      	b.n	8001e40 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 fa2a 	bl	800228c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 fa2e 	bl	800229c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2210      	movs	r2, #16
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d022      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2210      	movs	r2, #16
 8001e52:	4013      	ands	r3, r2
 8001e54:	d01e      	beq.n	8001e94 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2211      	movs	r2, #17
 8001e5c:	4252      	negs	r2, r2
 8001e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2208      	movs	r2, #8
 8001e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69da      	ldr	r2, [r3, #28]
 8001e6c:	23c0      	movs	r3, #192	@ 0xc0
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4013      	ands	r3, r2
 8001e72:	d004      	beq.n	8001e7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	0018      	movs	r0, r3
 8001e78:	f7fe fb80 	bl	800057c <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e007      	b.n	8001e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f000 fa03 	bl	800228c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 fa07 	bl	800229c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2201      	movs	r2, #1
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d00c      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d008      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	4252      	negs	r2, r2
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f000 f9e3 	bl	800227c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2280      	movs	r2, #128	@ 0x80
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d00c      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2280      	movs	r2, #128	@ 0x80
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d008      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2281      	movs	r2, #129	@ 0x81
 8001ecc:	4252      	negs	r2, r2
 8001ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f000 fcb4 	bl	8002840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2240      	movs	r2, #64	@ 0x40
 8001edc:	4013      	ands	r3, r2
 8001ede:	d00c      	beq.n	8001efa <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2240      	movs	r2, #64	@ 0x40
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d008      	beq.n	8001efa <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2241      	movs	r2, #65	@ 0x41
 8001eee:	4252      	negs	r2, r2
 8001ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f000 f9d9 	bl	80022ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2220      	movs	r2, #32
 8001efe:	4013      	ands	r3, r2
 8001f00:	d00c      	beq.n	8001f1c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2220      	movs	r2, #32
 8001f06:	4013      	ands	r3, r2
 8001f08:	d008      	beq.n	8001f1c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2221      	movs	r2, #33	@ 0x21
 8001f10:	4252      	negs	r2, r2
 8001f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f000 fc8a 	bl	8002830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f1c:	46c0      	nop			@ (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b004      	add	sp, #16
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f30:	2317      	movs	r3, #23
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	223c      	movs	r2, #60	@ 0x3c
 8001f3c:	5c9b      	ldrb	r3, [r3, r2]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_TIM_IC_ConfigChannel+0x22>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e08c      	b.n	8002060 <HAL_TIM_IC_ConfigChannel+0x13c>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	223c      	movs	r2, #60	@ 0x3c
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d11b      	bne.n	8001f8c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8001f64:	f000 fa2e 	bl	80023c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	210c      	movs	r1, #12
 8001f74:	438a      	bics	r2, r1
 8001f76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6999      	ldr	r1, [r3, #24]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	619a      	str	r2, [r3, #24]
 8001f8a:	e062      	b.n	8002052 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d11c      	bne.n	8001fcc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8001fa2:	f000 fa95 	bl	80024d0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	492d      	ldr	r1, [pc, #180]	@ (8002068 <HAL_TIM_IC_ConfigChannel+0x144>)
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6999      	ldr	r1, [r3, #24]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	021a      	lsls	r2, r3, #8
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	619a      	str	r2, [r3, #24]
 8001fca:	e042      	b.n	8002052 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d11b      	bne.n	800200a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8001fe2:	f000 fae9 	bl	80025b8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	210c      	movs	r1, #12
 8001ff2:	438a      	bics	r2, r1
 8001ff4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69d9      	ldr	r1, [r3, #28]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	61da      	str	r2, [r3, #28]
 8002008:	e023      	b.n	8002052 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0c      	cmp	r3, #12
 800200e:	d11c      	bne.n	800204a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002020:	f000 fb0a 	bl	8002638 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	490e      	ldr	r1, [pc, #56]	@ (8002068 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002030:	400a      	ands	r2, r1
 8002032:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	69d9      	ldr	r1, [r3, #28]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	021a      	lsls	r2, r3, #8
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	61da      	str	r2, [r3, #28]
 8002048:	e003      	b.n	8002052 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800204a:	2317      	movs	r3, #23
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	223c      	movs	r2, #60	@ 0x3c
 8002056:	2100      	movs	r1, #0
 8002058:	5499      	strb	r1, [r3, r2]

  return status;
 800205a:	2317      	movs	r3, #23
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	781b      	ldrb	r3, [r3, #0]
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	b006      	add	sp, #24
 8002066:	bd80      	pop	{r7, pc}
 8002068:	fffff3ff 	.word	0xfffff3ff

0800206c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002076:	230f      	movs	r3, #15
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	223c      	movs	r2, #60	@ 0x3c
 8002082:	5c9b      	ldrb	r3, [r3, r2]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_TIM_ConfigClockSource+0x20>
 8002088:	2302      	movs	r3, #2
 800208a:	e0bc      	b.n	8002206 <HAL_TIM_ConfigClockSource+0x19a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	223c      	movs	r2, #60	@ 0x3c
 8002090:	2101      	movs	r1, #1
 8002092:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	223d      	movs	r2, #61	@ 0x3d
 8002098:	2102      	movs	r1, #2
 800209a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2277      	movs	r2, #119	@ 0x77
 80020a8:	4393      	bics	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4a58      	ldr	r2, [pc, #352]	@ (8002210 <HAL_TIM_ConfigClockSource+0x1a4>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2280      	movs	r2, #128	@ 0x80
 80020c2:	0192      	lsls	r2, r2, #6
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d040      	beq.n	800214a <HAL_TIM_ConfigClockSource+0xde>
 80020c8:	2280      	movs	r2, #128	@ 0x80
 80020ca:	0192      	lsls	r2, r2, #6
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d900      	bls.n	80020d2 <HAL_TIM_ConfigClockSource+0x66>
 80020d0:	e088      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x178>
 80020d2:	2280      	movs	r2, #128	@ 0x80
 80020d4:	0152      	lsls	r2, r2, #5
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d100      	bne.n	80020dc <HAL_TIM_ConfigClockSource+0x70>
 80020da:	e088      	b.n	80021ee <HAL_TIM_ConfigClockSource+0x182>
 80020dc:	2280      	movs	r2, #128	@ 0x80
 80020de:	0152      	lsls	r2, r2, #5
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d900      	bls.n	80020e6 <HAL_TIM_ConfigClockSource+0x7a>
 80020e4:	e07e      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x178>
 80020e6:	2b70      	cmp	r3, #112	@ 0x70
 80020e8:	d018      	beq.n	800211c <HAL_TIM_ConfigClockSource+0xb0>
 80020ea:	d900      	bls.n	80020ee <HAL_TIM_ConfigClockSource+0x82>
 80020ec:	e07a      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x178>
 80020ee:	2b60      	cmp	r3, #96	@ 0x60
 80020f0:	d04f      	beq.n	8002192 <HAL_TIM_ConfigClockSource+0x126>
 80020f2:	d900      	bls.n	80020f6 <HAL_TIM_ConfigClockSource+0x8a>
 80020f4:	e076      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x178>
 80020f6:	2b50      	cmp	r3, #80	@ 0x50
 80020f8:	d03b      	beq.n	8002172 <HAL_TIM_ConfigClockSource+0x106>
 80020fa:	d900      	bls.n	80020fe <HAL_TIM_ConfigClockSource+0x92>
 80020fc:	e072      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x178>
 80020fe:	2b40      	cmp	r3, #64	@ 0x40
 8002100:	d057      	beq.n	80021b2 <HAL_TIM_ConfigClockSource+0x146>
 8002102:	d900      	bls.n	8002106 <HAL_TIM_ConfigClockSource+0x9a>
 8002104:	e06e      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x178>
 8002106:	2b30      	cmp	r3, #48	@ 0x30
 8002108:	d063      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0x166>
 800210a:	d86b      	bhi.n	80021e4 <HAL_TIM_ConfigClockSource+0x178>
 800210c:	2b20      	cmp	r3, #32
 800210e:	d060      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0x166>
 8002110:	d868      	bhi.n	80021e4 <HAL_TIM_ConfigClockSource+0x178>
 8002112:	2b00      	cmp	r3, #0
 8002114:	d05d      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0x166>
 8002116:	2b10      	cmp	r3, #16
 8002118:	d05b      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0x166>
 800211a:	e063      	b.n	80021e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800212c:	f000 fae4 	bl	80026f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2277      	movs	r2, #119	@ 0x77
 800213c:	4313      	orrs	r3, r2
 800213e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	609a      	str	r2, [r3, #8]
      break;
 8002148:	e052      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800215a:	f000 facd 	bl	80026f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2180      	movs	r1, #128	@ 0x80
 800216a:	01c9      	lsls	r1, r1, #7
 800216c:	430a      	orrs	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
      break;
 8002170:	e03e      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800217e:	001a      	movs	r2, r3
 8002180:	f000 f978 	bl	8002474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2150      	movs	r1, #80	@ 0x50
 800218a:	0018      	movs	r0, r3
 800218c:	f000 fa9a 	bl	80026c4 <TIM_ITRx_SetConfig>
      break;
 8002190:	e02e      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800219e:	001a      	movs	r2, r3
 80021a0:	f000 f9d8 	bl	8002554 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2160      	movs	r1, #96	@ 0x60
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 fa8a 	bl	80026c4 <TIM_ITRx_SetConfig>
      break;
 80021b0:	e01e      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021be:	001a      	movs	r2, r3
 80021c0:	f000 f958 	bl	8002474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2140      	movs	r1, #64	@ 0x40
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 fa7a 	bl	80026c4 <TIM_ITRx_SetConfig>
      break;
 80021d0:	e00e      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	0019      	movs	r1, r3
 80021dc:	0010      	movs	r0, r2
 80021de:	f000 fa71 	bl	80026c4 <TIM_ITRx_SetConfig>
      break;
 80021e2:	e005      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80021e4:	230f      	movs	r3, #15
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
      break;
 80021ec:	e000      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80021ee:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	223d      	movs	r2, #61	@ 0x3d
 80021f4:	2101      	movs	r1, #1
 80021f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	223c      	movs	r2, #60	@ 0x3c
 80021fc:	2100      	movs	r1, #0
 80021fe:	5499      	strb	r1, [r3, r2]

  return status;
 8002200:	230f      	movs	r3, #15
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	781b      	ldrb	r3, [r3, #0]
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b004      	add	sp, #16
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	ffff00ff 	.word	0xffff00ff

08002214 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b0c      	cmp	r3, #12
 8002226:	d01e      	beq.n	8002266 <HAL_TIM_ReadCapturedValue+0x52>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b0c      	cmp	r3, #12
 800222c:	d820      	bhi.n	8002270 <HAL_TIM_ReadCapturedValue+0x5c>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d013      	beq.n	800225c <HAL_TIM_ReadCapturedValue+0x48>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b08      	cmp	r3, #8
 8002238:	d81a      	bhi.n	8002270 <HAL_TIM_ReadCapturedValue+0x5c>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_TIM_ReadCapturedValue+0x34>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b04      	cmp	r3, #4
 8002244:	d005      	beq.n	8002252 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8002246:	e013      	b.n	8002270 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800224e:	60fb      	str	r3, [r7, #12]
      break;
 8002250:	e00f      	b.n	8002272 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002258:	60fb      	str	r3, [r7, #12]
      break;
 800225a:	e00a      	b.n	8002272 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002262:	60fb      	str	r3, [r7, #12]
      break;
 8002264:	e005      	b.n	8002272 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226c:	60fb      	str	r3, [r7, #12]
      break;
 800226e:	e000      	b.n	8002272 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8002270:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b004      	add	sp, #16
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002284:	46c0      	nop			@ (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	b002      	add	sp, #8
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002294:	46c0      	nop			@ (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022a4:	46c0      	nop			@ (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022b4:	46c0      	nop			@ (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b002      	add	sp, #8
 80022ba:	bd80      	pop	{r7, pc}

080022bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a36      	ldr	r2, [pc, #216]	@ (80023a8 <TIM_Base_SetConfig+0xec>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d003      	beq.n	80022dc <TIM_Base_SetConfig+0x20>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a35      	ldr	r2, [pc, #212]	@ (80023ac <TIM_Base_SetConfig+0xf0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d108      	bne.n	80022ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2270      	movs	r2, #112	@ 0x70
 80022e0:	4393      	bics	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a2d      	ldr	r2, [pc, #180]	@ (80023a8 <TIM_Base_SetConfig+0xec>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <TIM_Base_SetConfig+0x62>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a2c      	ldr	r2, [pc, #176]	@ (80023ac <TIM_Base_SetConfig+0xf0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00f      	beq.n	800231e <TIM_Base_SetConfig+0x62>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a2b      	ldr	r2, [pc, #172]	@ (80023b0 <TIM_Base_SetConfig+0xf4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00b      	beq.n	800231e <TIM_Base_SetConfig+0x62>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a2a      	ldr	r2, [pc, #168]	@ (80023b4 <TIM_Base_SetConfig+0xf8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <TIM_Base_SetConfig+0x62>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a29      	ldr	r2, [pc, #164]	@ (80023b8 <TIM_Base_SetConfig+0xfc>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d003      	beq.n	800231e <TIM_Base_SetConfig+0x62>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a28      	ldr	r2, [pc, #160]	@ (80023bc <TIM_Base_SetConfig+0x100>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d108      	bne.n	8002330 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a27      	ldr	r2, [pc, #156]	@ (80023c0 <TIM_Base_SetConfig+0x104>)
 8002322:	4013      	ands	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2280      	movs	r2, #128	@ 0x80
 8002334:	4393      	bics	r3, r2
 8002336:	001a      	movs	r2, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a13      	ldr	r2, [pc, #76]	@ (80023a8 <TIM_Base_SetConfig+0xec>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00b      	beq.n	8002376 <TIM_Base_SetConfig+0xba>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a14      	ldr	r2, [pc, #80]	@ (80023b4 <TIM_Base_SetConfig+0xf8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d007      	beq.n	8002376 <TIM_Base_SetConfig+0xba>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a13      	ldr	r2, [pc, #76]	@ (80023b8 <TIM_Base_SetConfig+0xfc>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d003      	beq.n	8002376 <TIM_Base_SetConfig+0xba>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a12      	ldr	r2, [pc, #72]	@ (80023bc <TIM_Base_SetConfig+0x100>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d103      	bne.n	800237e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2201      	movs	r2, #1
 800238a:	4013      	ands	r3, r2
 800238c:	2b01      	cmp	r3, #1
 800238e:	d106      	bne.n	800239e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2201      	movs	r2, #1
 8002396:	4393      	bics	r3, r2
 8002398:	001a      	movs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	611a      	str	r2, [r3, #16]
  }
}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b004      	add	sp, #16
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	40000400 	.word	0x40000400
 80023b0:	40002000 	.word	0x40002000
 80023b4:	40014000 	.word	0x40014000
 80023b8:	40014400 	.word	0x40014400
 80023bc:	40014800 	.word	0x40014800
 80023c0:	fffffcff 	.word	0xfffffcff

080023c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	2201      	movs	r2, #1
 80023de:	4393      	bics	r3, r2
 80023e0:	001a      	movs	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002468 <TIM_TI1_SetConfig+0xa4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d007      	beq.n	8002404 <TIM_TI1_SetConfig+0x40>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4a1d      	ldr	r2, [pc, #116]	@ (800246c <TIM_TI1_SetConfig+0xa8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d003      	beq.n	8002404 <TIM_TI1_SetConfig+0x40>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <TIM_TI1_SetConfig+0xac>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d101      	bne.n	8002408 <TIM_TI1_SetConfig+0x44>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <TIM_TI1_SetConfig+0x46>
 8002408:	2300      	movs	r3, #0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2203      	movs	r2, #3
 8002412:	4393      	bics	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4313      	orrs	r3, r2
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e003      	b.n	8002428 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2201      	movs	r2, #1
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	22f0      	movs	r2, #240	@ 0xf0
 800242c:	4393      	bics	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	22ff      	movs	r2, #255	@ 0xff
 8002436:	4013      	ands	r3, r2
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	220a      	movs	r2, #10
 8002442:	4393      	bics	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	220a      	movs	r2, #10
 800244a:	4013      	ands	r3, r2
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	621a      	str	r2, [r3, #32]
}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b006      	add	sp, #24
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			@ (mov r8, r8)
 8002468:	40012c00 	.word	0x40012c00
 800246c:	40000400 	.word	0x40000400
 8002470:	40014000 	.word	0x40014000

08002474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	2201      	movs	r2, #1
 800248c:	4393      	bics	r3, r2
 800248e:	001a      	movs	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	22f0      	movs	r2, #240	@ 0xf0
 800249e:	4393      	bics	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	220a      	movs	r2, #10
 80024b0:	4393      	bics	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	621a      	str	r2, [r3, #32]
}
 80024c8:	46c0      	nop			@ (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b006      	add	sp, #24
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	2210      	movs	r2, #16
 80024ea:	4393      	bics	r3, r2
 80024ec:	001a      	movs	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4a14      	ldr	r2, [pc, #80]	@ (800254c <TIM_TI2_SetConfig+0x7c>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4a10      	ldr	r2, [pc, #64]	@ (8002550 <TIM_TI2_SetConfig+0x80>)
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	031b      	lsls	r3, r3, #12
 8002516:	041b      	lsls	r3, r3, #16
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	22a0      	movs	r2, #160	@ 0xa0
 8002524:	4393      	bics	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	22a0      	movs	r2, #160	@ 0xa0
 800252e:	4013      	ands	r3, r2
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	4313      	orrs	r3, r2
 8002534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	621a      	str	r2, [r3, #32]
}
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	b006      	add	sp, #24
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			@ (mov r8, r8)
 800254c:	fffffcff 	.word	0xfffffcff
 8002550:	ffff0fff 	.word	0xffff0fff

08002554 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	2210      	movs	r2, #16
 800256c:	4393      	bics	r3, r2
 800256e:	001a      	movs	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4a0d      	ldr	r2, [pc, #52]	@ (80025b4 <TIM_TI2_ConfigInputStage+0x60>)
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	031b      	lsls	r3, r3, #12
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	22a0      	movs	r2, #160	@ 0xa0
 8002590:	4393      	bics	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	621a      	str	r2, [r3, #32]
}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b006      	add	sp, #24
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			@ (mov r8, r8)
 80025b4:	ffff0fff 	.word	0xffff0fff

080025b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4a17      	ldr	r2, [pc, #92]	@ (8002630 <TIM_TI3_SetConfig+0x78>)
 80025d2:	401a      	ands	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2203      	movs	r2, #3
 80025e2:	4393      	bics	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	22f0      	movs	r2, #240	@ 0xf0
 80025f2:	4393      	bics	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	22ff      	movs	r2, #255	@ 0xff
 80025fc:	4013      	ands	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	4a0b      	ldr	r2, [pc, #44]	@ (8002634 <TIM_TI3_SetConfig+0x7c>)
 8002608:	4013      	ands	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	021a      	lsls	r2, r3, #8
 8002610:	23a0      	movs	r3, #160	@ 0xa0
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	4013      	ands	r3, r2
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	621a      	str	r2, [r3, #32]
}
 8002628:	46c0      	nop			@ (mov r8, r8)
 800262a:	46bd      	mov	sp, r7
 800262c:	b006      	add	sp, #24
 800262e:	bd80      	pop	{r7, pc}
 8002630:	fffffeff 	.word	0xfffffeff
 8002634:	fffff5ff 	.word	0xfffff5ff

08002638 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a18      	ldr	r2, [pc, #96]	@ (80026b4 <TIM_TI4_SetConfig+0x7c>)
 8002652:	401a      	ands	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4a15      	ldr	r2, [pc, #84]	@ (80026b8 <TIM_TI4_SetConfig+0x80>)
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4a12      	ldr	r2, [pc, #72]	@ (80026bc <TIM_TI4_SetConfig+0x84>)
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	031b      	lsls	r3, r3, #12
 800267c:	041b      	lsls	r3, r3, #16
 800267e:	0c1b      	lsrs	r3, r3, #16
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	4a0d      	ldr	r2, [pc, #52]	@ (80026c0 <TIM_TI4_SetConfig+0x88>)
 800268a:	4013      	ands	r3, r2
 800268c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	031a      	lsls	r2, r3, #12
 8002692:	23a0      	movs	r3, #160	@ 0xa0
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	4013      	ands	r3, r2
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	621a      	str	r2, [r3, #32]
}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b006      	add	sp, #24
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	ffffefff 	.word	0xffffefff
 80026b8:	fffffcff 	.word	0xfffffcff
 80026bc:	ffff0fff 	.word	0xffff0fff
 80026c0:	ffff5fff 	.word	0xffff5fff

080026c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2270      	movs	r2, #112	@ 0x70
 80026d8:	4393      	bics	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	2207      	movs	r2, #7
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	609a      	str	r2, [r3, #8]
}
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b004      	add	sp, #16
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	4a09      	ldr	r2, [pc, #36]	@ (8002734 <TIM_ETR_SetConfig+0x3c>)
 8002710:	4013      	ands	r3, r2
 8002712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	021a      	lsls	r2, r3, #8
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	431a      	orrs	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	609a      	str	r2, [r3, #8]
}
 800272c:	46c0      	nop			@ (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b006      	add	sp, #24
 8002732:	bd80      	pop	{r7, pc}
 8002734:	ffff00ff 	.word	0xffff00ff

08002738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	221f      	movs	r2, #31
 8002748:	4013      	ands	r3, r2
 800274a:	2201      	movs	r2, #1
 800274c:	409a      	lsls	r2, r3
 800274e:	0013      	movs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	43d2      	mvns	r2, r2
 800275a:	401a      	ands	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a1a      	ldr	r2, [r3, #32]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	211f      	movs	r1, #31
 8002768:	400b      	ands	r3, r1
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4099      	lsls	r1, r3
 800276e:	000b      	movs	r3, r1
 8002770:	431a      	orrs	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	621a      	str	r2, [r3, #32]
}
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b006      	add	sp, #24
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	223c      	movs	r2, #60	@ 0x3c
 800278e:	5c9b      	ldrb	r3, [r3, r2]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002794:	2302      	movs	r3, #2
 8002796:	e041      	b.n	800281c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	223c      	movs	r2, #60	@ 0x3c
 800279c:	2101      	movs	r1, #1
 800279e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	223d      	movs	r2, #61	@ 0x3d
 80027a4:	2102      	movs	r1, #2
 80027a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2270      	movs	r2, #112	@ 0x70
 80027bc:	4393      	bics	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a13      	ldr	r2, [pc, #76]	@ (8002824 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a11      	ldr	r2, [pc, #68]	@ (8002828 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d004      	beq.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a10      	ldr	r2, [pc, #64]	@ (800282c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d10c      	bne.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2280      	movs	r2, #128	@ 0x80
 80027f4:	4393      	bics	r3, r2
 80027f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	223d      	movs	r2, #61	@ 0x3d
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	223c      	movs	r2, #60	@ 0x3c
 8002816:	2100      	movs	r1, #0
 8002818:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	b004      	add	sp, #16
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40000400 	.word	0x40000400
 800282c:	40014000 	.word	0x40014000

08002830 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002838:	46c0      	nop			@ (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b002      	add	sp, #8
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002848:	46c0      	nop			@ (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e044      	b.n	80028ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2278      	movs	r2, #120	@ 0x78
 800286e:	2100      	movs	r1, #0
 8002870:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f7fd ff97 	bl	80007a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2224      	movs	r2, #36	@ 0x24
 800287e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2101      	movs	r1, #1
 800288c:	438a      	bics	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	0018      	movs	r0, r3
 800289c:	f000 fa0c 	bl	8002cb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 f8c8 	bl	8002a38 <UART_SetConfig>
 80028a8:	0003      	movs	r3, r0
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e01c      	b.n	80028ec <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	490d      	ldr	r1, [pc, #52]	@ (80028f4 <HAL_UART_Init+0xa4>)
 80028be:	400a      	ands	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2108      	movs	r1, #8
 80028ce:	438a      	bics	r2, r1
 80028d0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2101      	movs	r1, #1
 80028de:	430a      	orrs	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 fa9b 	bl	8002e20 <UART_CheckIdleState>
 80028ea:	0003      	movs	r3, r0
}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b002      	add	sp, #8
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	fffff7ff 	.word	0xfffff7ff

080028f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	@ 0x28
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	1dbb      	adds	r3, r7, #6
 8002906:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800290c:	2b20      	cmp	r3, #32
 800290e:	d000      	beq.n	8002912 <HAL_UART_Transmit+0x1a>
 8002910:	e08c      	b.n	8002a2c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_UART_Transmit+0x28>
 8002918:	1dbb      	adds	r3, r7, #6
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e084      	b.n	8002a2e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	2380      	movs	r3, #128	@ 0x80
 800292a:	015b      	lsls	r3, r3, #5
 800292c:	429a      	cmp	r2, r3
 800292e:	d109      	bne.n	8002944 <HAL_UART_Transmit+0x4c>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d105      	bne.n	8002944 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2201      	movs	r2, #1
 800293c:	4013      	ands	r3, r2
 800293e:	d001      	beq.n	8002944 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e074      	b.n	8002a2e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2284      	movs	r2, #132	@ 0x84
 8002948:	2100      	movs	r1, #0
 800294a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2221      	movs	r2, #33	@ 0x21
 8002950:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002952:	f7fe f8a7 	bl	8000aa4 <HAL_GetTick>
 8002956:	0003      	movs	r3, r0
 8002958:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1dba      	adds	r2, r7, #6
 800295e:	2150      	movs	r1, #80	@ 0x50
 8002960:	8812      	ldrh	r2, [r2, #0]
 8002962:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1dba      	adds	r2, r7, #6
 8002968:	2152      	movs	r1, #82	@ 0x52
 800296a:	8812      	ldrh	r2, [r2, #0]
 800296c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	2380      	movs	r3, #128	@ 0x80
 8002974:	015b      	lsls	r3, r3, #5
 8002976:	429a      	cmp	r2, r3
 8002978:	d108      	bne.n	800298c <HAL_UART_Transmit+0x94>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d104      	bne.n	800298c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	e003      	b.n	8002994 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002990:	2300      	movs	r3, #0
 8002992:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002994:	e02f      	b.n	80029f6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	0013      	movs	r3, r2
 80029a0:	2200      	movs	r2, #0
 80029a2:	2180      	movs	r1, #128	@ 0x80
 80029a4:	f000 fae4 	bl	8002f70 <UART_WaitOnFlagUntilTimeout>
 80029a8:	1e03      	subs	r3, r0, #0
 80029aa:	d004      	beq.n	80029b6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e03b      	b.n	8002a2e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10b      	bne.n	80029d4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	881a      	ldrh	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	05d2      	lsls	r2, r2, #23
 80029c6:	0dd2      	lsrs	r2, r2, #23
 80029c8:	b292      	uxth	r2, r2
 80029ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	3302      	adds	r3, #2
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e007      	b.n	80029e4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	781a      	ldrb	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2252      	movs	r2, #82	@ 0x52
 80029e8:	5a9b      	ldrh	r3, [r3, r2]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b299      	uxth	r1, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2252      	movs	r2, #82	@ 0x52
 80029f4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2252      	movs	r2, #82	@ 0x52
 80029fa:	5a9b      	ldrh	r3, [r3, r2]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1c9      	bne.n	8002996 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	0013      	movs	r3, r2
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2140      	movs	r1, #64	@ 0x40
 8002a10:	f000 faae 	bl	8002f70 <UART_WaitOnFlagUntilTimeout>
 8002a14:	1e03      	subs	r3, r0, #0
 8002a16:	d004      	beq.n	8002a22 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e005      	b.n	8002a2e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e000      	b.n	8002a2e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
  }
}
 8002a2e:	0018      	movs	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b008      	add	sp, #32
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a40:	231e      	movs	r3, #30
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a8d      	ldr	r2, [pc, #564]	@ (8002c9c <UART_SetConfig+0x264>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4a88      	ldr	r2, [pc, #544]	@ (8002ca0 <UART_SetConfig+0x268>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a7f      	ldr	r2, [pc, #508]	@ (8002ca4 <UART_SetConfig+0x26c>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a7b      	ldr	r2, [pc, #492]	@ (8002ca8 <UART_SetConfig+0x270>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d127      	bne.n	8002b0e <UART_SetConfig+0xd6>
 8002abe:	4b7b      	ldr	r3, [pc, #492]	@ (8002cac <UART_SetConfig+0x274>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d00d      	beq.n	8002ae6 <UART_SetConfig+0xae>
 8002aca:	d81b      	bhi.n	8002b04 <UART_SetConfig+0xcc>
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d014      	beq.n	8002afa <UART_SetConfig+0xc2>
 8002ad0:	d818      	bhi.n	8002b04 <UART_SetConfig+0xcc>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <UART_SetConfig+0xa4>
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d00a      	beq.n	8002af0 <UART_SetConfig+0xb8>
 8002ada:	e013      	b.n	8002b04 <UART_SetConfig+0xcc>
 8002adc:	231f      	movs	r3, #31
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e021      	b.n	8002b2a <UART_SetConfig+0xf2>
 8002ae6:	231f      	movs	r3, #31
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	2202      	movs	r2, #2
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e01c      	b.n	8002b2a <UART_SetConfig+0xf2>
 8002af0:	231f      	movs	r3, #31
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	2204      	movs	r2, #4
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e017      	b.n	8002b2a <UART_SetConfig+0xf2>
 8002afa:	231f      	movs	r3, #31
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	2208      	movs	r2, #8
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	e012      	b.n	8002b2a <UART_SetConfig+0xf2>
 8002b04:	231f      	movs	r3, #31
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	2210      	movs	r2, #16
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e00d      	b.n	8002b2a <UART_SetConfig+0xf2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a67      	ldr	r2, [pc, #412]	@ (8002cb0 <UART_SetConfig+0x278>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d104      	bne.n	8002b22 <UART_SetConfig+0xea>
 8002b18:	231f      	movs	r3, #31
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	e003      	b.n	8002b2a <UART_SetConfig+0xf2>
 8002b22:	231f      	movs	r3, #31
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2210      	movs	r2, #16
 8002b28:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d15c      	bne.n	8002bf0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002b36:	231f      	movs	r3, #31
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d015      	beq.n	8002b6c <UART_SetConfig+0x134>
 8002b40:	dc18      	bgt.n	8002b74 <UART_SetConfig+0x13c>
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d00d      	beq.n	8002b62 <UART_SetConfig+0x12a>
 8002b46:	dc15      	bgt.n	8002b74 <UART_SetConfig+0x13c>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <UART_SetConfig+0x11a>
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d005      	beq.n	8002b5c <UART_SetConfig+0x124>
 8002b50:	e010      	b.n	8002b74 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b52:	f7fe fe65 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 8002b56:	0003      	movs	r3, r0
 8002b58:	61bb      	str	r3, [r7, #24]
        break;
 8002b5a:	e012      	b.n	8002b82 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b5c:	4b55      	ldr	r3, [pc, #340]	@ (8002cb4 <UART_SetConfig+0x27c>)
 8002b5e:	61bb      	str	r3, [r7, #24]
        break;
 8002b60:	e00f      	b.n	8002b82 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b62:	f7fe fdfd 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 8002b66:	0003      	movs	r3, r0
 8002b68:	61bb      	str	r3, [r7, #24]
        break;
 8002b6a:	e00a      	b.n	8002b82 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b6c:	2380      	movs	r3, #128	@ 0x80
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	61bb      	str	r3, [r7, #24]
        break;
 8002b72:	e006      	b.n	8002b82 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b78:	231e      	movs	r3, #30
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
        break;
 8002b80:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d100      	bne.n	8002b8a <UART_SetConfig+0x152>
 8002b88:	e07a      	b.n	8002c80 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	005a      	lsls	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	085b      	lsrs	r3, r3, #1
 8002b94:	18d2      	adds	r2, r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	0010      	movs	r0, r2
 8002b9e:	f7fd fabd 	bl	800011c <__udivsi3>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d91c      	bls.n	8002be6 <UART_SetConfig+0x1ae>
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	2380      	movs	r3, #128	@ 0x80
 8002bb0:	025b      	lsls	r3, r3, #9
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d217      	bcs.n	8002be6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	200e      	movs	r0, #14
 8002bbc:	183b      	adds	r3, r7, r0
 8002bbe:	210f      	movs	r1, #15
 8002bc0:	438a      	bics	r2, r1
 8002bc2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2207      	movs	r2, #7
 8002bcc:	4013      	ands	r3, r2
 8002bce:	b299      	uxth	r1, r3
 8002bd0:	183b      	adds	r3, r7, r0
 8002bd2:	183a      	adds	r2, r7, r0
 8002bd4:	8812      	ldrh	r2, [r2, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	183a      	adds	r2, r7, r0
 8002be0:	8812      	ldrh	r2, [r2, #0]
 8002be2:	60da      	str	r2, [r3, #12]
 8002be4:	e04c      	b.n	8002c80 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002be6:	231e      	movs	r3, #30
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e047      	b.n	8002c80 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bf0:	231f      	movs	r3, #31
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d015      	beq.n	8002c26 <UART_SetConfig+0x1ee>
 8002bfa:	dc18      	bgt.n	8002c2e <UART_SetConfig+0x1f6>
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d00d      	beq.n	8002c1c <UART_SetConfig+0x1e4>
 8002c00:	dc15      	bgt.n	8002c2e <UART_SetConfig+0x1f6>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <UART_SetConfig+0x1d4>
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d005      	beq.n	8002c16 <UART_SetConfig+0x1de>
 8002c0a:	e010      	b.n	8002c2e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c0c:	f7fe fe08 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 8002c10:	0003      	movs	r3, r0
 8002c12:	61bb      	str	r3, [r7, #24]
        break;
 8002c14:	e012      	b.n	8002c3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c16:	4b27      	ldr	r3, [pc, #156]	@ (8002cb4 <UART_SetConfig+0x27c>)
 8002c18:	61bb      	str	r3, [r7, #24]
        break;
 8002c1a:	e00f      	b.n	8002c3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c1c:	f7fe fda0 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 8002c20:	0003      	movs	r3, r0
 8002c22:	61bb      	str	r3, [r7, #24]
        break;
 8002c24:	e00a      	b.n	8002c3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c26:	2380      	movs	r3, #128	@ 0x80
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	61bb      	str	r3, [r7, #24]
        break;
 8002c2c:	e006      	b.n	8002c3c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c32:	231e      	movs	r3, #30
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
        break;
 8002c3a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01e      	beq.n	8002c80 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	085a      	lsrs	r2, r3, #1
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	18d2      	adds	r2, r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	0019      	movs	r1, r3
 8002c52:	0010      	movs	r0, r2
 8002c54:	f7fd fa62 	bl	800011c <__udivsi3>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b0f      	cmp	r3, #15
 8002c60:	d90a      	bls.n	8002c78 <UART_SetConfig+0x240>
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	2380      	movs	r3, #128	@ 0x80
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d205      	bcs.n	8002c78 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	e003      	b.n	8002c80 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002c78:	231e      	movs	r3, #30
 8002c7a:	18fb      	adds	r3, r7, r3
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002c8c:	231e      	movs	r3, #30
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	781b      	ldrb	r3, [r3, #0]
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b008      	add	sp, #32
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	ffff69f3 	.word	0xffff69f3
 8002ca0:	ffffcfff 	.word	0xffffcfff
 8002ca4:	fffff4ff 	.word	0xfffff4ff
 8002ca8:	40013800 	.word	0x40013800
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40004400 	.word	0x40004400
 8002cb4:	007a1200 	.word	0x007a1200

08002cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d00b      	beq.n	8002ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	@ (8002dfc <UART_AdvFeatureConfig+0x144>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a43      	ldr	r2, [pc, #268]	@ (8002e00 <UART_AdvFeatureConfig+0x148>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	2202      	movs	r2, #2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d00b      	beq.n	8002d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a3b      	ldr	r2, [pc, #236]	@ (8002e04 <UART_AdvFeatureConfig+0x14c>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d00b      	beq.n	8002d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4a34      	ldr	r2, [pc, #208]	@ (8002e08 <UART_AdvFeatureConfig+0x150>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d00b      	beq.n	8002d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4a2c      	ldr	r2, [pc, #176]	@ (8002e0c <UART_AdvFeatureConfig+0x154>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	2220      	movs	r2, #32
 8002d70:	4013      	ands	r3, r2
 8002d72:	d00b      	beq.n	8002d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	4a25      	ldr	r2, [pc, #148]	@ (8002e10 <UART_AdvFeatureConfig+0x158>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	0019      	movs	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	2240      	movs	r2, #64	@ 0x40
 8002d92:	4013      	ands	r3, r2
 8002d94:	d01d      	beq.n	8002dd2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002e14 <UART_AdvFeatureConfig+0x15c>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	0019      	movs	r1, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002db2:	2380      	movs	r3, #128	@ 0x80
 8002db4:	035b      	lsls	r3, r3, #13
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d10b      	bne.n	8002dd2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a15      	ldr	r2, [pc, #84]	@ (8002e18 <UART_AdvFeatureConfig+0x160>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd6:	2280      	movs	r2, #128	@ 0x80
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d00b      	beq.n	8002df4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4a0e      	ldr	r2, [pc, #56]	@ (8002e1c <UART_AdvFeatureConfig+0x164>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]
  }
}
 8002df4:	46c0      	nop			@ (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	ffff7fff 	.word	0xffff7fff
 8002e00:	fffdffff 	.word	0xfffdffff
 8002e04:	fffeffff 	.word	0xfffeffff
 8002e08:	fffbffff 	.word	0xfffbffff
 8002e0c:	ffffefff 	.word	0xffffefff
 8002e10:	ffffdfff 	.word	0xffffdfff
 8002e14:	ffefffff 	.word	0xffefffff
 8002e18:	ff9fffff 	.word	0xff9fffff
 8002e1c:	fff7ffff 	.word	0xfff7ffff

08002e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b092      	sub	sp, #72	@ 0x48
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2284      	movs	r2, #132	@ 0x84
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e30:	f7fd fe38 	bl	8000aa4 <HAL_GetTick>
 8002e34:	0003      	movs	r3, r0
 8002e36:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2208      	movs	r2, #8
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d12c      	bne.n	8002ea0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e48:	2280      	movs	r2, #128	@ 0x80
 8002e4a:	0391      	lsls	r1, r2, #14
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4a46      	ldr	r2, [pc, #280]	@ (8002f68 <UART_CheckIdleState+0x148>)
 8002e50:	9200      	str	r2, [sp, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f000 f88c 	bl	8002f70 <UART_WaitOnFlagUntilTimeout>
 8002e58:	1e03      	subs	r3, r0, #0
 8002e5a:	d021      	beq.n	8002ea0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e66:	2301      	movs	r3, #1
 8002e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6c:	f383 8810 	msr	PRIMASK, r3
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2180      	movs	r1, #128	@ 0x80
 8002e7e:	438a      	bics	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e88:	f383 8810 	msr	PRIMASK, r3
}
 8002e8c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2220      	movs	r2, #32
 8002e92:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2278      	movs	r2, #120	@ 0x78
 8002e98:	2100      	movs	r1, #0
 8002e9a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e05f      	b.n	8002f60 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d146      	bne.n	8002f3c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb0:	2280      	movs	r2, #128	@ 0x80
 8002eb2:	03d1      	lsls	r1, r2, #15
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8002f68 <UART_CheckIdleState+0x148>)
 8002eb8:	9200      	str	r2, [sp, #0]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f000 f858 	bl	8002f70 <UART_WaitOnFlagUntilTimeout>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d03b      	beq.n	8002f3c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ece:	2301      	movs	r3, #1
 8002ed0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f383 8810 	msr	PRIMASK, r3
}
 8002ed8:	46c0      	nop			@ (mov r8, r8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4921      	ldr	r1, [pc, #132]	@ (8002f6c <UART_CheckIdleState+0x14c>)
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f383 8810 	msr	PRIMASK, r3
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8002efa:	61bb      	str	r3, [r7, #24]
  return(result);
 8002efc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f00:	2301      	movs	r3, #1
 8002f02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f383 8810 	msr	PRIMASK, r3
}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2101      	movs	r1, #1
 8002f18:	438a      	bics	r2, r1
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	f383 8810 	msr	PRIMASK, r3
}
 8002f26:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2280      	movs	r2, #128	@ 0x80
 8002f2c:	2120      	movs	r1, #32
 8002f2e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2278      	movs	r2, #120	@ 0x78
 8002f34:	2100      	movs	r1, #0
 8002f36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e011      	b.n	8002f60 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2280      	movs	r2, #128	@ 0x80
 8002f46:	2120      	movs	r1, #32
 8002f48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2278      	movs	r2, #120	@ 0x78
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b010      	add	sp, #64	@ 0x40
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	01ffffff 	.word	0x01ffffff
 8002f6c:	fffffedf 	.word	0xfffffedf

08002f70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	1dfb      	adds	r3, r7, #7
 8002f7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f80:	e051      	b.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	3301      	adds	r3, #1
 8002f86:	d04e      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f88:	f7fd fd8c 	bl	8000aa4 <HAL_GetTick>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d302      	bcc.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e051      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2204      	movs	r2, #4
 8002faa:	4013      	ands	r3, r2
 8002fac:	d03b      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b80      	cmp	r3, #128	@ 0x80
 8002fb2:	d038      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b40      	cmp	r3, #64	@ 0x40
 8002fb8:	d035      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d111      	bne.n	8002fec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2208      	movs	r2, #8
 8002fce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 f83c 	bl	8003050 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2284      	movs	r2, #132	@ 0x84
 8002fdc:	2108      	movs	r1, #8
 8002fde:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2278      	movs	r2, #120	@ 0x78
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e02c      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	2380      	movs	r3, #128	@ 0x80
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d112      	bne.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2280      	movs	r2, #128	@ 0x80
 8003006:	0112      	lsls	r2, r2, #4
 8003008:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	0018      	movs	r0, r3
 800300e:	f000 f81f 	bl	8003050 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2284      	movs	r2, #132	@ 0x84
 8003016:	2120      	movs	r1, #32
 8003018:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2278      	movs	r2, #120	@ 0x78
 800301e:	2100      	movs	r1, #0
 8003020:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e00f      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	425a      	negs	r2, r3
 8003036:	4153      	adcs	r3, r2
 8003038:	b2db      	uxtb	r3, r3
 800303a:	001a      	movs	r2, r3
 800303c:	1dfb      	adds	r3, r7, #7
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d09e      	beq.n	8002f82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08e      	sub	sp, #56	@ 0x38
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003058:	f3ef 8310 	mrs	r3, PRIMASK
 800305c:	617b      	str	r3, [r7, #20]
  return(result);
 800305e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003060:	637b      	str	r3, [r7, #52]	@ 0x34
 8003062:	2301      	movs	r3, #1
 8003064:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	f383 8810 	msr	PRIMASK, r3
}
 800306c:	46c0      	nop			@ (mov r8, r8)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4926      	ldr	r1, [pc, #152]	@ (8003114 <UART_EndRxTransfer+0xc4>)
 800307a:	400a      	ands	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003080:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f383 8810 	msr	PRIMASK, r3
}
 8003088:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308a:	f3ef 8310 	mrs	r3, PRIMASK
 800308e:	623b      	str	r3, [r7, #32]
  return(result);
 8003090:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003092:	633b      	str	r3, [r7, #48]	@ 0x30
 8003094:	2301      	movs	r3, #1
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	f383 8810 	msr	PRIMASK, r3
}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2101      	movs	r1, #1
 80030ac:	438a      	bics	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b6:	f383 8810 	msr	PRIMASK, r3
}
 80030ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d118      	bne.n	80030f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c4:	f3ef 8310 	mrs	r3, PRIMASK
 80030c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80030ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030ce:	2301      	movs	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f383 8810 	msr	PRIMASK, r3
}
 80030d8:	46c0      	nop			@ (mov r8, r8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2110      	movs	r1, #16
 80030e6:	438a      	bics	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f383 8810 	msr	PRIMASK, r3
}
 80030f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2280      	movs	r2, #128	@ 0x80
 80030fa:	2120      	movs	r1, #32
 80030fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800310a:	46c0      	nop			@ (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	b00e      	add	sp, #56	@ 0x38
 8003110:	bd80      	pop	{r7, pc}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	fffffedf 	.word	0xfffffedf

08003118 <std>:
 8003118:	2300      	movs	r3, #0
 800311a:	b510      	push	{r4, lr}
 800311c:	0004      	movs	r4, r0
 800311e:	6003      	str	r3, [r0, #0]
 8003120:	6043      	str	r3, [r0, #4]
 8003122:	6083      	str	r3, [r0, #8]
 8003124:	8181      	strh	r1, [r0, #12]
 8003126:	6643      	str	r3, [r0, #100]	@ 0x64
 8003128:	81c2      	strh	r2, [r0, #14]
 800312a:	6103      	str	r3, [r0, #16]
 800312c:	6143      	str	r3, [r0, #20]
 800312e:	6183      	str	r3, [r0, #24]
 8003130:	0019      	movs	r1, r3
 8003132:	2208      	movs	r2, #8
 8003134:	305c      	adds	r0, #92	@ 0x5c
 8003136:	f000 f90f 	bl	8003358 <memset>
 800313a:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <std+0x50>)
 800313c:	6224      	str	r4, [r4, #32]
 800313e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003140:	4b0a      	ldr	r3, [pc, #40]	@ (800316c <std+0x54>)
 8003142:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003144:	4b0a      	ldr	r3, [pc, #40]	@ (8003170 <std+0x58>)
 8003146:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003148:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <std+0x5c>)
 800314a:	6323      	str	r3, [r4, #48]	@ 0x30
 800314c:	4b0a      	ldr	r3, [pc, #40]	@ (8003178 <std+0x60>)
 800314e:	429c      	cmp	r4, r3
 8003150:	d005      	beq.n	800315e <std+0x46>
 8003152:	4b0a      	ldr	r3, [pc, #40]	@ (800317c <std+0x64>)
 8003154:	429c      	cmp	r4, r3
 8003156:	d002      	beq.n	800315e <std+0x46>
 8003158:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <std+0x68>)
 800315a:	429c      	cmp	r4, r3
 800315c:	d103      	bne.n	8003166 <std+0x4e>
 800315e:	0020      	movs	r0, r4
 8003160:	3058      	adds	r0, #88	@ 0x58
 8003162:	f000 f979 	bl	8003458 <__retarget_lock_init_recursive>
 8003166:	bd10      	pop	{r4, pc}
 8003168:	080032c1 	.word	0x080032c1
 800316c:	080032e9 	.word	0x080032e9
 8003170:	08003321 	.word	0x08003321
 8003174:	0800334d 	.word	0x0800334d
 8003178:	2000016c 	.word	0x2000016c
 800317c:	200001d4 	.word	0x200001d4
 8003180:	2000023c 	.word	0x2000023c

08003184 <stdio_exit_handler>:
 8003184:	b510      	push	{r4, lr}
 8003186:	4a03      	ldr	r2, [pc, #12]	@ (8003194 <stdio_exit_handler+0x10>)
 8003188:	4903      	ldr	r1, [pc, #12]	@ (8003198 <stdio_exit_handler+0x14>)
 800318a:	4804      	ldr	r0, [pc, #16]	@ (800319c <stdio_exit_handler+0x18>)
 800318c:	f000 f86c 	bl	8003268 <_fwalk_sglue>
 8003190:	bd10      	pop	{r4, pc}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	2000000c 	.word	0x2000000c
 8003198:	08003ce9 	.word	0x08003ce9
 800319c:	2000001c 	.word	0x2000001c

080031a0 <cleanup_stdio>:
 80031a0:	6841      	ldr	r1, [r0, #4]
 80031a2:	4b0b      	ldr	r3, [pc, #44]	@ (80031d0 <cleanup_stdio+0x30>)
 80031a4:	b510      	push	{r4, lr}
 80031a6:	0004      	movs	r4, r0
 80031a8:	4299      	cmp	r1, r3
 80031aa:	d001      	beq.n	80031b0 <cleanup_stdio+0x10>
 80031ac:	f000 fd9c 	bl	8003ce8 <_fflush_r>
 80031b0:	68a1      	ldr	r1, [r4, #8]
 80031b2:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <cleanup_stdio+0x34>)
 80031b4:	4299      	cmp	r1, r3
 80031b6:	d002      	beq.n	80031be <cleanup_stdio+0x1e>
 80031b8:	0020      	movs	r0, r4
 80031ba:	f000 fd95 	bl	8003ce8 <_fflush_r>
 80031be:	68e1      	ldr	r1, [r4, #12]
 80031c0:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <cleanup_stdio+0x38>)
 80031c2:	4299      	cmp	r1, r3
 80031c4:	d002      	beq.n	80031cc <cleanup_stdio+0x2c>
 80031c6:	0020      	movs	r0, r4
 80031c8:	f000 fd8e 	bl	8003ce8 <_fflush_r>
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	2000016c 	.word	0x2000016c
 80031d4:	200001d4 	.word	0x200001d4
 80031d8:	2000023c 	.word	0x2000023c

080031dc <global_stdio_init.part.0>:
 80031dc:	b510      	push	{r4, lr}
 80031de:	4b09      	ldr	r3, [pc, #36]	@ (8003204 <global_stdio_init.part.0+0x28>)
 80031e0:	4a09      	ldr	r2, [pc, #36]	@ (8003208 <global_stdio_init.part.0+0x2c>)
 80031e2:	2104      	movs	r1, #4
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	4809      	ldr	r0, [pc, #36]	@ (800320c <global_stdio_init.part.0+0x30>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	f7ff ff95 	bl	8003118 <std>
 80031ee:	2201      	movs	r2, #1
 80031f0:	2109      	movs	r1, #9
 80031f2:	4807      	ldr	r0, [pc, #28]	@ (8003210 <global_stdio_init.part.0+0x34>)
 80031f4:	f7ff ff90 	bl	8003118 <std>
 80031f8:	2202      	movs	r2, #2
 80031fa:	2112      	movs	r1, #18
 80031fc:	4805      	ldr	r0, [pc, #20]	@ (8003214 <global_stdio_init.part.0+0x38>)
 80031fe:	f7ff ff8b 	bl	8003118 <std>
 8003202:	bd10      	pop	{r4, pc}
 8003204:	200002a4 	.word	0x200002a4
 8003208:	08003185 	.word	0x08003185
 800320c:	2000016c 	.word	0x2000016c
 8003210:	200001d4 	.word	0x200001d4
 8003214:	2000023c 	.word	0x2000023c

08003218 <__sfp_lock_acquire>:
 8003218:	b510      	push	{r4, lr}
 800321a:	4802      	ldr	r0, [pc, #8]	@ (8003224 <__sfp_lock_acquire+0xc>)
 800321c:	f000 f91d 	bl	800345a <__retarget_lock_acquire_recursive>
 8003220:	bd10      	pop	{r4, pc}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	200002ad 	.word	0x200002ad

08003228 <__sfp_lock_release>:
 8003228:	b510      	push	{r4, lr}
 800322a:	4802      	ldr	r0, [pc, #8]	@ (8003234 <__sfp_lock_release+0xc>)
 800322c:	f000 f916 	bl	800345c <__retarget_lock_release_recursive>
 8003230:	bd10      	pop	{r4, pc}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	200002ad 	.word	0x200002ad

08003238 <__sinit>:
 8003238:	b510      	push	{r4, lr}
 800323a:	0004      	movs	r4, r0
 800323c:	f7ff ffec 	bl	8003218 <__sfp_lock_acquire>
 8003240:	6a23      	ldr	r3, [r4, #32]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <__sinit+0x14>
 8003246:	f7ff ffef 	bl	8003228 <__sfp_lock_release>
 800324a:	bd10      	pop	{r4, pc}
 800324c:	4b04      	ldr	r3, [pc, #16]	@ (8003260 <__sinit+0x28>)
 800324e:	6223      	str	r3, [r4, #32]
 8003250:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <__sinit+0x2c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f6      	bne.n	8003246 <__sinit+0xe>
 8003258:	f7ff ffc0 	bl	80031dc <global_stdio_init.part.0>
 800325c:	e7f3      	b.n	8003246 <__sinit+0xe>
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	080031a1 	.word	0x080031a1
 8003264:	200002a4 	.word	0x200002a4

08003268 <_fwalk_sglue>:
 8003268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800326a:	0014      	movs	r4, r2
 800326c:	2600      	movs	r6, #0
 800326e:	9000      	str	r0, [sp, #0]
 8003270:	9101      	str	r1, [sp, #4]
 8003272:	68a5      	ldr	r5, [r4, #8]
 8003274:	6867      	ldr	r7, [r4, #4]
 8003276:	3f01      	subs	r7, #1
 8003278:	d504      	bpl.n	8003284 <_fwalk_sglue+0x1c>
 800327a:	6824      	ldr	r4, [r4, #0]
 800327c:	2c00      	cmp	r4, #0
 800327e:	d1f8      	bne.n	8003272 <_fwalk_sglue+0xa>
 8003280:	0030      	movs	r0, r6
 8003282:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003284:	89ab      	ldrh	r3, [r5, #12]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d908      	bls.n	800329c <_fwalk_sglue+0x34>
 800328a:	220e      	movs	r2, #14
 800328c:	5eab      	ldrsh	r3, [r5, r2]
 800328e:	3301      	adds	r3, #1
 8003290:	d004      	beq.n	800329c <_fwalk_sglue+0x34>
 8003292:	0029      	movs	r1, r5
 8003294:	9800      	ldr	r0, [sp, #0]
 8003296:	9b01      	ldr	r3, [sp, #4]
 8003298:	4798      	blx	r3
 800329a:	4306      	orrs	r6, r0
 800329c:	3568      	adds	r5, #104	@ 0x68
 800329e:	e7ea      	b.n	8003276 <_fwalk_sglue+0xe>

080032a0 <iprintf>:
 80032a0:	b40f      	push	{r0, r1, r2, r3}
 80032a2:	b507      	push	{r0, r1, r2, lr}
 80032a4:	4905      	ldr	r1, [pc, #20]	@ (80032bc <iprintf+0x1c>)
 80032a6:	ab04      	add	r3, sp, #16
 80032a8:	6808      	ldr	r0, [r1, #0]
 80032aa:	cb04      	ldmia	r3!, {r2}
 80032ac:	6881      	ldr	r1, [r0, #8]
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	f000 f9fa 	bl	80036a8 <_vfiprintf_r>
 80032b4:	b003      	add	sp, #12
 80032b6:	bc08      	pop	{r3}
 80032b8:	b004      	add	sp, #16
 80032ba:	4718      	bx	r3
 80032bc:	20000018 	.word	0x20000018

080032c0 <__sread>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	000c      	movs	r4, r1
 80032c4:	250e      	movs	r5, #14
 80032c6:	5f49      	ldrsh	r1, [r1, r5]
 80032c8:	f000 f874 	bl	80033b4 <_read_r>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	db03      	blt.n	80032d8 <__sread+0x18>
 80032d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80032d2:	181b      	adds	r3, r3, r0
 80032d4:	6563      	str	r3, [r4, #84]	@ 0x54
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
 80032d8:	89a3      	ldrh	r3, [r4, #12]
 80032da:	4a02      	ldr	r2, [pc, #8]	@ (80032e4 <__sread+0x24>)
 80032dc:	4013      	ands	r3, r2
 80032de:	81a3      	strh	r3, [r4, #12]
 80032e0:	e7f9      	b.n	80032d6 <__sread+0x16>
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	ffffefff 	.word	0xffffefff

080032e8 <__swrite>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	001f      	movs	r7, r3
 80032ec:	898b      	ldrh	r3, [r1, #12]
 80032ee:	0005      	movs	r5, r0
 80032f0:	000c      	movs	r4, r1
 80032f2:	0016      	movs	r6, r2
 80032f4:	05db      	lsls	r3, r3, #23
 80032f6:	d505      	bpl.n	8003304 <__swrite+0x1c>
 80032f8:	230e      	movs	r3, #14
 80032fa:	5ec9      	ldrsh	r1, [r1, r3]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2302      	movs	r3, #2
 8003300:	f000 f844 	bl	800338c <_lseek_r>
 8003304:	89a3      	ldrh	r3, [r4, #12]
 8003306:	4a05      	ldr	r2, [pc, #20]	@ (800331c <__swrite+0x34>)
 8003308:	0028      	movs	r0, r5
 800330a:	4013      	ands	r3, r2
 800330c:	81a3      	strh	r3, [r4, #12]
 800330e:	0032      	movs	r2, r6
 8003310:	230e      	movs	r3, #14
 8003312:	5ee1      	ldrsh	r1, [r4, r3]
 8003314:	003b      	movs	r3, r7
 8003316:	f000 f861 	bl	80033dc <_write_r>
 800331a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800331c:	ffffefff 	.word	0xffffefff

08003320 <__sseek>:
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	000c      	movs	r4, r1
 8003324:	250e      	movs	r5, #14
 8003326:	5f49      	ldrsh	r1, [r1, r5]
 8003328:	f000 f830 	bl	800338c <_lseek_r>
 800332c:	89a3      	ldrh	r3, [r4, #12]
 800332e:	1c42      	adds	r2, r0, #1
 8003330:	d103      	bne.n	800333a <__sseek+0x1a>
 8003332:	4a05      	ldr	r2, [pc, #20]	@ (8003348 <__sseek+0x28>)
 8003334:	4013      	ands	r3, r2
 8003336:	81a3      	strh	r3, [r4, #12]
 8003338:	bd70      	pop	{r4, r5, r6, pc}
 800333a:	2280      	movs	r2, #128	@ 0x80
 800333c:	0152      	lsls	r2, r2, #5
 800333e:	4313      	orrs	r3, r2
 8003340:	81a3      	strh	r3, [r4, #12]
 8003342:	6560      	str	r0, [r4, #84]	@ 0x54
 8003344:	e7f8      	b.n	8003338 <__sseek+0x18>
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	ffffefff 	.word	0xffffefff

0800334c <__sclose>:
 800334c:	b510      	push	{r4, lr}
 800334e:	230e      	movs	r3, #14
 8003350:	5ec9      	ldrsh	r1, [r1, r3]
 8003352:	f000 f809 	bl	8003368 <_close_r>
 8003356:	bd10      	pop	{r4, pc}

08003358 <memset>:
 8003358:	0003      	movs	r3, r0
 800335a:	1882      	adds	r2, r0, r2
 800335c:	4293      	cmp	r3, r2
 800335e:	d100      	bne.n	8003362 <memset+0xa>
 8003360:	4770      	bx	lr
 8003362:	7019      	strb	r1, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	e7f9      	b.n	800335c <memset+0x4>

08003368 <_close_r>:
 8003368:	2300      	movs	r3, #0
 800336a:	b570      	push	{r4, r5, r6, lr}
 800336c:	4d06      	ldr	r5, [pc, #24]	@ (8003388 <_close_r+0x20>)
 800336e:	0004      	movs	r4, r0
 8003370:	0008      	movs	r0, r1
 8003372:	602b      	str	r3, [r5, #0]
 8003374:	f7fd faa9 	bl	80008ca <_close>
 8003378:	1c43      	adds	r3, r0, #1
 800337a:	d103      	bne.n	8003384 <_close_r+0x1c>
 800337c:	682b      	ldr	r3, [r5, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d000      	beq.n	8003384 <_close_r+0x1c>
 8003382:	6023      	str	r3, [r4, #0]
 8003384:	bd70      	pop	{r4, r5, r6, pc}
 8003386:	46c0      	nop			@ (mov r8, r8)
 8003388:	200002a8 	.word	0x200002a8

0800338c <_lseek_r>:
 800338c:	b570      	push	{r4, r5, r6, lr}
 800338e:	0004      	movs	r4, r0
 8003390:	0008      	movs	r0, r1
 8003392:	0011      	movs	r1, r2
 8003394:	001a      	movs	r2, r3
 8003396:	2300      	movs	r3, #0
 8003398:	4d05      	ldr	r5, [pc, #20]	@ (80033b0 <_lseek_r+0x24>)
 800339a:	602b      	str	r3, [r5, #0]
 800339c:	f7fd fab6 	bl	800090c <_lseek>
 80033a0:	1c43      	adds	r3, r0, #1
 80033a2:	d103      	bne.n	80033ac <_lseek_r+0x20>
 80033a4:	682b      	ldr	r3, [r5, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d000      	beq.n	80033ac <_lseek_r+0x20>
 80033aa:	6023      	str	r3, [r4, #0]
 80033ac:	bd70      	pop	{r4, r5, r6, pc}
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	200002a8 	.word	0x200002a8

080033b4 <_read_r>:
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	0004      	movs	r4, r0
 80033b8:	0008      	movs	r0, r1
 80033ba:	0011      	movs	r1, r2
 80033bc:	001a      	movs	r2, r3
 80033be:	2300      	movs	r3, #0
 80033c0:	4d05      	ldr	r5, [pc, #20]	@ (80033d8 <_read_r+0x24>)
 80033c2:	602b      	str	r3, [r5, #0]
 80033c4:	f7fd fa64 	bl	8000890 <_read>
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	d103      	bne.n	80033d4 <_read_r+0x20>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d000      	beq.n	80033d4 <_read_r+0x20>
 80033d2:	6023      	str	r3, [r4, #0]
 80033d4:	bd70      	pop	{r4, r5, r6, pc}
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	200002a8 	.word	0x200002a8

080033dc <_write_r>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	0004      	movs	r4, r0
 80033e0:	0008      	movs	r0, r1
 80033e2:	0011      	movs	r1, r2
 80033e4:	001a      	movs	r2, r3
 80033e6:	2300      	movs	r3, #0
 80033e8:	4d05      	ldr	r5, [pc, #20]	@ (8003400 <_write_r+0x24>)
 80033ea:	602b      	str	r3, [r5, #0]
 80033ec:	f7fd f8b0 	bl	8000550 <_write>
 80033f0:	1c43      	adds	r3, r0, #1
 80033f2:	d103      	bne.n	80033fc <_write_r+0x20>
 80033f4:	682b      	ldr	r3, [r5, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d000      	beq.n	80033fc <_write_r+0x20>
 80033fa:	6023      	str	r3, [r4, #0]
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
 80033fe:	46c0      	nop			@ (mov r8, r8)
 8003400:	200002a8 	.word	0x200002a8

08003404 <__errno>:
 8003404:	4b01      	ldr	r3, [pc, #4]	@ (800340c <__errno+0x8>)
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	4770      	bx	lr
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	20000018 	.word	0x20000018

08003410 <__libc_init_array>:
 8003410:	b570      	push	{r4, r5, r6, lr}
 8003412:	2600      	movs	r6, #0
 8003414:	4c0c      	ldr	r4, [pc, #48]	@ (8003448 <__libc_init_array+0x38>)
 8003416:	4d0d      	ldr	r5, [pc, #52]	@ (800344c <__libc_init_array+0x3c>)
 8003418:	1b64      	subs	r4, r4, r5
 800341a:	10a4      	asrs	r4, r4, #2
 800341c:	42a6      	cmp	r6, r4
 800341e:	d109      	bne.n	8003434 <__libc_init_array+0x24>
 8003420:	2600      	movs	r6, #0
 8003422:	f000 fddb 	bl	8003fdc <_init>
 8003426:	4c0a      	ldr	r4, [pc, #40]	@ (8003450 <__libc_init_array+0x40>)
 8003428:	4d0a      	ldr	r5, [pc, #40]	@ (8003454 <__libc_init_array+0x44>)
 800342a:	1b64      	subs	r4, r4, r5
 800342c:	10a4      	asrs	r4, r4, #2
 800342e:	42a6      	cmp	r6, r4
 8003430:	d105      	bne.n	800343e <__libc_init_array+0x2e>
 8003432:	bd70      	pop	{r4, r5, r6, pc}
 8003434:	00b3      	lsls	r3, r6, #2
 8003436:	58eb      	ldr	r3, [r5, r3]
 8003438:	4798      	blx	r3
 800343a:	3601      	adds	r6, #1
 800343c:	e7ee      	b.n	800341c <__libc_init_array+0xc>
 800343e:	00b3      	lsls	r3, r6, #2
 8003440:	58eb      	ldr	r3, [r5, r3]
 8003442:	4798      	blx	r3
 8003444:	3601      	adds	r6, #1
 8003446:	e7f2      	b.n	800342e <__libc_init_array+0x1e>
 8003448:	08004084 	.word	0x08004084
 800344c:	08004084 	.word	0x08004084
 8003450:	08004088 	.word	0x08004088
 8003454:	08004084 	.word	0x08004084

08003458 <__retarget_lock_init_recursive>:
 8003458:	4770      	bx	lr

0800345a <__retarget_lock_acquire_recursive>:
 800345a:	4770      	bx	lr

0800345c <__retarget_lock_release_recursive>:
 800345c:	4770      	bx	lr
	...

08003460 <_free_r>:
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	0005      	movs	r5, r0
 8003464:	1e0c      	subs	r4, r1, #0
 8003466:	d010      	beq.n	800348a <_free_r+0x2a>
 8003468:	3c04      	subs	r4, #4
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	da00      	bge.n	8003472 <_free_r+0x12>
 8003470:	18e4      	adds	r4, r4, r3
 8003472:	0028      	movs	r0, r5
 8003474:	f000 f8e0 	bl	8003638 <__malloc_lock>
 8003478:	4a1d      	ldr	r2, [pc, #116]	@ (80034f0 <_free_r+0x90>)
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <_free_r+0x2c>
 8003480:	6063      	str	r3, [r4, #4]
 8003482:	6014      	str	r4, [r2, #0]
 8003484:	0028      	movs	r0, r5
 8003486:	f000 f8df 	bl	8003648 <__malloc_unlock>
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	42a3      	cmp	r3, r4
 800348e:	d908      	bls.n	80034a2 <_free_r+0x42>
 8003490:	6820      	ldr	r0, [r4, #0]
 8003492:	1821      	adds	r1, r4, r0
 8003494:	428b      	cmp	r3, r1
 8003496:	d1f3      	bne.n	8003480 <_free_r+0x20>
 8003498:	6819      	ldr	r1, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	1809      	adds	r1, r1, r0
 800349e:	6021      	str	r1, [r4, #0]
 80034a0:	e7ee      	b.n	8003480 <_free_r+0x20>
 80034a2:	001a      	movs	r2, r3
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <_free_r+0x4e>
 80034aa:	42a3      	cmp	r3, r4
 80034ac:	d9f9      	bls.n	80034a2 <_free_r+0x42>
 80034ae:	6811      	ldr	r1, [r2, #0]
 80034b0:	1850      	adds	r0, r2, r1
 80034b2:	42a0      	cmp	r0, r4
 80034b4:	d10b      	bne.n	80034ce <_free_r+0x6e>
 80034b6:	6820      	ldr	r0, [r4, #0]
 80034b8:	1809      	adds	r1, r1, r0
 80034ba:	1850      	adds	r0, r2, r1
 80034bc:	6011      	str	r1, [r2, #0]
 80034be:	4283      	cmp	r3, r0
 80034c0:	d1e0      	bne.n	8003484 <_free_r+0x24>
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	1841      	adds	r1, r0, r1
 80034c8:	6011      	str	r1, [r2, #0]
 80034ca:	6053      	str	r3, [r2, #4]
 80034cc:	e7da      	b.n	8003484 <_free_r+0x24>
 80034ce:	42a0      	cmp	r0, r4
 80034d0:	d902      	bls.n	80034d8 <_free_r+0x78>
 80034d2:	230c      	movs	r3, #12
 80034d4:	602b      	str	r3, [r5, #0]
 80034d6:	e7d5      	b.n	8003484 <_free_r+0x24>
 80034d8:	6820      	ldr	r0, [r4, #0]
 80034da:	1821      	adds	r1, r4, r0
 80034dc:	428b      	cmp	r3, r1
 80034de:	d103      	bne.n	80034e8 <_free_r+0x88>
 80034e0:	6819      	ldr	r1, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	1809      	adds	r1, r1, r0
 80034e6:	6021      	str	r1, [r4, #0]
 80034e8:	6063      	str	r3, [r4, #4]
 80034ea:	6054      	str	r4, [r2, #4]
 80034ec:	e7ca      	b.n	8003484 <_free_r+0x24>
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	200002b4 	.word	0x200002b4

080034f4 <sbrk_aligned>:
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	4e0f      	ldr	r6, [pc, #60]	@ (8003534 <sbrk_aligned+0x40>)
 80034f8:	000d      	movs	r5, r1
 80034fa:	6831      	ldr	r1, [r6, #0]
 80034fc:	0004      	movs	r4, r0
 80034fe:	2900      	cmp	r1, #0
 8003500:	d102      	bne.n	8003508 <sbrk_aligned+0x14>
 8003502:	f000 fcbd 	bl	8003e80 <_sbrk_r>
 8003506:	6030      	str	r0, [r6, #0]
 8003508:	0029      	movs	r1, r5
 800350a:	0020      	movs	r0, r4
 800350c:	f000 fcb8 	bl	8003e80 <_sbrk_r>
 8003510:	1c43      	adds	r3, r0, #1
 8003512:	d103      	bne.n	800351c <sbrk_aligned+0x28>
 8003514:	2501      	movs	r5, #1
 8003516:	426d      	negs	r5, r5
 8003518:	0028      	movs	r0, r5
 800351a:	bd70      	pop	{r4, r5, r6, pc}
 800351c:	2303      	movs	r3, #3
 800351e:	1cc5      	adds	r5, r0, #3
 8003520:	439d      	bics	r5, r3
 8003522:	42a8      	cmp	r0, r5
 8003524:	d0f8      	beq.n	8003518 <sbrk_aligned+0x24>
 8003526:	1a29      	subs	r1, r5, r0
 8003528:	0020      	movs	r0, r4
 800352a:	f000 fca9 	bl	8003e80 <_sbrk_r>
 800352e:	3001      	adds	r0, #1
 8003530:	d1f2      	bne.n	8003518 <sbrk_aligned+0x24>
 8003532:	e7ef      	b.n	8003514 <sbrk_aligned+0x20>
 8003534:	200002b0 	.word	0x200002b0

08003538 <_malloc_r>:
 8003538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800353a:	2203      	movs	r2, #3
 800353c:	1ccb      	adds	r3, r1, #3
 800353e:	4393      	bics	r3, r2
 8003540:	3308      	adds	r3, #8
 8003542:	0005      	movs	r5, r0
 8003544:	001f      	movs	r7, r3
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d234      	bcs.n	80035b4 <_malloc_r+0x7c>
 800354a:	270c      	movs	r7, #12
 800354c:	42b9      	cmp	r1, r7
 800354e:	d833      	bhi.n	80035b8 <_malloc_r+0x80>
 8003550:	0028      	movs	r0, r5
 8003552:	f000 f871 	bl	8003638 <__malloc_lock>
 8003556:	4e37      	ldr	r6, [pc, #220]	@ (8003634 <_malloc_r+0xfc>)
 8003558:	6833      	ldr	r3, [r6, #0]
 800355a:	001c      	movs	r4, r3
 800355c:	2c00      	cmp	r4, #0
 800355e:	d12f      	bne.n	80035c0 <_malloc_r+0x88>
 8003560:	0039      	movs	r1, r7
 8003562:	0028      	movs	r0, r5
 8003564:	f7ff ffc6 	bl	80034f4 <sbrk_aligned>
 8003568:	0004      	movs	r4, r0
 800356a:	1c43      	adds	r3, r0, #1
 800356c:	d15f      	bne.n	800362e <_malloc_r+0xf6>
 800356e:	6834      	ldr	r4, [r6, #0]
 8003570:	9400      	str	r4, [sp, #0]
 8003572:	9b00      	ldr	r3, [sp, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d14a      	bne.n	800360e <_malloc_r+0xd6>
 8003578:	2c00      	cmp	r4, #0
 800357a:	d052      	beq.n	8003622 <_malloc_r+0xea>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	0028      	movs	r0, r5
 8003580:	18e3      	adds	r3, r4, r3
 8003582:	9900      	ldr	r1, [sp, #0]
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	f000 fc7b 	bl	8003e80 <_sbrk_r>
 800358a:	9b01      	ldr	r3, [sp, #4]
 800358c:	4283      	cmp	r3, r0
 800358e:	d148      	bne.n	8003622 <_malloc_r+0xea>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	0028      	movs	r0, r5
 8003594:	1aff      	subs	r7, r7, r3
 8003596:	0039      	movs	r1, r7
 8003598:	f7ff ffac 	bl	80034f4 <sbrk_aligned>
 800359c:	3001      	adds	r0, #1
 800359e:	d040      	beq.n	8003622 <_malloc_r+0xea>
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	19db      	adds	r3, r3, r7
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	6833      	ldr	r3, [r6, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	2a00      	cmp	r2, #0
 80035ac:	d133      	bne.n	8003616 <_malloc_r+0xde>
 80035ae:	9b00      	ldr	r3, [sp, #0]
 80035b0:	6033      	str	r3, [r6, #0]
 80035b2:	e019      	b.n	80035e8 <_malloc_r+0xb0>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	dac9      	bge.n	800354c <_malloc_r+0x14>
 80035b8:	230c      	movs	r3, #12
 80035ba:	602b      	str	r3, [r5, #0]
 80035bc:	2000      	movs	r0, #0
 80035be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035c0:	6821      	ldr	r1, [r4, #0]
 80035c2:	1bc9      	subs	r1, r1, r7
 80035c4:	d420      	bmi.n	8003608 <_malloc_r+0xd0>
 80035c6:	290b      	cmp	r1, #11
 80035c8:	d90a      	bls.n	80035e0 <_malloc_r+0xa8>
 80035ca:	19e2      	adds	r2, r4, r7
 80035cc:	6027      	str	r7, [r4, #0]
 80035ce:	42a3      	cmp	r3, r4
 80035d0:	d104      	bne.n	80035dc <_malloc_r+0xa4>
 80035d2:	6032      	str	r2, [r6, #0]
 80035d4:	6863      	ldr	r3, [r4, #4]
 80035d6:	6011      	str	r1, [r2, #0]
 80035d8:	6053      	str	r3, [r2, #4]
 80035da:	e005      	b.n	80035e8 <_malloc_r+0xb0>
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	e7f9      	b.n	80035d4 <_malloc_r+0x9c>
 80035e0:	6862      	ldr	r2, [r4, #4]
 80035e2:	42a3      	cmp	r3, r4
 80035e4:	d10e      	bne.n	8003604 <_malloc_r+0xcc>
 80035e6:	6032      	str	r2, [r6, #0]
 80035e8:	0028      	movs	r0, r5
 80035ea:	f000 f82d 	bl	8003648 <__malloc_unlock>
 80035ee:	0020      	movs	r0, r4
 80035f0:	2207      	movs	r2, #7
 80035f2:	300b      	adds	r0, #11
 80035f4:	1d23      	adds	r3, r4, #4
 80035f6:	4390      	bics	r0, r2
 80035f8:	1ac2      	subs	r2, r0, r3
 80035fa:	4298      	cmp	r0, r3
 80035fc:	d0df      	beq.n	80035be <_malloc_r+0x86>
 80035fe:	1a1b      	subs	r3, r3, r0
 8003600:	50a3      	str	r3, [r4, r2]
 8003602:	e7dc      	b.n	80035be <_malloc_r+0x86>
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	e7ef      	b.n	80035e8 <_malloc_r+0xb0>
 8003608:	0023      	movs	r3, r4
 800360a:	6864      	ldr	r4, [r4, #4]
 800360c:	e7a6      	b.n	800355c <_malloc_r+0x24>
 800360e:	9c00      	ldr	r4, [sp, #0]
 8003610:	6863      	ldr	r3, [r4, #4]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	e7ad      	b.n	8003572 <_malloc_r+0x3a>
 8003616:	001a      	movs	r2, r3
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	42a3      	cmp	r3, r4
 800361c:	d1fb      	bne.n	8003616 <_malloc_r+0xde>
 800361e:	2300      	movs	r3, #0
 8003620:	e7da      	b.n	80035d8 <_malloc_r+0xa0>
 8003622:	230c      	movs	r3, #12
 8003624:	0028      	movs	r0, r5
 8003626:	602b      	str	r3, [r5, #0]
 8003628:	f000 f80e 	bl	8003648 <__malloc_unlock>
 800362c:	e7c6      	b.n	80035bc <_malloc_r+0x84>
 800362e:	6007      	str	r7, [r0, #0]
 8003630:	e7da      	b.n	80035e8 <_malloc_r+0xb0>
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	200002b4 	.word	0x200002b4

08003638 <__malloc_lock>:
 8003638:	b510      	push	{r4, lr}
 800363a:	4802      	ldr	r0, [pc, #8]	@ (8003644 <__malloc_lock+0xc>)
 800363c:	f7ff ff0d 	bl	800345a <__retarget_lock_acquire_recursive>
 8003640:	bd10      	pop	{r4, pc}
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	200002ac 	.word	0x200002ac

08003648 <__malloc_unlock>:
 8003648:	b510      	push	{r4, lr}
 800364a:	4802      	ldr	r0, [pc, #8]	@ (8003654 <__malloc_unlock+0xc>)
 800364c:	f7ff ff06 	bl	800345c <__retarget_lock_release_recursive>
 8003650:	bd10      	pop	{r4, pc}
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	200002ac 	.word	0x200002ac

08003658 <__sfputc_r>:
 8003658:	6893      	ldr	r3, [r2, #8]
 800365a:	b510      	push	{r4, lr}
 800365c:	3b01      	subs	r3, #1
 800365e:	6093      	str	r3, [r2, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	da04      	bge.n	800366e <__sfputc_r+0x16>
 8003664:	6994      	ldr	r4, [r2, #24]
 8003666:	42a3      	cmp	r3, r4
 8003668:	db07      	blt.n	800367a <__sfputc_r+0x22>
 800366a:	290a      	cmp	r1, #10
 800366c:	d005      	beq.n	800367a <__sfputc_r+0x22>
 800366e:	6813      	ldr	r3, [r2, #0]
 8003670:	1c58      	adds	r0, r3, #1
 8003672:	6010      	str	r0, [r2, #0]
 8003674:	7019      	strb	r1, [r3, #0]
 8003676:	0008      	movs	r0, r1
 8003678:	bd10      	pop	{r4, pc}
 800367a:	f000 fb60 	bl	8003d3e <__swbuf_r>
 800367e:	0001      	movs	r1, r0
 8003680:	e7f9      	b.n	8003676 <__sfputc_r+0x1e>

08003682 <__sfputs_r>:
 8003682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003684:	0006      	movs	r6, r0
 8003686:	000f      	movs	r7, r1
 8003688:	0014      	movs	r4, r2
 800368a:	18d5      	adds	r5, r2, r3
 800368c:	42ac      	cmp	r4, r5
 800368e:	d101      	bne.n	8003694 <__sfputs_r+0x12>
 8003690:	2000      	movs	r0, #0
 8003692:	e007      	b.n	80036a4 <__sfputs_r+0x22>
 8003694:	7821      	ldrb	r1, [r4, #0]
 8003696:	003a      	movs	r2, r7
 8003698:	0030      	movs	r0, r6
 800369a:	f7ff ffdd 	bl	8003658 <__sfputc_r>
 800369e:	3401      	adds	r4, #1
 80036a0:	1c43      	adds	r3, r0, #1
 80036a2:	d1f3      	bne.n	800368c <__sfputs_r+0xa>
 80036a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036a8 <_vfiprintf_r>:
 80036a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036aa:	b0a1      	sub	sp, #132	@ 0x84
 80036ac:	000f      	movs	r7, r1
 80036ae:	0015      	movs	r5, r2
 80036b0:	001e      	movs	r6, r3
 80036b2:	9003      	str	r0, [sp, #12]
 80036b4:	2800      	cmp	r0, #0
 80036b6:	d004      	beq.n	80036c2 <_vfiprintf_r+0x1a>
 80036b8:	6a03      	ldr	r3, [r0, #32]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <_vfiprintf_r+0x1a>
 80036be:	f7ff fdbb 	bl	8003238 <__sinit>
 80036c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036c4:	07db      	lsls	r3, r3, #31
 80036c6:	d405      	bmi.n	80036d4 <_vfiprintf_r+0x2c>
 80036c8:	89bb      	ldrh	r3, [r7, #12]
 80036ca:	059b      	lsls	r3, r3, #22
 80036cc:	d402      	bmi.n	80036d4 <_vfiprintf_r+0x2c>
 80036ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80036d0:	f7ff fec3 	bl	800345a <__retarget_lock_acquire_recursive>
 80036d4:	89bb      	ldrh	r3, [r7, #12]
 80036d6:	071b      	lsls	r3, r3, #28
 80036d8:	d502      	bpl.n	80036e0 <_vfiprintf_r+0x38>
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d113      	bne.n	8003708 <_vfiprintf_r+0x60>
 80036e0:	0039      	movs	r1, r7
 80036e2:	9803      	ldr	r0, [sp, #12]
 80036e4:	f000 fb6e 	bl	8003dc4 <__swsetup_r>
 80036e8:	2800      	cmp	r0, #0
 80036ea:	d00d      	beq.n	8003708 <_vfiprintf_r+0x60>
 80036ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036ee:	07db      	lsls	r3, r3, #31
 80036f0:	d503      	bpl.n	80036fa <_vfiprintf_r+0x52>
 80036f2:	2001      	movs	r0, #1
 80036f4:	4240      	negs	r0, r0
 80036f6:	b021      	add	sp, #132	@ 0x84
 80036f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036fa:	89bb      	ldrh	r3, [r7, #12]
 80036fc:	059b      	lsls	r3, r3, #22
 80036fe:	d4f8      	bmi.n	80036f2 <_vfiprintf_r+0x4a>
 8003700:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003702:	f7ff feab 	bl	800345c <__retarget_lock_release_recursive>
 8003706:	e7f4      	b.n	80036f2 <_vfiprintf_r+0x4a>
 8003708:	2300      	movs	r3, #0
 800370a:	ac08      	add	r4, sp, #32
 800370c:	6163      	str	r3, [r4, #20]
 800370e:	3320      	adds	r3, #32
 8003710:	7663      	strb	r3, [r4, #25]
 8003712:	3310      	adds	r3, #16
 8003714:	76a3      	strb	r3, [r4, #26]
 8003716:	9607      	str	r6, [sp, #28]
 8003718:	002e      	movs	r6, r5
 800371a:	7833      	ldrb	r3, [r6, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <_vfiprintf_r+0x7c>
 8003720:	2b25      	cmp	r3, #37	@ 0x25
 8003722:	d148      	bne.n	80037b6 <_vfiprintf_r+0x10e>
 8003724:	1b73      	subs	r3, r6, r5
 8003726:	9305      	str	r3, [sp, #20]
 8003728:	42ae      	cmp	r6, r5
 800372a:	d00b      	beq.n	8003744 <_vfiprintf_r+0x9c>
 800372c:	002a      	movs	r2, r5
 800372e:	0039      	movs	r1, r7
 8003730:	9803      	ldr	r0, [sp, #12]
 8003732:	f7ff ffa6 	bl	8003682 <__sfputs_r>
 8003736:	3001      	adds	r0, #1
 8003738:	d100      	bne.n	800373c <_vfiprintf_r+0x94>
 800373a:	e0ae      	b.n	800389a <_vfiprintf_r+0x1f2>
 800373c:	6963      	ldr	r3, [r4, #20]
 800373e:	9a05      	ldr	r2, [sp, #20]
 8003740:	189b      	adds	r3, r3, r2
 8003742:	6163      	str	r3, [r4, #20]
 8003744:	7833      	ldrb	r3, [r6, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d100      	bne.n	800374c <_vfiprintf_r+0xa4>
 800374a:	e0a6      	b.n	800389a <_vfiprintf_r+0x1f2>
 800374c:	2201      	movs	r2, #1
 800374e:	2300      	movs	r3, #0
 8003750:	4252      	negs	r2, r2
 8003752:	6062      	str	r2, [r4, #4]
 8003754:	a904      	add	r1, sp, #16
 8003756:	3254      	adds	r2, #84	@ 0x54
 8003758:	1852      	adds	r2, r2, r1
 800375a:	1c75      	adds	r5, r6, #1
 800375c:	6023      	str	r3, [r4, #0]
 800375e:	60e3      	str	r3, [r4, #12]
 8003760:	60a3      	str	r3, [r4, #8]
 8003762:	7013      	strb	r3, [r2, #0]
 8003764:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003766:	4b59      	ldr	r3, [pc, #356]	@ (80038cc <_vfiprintf_r+0x224>)
 8003768:	2205      	movs	r2, #5
 800376a:	0018      	movs	r0, r3
 800376c:	7829      	ldrb	r1, [r5, #0]
 800376e:	9305      	str	r3, [sp, #20]
 8003770:	f000 fb98 	bl	8003ea4 <memchr>
 8003774:	1c6e      	adds	r6, r5, #1
 8003776:	2800      	cmp	r0, #0
 8003778:	d11f      	bne.n	80037ba <_vfiprintf_r+0x112>
 800377a:	6822      	ldr	r2, [r4, #0]
 800377c:	06d3      	lsls	r3, r2, #27
 800377e:	d504      	bpl.n	800378a <_vfiprintf_r+0xe2>
 8003780:	2353      	movs	r3, #83	@ 0x53
 8003782:	a904      	add	r1, sp, #16
 8003784:	185b      	adds	r3, r3, r1
 8003786:	2120      	movs	r1, #32
 8003788:	7019      	strb	r1, [r3, #0]
 800378a:	0713      	lsls	r3, r2, #28
 800378c:	d504      	bpl.n	8003798 <_vfiprintf_r+0xf0>
 800378e:	2353      	movs	r3, #83	@ 0x53
 8003790:	a904      	add	r1, sp, #16
 8003792:	185b      	adds	r3, r3, r1
 8003794:	212b      	movs	r1, #43	@ 0x2b
 8003796:	7019      	strb	r1, [r3, #0]
 8003798:	782b      	ldrb	r3, [r5, #0]
 800379a:	2b2a      	cmp	r3, #42	@ 0x2a
 800379c:	d016      	beq.n	80037cc <_vfiprintf_r+0x124>
 800379e:	002e      	movs	r6, r5
 80037a0:	2100      	movs	r1, #0
 80037a2:	200a      	movs	r0, #10
 80037a4:	68e3      	ldr	r3, [r4, #12]
 80037a6:	7832      	ldrb	r2, [r6, #0]
 80037a8:	1c75      	adds	r5, r6, #1
 80037aa:	3a30      	subs	r2, #48	@ 0x30
 80037ac:	2a09      	cmp	r2, #9
 80037ae:	d950      	bls.n	8003852 <_vfiprintf_r+0x1aa>
 80037b0:	2900      	cmp	r1, #0
 80037b2:	d111      	bne.n	80037d8 <_vfiprintf_r+0x130>
 80037b4:	e017      	b.n	80037e6 <_vfiprintf_r+0x13e>
 80037b6:	3601      	adds	r6, #1
 80037b8:	e7af      	b.n	800371a <_vfiprintf_r+0x72>
 80037ba:	9b05      	ldr	r3, [sp, #20]
 80037bc:	6822      	ldr	r2, [r4, #0]
 80037be:	1ac0      	subs	r0, r0, r3
 80037c0:	2301      	movs	r3, #1
 80037c2:	4083      	lsls	r3, r0
 80037c4:	4313      	orrs	r3, r2
 80037c6:	0035      	movs	r5, r6
 80037c8:	6023      	str	r3, [r4, #0]
 80037ca:	e7cc      	b.n	8003766 <_vfiprintf_r+0xbe>
 80037cc:	9b07      	ldr	r3, [sp, #28]
 80037ce:	1d19      	adds	r1, r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	9107      	str	r1, [sp, #28]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	db01      	blt.n	80037dc <_vfiprintf_r+0x134>
 80037d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80037da:	e004      	b.n	80037e6 <_vfiprintf_r+0x13e>
 80037dc:	425b      	negs	r3, r3
 80037de:	60e3      	str	r3, [r4, #12]
 80037e0:	2302      	movs	r3, #2
 80037e2:	4313      	orrs	r3, r2
 80037e4:	6023      	str	r3, [r4, #0]
 80037e6:	7833      	ldrb	r3, [r6, #0]
 80037e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80037ea:	d10c      	bne.n	8003806 <_vfiprintf_r+0x15e>
 80037ec:	7873      	ldrb	r3, [r6, #1]
 80037ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80037f0:	d134      	bne.n	800385c <_vfiprintf_r+0x1b4>
 80037f2:	9b07      	ldr	r3, [sp, #28]
 80037f4:	3602      	adds	r6, #2
 80037f6:	1d1a      	adds	r2, r3, #4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	9207      	str	r2, [sp, #28]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	da01      	bge.n	8003804 <_vfiprintf_r+0x15c>
 8003800:	2301      	movs	r3, #1
 8003802:	425b      	negs	r3, r3
 8003804:	9309      	str	r3, [sp, #36]	@ 0x24
 8003806:	4d32      	ldr	r5, [pc, #200]	@ (80038d0 <_vfiprintf_r+0x228>)
 8003808:	2203      	movs	r2, #3
 800380a:	0028      	movs	r0, r5
 800380c:	7831      	ldrb	r1, [r6, #0]
 800380e:	f000 fb49 	bl	8003ea4 <memchr>
 8003812:	2800      	cmp	r0, #0
 8003814:	d006      	beq.n	8003824 <_vfiprintf_r+0x17c>
 8003816:	2340      	movs	r3, #64	@ 0x40
 8003818:	1b40      	subs	r0, r0, r5
 800381a:	4083      	lsls	r3, r0
 800381c:	6822      	ldr	r2, [r4, #0]
 800381e:	3601      	adds	r6, #1
 8003820:	4313      	orrs	r3, r2
 8003822:	6023      	str	r3, [r4, #0]
 8003824:	7831      	ldrb	r1, [r6, #0]
 8003826:	2206      	movs	r2, #6
 8003828:	482a      	ldr	r0, [pc, #168]	@ (80038d4 <_vfiprintf_r+0x22c>)
 800382a:	1c75      	adds	r5, r6, #1
 800382c:	7621      	strb	r1, [r4, #24]
 800382e:	f000 fb39 	bl	8003ea4 <memchr>
 8003832:	2800      	cmp	r0, #0
 8003834:	d040      	beq.n	80038b8 <_vfiprintf_r+0x210>
 8003836:	4b28      	ldr	r3, [pc, #160]	@ (80038d8 <_vfiprintf_r+0x230>)
 8003838:	2b00      	cmp	r3, #0
 800383a:	d122      	bne.n	8003882 <_vfiprintf_r+0x1da>
 800383c:	2207      	movs	r2, #7
 800383e:	9b07      	ldr	r3, [sp, #28]
 8003840:	3307      	adds	r3, #7
 8003842:	4393      	bics	r3, r2
 8003844:	3308      	adds	r3, #8
 8003846:	9307      	str	r3, [sp, #28]
 8003848:	6963      	ldr	r3, [r4, #20]
 800384a:	9a04      	ldr	r2, [sp, #16]
 800384c:	189b      	adds	r3, r3, r2
 800384e:	6163      	str	r3, [r4, #20]
 8003850:	e762      	b.n	8003718 <_vfiprintf_r+0x70>
 8003852:	4343      	muls	r3, r0
 8003854:	002e      	movs	r6, r5
 8003856:	2101      	movs	r1, #1
 8003858:	189b      	adds	r3, r3, r2
 800385a:	e7a4      	b.n	80037a6 <_vfiprintf_r+0xfe>
 800385c:	2300      	movs	r3, #0
 800385e:	200a      	movs	r0, #10
 8003860:	0019      	movs	r1, r3
 8003862:	3601      	adds	r6, #1
 8003864:	6063      	str	r3, [r4, #4]
 8003866:	7832      	ldrb	r2, [r6, #0]
 8003868:	1c75      	adds	r5, r6, #1
 800386a:	3a30      	subs	r2, #48	@ 0x30
 800386c:	2a09      	cmp	r2, #9
 800386e:	d903      	bls.n	8003878 <_vfiprintf_r+0x1d0>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0c8      	beq.n	8003806 <_vfiprintf_r+0x15e>
 8003874:	9109      	str	r1, [sp, #36]	@ 0x24
 8003876:	e7c6      	b.n	8003806 <_vfiprintf_r+0x15e>
 8003878:	4341      	muls	r1, r0
 800387a:	002e      	movs	r6, r5
 800387c:	2301      	movs	r3, #1
 800387e:	1889      	adds	r1, r1, r2
 8003880:	e7f1      	b.n	8003866 <_vfiprintf_r+0x1be>
 8003882:	aa07      	add	r2, sp, #28
 8003884:	9200      	str	r2, [sp, #0]
 8003886:	0021      	movs	r1, r4
 8003888:	003a      	movs	r2, r7
 800388a:	4b14      	ldr	r3, [pc, #80]	@ (80038dc <_vfiprintf_r+0x234>)
 800388c:	9803      	ldr	r0, [sp, #12]
 800388e:	e000      	b.n	8003892 <_vfiprintf_r+0x1ea>
 8003890:	bf00      	nop
 8003892:	9004      	str	r0, [sp, #16]
 8003894:	9b04      	ldr	r3, [sp, #16]
 8003896:	3301      	adds	r3, #1
 8003898:	d1d6      	bne.n	8003848 <_vfiprintf_r+0x1a0>
 800389a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800389c:	07db      	lsls	r3, r3, #31
 800389e:	d405      	bmi.n	80038ac <_vfiprintf_r+0x204>
 80038a0:	89bb      	ldrh	r3, [r7, #12]
 80038a2:	059b      	lsls	r3, r3, #22
 80038a4:	d402      	bmi.n	80038ac <_vfiprintf_r+0x204>
 80038a6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80038a8:	f7ff fdd8 	bl	800345c <__retarget_lock_release_recursive>
 80038ac:	89bb      	ldrh	r3, [r7, #12]
 80038ae:	065b      	lsls	r3, r3, #25
 80038b0:	d500      	bpl.n	80038b4 <_vfiprintf_r+0x20c>
 80038b2:	e71e      	b.n	80036f2 <_vfiprintf_r+0x4a>
 80038b4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80038b6:	e71e      	b.n	80036f6 <_vfiprintf_r+0x4e>
 80038b8:	aa07      	add	r2, sp, #28
 80038ba:	9200      	str	r2, [sp, #0]
 80038bc:	0021      	movs	r1, r4
 80038be:	003a      	movs	r2, r7
 80038c0:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <_vfiprintf_r+0x234>)
 80038c2:	9803      	ldr	r0, [sp, #12]
 80038c4:	f000 f87c 	bl	80039c0 <_printf_i>
 80038c8:	e7e3      	b.n	8003892 <_vfiprintf_r+0x1ea>
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	08004050 	.word	0x08004050
 80038d0:	08004056 	.word	0x08004056
 80038d4:	0800405a 	.word	0x0800405a
 80038d8:	00000000 	.word	0x00000000
 80038dc:	08003683 	.word	0x08003683

080038e0 <_printf_common>:
 80038e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038e2:	0016      	movs	r6, r2
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	688a      	ldr	r2, [r1, #8]
 80038e8:	690b      	ldr	r3, [r1, #16]
 80038ea:	000c      	movs	r4, r1
 80038ec:	9000      	str	r0, [sp, #0]
 80038ee:	4293      	cmp	r3, r2
 80038f0:	da00      	bge.n	80038f4 <_printf_common+0x14>
 80038f2:	0013      	movs	r3, r2
 80038f4:	0022      	movs	r2, r4
 80038f6:	6033      	str	r3, [r6, #0]
 80038f8:	3243      	adds	r2, #67	@ 0x43
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	2a00      	cmp	r2, #0
 80038fe:	d001      	beq.n	8003904 <_printf_common+0x24>
 8003900:	3301      	adds	r3, #1
 8003902:	6033      	str	r3, [r6, #0]
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	069b      	lsls	r3, r3, #26
 8003908:	d502      	bpl.n	8003910 <_printf_common+0x30>
 800390a:	6833      	ldr	r3, [r6, #0]
 800390c:	3302      	adds	r3, #2
 800390e:	6033      	str	r3, [r6, #0]
 8003910:	6822      	ldr	r2, [r4, #0]
 8003912:	2306      	movs	r3, #6
 8003914:	0015      	movs	r5, r2
 8003916:	401d      	ands	r5, r3
 8003918:	421a      	tst	r2, r3
 800391a:	d027      	beq.n	800396c <_printf_common+0x8c>
 800391c:	0023      	movs	r3, r4
 800391e:	3343      	adds	r3, #67	@ 0x43
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	1e5a      	subs	r2, r3, #1
 8003924:	4193      	sbcs	r3, r2
 8003926:	6822      	ldr	r2, [r4, #0]
 8003928:	0692      	lsls	r2, r2, #26
 800392a:	d430      	bmi.n	800398e <_printf_common+0xae>
 800392c:	0022      	movs	r2, r4
 800392e:	9901      	ldr	r1, [sp, #4]
 8003930:	9800      	ldr	r0, [sp, #0]
 8003932:	9d08      	ldr	r5, [sp, #32]
 8003934:	3243      	adds	r2, #67	@ 0x43
 8003936:	47a8      	blx	r5
 8003938:	3001      	adds	r0, #1
 800393a:	d025      	beq.n	8003988 <_printf_common+0xa8>
 800393c:	2206      	movs	r2, #6
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	2500      	movs	r5, #0
 8003942:	4013      	ands	r3, r2
 8003944:	2b04      	cmp	r3, #4
 8003946:	d105      	bne.n	8003954 <_printf_common+0x74>
 8003948:	6833      	ldr	r3, [r6, #0]
 800394a:	68e5      	ldr	r5, [r4, #12]
 800394c:	1aed      	subs	r5, r5, r3
 800394e:	43eb      	mvns	r3, r5
 8003950:	17db      	asrs	r3, r3, #31
 8003952:	401d      	ands	r5, r3
 8003954:	68a3      	ldr	r3, [r4, #8]
 8003956:	6922      	ldr	r2, [r4, #16]
 8003958:	4293      	cmp	r3, r2
 800395a:	dd01      	ble.n	8003960 <_printf_common+0x80>
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	18ed      	adds	r5, r5, r3
 8003960:	2600      	movs	r6, #0
 8003962:	42b5      	cmp	r5, r6
 8003964:	d120      	bne.n	80039a8 <_printf_common+0xc8>
 8003966:	2000      	movs	r0, #0
 8003968:	e010      	b.n	800398c <_printf_common+0xac>
 800396a:	3501      	adds	r5, #1
 800396c:	68e3      	ldr	r3, [r4, #12]
 800396e:	6832      	ldr	r2, [r6, #0]
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	42ab      	cmp	r3, r5
 8003974:	ddd2      	ble.n	800391c <_printf_common+0x3c>
 8003976:	0022      	movs	r2, r4
 8003978:	2301      	movs	r3, #1
 800397a:	9901      	ldr	r1, [sp, #4]
 800397c:	9800      	ldr	r0, [sp, #0]
 800397e:	9f08      	ldr	r7, [sp, #32]
 8003980:	3219      	adds	r2, #25
 8003982:	47b8      	blx	r7
 8003984:	3001      	adds	r0, #1
 8003986:	d1f0      	bne.n	800396a <_printf_common+0x8a>
 8003988:	2001      	movs	r0, #1
 800398a:	4240      	negs	r0, r0
 800398c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800398e:	2030      	movs	r0, #48	@ 0x30
 8003990:	18e1      	adds	r1, r4, r3
 8003992:	3143      	adds	r1, #67	@ 0x43
 8003994:	7008      	strb	r0, [r1, #0]
 8003996:	0021      	movs	r1, r4
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	3145      	adds	r1, #69	@ 0x45
 800399c:	7809      	ldrb	r1, [r1, #0]
 800399e:	18a2      	adds	r2, r4, r2
 80039a0:	3243      	adds	r2, #67	@ 0x43
 80039a2:	3302      	adds	r3, #2
 80039a4:	7011      	strb	r1, [r2, #0]
 80039a6:	e7c1      	b.n	800392c <_printf_common+0x4c>
 80039a8:	0022      	movs	r2, r4
 80039aa:	2301      	movs	r3, #1
 80039ac:	9901      	ldr	r1, [sp, #4]
 80039ae:	9800      	ldr	r0, [sp, #0]
 80039b0:	9f08      	ldr	r7, [sp, #32]
 80039b2:	321a      	adds	r2, #26
 80039b4:	47b8      	blx	r7
 80039b6:	3001      	adds	r0, #1
 80039b8:	d0e6      	beq.n	8003988 <_printf_common+0xa8>
 80039ba:	3601      	adds	r6, #1
 80039bc:	e7d1      	b.n	8003962 <_printf_common+0x82>
	...

080039c0 <_printf_i>:
 80039c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039c2:	b08b      	sub	sp, #44	@ 0x2c
 80039c4:	9206      	str	r2, [sp, #24]
 80039c6:	000a      	movs	r2, r1
 80039c8:	3243      	adds	r2, #67	@ 0x43
 80039ca:	9307      	str	r3, [sp, #28]
 80039cc:	9005      	str	r0, [sp, #20]
 80039ce:	9203      	str	r2, [sp, #12]
 80039d0:	7e0a      	ldrb	r2, [r1, #24]
 80039d2:	000c      	movs	r4, r1
 80039d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80039d6:	2a78      	cmp	r2, #120	@ 0x78
 80039d8:	d809      	bhi.n	80039ee <_printf_i+0x2e>
 80039da:	2a62      	cmp	r2, #98	@ 0x62
 80039dc:	d80b      	bhi.n	80039f6 <_printf_i+0x36>
 80039de:	2a00      	cmp	r2, #0
 80039e0:	d100      	bne.n	80039e4 <_printf_i+0x24>
 80039e2:	e0bc      	b.n	8003b5e <_printf_i+0x19e>
 80039e4:	497b      	ldr	r1, [pc, #492]	@ (8003bd4 <_printf_i+0x214>)
 80039e6:	9104      	str	r1, [sp, #16]
 80039e8:	2a58      	cmp	r2, #88	@ 0x58
 80039ea:	d100      	bne.n	80039ee <_printf_i+0x2e>
 80039ec:	e090      	b.n	8003b10 <_printf_i+0x150>
 80039ee:	0025      	movs	r5, r4
 80039f0:	3542      	adds	r5, #66	@ 0x42
 80039f2:	702a      	strb	r2, [r5, #0]
 80039f4:	e022      	b.n	8003a3c <_printf_i+0x7c>
 80039f6:	0010      	movs	r0, r2
 80039f8:	3863      	subs	r0, #99	@ 0x63
 80039fa:	2815      	cmp	r0, #21
 80039fc:	d8f7      	bhi.n	80039ee <_printf_i+0x2e>
 80039fe:	f7fc fb83 	bl	8000108 <__gnu_thumb1_case_shi>
 8003a02:	0016      	.short	0x0016
 8003a04:	fff6001f 	.word	0xfff6001f
 8003a08:	fff6fff6 	.word	0xfff6fff6
 8003a0c:	001ffff6 	.word	0x001ffff6
 8003a10:	fff6fff6 	.word	0xfff6fff6
 8003a14:	fff6fff6 	.word	0xfff6fff6
 8003a18:	003600a1 	.word	0x003600a1
 8003a1c:	fff60080 	.word	0xfff60080
 8003a20:	00b2fff6 	.word	0x00b2fff6
 8003a24:	0036fff6 	.word	0x0036fff6
 8003a28:	fff6fff6 	.word	0xfff6fff6
 8003a2c:	0084      	.short	0x0084
 8003a2e:	0025      	movs	r5, r4
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	3542      	adds	r5, #66	@ 0x42
 8003a34:	1d11      	adds	r1, r2, #4
 8003a36:	6019      	str	r1, [r3, #0]
 8003a38:	6813      	ldr	r3, [r2, #0]
 8003a3a:	702b      	strb	r3, [r5, #0]
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0a0      	b.n	8003b82 <_printf_i+0x1c2>
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	6809      	ldr	r1, [r1, #0]
 8003a44:	1d02      	adds	r2, r0, #4
 8003a46:	060d      	lsls	r5, r1, #24
 8003a48:	d50b      	bpl.n	8003a62 <_printf_i+0xa2>
 8003a4a:	6806      	ldr	r6, [r0, #0]
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	2e00      	cmp	r6, #0
 8003a50:	da03      	bge.n	8003a5a <_printf_i+0x9a>
 8003a52:	232d      	movs	r3, #45	@ 0x2d
 8003a54:	9a03      	ldr	r2, [sp, #12]
 8003a56:	4276      	negs	r6, r6
 8003a58:	7013      	strb	r3, [r2, #0]
 8003a5a:	4b5e      	ldr	r3, [pc, #376]	@ (8003bd4 <_printf_i+0x214>)
 8003a5c:	270a      	movs	r7, #10
 8003a5e:	9304      	str	r3, [sp, #16]
 8003a60:	e018      	b.n	8003a94 <_printf_i+0xd4>
 8003a62:	6806      	ldr	r6, [r0, #0]
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	0649      	lsls	r1, r1, #25
 8003a68:	d5f1      	bpl.n	8003a4e <_printf_i+0x8e>
 8003a6a:	b236      	sxth	r6, r6
 8003a6c:	e7ef      	b.n	8003a4e <_printf_i+0x8e>
 8003a6e:	6808      	ldr	r0, [r1, #0]
 8003a70:	6819      	ldr	r1, [r3, #0]
 8003a72:	c940      	ldmia	r1!, {r6}
 8003a74:	0605      	lsls	r5, r0, #24
 8003a76:	d402      	bmi.n	8003a7e <_printf_i+0xbe>
 8003a78:	0640      	lsls	r0, r0, #25
 8003a7a:	d500      	bpl.n	8003a7e <_printf_i+0xbe>
 8003a7c:	b2b6      	uxth	r6, r6
 8003a7e:	6019      	str	r1, [r3, #0]
 8003a80:	4b54      	ldr	r3, [pc, #336]	@ (8003bd4 <_printf_i+0x214>)
 8003a82:	270a      	movs	r7, #10
 8003a84:	9304      	str	r3, [sp, #16]
 8003a86:	2a6f      	cmp	r2, #111	@ 0x6f
 8003a88:	d100      	bne.n	8003a8c <_printf_i+0xcc>
 8003a8a:	3f02      	subs	r7, #2
 8003a8c:	0023      	movs	r3, r4
 8003a8e:	2200      	movs	r2, #0
 8003a90:	3343      	adds	r3, #67	@ 0x43
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	6863      	ldr	r3, [r4, #4]
 8003a96:	60a3      	str	r3, [r4, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	db03      	blt.n	8003aa4 <_printf_i+0xe4>
 8003a9c:	2104      	movs	r1, #4
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	438a      	bics	r2, r1
 8003aa2:	6022      	str	r2, [r4, #0]
 8003aa4:	2e00      	cmp	r6, #0
 8003aa6:	d102      	bne.n	8003aae <_printf_i+0xee>
 8003aa8:	9d03      	ldr	r5, [sp, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <_printf_i+0x108>
 8003aae:	9d03      	ldr	r5, [sp, #12]
 8003ab0:	0030      	movs	r0, r6
 8003ab2:	0039      	movs	r1, r7
 8003ab4:	f7fc fbb8 	bl	8000228 <__aeabi_uidivmod>
 8003ab8:	9b04      	ldr	r3, [sp, #16]
 8003aba:	3d01      	subs	r5, #1
 8003abc:	5c5b      	ldrb	r3, [r3, r1]
 8003abe:	702b      	strb	r3, [r5, #0]
 8003ac0:	0033      	movs	r3, r6
 8003ac2:	0006      	movs	r6, r0
 8003ac4:	429f      	cmp	r7, r3
 8003ac6:	d9f3      	bls.n	8003ab0 <_printf_i+0xf0>
 8003ac8:	2f08      	cmp	r7, #8
 8003aca:	d109      	bne.n	8003ae0 <_printf_i+0x120>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	07db      	lsls	r3, r3, #31
 8003ad0:	d506      	bpl.n	8003ae0 <_printf_i+0x120>
 8003ad2:	6862      	ldr	r2, [r4, #4]
 8003ad4:	6923      	ldr	r3, [r4, #16]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	dc02      	bgt.n	8003ae0 <_printf_i+0x120>
 8003ada:	2330      	movs	r3, #48	@ 0x30
 8003adc:	3d01      	subs	r5, #1
 8003ade:	702b      	strb	r3, [r5, #0]
 8003ae0:	9b03      	ldr	r3, [sp, #12]
 8003ae2:	1b5b      	subs	r3, r3, r5
 8003ae4:	6123      	str	r3, [r4, #16]
 8003ae6:	9b07      	ldr	r3, [sp, #28]
 8003ae8:	0021      	movs	r1, r4
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	9805      	ldr	r0, [sp, #20]
 8003aee:	9b06      	ldr	r3, [sp, #24]
 8003af0:	aa09      	add	r2, sp, #36	@ 0x24
 8003af2:	f7ff fef5 	bl	80038e0 <_printf_common>
 8003af6:	3001      	adds	r0, #1
 8003af8:	d148      	bne.n	8003b8c <_printf_i+0x1cc>
 8003afa:	2001      	movs	r0, #1
 8003afc:	4240      	negs	r0, r0
 8003afe:	b00b      	add	sp, #44	@ 0x2c
 8003b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b02:	2220      	movs	r2, #32
 8003b04:	6809      	ldr	r1, [r1, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	6022      	str	r2, [r4, #0]
 8003b0a:	2278      	movs	r2, #120	@ 0x78
 8003b0c:	4932      	ldr	r1, [pc, #200]	@ (8003bd8 <_printf_i+0x218>)
 8003b0e:	9104      	str	r1, [sp, #16]
 8003b10:	0021      	movs	r1, r4
 8003b12:	3145      	adds	r1, #69	@ 0x45
 8003b14:	700a      	strb	r2, [r1, #0]
 8003b16:	6819      	ldr	r1, [r3, #0]
 8003b18:	6822      	ldr	r2, [r4, #0]
 8003b1a:	c940      	ldmia	r1!, {r6}
 8003b1c:	0610      	lsls	r0, r2, #24
 8003b1e:	d402      	bmi.n	8003b26 <_printf_i+0x166>
 8003b20:	0650      	lsls	r0, r2, #25
 8003b22:	d500      	bpl.n	8003b26 <_printf_i+0x166>
 8003b24:	b2b6      	uxth	r6, r6
 8003b26:	6019      	str	r1, [r3, #0]
 8003b28:	07d3      	lsls	r3, r2, #31
 8003b2a:	d502      	bpl.n	8003b32 <_printf_i+0x172>
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	2e00      	cmp	r6, #0
 8003b34:	d001      	beq.n	8003b3a <_printf_i+0x17a>
 8003b36:	2710      	movs	r7, #16
 8003b38:	e7a8      	b.n	8003a8c <_printf_i+0xcc>
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	4393      	bics	r3, r2
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	e7f8      	b.n	8003b36 <_printf_i+0x176>
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	680d      	ldr	r5, [r1, #0]
 8003b48:	1d10      	adds	r0, r2, #4
 8003b4a:	6949      	ldr	r1, [r1, #20]
 8003b4c:	6018      	str	r0, [r3, #0]
 8003b4e:	6813      	ldr	r3, [r2, #0]
 8003b50:	062e      	lsls	r6, r5, #24
 8003b52:	d501      	bpl.n	8003b58 <_printf_i+0x198>
 8003b54:	6019      	str	r1, [r3, #0]
 8003b56:	e002      	b.n	8003b5e <_printf_i+0x19e>
 8003b58:	066d      	lsls	r5, r5, #25
 8003b5a:	d5fb      	bpl.n	8003b54 <_printf_i+0x194>
 8003b5c:	8019      	strh	r1, [r3, #0]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	9d03      	ldr	r5, [sp, #12]
 8003b62:	6123      	str	r3, [r4, #16]
 8003b64:	e7bf      	b.n	8003ae6 <_printf_i+0x126>
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	1d11      	adds	r1, r2, #4
 8003b6a:	6019      	str	r1, [r3, #0]
 8003b6c:	6815      	ldr	r5, [r2, #0]
 8003b6e:	2100      	movs	r1, #0
 8003b70:	0028      	movs	r0, r5
 8003b72:	6862      	ldr	r2, [r4, #4]
 8003b74:	f000 f996 	bl	8003ea4 <memchr>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d001      	beq.n	8003b80 <_printf_i+0x1c0>
 8003b7c:	1b40      	subs	r0, r0, r5
 8003b7e:	6060      	str	r0, [r4, #4]
 8003b80:	6863      	ldr	r3, [r4, #4]
 8003b82:	6123      	str	r3, [r4, #16]
 8003b84:	2300      	movs	r3, #0
 8003b86:	9a03      	ldr	r2, [sp, #12]
 8003b88:	7013      	strb	r3, [r2, #0]
 8003b8a:	e7ac      	b.n	8003ae6 <_printf_i+0x126>
 8003b8c:	002a      	movs	r2, r5
 8003b8e:	6923      	ldr	r3, [r4, #16]
 8003b90:	9906      	ldr	r1, [sp, #24]
 8003b92:	9805      	ldr	r0, [sp, #20]
 8003b94:	9d07      	ldr	r5, [sp, #28]
 8003b96:	47a8      	blx	r5
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d0ae      	beq.n	8003afa <_printf_i+0x13a>
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	079b      	lsls	r3, r3, #30
 8003ba0:	d415      	bmi.n	8003bce <_printf_i+0x20e>
 8003ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ba4:	68e0      	ldr	r0, [r4, #12]
 8003ba6:	4298      	cmp	r0, r3
 8003ba8:	daa9      	bge.n	8003afe <_printf_i+0x13e>
 8003baa:	0018      	movs	r0, r3
 8003bac:	e7a7      	b.n	8003afe <_printf_i+0x13e>
 8003bae:	0022      	movs	r2, r4
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	9906      	ldr	r1, [sp, #24]
 8003bb4:	9805      	ldr	r0, [sp, #20]
 8003bb6:	9e07      	ldr	r6, [sp, #28]
 8003bb8:	3219      	adds	r2, #25
 8003bba:	47b0      	blx	r6
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d09c      	beq.n	8003afa <_printf_i+0x13a>
 8003bc0:	3501      	adds	r5, #1
 8003bc2:	68e3      	ldr	r3, [r4, #12]
 8003bc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	42ab      	cmp	r3, r5
 8003bca:	dcf0      	bgt.n	8003bae <_printf_i+0x1ee>
 8003bcc:	e7e9      	b.n	8003ba2 <_printf_i+0x1e2>
 8003bce:	2500      	movs	r5, #0
 8003bd0:	e7f7      	b.n	8003bc2 <_printf_i+0x202>
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	08004061 	.word	0x08004061
 8003bd8:	08004072 	.word	0x08004072

08003bdc <__sflush_r>:
 8003bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bde:	220c      	movs	r2, #12
 8003be0:	5e8b      	ldrsh	r3, [r1, r2]
 8003be2:	0005      	movs	r5, r0
 8003be4:	000c      	movs	r4, r1
 8003be6:	071a      	lsls	r2, r3, #28
 8003be8:	d456      	bmi.n	8003c98 <__sflush_r+0xbc>
 8003bea:	684a      	ldr	r2, [r1, #4]
 8003bec:	2a00      	cmp	r2, #0
 8003bee:	dc02      	bgt.n	8003bf6 <__sflush_r+0x1a>
 8003bf0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003bf2:	2a00      	cmp	r2, #0
 8003bf4:	dd4e      	ble.n	8003c94 <__sflush_r+0xb8>
 8003bf6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003bf8:	2f00      	cmp	r7, #0
 8003bfa:	d04b      	beq.n	8003c94 <__sflush_r+0xb8>
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2080      	movs	r0, #128	@ 0x80
 8003c00:	682e      	ldr	r6, [r5, #0]
 8003c02:	602a      	str	r2, [r5, #0]
 8003c04:	001a      	movs	r2, r3
 8003c06:	0140      	lsls	r0, r0, #5
 8003c08:	6a21      	ldr	r1, [r4, #32]
 8003c0a:	4002      	ands	r2, r0
 8003c0c:	4203      	tst	r3, r0
 8003c0e:	d033      	beq.n	8003c78 <__sflush_r+0x9c>
 8003c10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c12:	89a3      	ldrh	r3, [r4, #12]
 8003c14:	075b      	lsls	r3, r3, #29
 8003c16:	d506      	bpl.n	8003c26 <__sflush_r+0x4a>
 8003c18:	6863      	ldr	r3, [r4, #4]
 8003c1a:	1ad2      	subs	r2, r2, r3
 8003c1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <__sflush_r+0x4a>
 8003c22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c24:	1ad2      	subs	r2, r2, r3
 8003c26:	2300      	movs	r3, #0
 8003c28:	0028      	movs	r0, r5
 8003c2a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003c2c:	6a21      	ldr	r1, [r4, #32]
 8003c2e:	47b8      	blx	r7
 8003c30:	89a2      	ldrh	r2, [r4, #12]
 8003c32:	1c43      	adds	r3, r0, #1
 8003c34:	d106      	bne.n	8003c44 <__sflush_r+0x68>
 8003c36:	6829      	ldr	r1, [r5, #0]
 8003c38:	291d      	cmp	r1, #29
 8003c3a:	d846      	bhi.n	8003cca <__sflush_r+0xee>
 8003c3c:	4b29      	ldr	r3, [pc, #164]	@ (8003ce4 <__sflush_r+0x108>)
 8003c3e:	410b      	asrs	r3, r1
 8003c40:	07db      	lsls	r3, r3, #31
 8003c42:	d442      	bmi.n	8003cca <__sflush_r+0xee>
 8003c44:	2300      	movs	r3, #0
 8003c46:	6063      	str	r3, [r4, #4]
 8003c48:	6923      	ldr	r3, [r4, #16]
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	04d2      	lsls	r2, r2, #19
 8003c4e:	d505      	bpl.n	8003c5c <__sflush_r+0x80>
 8003c50:	1c43      	adds	r3, r0, #1
 8003c52:	d102      	bne.n	8003c5a <__sflush_r+0x7e>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d100      	bne.n	8003c5c <__sflush_r+0x80>
 8003c5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c5e:	602e      	str	r6, [r5, #0]
 8003c60:	2900      	cmp	r1, #0
 8003c62:	d017      	beq.n	8003c94 <__sflush_r+0xb8>
 8003c64:	0023      	movs	r3, r4
 8003c66:	3344      	adds	r3, #68	@ 0x44
 8003c68:	4299      	cmp	r1, r3
 8003c6a:	d002      	beq.n	8003c72 <__sflush_r+0x96>
 8003c6c:	0028      	movs	r0, r5
 8003c6e:	f7ff fbf7 	bl	8003460 <_free_r>
 8003c72:	2300      	movs	r3, #0
 8003c74:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c76:	e00d      	b.n	8003c94 <__sflush_r+0xb8>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	0028      	movs	r0, r5
 8003c7c:	47b8      	blx	r7
 8003c7e:	0002      	movs	r2, r0
 8003c80:	1c43      	adds	r3, r0, #1
 8003c82:	d1c6      	bne.n	8003c12 <__sflush_r+0x36>
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0c3      	beq.n	8003c12 <__sflush_r+0x36>
 8003c8a:	2b1d      	cmp	r3, #29
 8003c8c:	d001      	beq.n	8003c92 <__sflush_r+0xb6>
 8003c8e:	2b16      	cmp	r3, #22
 8003c90:	d11a      	bne.n	8003cc8 <__sflush_r+0xec>
 8003c92:	602e      	str	r6, [r5, #0]
 8003c94:	2000      	movs	r0, #0
 8003c96:	e01e      	b.n	8003cd6 <__sflush_r+0xfa>
 8003c98:	690e      	ldr	r6, [r1, #16]
 8003c9a:	2e00      	cmp	r6, #0
 8003c9c:	d0fa      	beq.n	8003c94 <__sflush_r+0xb8>
 8003c9e:	680f      	ldr	r7, [r1, #0]
 8003ca0:	600e      	str	r6, [r1, #0]
 8003ca2:	1bba      	subs	r2, r7, r6
 8003ca4:	9201      	str	r2, [sp, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	079b      	lsls	r3, r3, #30
 8003caa:	d100      	bne.n	8003cae <__sflush_r+0xd2>
 8003cac:	694a      	ldr	r2, [r1, #20]
 8003cae:	60a2      	str	r2, [r4, #8]
 8003cb0:	9b01      	ldr	r3, [sp, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	ddee      	ble.n	8003c94 <__sflush_r+0xb8>
 8003cb6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003cb8:	0032      	movs	r2, r6
 8003cba:	001f      	movs	r7, r3
 8003cbc:	0028      	movs	r0, r5
 8003cbe:	9b01      	ldr	r3, [sp, #4]
 8003cc0:	6a21      	ldr	r1, [r4, #32]
 8003cc2:	47b8      	blx	r7
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	dc07      	bgt.n	8003cd8 <__sflush_r+0xfc>
 8003cc8:	89a2      	ldrh	r2, [r4, #12]
 8003cca:	2340      	movs	r3, #64	@ 0x40
 8003ccc:	2001      	movs	r0, #1
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	b21b      	sxth	r3, r3
 8003cd2:	81a3      	strh	r3, [r4, #12]
 8003cd4:	4240      	negs	r0, r0
 8003cd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cd8:	9b01      	ldr	r3, [sp, #4]
 8003cda:	1836      	adds	r6, r6, r0
 8003cdc:	1a1b      	subs	r3, r3, r0
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	e7e6      	b.n	8003cb0 <__sflush_r+0xd4>
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	dfbffffe 	.word	0xdfbffffe

08003ce8 <_fflush_r>:
 8003ce8:	690b      	ldr	r3, [r1, #16]
 8003cea:	b570      	push	{r4, r5, r6, lr}
 8003cec:	0005      	movs	r5, r0
 8003cee:	000c      	movs	r4, r1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <_fflush_r+0x12>
 8003cf4:	2500      	movs	r5, #0
 8003cf6:	0028      	movs	r0, r5
 8003cf8:	bd70      	pop	{r4, r5, r6, pc}
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	d004      	beq.n	8003d08 <_fflush_r+0x20>
 8003cfe:	6a03      	ldr	r3, [r0, #32]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <_fflush_r+0x20>
 8003d04:	f7ff fa98 	bl	8003238 <__sinit>
 8003d08:	220c      	movs	r2, #12
 8003d0a:	5ea3      	ldrsh	r3, [r4, r2]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f1      	beq.n	8003cf4 <_fflush_r+0xc>
 8003d10:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d12:	07d2      	lsls	r2, r2, #31
 8003d14:	d404      	bmi.n	8003d20 <_fflush_r+0x38>
 8003d16:	059b      	lsls	r3, r3, #22
 8003d18:	d402      	bmi.n	8003d20 <_fflush_r+0x38>
 8003d1a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d1c:	f7ff fb9d 	bl	800345a <__retarget_lock_acquire_recursive>
 8003d20:	0028      	movs	r0, r5
 8003d22:	0021      	movs	r1, r4
 8003d24:	f7ff ff5a 	bl	8003bdc <__sflush_r>
 8003d28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d2a:	0005      	movs	r5, r0
 8003d2c:	07db      	lsls	r3, r3, #31
 8003d2e:	d4e2      	bmi.n	8003cf6 <_fflush_r+0xe>
 8003d30:	89a3      	ldrh	r3, [r4, #12]
 8003d32:	059b      	lsls	r3, r3, #22
 8003d34:	d4df      	bmi.n	8003cf6 <_fflush_r+0xe>
 8003d36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d38:	f7ff fb90 	bl	800345c <__retarget_lock_release_recursive>
 8003d3c:	e7db      	b.n	8003cf6 <_fflush_r+0xe>

08003d3e <__swbuf_r>:
 8003d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d40:	0006      	movs	r6, r0
 8003d42:	000d      	movs	r5, r1
 8003d44:	0014      	movs	r4, r2
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d004      	beq.n	8003d54 <__swbuf_r+0x16>
 8003d4a:	6a03      	ldr	r3, [r0, #32]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <__swbuf_r+0x16>
 8003d50:	f7ff fa72 	bl	8003238 <__sinit>
 8003d54:	69a3      	ldr	r3, [r4, #24]
 8003d56:	60a3      	str	r3, [r4, #8]
 8003d58:	89a3      	ldrh	r3, [r4, #12]
 8003d5a:	071b      	lsls	r3, r3, #28
 8003d5c:	d502      	bpl.n	8003d64 <__swbuf_r+0x26>
 8003d5e:	6923      	ldr	r3, [r4, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <__swbuf_r+0x3a>
 8003d64:	0021      	movs	r1, r4
 8003d66:	0030      	movs	r0, r6
 8003d68:	f000 f82c 	bl	8003dc4 <__swsetup_r>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	d003      	beq.n	8003d78 <__swbuf_r+0x3a>
 8003d70:	2501      	movs	r5, #1
 8003d72:	426d      	negs	r5, r5
 8003d74:	0028      	movs	r0, r5
 8003d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d78:	6923      	ldr	r3, [r4, #16]
 8003d7a:	6820      	ldr	r0, [r4, #0]
 8003d7c:	b2ef      	uxtb	r7, r5
 8003d7e:	1ac0      	subs	r0, r0, r3
 8003d80:	6963      	ldr	r3, [r4, #20]
 8003d82:	b2ed      	uxtb	r5, r5
 8003d84:	4283      	cmp	r3, r0
 8003d86:	dc05      	bgt.n	8003d94 <__swbuf_r+0x56>
 8003d88:	0021      	movs	r1, r4
 8003d8a:	0030      	movs	r0, r6
 8003d8c:	f7ff ffac 	bl	8003ce8 <_fflush_r>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d1ed      	bne.n	8003d70 <__swbuf_r+0x32>
 8003d94:	68a3      	ldr	r3, [r4, #8]
 8003d96:	3001      	adds	r0, #1
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	60a3      	str	r3, [r4, #8]
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	6022      	str	r2, [r4, #0]
 8003da2:	701f      	strb	r7, [r3, #0]
 8003da4:	6963      	ldr	r3, [r4, #20]
 8003da6:	4283      	cmp	r3, r0
 8003da8:	d004      	beq.n	8003db4 <__swbuf_r+0x76>
 8003daa:	89a3      	ldrh	r3, [r4, #12]
 8003dac:	07db      	lsls	r3, r3, #31
 8003dae:	d5e1      	bpl.n	8003d74 <__swbuf_r+0x36>
 8003db0:	2d0a      	cmp	r5, #10
 8003db2:	d1df      	bne.n	8003d74 <__swbuf_r+0x36>
 8003db4:	0021      	movs	r1, r4
 8003db6:	0030      	movs	r0, r6
 8003db8:	f7ff ff96 	bl	8003ce8 <_fflush_r>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	d0d9      	beq.n	8003d74 <__swbuf_r+0x36>
 8003dc0:	e7d6      	b.n	8003d70 <__swbuf_r+0x32>
	...

08003dc4 <__swsetup_r>:
 8003dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e7c <__swsetup_r+0xb8>)
 8003dc6:	b570      	push	{r4, r5, r6, lr}
 8003dc8:	0005      	movs	r5, r0
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	000c      	movs	r4, r1
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d004      	beq.n	8003ddc <__swsetup_r+0x18>
 8003dd2:	6a03      	ldr	r3, [r0, #32]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <__swsetup_r+0x18>
 8003dd8:	f7ff fa2e 	bl	8003238 <__sinit>
 8003ddc:	230c      	movs	r3, #12
 8003dde:	5ee2      	ldrsh	r2, [r4, r3]
 8003de0:	0713      	lsls	r3, r2, #28
 8003de2:	d423      	bmi.n	8003e2c <__swsetup_r+0x68>
 8003de4:	06d3      	lsls	r3, r2, #27
 8003de6:	d407      	bmi.n	8003df8 <__swsetup_r+0x34>
 8003de8:	2309      	movs	r3, #9
 8003dea:	602b      	str	r3, [r5, #0]
 8003dec:	2340      	movs	r3, #64	@ 0x40
 8003dee:	2001      	movs	r0, #1
 8003df0:	4313      	orrs	r3, r2
 8003df2:	81a3      	strh	r3, [r4, #12]
 8003df4:	4240      	negs	r0, r0
 8003df6:	e03a      	b.n	8003e6e <__swsetup_r+0xaa>
 8003df8:	0752      	lsls	r2, r2, #29
 8003dfa:	d513      	bpl.n	8003e24 <__swsetup_r+0x60>
 8003dfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003dfe:	2900      	cmp	r1, #0
 8003e00:	d008      	beq.n	8003e14 <__swsetup_r+0x50>
 8003e02:	0023      	movs	r3, r4
 8003e04:	3344      	adds	r3, #68	@ 0x44
 8003e06:	4299      	cmp	r1, r3
 8003e08:	d002      	beq.n	8003e10 <__swsetup_r+0x4c>
 8003e0a:	0028      	movs	r0, r5
 8003e0c:	f7ff fb28 	bl	8003460 <_free_r>
 8003e10:	2300      	movs	r3, #0
 8003e12:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e14:	2224      	movs	r2, #36	@ 0x24
 8003e16:	89a3      	ldrh	r3, [r4, #12]
 8003e18:	4393      	bics	r3, r2
 8003e1a:	81a3      	strh	r3, [r4, #12]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6063      	str	r3, [r4, #4]
 8003e20:	6923      	ldr	r3, [r4, #16]
 8003e22:	6023      	str	r3, [r4, #0]
 8003e24:	2308      	movs	r3, #8
 8003e26:	89a2      	ldrh	r2, [r4, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	81a3      	strh	r3, [r4, #12]
 8003e2c:	6923      	ldr	r3, [r4, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10b      	bne.n	8003e4a <__swsetup_r+0x86>
 8003e32:	21a0      	movs	r1, #160	@ 0xa0
 8003e34:	2280      	movs	r2, #128	@ 0x80
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	0089      	lsls	r1, r1, #2
 8003e3a:	0092      	lsls	r2, r2, #2
 8003e3c:	400b      	ands	r3, r1
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <__swsetup_r+0x86>
 8003e42:	0021      	movs	r1, r4
 8003e44:	0028      	movs	r0, r5
 8003e46:	f000 f863 	bl	8003f10 <__smakebuf_r>
 8003e4a:	230c      	movs	r3, #12
 8003e4c:	5ee2      	ldrsh	r2, [r4, r3]
 8003e4e:	2101      	movs	r1, #1
 8003e50:	0013      	movs	r3, r2
 8003e52:	400b      	ands	r3, r1
 8003e54:	420a      	tst	r2, r1
 8003e56:	d00b      	beq.n	8003e70 <__swsetup_r+0xac>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60a3      	str	r3, [r4, #8]
 8003e5c:	6963      	ldr	r3, [r4, #20]
 8003e5e:	425b      	negs	r3, r3
 8003e60:	61a3      	str	r3, [r4, #24]
 8003e62:	2000      	movs	r0, #0
 8003e64:	6923      	ldr	r3, [r4, #16]
 8003e66:	4283      	cmp	r3, r0
 8003e68:	d101      	bne.n	8003e6e <__swsetup_r+0xaa>
 8003e6a:	0613      	lsls	r3, r2, #24
 8003e6c:	d4be      	bmi.n	8003dec <__swsetup_r+0x28>
 8003e6e:	bd70      	pop	{r4, r5, r6, pc}
 8003e70:	0791      	lsls	r1, r2, #30
 8003e72:	d400      	bmi.n	8003e76 <__swsetup_r+0xb2>
 8003e74:	6963      	ldr	r3, [r4, #20]
 8003e76:	60a3      	str	r3, [r4, #8]
 8003e78:	e7f3      	b.n	8003e62 <__swsetup_r+0x9e>
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	20000018 	.word	0x20000018

08003e80 <_sbrk_r>:
 8003e80:	2300      	movs	r3, #0
 8003e82:	b570      	push	{r4, r5, r6, lr}
 8003e84:	4d06      	ldr	r5, [pc, #24]	@ (8003ea0 <_sbrk_r+0x20>)
 8003e86:	0004      	movs	r4, r0
 8003e88:	0008      	movs	r0, r1
 8003e8a:	602b      	str	r3, [r5, #0]
 8003e8c:	f7fc fd4a 	bl	8000924 <_sbrk>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d103      	bne.n	8003e9c <_sbrk_r+0x1c>
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d000      	beq.n	8003e9c <_sbrk_r+0x1c>
 8003e9a:	6023      	str	r3, [r4, #0]
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	200002a8 	.word	0x200002a8

08003ea4 <memchr>:
 8003ea4:	b2c9      	uxtb	r1, r1
 8003ea6:	1882      	adds	r2, r0, r2
 8003ea8:	4290      	cmp	r0, r2
 8003eaa:	d101      	bne.n	8003eb0 <memchr+0xc>
 8003eac:	2000      	movs	r0, #0
 8003eae:	4770      	bx	lr
 8003eb0:	7803      	ldrb	r3, [r0, #0]
 8003eb2:	428b      	cmp	r3, r1
 8003eb4:	d0fb      	beq.n	8003eae <memchr+0xa>
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	e7f6      	b.n	8003ea8 <memchr+0x4>
	...

08003ebc <__swhatbuf_r>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	000e      	movs	r6, r1
 8003ec0:	001d      	movs	r5, r3
 8003ec2:	230e      	movs	r3, #14
 8003ec4:	5ec9      	ldrsh	r1, [r1, r3]
 8003ec6:	0014      	movs	r4, r2
 8003ec8:	b096      	sub	sp, #88	@ 0x58
 8003eca:	2900      	cmp	r1, #0
 8003ecc:	da0c      	bge.n	8003ee8 <__swhatbuf_r+0x2c>
 8003ece:	89b2      	ldrh	r2, [r6, #12]
 8003ed0:	2380      	movs	r3, #128	@ 0x80
 8003ed2:	0011      	movs	r1, r2
 8003ed4:	4019      	ands	r1, r3
 8003ed6:	421a      	tst	r2, r3
 8003ed8:	d114      	bne.n	8003f04 <__swhatbuf_r+0x48>
 8003eda:	2380      	movs	r3, #128	@ 0x80
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	2000      	movs	r0, #0
 8003ee0:	6029      	str	r1, [r5, #0]
 8003ee2:	6023      	str	r3, [r4, #0]
 8003ee4:	b016      	add	sp, #88	@ 0x58
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	466a      	mov	r2, sp
 8003eea:	f000 f853 	bl	8003f94 <_fstat_r>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	dbed      	blt.n	8003ece <__swhatbuf_r+0x12>
 8003ef2:	23f0      	movs	r3, #240	@ 0xf0
 8003ef4:	9901      	ldr	r1, [sp, #4]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	4019      	ands	r1, r3
 8003efa:	4b04      	ldr	r3, [pc, #16]	@ (8003f0c <__swhatbuf_r+0x50>)
 8003efc:	18c9      	adds	r1, r1, r3
 8003efe:	424b      	negs	r3, r1
 8003f00:	4159      	adcs	r1, r3
 8003f02:	e7ea      	b.n	8003eda <__swhatbuf_r+0x1e>
 8003f04:	2100      	movs	r1, #0
 8003f06:	2340      	movs	r3, #64	@ 0x40
 8003f08:	e7e9      	b.n	8003ede <__swhatbuf_r+0x22>
 8003f0a:	46c0      	nop			@ (mov r8, r8)
 8003f0c:	ffffe000 	.word	0xffffe000

08003f10 <__smakebuf_r>:
 8003f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f12:	2602      	movs	r6, #2
 8003f14:	898b      	ldrh	r3, [r1, #12]
 8003f16:	0005      	movs	r5, r0
 8003f18:	000c      	movs	r4, r1
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	4233      	tst	r3, r6
 8003f1e:	d007      	beq.n	8003f30 <__smakebuf_r+0x20>
 8003f20:	0023      	movs	r3, r4
 8003f22:	3347      	adds	r3, #71	@ 0x47
 8003f24:	6023      	str	r3, [r4, #0]
 8003f26:	6123      	str	r3, [r4, #16]
 8003f28:	2301      	movs	r3, #1
 8003f2a:	6163      	str	r3, [r4, #20]
 8003f2c:	b005      	add	sp, #20
 8003f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f30:	ab03      	add	r3, sp, #12
 8003f32:	aa02      	add	r2, sp, #8
 8003f34:	f7ff ffc2 	bl	8003ebc <__swhatbuf_r>
 8003f38:	9f02      	ldr	r7, [sp, #8]
 8003f3a:	9001      	str	r0, [sp, #4]
 8003f3c:	0039      	movs	r1, r7
 8003f3e:	0028      	movs	r0, r5
 8003f40:	f7ff fafa 	bl	8003538 <_malloc_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d108      	bne.n	8003f5a <__smakebuf_r+0x4a>
 8003f48:	220c      	movs	r2, #12
 8003f4a:	5ea3      	ldrsh	r3, [r4, r2]
 8003f4c:	059a      	lsls	r2, r3, #22
 8003f4e:	d4ed      	bmi.n	8003f2c <__smakebuf_r+0x1c>
 8003f50:	2203      	movs	r2, #3
 8003f52:	4393      	bics	r3, r2
 8003f54:	431e      	orrs	r6, r3
 8003f56:	81a6      	strh	r6, [r4, #12]
 8003f58:	e7e2      	b.n	8003f20 <__smakebuf_r+0x10>
 8003f5a:	2380      	movs	r3, #128	@ 0x80
 8003f5c:	89a2      	ldrh	r2, [r4, #12]
 8003f5e:	6020      	str	r0, [r4, #0]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	81a3      	strh	r3, [r4, #12]
 8003f64:	9b03      	ldr	r3, [sp, #12]
 8003f66:	6120      	str	r0, [r4, #16]
 8003f68:	6167      	str	r7, [r4, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <__smakebuf_r+0x78>
 8003f6e:	0028      	movs	r0, r5
 8003f70:	230e      	movs	r3, #14
 8003f72:	5ee1      	ldrsh	r1, [r4, r3]
 8003f74:	f000 f820 	bl	8003fb8 <_isatty_r>
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d005      	beq.n	8003f88 <__smakebuf_r+0x78>
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	89a2      	ldrh	r2, [r4, #12]
 8003f80:	439a      	bics	r2, r3
 8003f82:	3b02      	subs	r3, #2
 8003f84:	4313      	orrs	r3, r2
 8003f86:	81a3      	strh	r3, [r4, #12]
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	9a01      	ldr	r2, [sp, #4]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	81a3      	strh	r3, [r4, #12]
 8003f90:	e7cc      	b.n	8003f2c <__smakebuf_r+0x1c>
	...

08003f94 <_fstat_r>:
 8003f94:	2300      	movs	r3, #0
 8003f96:	b570      	push	{r4, r5, r6, lr}
 8003f98:	4d06      	ldr	r5, [pc, #24]	@ (8003fb4 <_fstat_r+0x20>)
 8003f9a:	0004      	movs	r4, r0
 8003f9c:	0008      	movs	r0, r1
 8003f9e:	0011      	movs	r1, r2
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	f7fc fc9c 	bl	80008de <_fstat>
 8003fa6:	1c43      	adds	r3, r0, #1
 8003fa8:	d103      	bne.n	8003fb2 <_fstat_r+0x1e>
 8003faa:	682b      	ldr	r3, [r5, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d000      	beq.n	8003fb2 <_fstat_r+0x1e>
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	200002a8 	.word	0x200002a8

08003fb8 <_isatty_r>:
 8003fb8:	2300      	movs	r3, #0
 8003fba:	b570      	push	{r4, r5, r6, lr}
 8003fbc:	4d06      	ldr	r5, [pc, #24]	@ (8003fd8 <_isatty_r+0x20>)
 8003fbe:	0004      	movs	r4, r0
 8003fc0:	0008      	movs	r0, r1
 8003fc2:	602b      	str	r3, [r5, #0]
 8003fc4:	f7fc fc99 	bl	80008fa <_isatty>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d103      	bne.n	8003fd4 <_isatty_r+0x1c>
 8003fcc:	682b      	ldr	r3, [r5, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d000      	beq.n	8003fd4 <_isatty_r+0x1c>
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	bd70      	pop	{r4, r5, r6, pc}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	200002a8 	.word	0x200002a8

08003fdc <_init>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe2:	bc08      	pop	{r3}
 8003fe4:	469e      	mov	lr, r3
 8003fe6:	4770      	bx	lr

08003fe8 <_fini>:
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fee:	bc08      	pop	{r3}
 8003ff0:	469e      	mov	lr, r3
 8003ff2:	4770      	bx	lr
