
IR_decoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b64  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08005c24  08005c24  00006c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e18  08005e18  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  08005e18  08005e18  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e18  08005e18  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e18  08005e18  00006e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e1c  08005e1c  00006e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005e20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000068  08005e88  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08005e88  00007460  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da01  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b4  00000000  00000000  00014a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00016c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2b  00000000  00000000  00017940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000117ef  00000000  00000000  0001836b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe83  00000000  00000000  00029b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067ad7  00000000  00000000  000399dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a14b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003794  00000000  00000000  000a14f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000a4c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c0c 	.word	0x08005c0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005c0c 	.word	0x08005c0c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_f2uiz>:
 8000408:	219e      	movs	r1, #158	@ 0x9e
 800040a:	b510      	push	{r4, lr}
 800040c:	05c9      	lsls	r1, r1, #23
 800040e:	1c04      	adds	r4, r0, #0
 8000410:	f000 fcf2 	bl	8000df8 <__aeabi_fcmpge>
 8000414:	2800      	cmp	r0, #0
 8000416:	d103      	bne.n	8000420 <__aeabi_f2uiz+0x18>
 8000418:	1c20      	adds	r0, r4, #0
 800041a:	f000 fc0f 	bl	8000c3c <__aeabi_f2iz>
 800041e:	bd10      	pop	{r4, pc}
 8000420:	219e      	movs	r1, #158	@ 0x9e
 8000422:	1c20      	adds	r0, r4, #0
 8000424:	05c9      	lsls	r1, r1, #23
 8000426:	f000 fa65 	bl	80008f4 <__aeabi_fsub>
 800042a:	f000 fc07 	bl	8000c3c <__aeabi_f2iz>
 800042e:	2380      	movs	r3, #128	@ 0x80
 8000430:	061b      	lsls	r3, r3, #24
 8000432:	469c      	mov	ip, r3
 8000434:	4460      	add	r0, ip
 8000436:	e7f2      	b.n	800041e <__aeabi_f2uiz+0x16>

08000438 <__aeabi_fdiv>:
 8000438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043a:	464f      	mov	r7, r9
 800043c:	4646      	mov	r6, r8
 800043e:	46d6      	mov	lr, sl
 8000440:	0244      	lsls	r4, r0, #9
 8000442:	b5c0      	push	{r6, r7, lr}
 8000444:	0047      	lsls	r7, r0, #1
 8000446:	1c0e      	adds	r6, r1, #0
 8000448:	0a64      	lsrs	r4, r4, #9
 800044a:	0e3f      	lsrs	r7, r7, #24
 800044c:	0fc5      	lsrs	r5, r0, #31
 800044e:	2f00      	cmp	r7, #0
 8000450:	d03c      	beq.n	80004cc <__aeabi_fdiv+0x94>
 8000452:	2fff      	cmp	r7, #255	@ 0xff
 8000454:	d042      	beq.n	80004dc <__aeabi_fdiv+0xa4>
 8000456:	2300      	movs	r3, #0
 8000458:	2280      	movs	r2, #128	@ 0x80
 800045a:	4699      	mov	r9, r3
 800045c:	469a      	mov	sl, r3
 800045e:	00e4      	lsls	r4, r4, #3
 8000460:	04d2      	lsls	r2, r2, #19
 8000462:	4314      	orrs	r4, r2
 8000464:	3f7f      	subs	r7, #127	@ 0x7f
 8000466:	0273      	lsls	r3, r6, #9
 8000468:	0a5b      	lsrs	r3, r3, #9
 800046a:	4698      	mov	r8, r3
 800046c:	0073      	lsls	r3, r6, #1
 800046e:	0e1b      	lsrs	r3, r3, #24
 8000470:	0ff6      	lsrs	r6, r6, #31
 8000472:	2b00      	cmp	r3, #0
 8000474:	d01b      	beq.n	80004ae <__aeabi_fdiv+0x76>
 8000476:	2bff      	cmp	r3, #255	@ 0xff
 8000478:	d013      	beq.n	80004a2 <__aeabi_fdiv+0x6a>
 800047a:	4642      	mov	r2, r8
 800047c:	2180      	movs	r1, #128	@ 0x80
 800047e:	00d2      	lsls	r2, r2, #3
 8000480:	04c9      	lsls	r1, r1, #19
 8000482:	4311      	orrs	r1, r2
 8000484:	4688      	mov	r8, r1
 8000486:	2000      	movs	r0, #0
 8000488:	3b7f      	subs	r3, #127	@ 0x7f
 800048a:	0029      	movs	r1, r5
 800048c:	1aff      	subs	r7, r7, r3
 800048e:	464b      	mov	r3, r9
 8000490:	4071      	eors	r1, r6
 8000492:	b2c9      	uxtb	r1, r1
 8000494:	2b0f      	cmp	r3, #15
 8000496:	d900      	bls.n	800049a <__aeabi_fdiv+0x62>
 8000498:	e0b5      	b.n	8000606 <__aeabi_fdiv+0x1ce>
 800049a:	4a74      	ldr	r2, [pc, #464]	@ (800066c <__aeabi_fdiv+0x234>)
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	58d3      	ldr	r3, [r2, r3]
 80004a0:	469f      	mov	pc, r3
 80004a2:	4643      	mov	r3, r8
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d13f      	bne.n	8000528 <__aeabi_fdiv+0xf0>
 80004a8:	3fff      	subs	r7, #255	@ 0xff
 80004aa:	3302      	adds	r3, #2
 80004ac:	e003      	b.n	80004b6 <__aeabi_fdiv+0x7e>
 80004ae:	4643      	mov	r3, r8
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d12d      	bne.n	8000510 <__aeabi_fdiv+0xd8>
 80004b4:	2301      	movs	r3, #1
 80004b6:	0029      	movs	r1, r5
 80004b8:	464a      	mov	r2, r9
 80004ba:	4071      	eors	r1, r6
 80004bc:	b2c9      	uxtb	r1, r1
 80004be:	431a      	orrs	r2, r3
 80004c0:	2a0e      	cmp	r2, #14
 80004c2:	d838      	bhi.n	8000536 <__aeabi_fdiv+0xfe>
 80004c4:	486a      	ldr	r0, [pc, #424]	@ (8000670 <__aeabi_fdiv+0x238>)
 80004c6:	0092      	lsls	r2, r2, #2
 80004c8:	5882      	ldr	r2, [r0, r2]
 80004ca:	4697      	mov	pc, r2
 80004cc:	2c00      	cmp	r4, #0
 80004ce:	d113      	bne.n	80004f8 <__aeabi_fdiv+0xc0>
 80004d0:	2304      	movs	r3, #4
 80004d2:	4699      	mov	r9, r3
 80004d4:	3b03      	subs	r3, #3
 80004d6:	2700      	movs	r7, #0
 80004d8:	469a      	mov	sl, r3
 80004da:	e7c4      	b.n	8000466 <__aeabi_fdiv+0x2e>
 80004dc:	2c00      	cmp	r4, #0
 80004de:	d105      	bne.n	80004ec <__aeabi_fdiv+0xb4>
 80004e0:	2308      	movs	r3, #8
 80004e2:	4699      	mov	r9, r3
 80004e4:	3b06      	subs	r3, #6
 80004e6:	27ff      	movs	r7, #255	@ 0xff
 80004e8:	469a      	mov	sl, r3
 80004ea:	e7bc      	b.n	8000466 <__aeabi_fdiv+0x2e>
 80004ec:	230c      	movs	r3, #12
 80004ee:	4699      	mov	r9, r3
 80004f0:	3b09      	subs	r3, #9
 80004f2:	27ff      	movs	r7, #255	@ 0xff
 80004f4:	469a      	mov	sl, r3
 80004f6:	e7b6      	b.n	8000466 <__aeabi_fdiv+0x2e>
 80004f8:	0020      	movs	r0, r4
 80004fa:	f000 fc87 	bl	8000e0c <__clzsi2>
 80004fe:	2776      	movs	r7, #118	@ 0x76
 8000500:	1f43      	subs	r3, r0, #5
 8000502:	409c      	lsls	r4, r3
 8000504:	2300      	movs	r3, #0
 8000506:	427f      	negs	r7, r7
 8000508:	4699      	mov	r9, r3
 800050a:	469a      	mov	sl, r3
 800050c:	1a3f      	subs	r7, r7, r0
 800050e:	e7aa      	b.n	8000466 <__aeabi_fdiv+0x2e>
 8000510:	4640      	mov	r0, r8
 8000512:	f000 fc7b 	bl	8000e0c <__clzsi2>
 8000516:	4642      	mov	r2, r8
 8000518:	1f43      	subs	r3, r0, #5
 800051a:	409a      	lsls	r2, r3
 800051c:	2376      	movs	r3, #118	@ 0x76
 800051e:	425b      	negs	r3, r3
 8000520:	1a1b      	subs	r3, r3, r0
 8000522:	4690      	mov	r8, r2
 8000524:	2000      	movs	r0, #0
 8000526:	e7b0      	b.n	800048a <__aeabi_fdiv+0x52>
 8000528:	2303      	movs	r3, #3
 800052a:	464a      	mov	r2, r9
 800052c:	431a      	orrs	r2, r3
 800052e:	4691      	mov	r9, r2
 8000530:	2003      	movs	r0, #3
 8000532:	33fc      	adds	r3, #252	@ 0xfc
 8000534:	e7a9      	b.n	800048a <__aeabi_fdiv+0x52>
 8000536:	000d      	movs	r5, r1
 8000538:	20ff      	movs	r0, #255	@ 0xff
 800053a:	2200      	movs	r2, #0
 800053c:	05c0      	lsls	r0, r0, #23
 800053e:	07ed      	lsls	r5, r5, #31
 8000540:	4310      	orrs	r0, r2
 8000542:	4328      	orrs	r0, r5
 8000544:	bce0      	pop	{r5, r6, r7}
 8000546:	46ba      	mov	sl, r7
 8000548:	46b1      	mov	r9, r6
 800054a:	46a8      	mov	r8, r5
 800054c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054e:	000d      	movs	r5, r1
 8000550:	2000      	movs	r0, #0
 8000552:	2200      	movs	r2, #0
 8000554:	e7f2      	b.n	800053c <__aeabi_fdiv+0x104>
 8000556:	4653      	mov	r3, sl
 8000558:	2b02      	cmp	r3, #2
 800055a:	d0ed      	beq.n	8000538 <__aeabi_fdiv+0x100>
 800055c:	2b03      	cmp	r3, #3
 800055e:	d033      	beq.n	80005c8 <__aeabi_fdiv+0x190>
 8000560:	46a0      	mov	r8, r4
 8000562:	2b01      	cmp	r3, #1
 8000564:	d105      	bne.n	8000572 <__aeabi_fdiv+0x13a>
 8000566:	2000      	movs	r0, #0
 8000568:	2200      	movs	r2, #0
 800056a:	e7e7      	b.n	800053c <__aeabi_fdiv+0x104>
 800056c:	0035      	movs	r5, r6
 800056e:	2803      	cmp	r0, #3
 8000570:	d07a      	beq.n	8000668 <__aeabi_fdiv+0x230>
 8000572:	003b      	movs	r3, r7
 8000574:	337f      	adds	r3, #127	@ 0x7f
 8000576:	2b00      	cmp	r3, #0
 8000578:	dd2d      	ble.n	80005d6 <__aeabi_fdiv+0x19e>
 800057a:	4642      	mov	r2, r8
 800057c:	0752      	lsls	r2, r2, #29
 800057e:	d007      	beq.n	8000590 <__aeabi_fdiv+0x158>
 8000580:	220f      	movs	r2, #15
 8000582:	4641      	mov	r1, r8
 8000584:	400a      	ands	r2, r1
 8000586:	2a04      	cmp	r2, #4
 8000588:	d002      	beq.n	8000590 <__aeabi_fdiv+0x158>
 800058a:	2204      	movs	r2, #4
 800058c:	4694      	mov	ip, r2
 800058e:	44e0      	add	r8, ip
 8000590:	4642      	mov	r2, r8
 8000592:	0112      	lsls	r2, r2, #4
 8000594:	d505      	bpl.n	80005a2 <__aeabi_fdiv+0x16a>
 8000596:	4642      	mov	r2, r8
 8000598:	4b36      	ldr	r3, [pc, #216]	@ (8000674 <__aeabi_fdiv+0x23c>)
 800059a:	401a      	ands	r2, r3
 800059c:	003b      	movs	r3, r7
 800059e:	4690      	mov	r8, r2
 80005a0:	3380      	adds	r3, #128	@ 0x80
 80005a2:	2bfe      	cmp	r3, #254	@ 0xfe
 80005a4:	dcc8      	bgt.n	8000538 <__aeabi_fdiv+0x100>
 80005a6:	4642      	mov	r2, r8
 80005a8:	0192      	lsls	r2, r2, #6
 80005aa:	0a52      	lsrs	r2, r2, #9
 80005ac:	b2d8      	uxtb	r0, r3
 80005ae:	e7c5      	b.n	800053c <__aeabi_fdiv+0x104>
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	2500      	movs	r5, #0
 80005b4:	20ff      	movs	r0, #255	@ 0xff
 80005b6:	03d2      	lsls	r2, r2, #15
 80005b8:	e7c0      	b.n	800053c <__aeabi_fdiv+0x104>
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	03d2      	lsls	r2, r2, #15
 80005be:	4214      	tst	r4, r2
 80005c0:	d002      	beq.n	80005c8 <__aeabi_fdiv+0x190>
 80005c2:	4643      	mov	r3, r8
 80005c4:	4213      	tst	r3, r2
 80005c6:	d049      	beq.n	800065c <__aeabi_fdiv+0x224>
 80005c8:	2280      	movs	r2, #128	@ 0x80
 80005ca:	03d2      	lsls	r2, r2, #15
 80005cc:	4322      	orrs	r2, r4
 80005ce:	0252      	lsls	r2, r2, #9
 80005d0:	20ff      	movs	r0, #255	@ 0xff
 80005d2:	0a52      	lsrs	r2, r2, #9
 80005d4:	e7b2      	b.n	800053c <__aeabi_fdiv+0x104>
 80005d6:	2201      	movs	r2, #1
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	2b1b      	cmp	r3, #27
 80005dc:	dcc3      	bgt.n	8000566 <__aeabi_fdiv+0x12e>
 80005de:	4642      	mov	r2, r8
 80005e0:	40da      	lsrs	r2, r3
 80005e2:	4643      	mov	r3, r8
 80005e4:	379e      	adds	r7, #158	@ 0x9e
 80005e6:	40bb      	lsls	r3, r7
 80005e8:	1e59      	subs	r1, r3, #1
 80005ea:	418b      	sbcs	r3, r1
 80005ec:	431a      	orrs	r2, r3
 80005ee:	0753      	lsls	r3, r2, #29
 80005f0:	d004      	beq.n	80005fc <__aeabi_fdiv+0x1c4>
 80005f2:	230f      	movs	r3, #15
 80005f4:	4013      	ands	r3, r2
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	d000      	beq.n	80005fc <__aeabi_fdiv+0x1c4>
 80005fa:	3204      	adds	r2, #4
 80005fc:	0153      	lsls	r3, r2, #5
 80005fe:	d529      	bpl.n	8000654 <__aeabi_fdiv+0x21c>
 8000600:	2001      	movs	r0, #1
 8000602:	2200      	movs	r2, #0
 8000604:	e79a      	b.n	800053c <__aeabi_fdiv+0x104>
 8000606:	4642      	mov	r2, r8
 8000608:	0163      	lsls	r3, r4, #5
 800060a:	0155      	lsls	r5, r2, #5
 800060c:	42ab      	cmp	r3, r5
 800060e:	d215      	bcs.n	800063c <__aeabi_fdiv+0x204>
 8000610:	201b      	movs	r0, #27
 8000612:	2200      	movs	r2, #0
 8000614:	3f01      	subs	r7, #1
 8000616:	2601      	movs	r6, #1
 8000618:	001c      	movs	r4, r3
 800061a:	0052      	lsls	r2, r2, #1
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	2c00      	cmp	r4, #0
 8000620:	db01      	blt.n	8000626 <__aeabi_fdiv+0x1ee>
 8000622:	429d      	cmp	r5, r3
 8000624:	d801      	bhi.n	800062a <__aeabi_fdiv+0x1f2>
 8000626:	1b5b      	subs	r3, r3, r5
 8000628:	4332      	orrs	r2, r6
 800062a:	3801      	subs	r0, #1
 800062c:	2800      	cmp	r0, #0
 800062e:	d1f3      	bne.n	8000618 <__aeabi_fdiv+0x1e0>
 8000630:	1e58      	subs	r0, r3, #1
 8000632:	4183      	sbcs	r3, r0
 8000634:	4313      	orrs	r3, r2
 8000636:	4698      	mov	r8, r3
 8000638:	000d      	movs	r5, r1
 800063a:	e79a      	b.n	8000572 <__aeabi_fdiv+0x13a>
 800063c:	201a      	movs	r0, #26
 800063e:	2201      	movs	r2, #1
 8000640:	1b5b      	subs	r3, r3, r5
 8000642:	e7e8      	b.n	8000616 <__aeabi_fdiv+0x1de>
 8000644:	3b02      	subs	r3, #2
 8000646:	425a      	negs	r2, r3
 8000648:	4153      	adcs	r3, r2
 800064a:	425b      	negs	r3, r3
 800064c:	0035      	movs	r5, r6
 800064e:	2200      	movs	r2, #0
 8000650:	b2d8      	uxtb	r0, r3
 8000652:	e773      	b.n	800053c <__aeabi_fdiv+0x104>
 8000654:	0192      	lsls	r2, r2, #6
 8000656:	2000      	movs	r0, #0
 8000658:	0a52      	lsrs	r2, r2, #9
 800065a:	e76f      	b.n	800053c <__aeabi_fdiv+0x104>
 800065c:	431a      	orrs	r2, r3
 800065e:	0252      	lsls	r2, r2, #9
 8000660:	0035      	movs	r5, r6
 8000662:	20ff      	movs	r0, #255	@ 0xff
 8000664:	0a52      	lsrs	r2, r2, #9
 8000666:	e769      	b.n	800053c <__aeabi_fdiv+0x104>
 8000668:	4644      	mov	r4, r8
 800066a:	e7ad      	b.n	80005c8 <__aeabi_fdiv+0x190>
 800066c:	08005c30 	.word	0x08005c30
 8000670:	08005c70 	.word	0x08005c70
 8000674:	f7ffffff 	.word	0xf7ffffff

08000678 <__aeabi_fmul>:
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	464f      	mov	r7, r9
 800067c:	4646      	mov	r6, r8
 800067e:	46d6      	mov	lr, sl
 8000680:	0243      	lsls	r3, r0, #9
 8000682:	0a5b      	lsrs	r3, r3, #9
 8000684:	0045      	lsls	r5, r0, #1
 8000686:	b5c0      	push	{r6, r7, lr}
 8000688:	4699      	mov	r9, r3
 800068a:	1c0f      	adds	r7, r1, #0
 800068c:	0e2d      	lsrs	r5, r5, #24
 800068e:	0fc6      	lsrs	r6, r0, #31
 8000690:	2d00      	cmp	r5, #0
 8000692:	d100      	bne.n	8000696 <__aeabi_fmul+0x1e>
 8000694:	e088      	b.n	80007a8 <__aeabi_fmul+0x130>
 8000696:	2dff      	cmp	r5, #255	@ 0xff
 8000698:	d100      	bne.n	800069c <__aeabi_fmul+0x24>
 800069a:	e08d      	b.n	80007b8 <__aeabi_fmul+0x140>
 800069c:	2280      	movs	r2, #128	@ 0x80
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	04d2      	lsls	r2, r2, #19
 80006a2:	431a      	orrs	r2, r3
 80006a4:	2300      	movs	r3, #0
 80006a6:	4691      	mov	r9, r2
 80006a8:	4698      	mov	r8, r3
 80006aa:	469a      	mov	sl, r3
 80006ac:	3d7f      	subs	r5, #127	@ 0x7f
 80006ae:	027c      	lsls	r4, r7, #9
 80006b0:	007b      	lsls	r3, r7, #1
 80006b2:	0a64      	lsrs	r4, r4, #9
 80006b4:	0e1b      	lsrs	r3, r3, #24
 80006b6:	0fff      	lsrs	r7, r7, #31
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d068      	beq.n	800078e <__aeabi_fmul+0x116>
 80006bc:	2bff      	cmp	r3, #255	@ 0xff
 80006be:	d021      	beq.n	8000704 <__aeabi_fmul+0x8c>
 80006c0:	2280      	movs	r2, #128	@ 0x80
 80006c2:	00e4      	lsls	r4, r4, #3
 80006c4:	04d2      	lsls	r2, r2, #19
 80006c6:	4314      	orrs	r4, r2
 80006c8:	4642      	mov	r2, r8
 80006ca:	3b7f      	subs	r3, #127	@ 0x7f
 80006cc:	195b      	adds	r3, r3, r5
 80006ce:	2100      	movs	r1, #0
 80006d0:	1c5d      	adds	r5, r3, #1
 80006d2:	2a0a      	cmp	r2, #10
 80006d4:	dc2e      	bgt.n	8000734 <__aeabi_fmul+0xbc>
 80006d6:	407e      	eors	r6, r7
 80006d8:	4642      	mov	r2, r8
 80006da:	2a02      	cmp	r2, #2
 80006dc:	dc23      	bgt.n	8000726 <__aeabi_fmul+0xae>
 80006de:	3a01      	subs	r2, #1
 80006e0:	2a01      	cmp	r2, #1
 80006e2:	d900      	bls.n	80006e6 <__aeabi_fmul+0x6e>
 80006e4:	e0bd      	b.n	8000862 <__aeabi_fmul+0x1ea>
 80006e6:	2902      	cmp	r1, #2
 80006e8:	d06e      	beq.n	80007c8 <__aeabi_fmul+0x150>
 80006ea:	2901      	cmp	r1, #1
 80006ec:	d12c      	bne.n	8000748 <__aeabi_fmul+0xd0>
 80006ee:	2000      	movs	r0, #0
 80006f0:	2200      	movs	r2, #0
 80006f2:	05c0      	lsls	r0, r0, #23
 80006f4:	07f6      	lsls	r6, r6, #31
 80006f6:	4310      	orrs	r0, r2
 80006f8:	4330      	orrs	r0, r6
 80006fa:	bce0      	pop	{r5, r6, r7}
 80006fc:	46ba      	mov	sl, r7
 80006fe:	46b1      	mov	r9, r6
 8000700:	46a8      	mov	r8, r5
 8000702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000704:	002b      	movs	r3, r5
 8000706:	33ff      	adds	r3, #255	@ 0xff
 8000708:	2c00      	cmp	r4, #0
 800070a:	d065      	beq.n	80007d8 <__aeabi_fmul+0x160>
 800070c:	2203      	movs	r2, #3
 800070e:	4641      	mov	r1, r8
 8000710:	4311      	orrs	r1, r2
 8000712:	0032      	movs	r2, r6
 8000714:	3501      	adds	r5, #1
 8000716:	4688      	mov	r8, r1
 8000718:	407a      	eors	r2, r7
 800071a:	35ff      	adds	r5, #255	@ 0xff
 800071c:	290a      	cmp	r1, #10
 800071e:	dd00      	ble.n	8000722 <__aeabi_fmul+0xaa>
 8000720:	e0d8      	b.n	80008d4 <__aeabi_fmul+0x25c>
 8000722:	0016      	movs	r6, r2
 8000724:	2103      	movs	r1, #3
 8000726:	4640      	mov	r0, r8
 8000728:	2201      	movs	r2, #1
 800072a:	4082      	lsls	r2, r0
 800072c:	20a6      	movs	r0, #166	@ 0xa6
 800072e:	00c0      	lsls	r0, r0, #3
 8000730:	4202      	tst	r2, r0
 8000732:	d020      	beq.n	8000776 <__aeabi_fmul+0xfe>
 8000734:	4653      	mov	r3, sl
 8000736:	2b02      	cmp	r3, #2
 8000738:	d046      	beq.n	80007c8 <__aeabi_fmul+0x150>
 800073a:	2b03      	cmp	r3, #3
 800073c:	d100      	bne.n	8000740 <__aeabi_fmul+0xc8>
 800073e:	e0bb      	b.n	80008b8 <__aeabi_fmul+0x240>
 8000740:	4651      	mov	r1, sl
 8000742:	464c      	mov	r4, r9
 8000744:	2901      	cmp	r1, #1
 8000746:	d0d2      	beq.n	80006ee <__aeabi_fmul+0x76>
 8000748:	002b      	movs	r3, r5
 800074a:	337f      	adds	r3, #127	@ 0x7f
 800074c:	2b00      	cmp	r3, #0
 800074e:	dd70      	ble.n	8000832 <__aeabi_fmul+0x1ba>
 8000750:	0762      	lsls	r2, r4, #29
 8000752:	d004      	beq.n	800075e <__aeabi_fmul+0xe6>
 8000754:	220f      	movs	r2, #15
 8000756:	4022      	ands	r2, r4
 8000758:	2a04      	cmp	r2, #4
 800075a:	d000      	beq.n	800075e <__aeabi_fmul+0xe6>
 800075c:	3404      	adds	r4, #4
 800075e:	0122      	lsls	r2, r4, #4
 8000760:	d503      	bpl.n	800076a <__aeabi_fmul+0xf2>
 8000762:	4b63      	ldr	r3, [pc, #396]	@ (80008f0 <__aeabi_fmul+0x278>)
 8000764:	401c      	ands	r4, r3
 8000766:	002b      	movs	r3, r5
 8000768:	3380      	adds	r3, #128	@ 0x80
 800076a:	2bfe      	cmp	r3, #254	@ 0xfe
 800076c:	dc2c      	bgt.n	80007c8 <__aeabi_fmul+0x150>
 800076e:	01a2      	lsls	r2, r4, #6
 8000770:	0a52      	lsrs	r2, r2, #9
 8000772:	b2d8      	uxtb	r0, r3
 8000774:	e7bd      	b.n	80006f2 <__aeabi_fmul+0x7a>
 8000776:	2090      	movs	r0, #144	@ 0x90
 8000778:	0080      	lsls	r0, r0, #2
 800077a:	4202      	tst	r2, r0
 800077c:	d127      	bne.n	80007ce <__aeabi_fmul+0x156>
 800077e:	38b9      	subs	r0, #185	@ 0xb9
 8000780:	38ff      	subs	r0, #255	@ 0xff
 8000782:	4210      	tst	r0, r2
 8000784:	d06d      	beq.n	8000862 <__aeabi_fmul+0x1ea>
 8000786:	003e      	movs	r6, r7
 8000788:	46a1      	mov	r9, r4
 800078a:	468a      	mov	sl, r1
 800078c:	e7d2      	b.n	8000734 <__aeabi_fmul+0xbc>
 800078e:	2c00      	cmp	r4, #0
 8000790:	d141      	bne.n	8000816 <__aeabi_fmul+0x19e>
 8000792:	2301      	movs	r3, #1
 8000794:	4642      	mov	r2, r8
 8000796:	431a      	orrs	r2, r3
 8000798:	4690      	mov	r8, r2
 800079a:	002b      	movs	r3, r5
 800079c:	4642      	mov	r2, r8
 800079e:	2101      	movs	r1, #1
 80007a0:	1c5d      	adds	r5, r3, #1
 80007a2:	2a0a      	cmp	r2, #10
 80007a4:	dd97      	ble.n	80006d6 <__aeabi_fmul+0x5e>
 80007a6:	e7c5      	b.n	8000734 <__aeabi_fmul+0xbc>
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d126      	bne.n	80007fa <__aeabi_fmul+0x182>
 80007ac:	2304      	movs	r3, #4
 80007ae:	4698      	mov	r8, r3
 80007b0:	3b03      	subs	r3, #3
 80007b2:	2500      	movs	r5, #0
 80007b4:	469a      	mov	sl, r3
 80007b6:	e77a      	b.n	80006ae <__aeabi_fmul+0x36>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d118      	bne.n	80007ee <__aeabi_fmul+0x176>
 80007bc:	2308      	movs	r3, #8
 80007be:	4698      	mov	r8, r3
 80007c0:	3b06      	subs	r3, #6
 80007c2:	25ff      	movs	r5, #255	@ 0xff
 80007c4:	469a      	mov	sl, r3
 80007c6:	e772      	b.n	80006ae <__aeabi_fmul+0x36>
 80007c8:	20ff      	movs	r0, #255	@ 0xff
 80007ca:	2200      	movs	r2, #0
 80007cc:	e791      	b.n	80006f2 <__aeabi_fmul+0x7a>
 80007ce:	2280      	movs	r2, #128	@ 0x80
 80007d0:	2600      	movs	r6, #0
 80007d2:	20ff      	movs	r0, #255	@ 0xff
 80007d4:	03d2      	lsls	r2, r2, #15
 80007d6:	e78c      	b.n	80006f2 <__aeabi_fmul+0x7a>
 80007d8:	4641      	mov	r1, r8
 80007da:	2202      	movs	r2, #2
 80007dc:	3501      	adds	r5, #1
 80007de:	4311      	orrs	r1, r2
 80007e0:	4688      	mov	r8, r1
 80007e2:	35ff      	adds	r5, #255	@ 0xff
 80007e4:	290a      	cmp	r1, #10
 80007e6:	dca5      	bgt.n	8000734 <__aeabi_fmul+0xbc>
 80007e8:	2102      	movs	r1, #2
 80007ea:	407e      	eors	r6, r7
 80007ec:	e774      	b.n	80006d8 <__aeabi_fmul+0x60>
 80007ee:	230c      	movs	r3, #12
 80007f0:	4698      	mov	r8, r3
 80007f2:	3b09      	subs	r3, #9
 80007f4:	25ff      	movs	r5, #255	@ 0xff
 80007f6:	469a      	mov	sl, r3
 80007f8:	e759      	b.n	80006ae <__aeabi_fmul+0x36>
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 fb06 	bl	8000e0c <__clzsi2>
 8000800:	464a      	mov	r2, r9
 8000802:	1f43      	subs	r3, r0, #5
 8000804:	2576      	movs	r5, #118	@ 0x76
 8000806:	409a      	lsls	r2, r3
 8000808:	2300      	movs	r3, #0
 800080a:	426d      	negs	r5, r5
 800080c:	4691      	mov	r9, r2
 800080e:	4698      	mov	r8, r3
 8000810:	469a      	mov	sl, r3
 8000812:	1a2d      	subs	r5, r5, r0
 8000814:	e74b      	b.n	80006ae <__aeabi_fmul+0x36>
 8000816:	0020      	movs	r0, r4
 8000818:	f000 faf8 	bl	8000e0c <__clzsi2>
 800081c:	4642      	mov	r2, r8
 800081e:	1f43      	subs	r3, r0, #5
 8000820:	409c      	lsls	r4, r3
 8000822:	1a2b      	subs	r3, r5, r0
 8000824:	3b76      	subs	r3, #118	@ 0x76
 8000826:	2100      	movs	r1, #0
 8000828:	1c5d      	adds	r5, r3, #1
 800082a:	2a0a      	cmp	r2, #10
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fmul+0x1b8>
 800082e:	e752      	b.n	80006d6 <__aeabi_fmul+0x5e>
 8000830:	e780      	b.n	8000734 <__aeabi_fmul+0xbc>
 8000832:	2201      	movs	r2, #1
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	2b1b      	cmp	r3, #27
 8000838:	dd00      	ble.n	800083c <__aeabi_fmul+0x1c4>
 800083a:	e758      	b.n	80006ee <__aeabi_fmul+0x76>
 800083c:	359e      	adds	r5, #158	@ 0x9e
 800083e:	0022      	movs	r2, r4
 8000840:	40ac      	lsls	r4, r5
 8000842:	40da      	lsrs	r2, r3
 8000844:	1e63      	subs	r3, r4, #1
 8000846:	419c      	sbcs	r4, r3
 8000848:	4322      	orrs	r2, r4
 800084a:	0753      	lsls	r3, r2, #29
 800084c:	d004      	beq.n	8000858 <__aeabi_fmul+0x1e0>
 800084e:	230f      	movs	r3, #15
 8000850:	4013      	ands	r3, r2
 8000852:	2b04      	cmp	r3, #4
 8000854:	d000      	beq.n	8000858 <__aeabi_fmul+0x1e0>
 8000856:	3204      	adds	r2, #4
 8000858:	0153      	lsls	r3, r2, #5
 800085a:	d537      	bpl.n	80008cc <__aeabi_fmul+0x254>
 800085c:	2001      	movs	r0, #1
 800085e:	2200      	movs	r2, #0
 8000860:	e747      	b.n	80006f2 <__aeabi_fmul+0x7a>
 8000862:	0c21      	lsrs	r1, r4, #16
 8000864:	464a      	mov	r2, r9
 8000866:	0424      	lsls	r4, r4, #16
 8000868:	0c24      	lsrs	r4, r4, #16
 800086a:	0027      	movs	r7, r4
 800086c:	0c10      	lsrs	r0, r2, #16
 800086e:	0412      	lsls	r2, r2, #16
 8000870:	0c12      	lsrs	r2, r2, #16
 8000872:	4344      	muls	r4, r0
 8000874:	4357      	muls	r7, r2
 8000876:	4348      	muls	r0, r1
 8000878:	4351      	muls	r1, r2
 800087a:	0c3a      	lsrs	r2, r7, #16
 800087c:	1909      	adds	r1, r1, r4
 800087e:	1852      	adds	r2, r2, r1
 8000880:	4294      	cmp	r4, r2
 8000882:	d903      	bls.n	800088c <__aeabi_fmul+0x214>
 8000884:	2180      	movs	r1, #128	@ 0x80
 8000886:	0249      	lsls	r1, r1, #9
 8000888:	468c      	mov	ip, r1
 800088a:	4460      	add	r0, ip
 800088c:	043f      	lsls	r7, r7, #16
 800088e:	0411      	lsls	r1, r2, #16
 8000890:	0c3f      	lsrs	r7, r7, #16
 8000892:	19c9      	adds	r1, r1, r7
 8000894:	018c      	lsls	r4, r1, #6
 8000896:	1e67      	subs	r7, r4, #1
 8000898:	41bc      	sbcs	r4, r7
 800089a:	0c12      	lsrs	r2, r2, #16
 800089c:	0e89      	lsrs	r1, r1, #26
 800089e:	1812      	adds	r2, r2, r0
 80008a0:	430c      	orrs	r4, r1
 80008a2:	0192      	lsls	r2, r2, #6
 80008a4:	4314      	orrs	r4, r2
 80008a6:	0112      	lsls	r2, r2, #4
 80008a8:	d50e      	bpl.n	80008c8 <__aeabi_fmul+0x250>
 80008aa:	2301      	movs	r3, #1
 80008ac:	0862      	lsrs	r2, r4, #1
 80008ae:	401c      	ands	r4, r3
 80008b0:	4314      	orrs	r4, r2
 80008b2:	e749      	b.n	8000748 <__aeabi_fmul+0xd0>
 80008b4:	003e      	movs	r6, r7
 80008b6:	46a1      	mov	r9, r4
 80008b8:	2280      	movs	r2, #128	@ 0x80
 80008ba:	464b      	mov	r3, r9
 80008bc:	03d2      	lsls	r2, r2, #15
 80008be:	431a      	orrs	r2, r3
 80008c0:	0252      	lsls	r2, r2, #9
 80008c2:	20ff      	movs	r0, #255	@ 0xff
 80008c4:	0a52      	lsrs	r2, r2, #9
 80008c6:	e714      	b.n	80006f2 <__aeabi_fmul+0x7a>
 80008c8:	001d      	movs	r5, r3
 80008ca:	e73d      	b.n	8000748 <__aeabi_fmul+0xd0>
 80008cc:	0192      	lsls	r2, r2, #6
 80008ce:	2000      	movs	r0, #0
 80008d0:	0a52      	lsrs	r2, r2, #9
 80008d2:	e70e      	b.n	80006f2 <__aeabi_fmul+0x7a>
 80008d4:	290f      	cmp	r1, #15
 80008d6:	d1ed      	bne.n	80008b4 <__aeabi_fmul+0x23c>
 80008d8:	2280      	movs	r2, #128	@ 0x80
 80008da:	464b      	mov	r3, r9
 80008dc:	03d2      	lsls	r2, r2, #15
 80008de:	4213      	tst	r3, r2
 80008e0:	d0ea      	beq.n	80008b8 <__aeabi_fmul+0x240>
 80008e2:	4214      	tst	r4, r2
 80008e4:	d1e8      	bne.n	80008b8 <__aeabi_fmul+0x240>
 80008e6:	003e      	movs	r6, r7
 80008e8:	20ff      	movs	r0, #255	@ 0xff
 80008ea:	4322      	orrs	r2, r4
 80008ec:	e701      	b.n	80006f2 <__aeabi_fmul+0x7a>
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	f7ffffff 	.word	0xf7ffffff

080008f4 <__aeabi_fsub>:
 80008f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f6:	4647      	mov	r7, r8
 80008f8:	46ce      	mov	lr, r9
 80008fa:	024e      	lsls	r6, r1, #9
 80008fc:	0243      	lsls	r3, r0, #9
 80008fe:	0045      	lsls	r5, r0, #1
 8000900:	0a72      	lsrs	r2, r6, #9
 8000902:	0fc4      	lsrs	r4, r0, #31
 8000904:	0048      	lsls	r0, r1, #1
 8000906:	b580      	push	{r7, lr}
 8000908:	4694      	mov	ip, r2
 800090a:	0a5f      	lsrs	r7, r3, #9
 800090c:	0e2d      	lsrs	r5, r5, #24
 800090e:	099b      	lsrs	r3, r3, #6
 8000910:	0e00      	lsrs	r0, r0, #24
 8000912:	0fc9      	lsrs	r1, r1, #31
 8000914:	09b6      	lsrs	r6, r6, #6
 8000916:	28ff      	cmp	r0, #255	@ 0xff
 8000918:	d024      	beq.n	8000964 <__aeabi_fsub+0x70>
 800091a:	2201      	movs	r2, #1
 800091c:	4051      	eors	r1, r2
 800091e:	1a2a      	subs	r2, r5, r0
 8000920:	428c      	cmp	r4, r1
 8000922:	d00f      	beq.n	8000944 <__aeabi_fsub+0x50>
 8000924:	2a00      	cmp	r2, #0
 8000926:	dc00      	bgt.n	800092a <__aeabi_fsub+0x36>
 8000928:	e16a      	b.n	8000c00 <__aeabi_fsub+0x30c>
 800092a:	2800      	cmp	r0, #0
 800092c:	d135      	bne.n	800099a <__aeabi_fsub+0xa6>
 800092e:	2e00      	cmp	r6, #0
 8000930:	d100      	bne.n	8000934 <__aeabi_fsub+0x40>
 8000932:	e0a2      	b.n	8000a7a <__aeabi_fsub+0x186>
 8000934:	1e51      	subs	r1, r2, #1
 8000936:	2a01      	cmp	r2, #1
 8000938:	d100      	bne.n	800093c <__aeabi_fsub+0x48>
 800093a:	e124      	b.n	8000b86 <__aeabi_fsub+0x292>
 800093c:	2aff      	cmp	r2, #255	@ 0xff
 800093e:	d021      	beq.n	8000984 <__aeabi_fsub+0x90>
 8000940:	000a      	movs	r2, r1
 8000942:	e02f      	b.n	80009a4 <__aeabi_fsub+0xb0>
 8000944:	2a00      	cmp	r2, #0
 8000946:	dc00      	bgt.n	800094a <__aeabi_fsub+0x56>
 8000948:	e167      	b.n	8000c1a <__aeabi_fsub+0x326>
 800094a:	2800      	cmp	r0, #0
 800094c:	d05e      	beq.n	8000a0c <__aeabi_fsub+0x118>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d018      	beq.n	8000984 <__aeabi_fsub+0x90>
 8000952:	2180      	movs	r1, #128	@ 0x80
 8000954:	04c9      	lsls	r1, r1, #19
 8000956:	430e      	orrs	r6, r1
 8000958:	2a1b      	cmp	r2, #27
 800095a:	dc00      	bgt.n	800095e <__aeabi_fsub+0x6a>
 800095c:	e076      	b.n	8000a4c <__aeabi_fsub+0x158>
 800095e:	002a      	movs	r2, r5
 8000960:	3301      	adds	r3, #1
 8000962:	e032      	b.n	80009ca <__aeabi_fsub+0xd6>
 8000964:	002a      	movs	r2, r5
 8000966:	3aff      	subs	r2, #255	@ 0xff
 8000968:	4691      	mov	r9, r2
 800096a:	2e00      	cmp	r6, #0
 800096c:	d042      	beq.n	80009f4 <__aeabi_fsub+0x100>
 800096e:	428c      	cmp	r4, r1
 8000970:	d055      	beq.n	8000a1e <__aeabi_fsub+0x12a>
 8000972:	464a      	mov	r2, r9
 8000974:	2a00      	cmp	r2, #0
 8000976:	d100      	bne.n	800097a <__aeabi_fsub+0x86>
 8000978:	e09c      	b.n	8000ab4 <__aeabi_fsub+0x1c0>
 800097a:	2d00      	cmp	r5, #0
 800097c:	d100      	bne.n	8000980 <__aeabi_fsub+0x8c>
 800097e:	e077      	b.n	8000a70 <__aeabi_fsub+0x17c>
 8000980:	000c      	movs	r4, r1
 8000982:	0033      	movs	r3, r6
 8000984:	08db      	lsrs	r3, r3, #3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d100      	bne.n	800098c <__aeabi_fsub+0x98>
 800098a:	e06e      	b.n	8000a6a <__aeabi_fsub+0x176>
 800098c:	2280      	movs	r2, #128	@ 0x80
 800098e:	03d2      	lsls	r2, r2, #15
 8000990:	4313      	orrs	r3, r2
 8000992:	025b      	lsls	r3, r3, #9
 8000994:	20ff      	movs	r0, #255	@ 0xff
 8000996:	0a5b      	lsrs	r3, r3, #9
 8000998:	e024      	b.n	80009e4 <__aeabi_fsub+0xf0>
 800099a:	2dff      	cmp	r5, #255	@ 0xff
 800099c:	d0f2      	beq.n	8000984 <__aeabi_fsub+0x90>
 800099e:	2180      	movs	r1, #128	@ 0x80
 80009a0:	04c9      	lsls	r1, r1, #19
 80009a2:	430e      	orrs	r6, r1
 80009a4:	2101      	movs	r1, #1
 80009a6:	2a1b      	cmp	r2, #27
 80009a8:	dc08      	bgt.n	80009bc <__aeabi_fsub+0xc8>
 80009aa:	0031      	movs	r1, r6
 80009ac:	2020      	movs	r0, #32
 80009ae:	40d1      	lsrs	r1, r2
 80009b0:	1a82      	subs	r2, r0, r2
 80009b2:	4096      	lsls	r6, r2
 80009b4:	0032      	movs	r2, r6
 80009b6:	1e50      	subs	r0, r2, #1
 80009b8:	4182      	sbcs	r2, r0
 80009ba:	4311      	orrs	r1, r2
 80009bc:	1a5b      	subs	r3, r3, r1
 80009be:	015a      	lsls	r2, r3, #5
 80009c0:	d460      	bmi.n	8000a84 <__aeabi_fsub+0x190>
 80009c2:	2107      	movs	r1, #7
 80009c4:	002a      	movs	r2, r5
 80009c6:	4019      	ands	r1, r3
 80009c8:	d057      	beq.n	8000a7a <__aeabi_fsub+0x186>
 80009ca:	210f      	movs	r1, #15
 80009cc:	4019      	ands	r1, r3
 80009ce:	2904      	cmp	r1, #4
 80009d0:	d000      	beq.n	80009d4 <__aeabi_fsub+0xe0>
 80009d2:	3304      	adds	r3, #4
 80009d4:	0159      	lsls	r1, r3, #5
 80009d6:	d550      	bpl.n	8000a7a <__aeabi_fsub+0x186>
 80009d8:	1c50      	adds	r0, r2, #1
 80009da:	2afe      	cmp	r2, #254	@ 0xfe
 80009dc:	d045      	beq.n	8000a6a <__aeabi_fsub+0x176>
 80009de:	019b      	lsls	r3, r3, #6
 80009e0:	b2c0      	uxtb	r0, r0
 80009e2:	0a5b      	lsrs	r3, r3, #9
 80009e4:	05c0      	lsls	r0, r0, #23
 80009e6:	4318      	orrs	r0, r3
 80009e8:	07e4      	lsls	r4, r4, #31
 80009ea:	4320      	orrs	r0, r4
 80009ec:	bcc0      	pop	{r6, r7}
 80009ee:	46b9      	mov	r9, r7
 80009f0:	46b0      	mov	r8, r6
 80009f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009f4:	2201      	movs	r2, #1
 80009f6:	4051      	eors	r1, r2
 80009f8:	428c      	cmp	r4, r1
 80009fa:	d1ba      	bne.n	8000972 <__aeabi_fsub+0x7e>
 80009fc:	464a      	mov	r2, r9
 80009fe:	2a00      	cmp	r2, #0
 8000a00:	d010      	beq.n	8000a24 <__aeabi_fsub+0x130>
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fsub+0x114>
 8000a06:	e098      	b.n	8000b3a <__aeabi_fsub+0x246>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	e7bb      	b.n	8000984 <__aeabi_fsub+0x90>
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d034      	beq.n	8000a7a <__aeabi_fsub+0x186>
 8000a10:	1e51      	subs	r1, r2, #1
 8000a12:	2a01      	cmp	r2, #1
 8000a14:	d06e      	beq.n	8000af4 <__aeabi_fsub+0x200>
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d0b4      	beq.n	8000984 <__aeabi_fsub+0x90>
 8000a1a:	000a      	movs	r2, r1
 8000a1c:	e79c      	b.n	8000958 <__aeabi_fsub+0x64>
 8000a1e:	2a00      	cmp	r2, #0
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fsub+0x130>
 8000a22:	e088      	b.n	8000b36 <__aeabi_fsub+0x242>
 8000a24:	20fe      	movs	r0, #254	@ 0xfe
 8000a26:	1c6a      	adds	r2, r5, #1
 8000a28:	4210      	tst	r0, r2
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_fsub+0x13a>
 8000a2c:	e092      	b.n	8000b54 <__aeabi_fsub+0x260>
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d000      	beq.n	8000a34 <__aeabi_fsub+0x140>
 8000a32:	e0a4      	b.n	8000b7e <__aeabi_fsub+0x28a>
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fsub+0x146>
 8000a38:	e0cb      	b.n	8000bd2 <__aeabi_fsub+0x2de>
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_fsub+0x14c>
 8000a3e:	e0ca      	b.n	8000bd6 <__aeabi_fsub+0x2e2>
 8000a40:	2200      	movs	r2, #0
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	025b      	lsls	r3, r3, #9
 8000a46:	0a5b      	lsrs	r3, r3, #9
 8000a48:	b2d0      	uxtb	r0, r2
 8000a4a:	e7cb      	b.n	80009e4 <__aeabi_fsub+0xf0>
 8000a4c:	0031      	movs	r1, r6
 8000a4e:	2020      	movs	r0, #32
 8000a50:	40d1      	lsrs	r1, r2
 8000a52:	1a82      	subs	r2, r0, r2
 8000a54:	4096      	lsls	r6, r2
 8000a56:	0032      	movs	r2, r6
 8000a58:	1e50      	subs	r0, r2, #1
 8000a5a:	4182      	sbcs	r2, r0
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	189b      	adds	r3, r3, r2
 8000a60:	015a      	lsls	r2, r3, #5
 8000a62:	d5ae      	bpl.n	80009c2 <__aeabi_fsub+0xce>
 8000a64:	1c6a      	adds	r2, r5, #1
 8000a66:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a68:	d14a      	bne.n	8000b00 <__aeabi_fsub+0x20c>
 8000a6a:	20ff      	movs	r0, #255	@ 0xff
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	e7b9      	b.n	80009e4 <__aeabi_fsub+0xf0>
 8000a70:	22ff      	movs	r2, #255	@ 0xff
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d14b      	bne.n	8000b0e <__aeabi_fsub+0x21a>
 8000a76:	000c      	movs	r4, r1
 8000a78:	0033      	movs	r3, r6
 8000a7a:	08db      	lsrs	r3, r3, #3
 8000a7c:	2aff      	cmp	r2, #255	@ 0xff
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fsub+0x18e>
 8000a80:	e781      	b.n	8000986 <__aeabi_fsub+0x92>
 8000a82:	e7df      	b.n	8000a44 <__aeabi_fsub+0x150>
 8000a84:	019f      	lsls	r7, r3, #6
 8000a86:	09bf      	lsrs	r7, r7, #6
 8000a88:	0038      	movs	r0, r7
 8000a8a:	f000 f9bf 	bl	8000e0c <__clzsi2>
 8000a8e:	3805      	subs	r0, #5
 8000a90:	4087      	lsls	r7, r0
 8000a92:	4285      	cmp	r5, r0
 8000a94:	dc21      	bgt.n	8000ada <__aeabi_fsub+0x1e6>
 8000a96:	003b      	movs	r3, r7
 8000a98:	2120      	movs	r1, #32
 8000a9a:	1b42      	subs	r2, r0, r5
 8000a9c:	3201      	adds	r2, #1
 8000a9e:	40d3      	lsrs	r3, r2
 8000aa0:	1a8a      	subs	r2, r1, r2
 8000aa2:	4097      	lsls	r7, r2
 8000aa4:	1e7a      	subs	r2, r7, #1
 8000aa6:	4197      	sbcs	r7, r2
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	433b      	orrs	r3, r7
 8000aac:	0759      	lsls	r1, r3, #29
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_fsub+0x1be>
 8000ab0:	e78b      	b.n	80009ca <__aeabi_fsub+0xd6>
 8000ab2:	e78f      	b.n	80009d4 <__aeabi_fsub+0xe0>
 8000ab4:	20fe      	movs	r0, #254	@ 0xfe
 8000ab6:	1c6a      	adds	r2, r5, #1
 8000ab8:	4210      	tst	r0, r2
 8000aba:	d112      	bne.n	8000ae2 <__aeabi_fsub+0x1ee>
 8000abc:	2d00      	cmp	r5, #0
 8000abe:	d152      	bne.n	8000b66 <__aeabi_fsub+0x272>
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d07c      	beq.n	8000bbe <__aeabi_fsub+0x2ca>
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d0bb      	beq.n	8000a40 <__aeabi_fsub+0x14c>
 8000ac8:	1b9a      	subs	r2, r3, r6
 8000aca:	0150      	lsls	r0, r2, #5
 8000acc:	d400      	bmi.n	8000ad0 <__aeabi_fsub+0x1dc>
 8000ace:	e08b      	b.n	8000be8 <__aeabi_fsub+0x2f4>
 8000ad0:	2401      	movs	r4, #1
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	1af3      	subs	r3, r6, r3
 8000ad6:	400c      	ands	r4, r1
 8000ad8:	e7e8      	b.n	8000aac <__aeabi_fsub+0x1b8>
 8000ada:	4b56      	ldr	r3, [pc, #344]	@ (8000c34 <__aeabi_fsub+0x340>)
 8000adc:	1a2a      	subs	r2, r5, r0
 8000ade:	403b      	ands	r3, r7
 8000ae0:	e7e4      	b.n	8000aac <__aeabi_fsub+0x1b8>
 8000ae2:	1b9f      	subs	r7, r3, r6
 8000ae4:	017a      	lsls	r2, r7, #5
 8000ae6:	d446      	bmi.n	8000b76 <__aeabi_fsub+0x282>
 8000ae8:	2f00      	cmp	r7, #0
 8000aea:	d1cd      	bne.n	8000a88 <__aeabi_fsub+0x194>
 8000aec:	2400      	movs	r4, #0
 8000aee:	2000      	movs	r0, #0
 8000af0:	2300      	movs	r3, #0
 8000af2:	e777      	b.n	80009e4 <__aeabi_fsub+0xf0>
 8000af4:	199b      	adds	r3, r3, r6
 8000af6:	2501      	movs	r5, #1
 8000af8:	3201      	adds	r2, #1
 8000afa:	0159      	lsls	r1, r3, #5
 8000afc:	d400      	bmi.n	8000b00 <__aeabi_fsub+0x20c>
 8000afe:	e760      	b.n	80009c2 <__aeabi_fsub+0xce>
 8000b00:	2101      	movs	r1, #1
 8000b02:	484d      	ldr	r0, [pc, #308]	@ (8000c38 <__aeabi_fsub+0x344>)
 8000b04:	4019      	ands	r1, r3
 8000b06:	085b      	lsrs	r3, r3, #1
 8000b08:	4003      	ands	r3, r0
 8000b0a:	430b      	orrs	r3, r1
 8000b0c:	e7ce      	b.n	8000aac <__aeabi_fsub+0x1b8>
 8000b0e:	1e57      	subs	r7, r2, #1
 8000b10:	2a01      	cmp	r2, #1
 8000b12:	d05a      	beq.n	8000bca <__aeabi_fsub+0x2d6>
 8000b14:	000c      	movs	r4, r1
 8000b16:	2aff      	cmp	r2, #255	@ 0xff
 8000b18:	d033      	beq.n	8000b82 <__aeabi_fsub+0x28e>
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2f1b      	cmp	r7, #27
 8000b1e:	dc07      	bgt.n	8000b30 <__aeabi_fsub+0x23c>
 8000b20:	2120      	movs	r1, #32
 8000b22:	1bc9      	subs	r1, r1, r7
 8000b24:	001a      	movs	r2, r3
 8000b26:	408b      	lsls	r3, r1
 8000b28:	40fa      	lsrs	r2, r7
 8000b2a:	1e59      	subs	r1, r3, #1
 8000b2c:	418b      	sbcs	r3, r1
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	0005      	movs	r5, r0
 8000b32:	1ab3      	subs	r3, r6, r2
 8000b34:	e743      	b.n	80009be <__aeabi_fsub+0xca>
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	d123      	bne.n	8000b82 <__aeabi_fsub+0x28e>
 8000b3a:	22ff      	movs	r2, #255	@ 0xff
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d09b      	beq.n	8000a78 <__aeabi_fsub+0x184>
 8000b40:	1e51      	subs	r1, r2, #1
 8000b42:	2a01      	cmp	r2, #1
 8000b44:	d0d6      	beq.n	8000af4 <__aeabi_fsub+0x200>
 8000b46:	2aff      	cmp	r2, #255	@ 0xff
 8000b48:	d01b      	beq.n	8000b82 <__aeabi_fsub+0x28e>
 8000b4a:	291b      	cmp	r1, #27
 8000b4c:	dd2c      	ble.n	8000ba8 <__aeabi_fsub+0x2b4>
 8000b4e:	0002      	movs	r2, r0
 8000b50:	1c73      	adds	r3, r6, #1
 8000b52:	e73a      	b.n	80009ca <__aeabi_fsub+0xd6>
 8000b54:	2aff      	cmp	r2, #255	@ 0xff
 8000b56:	d088      	beq.n	8000a6a <__aeabi_fsub+0x176>
 8000b58:	199b      	adds	r3, r3, r6
 8000b5a:	085b      	lsrs	r3, r3, #1
 8000b5c:	0759      	lsls	r1, r3, #29
 8000b5e:	d000      	beq.n	8000b62 <__aeabi_fsub+0x26e>
 8000b60:	e733      	b.n	80009ca <__aeabi_fsub+0xd6>
 8000b62:	08db      	lsrs	r3, r3, #3
 8000b64:	e76e      	b.n	8000a44 <__aeabi_fsub+0x150>
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d110      	bne.n	8000b8c <__aeabi_fsub+0x298>
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	d043      	beq.n	8000bf6 <__aeabi_fsub+0x302>
 8000b6e:	2401      	movs	r4, #1
 8000b70:	0033      	movs	r3, r6
 8000b72:	400c      	ands	r4, r1
 8000b74:	e706      	b.n	8000984 <__aeabi_fsub+0x90>
 8000b76:	2401      	movs	r4, #1
 8000b78:	1af7      	subs	r7, r6, r3
 8000b7a:	400c      	ands	r4, r1
 8000b7c:	e784      	b.n	8000a88 <__aeabi_fsub+0x194>
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d104      	bne.n	8000b8c <__aeabi_fsub+0x298>
 8000b82:	0033      	movs	r3, r6
 8000b84:	e6fe      	b.n	8000984 <__aeabi_fsub+0x90>
 8000b86:	2501      	movs	r5, #1
 8000b88:	1b9b      	subs	r3, r3, r6
 8000b8a:	e718      	b.n	80009be <__aeabi_fsub+0xca>
 8000b8c:	2e00      	cmp	r6, #0
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_fsub+0x29e>
 8000b90:	e6f8      	b.n	8000984 <__aeabi_fsub+0x90>
 8000b92:	2280      	movs	r2, #128	@ 0x80
 8000b94:	03d2      	lsls	r2, r2, #15
 8000b96:	4297      	cmp	r7, r2
 8000b98:	d304      	bcc.n	8000ba4 <__aeabi_fsub+0x2b0>
 8000b9a:	4594      	cmp	ip, r2
 8000b9c:	d202      	bcs.n	8000ba4 <__aeabi_fsub+0x2b0>
 8000b9e:	2401      	movs	r4, #1
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	400c      	ands	r4, r1
 8000ba4:	08db      	lsrs	r3, r3, #3
 8000ba6:	e6f1      	b.n	800098c <__aeabi_fsub+0x98>
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2520      	movs	r5, #32
 8000bac:	40ca      	lsrs	r2, r1
 8000bae:	1a69      	subs	r1, r5, r1
 8000bb0:	408b      	lsls	r3, r1
 8000bb2:	1e59      	subs	r1, r3, #1
 8000bb4:	418b      	sbcs	r3, r1
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	0005      	movs	r5, r0
 8000bba:	199b      	adds	r3, r3, r6
 8000bbc:	e750      	b.n	8000a60 <__aeabi_fsub+0x16c>
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d094      	beq.n	8000aec <__aeabi_fsub+0x1f8>
 8000bc2:	2401      	movs	r4, #1
 8000bc4:	0033      	movs	r3, r6
 8000bc6:	400c      	ands	r4, r1
 8000bc8:	e73a      	b.n	8000a40 <__aeabi_fsub+0x14c>
 8000bca:	000c      	movs	r4, r1
 8000bcc:	2501      	movs	r5, #1
 8000bce:	1af3      	subs	r3, r6, r3
 8000bd0:	e6f5      	b.n	80009be <__aeabi_fsub+0xca>
 8000bd2:	0033      	movs	r3, r6
 8000bd4:	e734      	b.n	8000a40 <__aeabi_fsub+0x14c>
 8000bd6:	199b      	adds	r3, r3, r6
 8000bd8:	2200      	movs	r2, #0
 8000bda:	0159      	lsls	r1, r3, #5
 8000bdc:	d5c1      	bpl.n	8000b62 <__aeabi_fsub+0x26e>
 8000bde:	4a15      	ldr	r2, [pc, #84]	@ (8000c34 <__aeabi_fsub+0x340>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	2201      	movs	r2, #1
 8000be6:	e72d      	b.n	8000a44 <__aeabi_fsub+0x150>
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	d100      	bne.n	8000bee <__aeabi_fsub+0x2fa>
 8000bec:	e77e      	b.n	8000aec <__aeabi_fsub+0x1f8>
 8000bee:	0013      	movs	r3, r2
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	08db      	lsrs	r3, r3, #3
 8000bf4:	e726      	b.n	8000a44 <__aeabi_fsub+0x150>
 8000bf6:	2380      	movs	r3, #128	@ 0x80
 8000bf8:	2400      	movs	r4, #0
 8000bfa:	20ff      	movs	r0, #255	@ 0xff
 8000bfc:	03db      	lsls	r3, r3, #15
 8000bfe:	e6f1      	b.n	80009e4 <__aeabi_fsub+0xf0>
 8000c00:	2a00      	cmp	r2, #0
 8000c02:	d100      	bne.n	8000c06 <__aeabi_fsub+0x312>
 8000c04:	e756      	b.n	8000ab4 <__aeabi_fsub+0x1c0>
 8000c06:	1b47      	subs	r7, r0, r5
 8000c08:	003a      	movs	r2, r7
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fsub+0x31c>
 8000c0e:	e730      	b.n	8000a72 <__aeabi_fsub+0x17e>
 8000c10:	2280      	movs	r2, #128	@ 0x80
 8000c12:	04d2      	lsls	r2, r2, #19
 8000c14:	000c      	movs	r4, r1
 8000c16:	4313      	orrs	r3, r2
 8000c18:	e77f      	b.n	8000b1a <__aeabi_fsub+0x226>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_fsub+0x32c>
 8000c1e:	e701      	b.n	8000a24 <__aeabi_fsub+0x130>
 8000c20:	1b41      	subs	r1, r0, r5
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d101      	bne.n	8000c2a <__aeabi_fsub+0x336>
 8000c26:	000a      	movs	r2, r1
 8000c28:	e788      	b.n	8000b3c <__aeabi_fsub+0x248>
 8000c2a:	2280      	movs	r2, #128	@ 0x80
 8000c2c:	04d2      	lsls	r2, r2, #19
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	e78b      	b.n	8000b4a <__aeabi_fsub+0x256>
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	fbffffff 	.word	0xfbffffff
 8000c38:	7dffffff 	.word	0x7dffffff

08000c3c <__aeabi_f2iz>:
 8000c3c:	0241      	lsls	r1, r0, #9
 8000c3e:	0042      	lsls	r2, r0, #1
 8000c40:	0fc3      	lsrs	r3, r0, #31
 8000c42:	0a49      	lsrs	r1, r1, #9
 8000c44:	2000      	movs	r0, #0
 8000c46:	0e12      	lsrs	r2, r2, #24
 8000c48:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c4a:	dd03      	ble.n	8000c54 <__aeabi_f2iz+0x18>
 8000c4c:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c4e:	dd02      	ble.n	8000c56 <__aeabi_f2iz+0x1a>
 8000c50:	4a09      	ldr	r2, [pc, #36]	@ (8000c78 <__aeabi_f2iz+0x3c>)
 8000c52:	1898      	adds	r0, r3, r2
 8000c54:	4770      	bx	lr
 8000c56:	2080      	movs	r0, #128	@ 0x80
 8000c58:	0400      	lsls	r0, r0, #16
 8000c5a:	4301      	orrs	r1, r0
 8000c5c:	2a95      	cmp	r2, #149	@ 0x95
 8000c5e:	dc07      	bgt.n	8000c70 <__aeabi_f2iz+0x34>
 8000c60:	2096      	movs	r0, #150	@ 0x96
 8000c62:	1a82      	subs	r2, r0, r2
 8000c64:	40d1      	lsrs	r1, r2
 8000c66:	4248      	negs	r0, r1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1f3      	bne.n	8000c54 <__aeabi_f2iz+0x18>
 8000c6c:	0008      	movs	r0, r1
 8000c6e:	e7f1      	b.n	8000c54 <__aeabi_f2iz+0x18>
 8000c70:	3a96      	subs	r2, #150	@ 0x96
 8000c72:	4091      	lsls	r1, r2
 8000c74:	e7f7      	b.n	8000c66 <__aeabi_f2iz+0x2a>
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	7fffffff 	.word	0x7fffffff

08000c7c <__aeabi_i2f>:
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d013      	beq.n	8000caa <__aeabi_i2f+0x2e>
 8000c82:	17c3      	asrs	r3, r0, #31
 8000c84:	18c5      	adds	r5, r0, r3
 8000c86:	405d      	eors	r5, r3
 8000c88:	0fc4      	lsrs	r4, r0, #31
 8000c8a:	0028      	movs	r0, r5
 8000c8c:	f000 f8be 	bl	8000e0c <__clzsi2>
 8000c90:	239e      	movs	r3, #158	@ 0x9e
 8000c92:	0001      	movs	r1, r0
 8000c94:	1a1b      	subs	r3, r3, r0
 8000c96:	2b96      	cmp	r3, #150	@ 0x96
 8000c98:	dc0f      	bgt.n	8000cba <__aeabi_i2f+0x3e>
 8000c9a:	2808      	cmp	r0, #8
 8000c9c:	d034      	beq.n	8000d08 <__aeabi_i2f+0x8c>
 8000c9e:	3908      	subs	r1, #8
 8000ca0:	408d      	lsls	r5, r1
 8000ca2:	026d      	lsls	r5, r5, #9
 8000ca4:	0a6d      	lsrs	r5, r5, #9
 8000ca6:	b2d8      	uxtb	r0, r3
 8000ca8:	e002      	b.n	8000cb0 <__aeabi_i2f+0x34>
 8000caa:	2400      	movs	r4, #0
 8000cac:	2000      	movs	r0, #0
 8000cae:	2500      	movs	r5, #0
 8000cb0:	05c0      	lsls	r0, r0, #23
 8000cb2:	4328      	orrs	r0, r5
 8000cb4:	07e4      	lsls	r4, r4, #31
 8000cb6:	4320      	orrs	r0, r4
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
 8000cba:	2b99      	cmp	r3, #153	@ 0x99
 8000cbc:	dc16      	bgt.n	8000cec <__aeabi_i2f+0x70>
 8000cbe:	1f42      	subs	r2, r0, #5
 8000cc0:	2805      	cmp	r0, #5
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_i2f+0x4a>
 8000cc4:	4095      	lsls	r5, r2
 8000cc6:	002a      	movs	r2, r5
 8000cc8:	4811      	ldr	r0, [pc, #68]	@ (8000d10 <__aeabi_i2f+0x94>)
 8000cca:	4002      	ands	r2, r0
 8000ccc:	076e      	lsls	r6, r5, #29
 8000cce:	d009      	beq.n	8000ce4 <__aeabi_i2f+0x68>
 8000cd0:	260f      	movs	r6, #15
 8000cd2:	4035      	ands	r5, r6
 8000cd4:	2d04      	cmp	r5, #4
 8000cd6:	d005      	beq.n	8000ce4 <__aeabi_i2f+0x68>
 8000cd8:	3204      	adds	r2, #4
 8000cda:	0155      	lsls	r5, r2, #5
 8000cdc:	d502      	bpl.n	8000ce4 <__aeabi_i2f+0x68>
 8000cde:	239f      	movs	r3, #159	@ 0x9f
 8000ce0:	4002      	ands	r2, r0
 8000ce2:	1a5b      	subs	r3, r3, r1
 8000ce4:	0192      	lsls	r2, r2, #6
 8000ce6:	0a55      	lsrs	r5, r2, #9
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e7e1      	b.n	8000cb0 <__aeabi_i2f+0x34>
 8000cec:	2205      	movs	r2, #5
 8000cee:	1a12      	subs	r2, r2, r0
 8000cf0:	0028      	movs	r0, r5
 8000cf2:	40d0      	lsrs	r0, r2
 8000cf4:	0002      	movs	r2, r0
 8000cf6:	0008      	movs	r0, r1
 8000cf8:	301b      	adds	r0, #27
 8000cfa:	4085      	lsls	r5, r0
 8000cfc:	0028      	movs	r0, r5
 8000cfe:	1e45      	subs	r5, r0, #1
 8000d00:	41a8      	sbcs	r0, r5
 8000d02:	4302      	orrs	r2, r0
 8000d04:	0015      	movs	r5, r2
 8000d06:	e7de      	b.n	8000cc6 <__aeabi_i2f+0x4a>
 8000d08:	026d      	lsls	r5, r5, #9
 8000d0a:	2096      	movs	r0, #150	@ 0x96
 8000d0c:	0a6d      	lsrs	r5, r5, #9
 8000d0e:	e7cf      	b.n	8000cb0 <__aeabi_i2f+0x34>
 8000d10:	fbffffff 	.word	0xfbffffff

08000d14 <__aeabi_ui2f>:
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	1e04      	subs	r4, r0, #0
 8000d18:	d00e      	beq.n	8000d38 <__aeabi_ui2f+0x24>
 8000d1a:	f000 f877 	bl	8000e0c <__clzsi2>
 8000d1e:	239e      	movs	r3, #158	@ 0x9e
 8000d20:	0001      	movs	r1, r0
 8000d22:	1a1b      	subs	r3, r3, r0
 8000d24:	2b96      	cmp	r3, #150	@ 0x96
 8000d26:	dc0c      	bgt.n	8000d42 <__aeabi_ui2f+0x2e>
 8000d28:	2808      	cmp	r0, #8
 8000d2a:	d02f      	beq.n	8000d8c <__aeabi_ui2f+0x78>
 8000d2c:	3908      	subs	r1, #8
 8000d2e:	408c      	lsls	r4, r1
 8000d30:	0264      	lsls	r4, r4, #9
 8000d32:	0a64      	lsrs	r4, r4, #9
 8000d34:	b2d8      	uxtb	r0, r3
 8000d36:	e001      	b.n	8000d3c <__aeabi_ui2f+0x28>
 8000d38:	2000      	movs	r0, #0
 8000d3a:	2400      	movs	r4, #0
 8000d3c:	05c0      	lsls	r0, r0, #23
 8000d3e:	4320      	orrs	r0, r4
 8000d40:	bd70      	pop	{r4, r5, r6, pc}
 8000d42:	2b99      	cmp	r3, #153	@ 0x99
 8000d44:	dc16      	bgt.n	8000d74 <__aeabi_ui2f+0x60>
 8000d46:	1f42      	subs	r2, r0, #5
 8000d48:	2805      	cmp	r0, #5
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_ui2f+0x3a>
 8000d4c:	4094      	lsls	r4, r2
 8000d4e:	0022      	movs	r2, r4
 8000d50:	4810      	ldr	r0, [pc, #64]	@ (8000d94 <__aeabi_ui2f+0x80>)
 8000d52:	4002      	ands	r2, r0
 8000d54:	0765      	lsls	r5, r4, #29
 8000d56:	d009      	beq.n	8000d6c <__aeabi_ui2f+0x58>
 8000d58:	250f      	movs	r5, #15
 8000d5a:	402c      	ands	r4, r5
 8000d5c:	2c04      	cmp	r4, #4
 8000d5e:	d005      	beq.n	8000d6c <__aeabi_ui2f+0x58>
 8000d60:	3204      	adds	r2, #4
 8000d62:	0154      	lsls	r4, r2, #5
 8000d64:	d502      	bpl.n	8000d6c <__aeabi_ui2f+0x58>
 8000d66:	239f      	movs	r3, #159	@ 0x9f
 8000d68:	4002      	ands	r2, r0
 8000d6a:	1a5b      	subs	r3, r3, r1
 8000d6c:	0192      	lsls	r2, r2, #6
 8000d6e:	0a54      	lsrs	r4, r2, #9
 8000d70:	b2d8      	uxtb	r0, r3
 8000d72:	e7e3      	b.n	8000d3c <__aeabi_ui2f+0x28>
 8000d74:	0002      	movs	r2, r0
 8000d76:	0020      	movs	r0, r4
 8000d78:	321b      	adds	r2, #27
 8000d7a:	4090      	lsls	r0, r2
 8000d7c:	0002      	movs	r2, r0
 8000d7e:	1e50      	subs	r0, r2, #1
 8000d80:	4182      	sbcs	r2, r0
 8000d82:	2005      	movs	r0, #5
 8000d84:	1a40      	subs	r0, r0, r1
 8000d86:	40c4      	lsrs	r4, r0
 8000d88:	4314      	orrs	r4, r2
 8000d8a:	e7e0      	b.n	8000d4e <__aeabi_ui2f+0x3a>
 8000d8c:	0264      	lsls	r4, r4, #9
 8000d8e:	2096      	movs	r0, #150	@ 0x96
 8000d90:	0a64      	lsrs	r4, r4, #9
 8000d92:	e7d3      	b.n	8000d3c <__aeabi_ui2f+0x28>
 8000d94:	fbffffff 	.word	0xfbffffff

08000d98 <__aeabi_cfrcmple>:
 8000d98:	4684      	mov	ip, r0
 8000d9a:	0008      	movs	r0, r1
 8000d9c:	4661      	mov	r1, ip
 8000d9e:	e7ff      	b.n	8000da0 <__aeabi_cfcmpeq>

08000da0 <__aeabi_cfcmpeq>:
 8000da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000da2:	f000 f8c9 	bl	8000f38 <__lesf2>
 8000da6:	2800      	cmp	r0, #0
 8000da8:	d401      	bmi.n	8000dae <__aeabi_cfcmpeq+0xe>
 8000daa:	2100      	movs	r1, #0
 8000dac:	42c8      	cmn	r0, r1
 8000dae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000db0 <__aeabi_fcmpeq>:
 8000db0:	b510      	push	{r4, lr}
 8000db2:	f000 f849 	bl	8000e48 <__eqsf2>
 8000db6:	4240      	negs	r0, r0
 8000db8:	3001      	adds	r0, #1
 8000dba:	bd10      	pop	{r4, pc}

08000dbc <__aeabi_fcmplt>:
 8000dbc:	b510      	push	{r4, lr}
 8000dbe:	f000 f8bb 	bl	8000f38 <__lesf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	db01      	blt.n	8000dca <__aeabi_fcmplt+0xe>
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	bd10      	pop	{r4, pc}
 8000dca:	2001      	movs	r0, #1
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	46c0      	nop			@ (mov r8, r8)

08000dd0 <__aeabi_fcmple>:
 8000dd0:	b510      	push	{r4, lr}
 8000dd2:	f000 f8b1 	bl	8000f38 <__lesf2>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd01      	ble.n	8000dde <__aeabi_fcmple+0xe>
 8000dda:	2000      	movs	r0, #0
 8000ddc:	bd10      	pop	{r4, pc}
 8000dde:	2001      	movs	r0, #1
 8000de0:	bd10      	pop	{r4, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)

08000de4 <__aeabi_fcmpgt>:
 8000de4:	b510      	push	{r4, lr}
 8000de6:	f000 f857 	bl	8000e98 <__gesf2>
 8000dea:	2800      	cmp	r0, #0
 8000dec:	dc01      	bgt.n	8000df2 <__aeabi_fcmpgt+0xe>
 8000dee:	2000      	movs	r0, #0
 8000df0:	bd10      	pop	{r4, pc}
 8000df2:	2001      	movs	r0, #1
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	46c0      	nop			@ (mov r8, r8)

08000df8 <__aeabi_fcmpge>:
 8000df8:	b510      	push	{r4, lr}
 8000dfa:	f000 f84d 	bl	8000e98 <__gesf2>
 8000dfe:	2800      	cmp	r0, #0
 8000e00:	da01      	bge.n	8000e06 <__aeabi_fcmpge+0xe>
 8000e02:	2000      	movs	r0, #0
 8000e04:	bd10      	pop	{r4, pc}
 8000e06:	2001      	movs	r0, #1
 8000e08:	bd10      	pop	{r4, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)

08000e0c <__clzsi2>:
 8000e0c:	211c      	movs	r1, #28
 8000e0e:	2301      	movs	r3, #1
 8000e10:	041b      	lsls	r3, r3, #16
 8000e12:	4298      	cmp	r0, r3
 8000e14:	d301      	bcc.n	8000e1a <__clzsi2+0xe>
 8000e16:	0c00      	lsrs	r0, r0, #16
 8000e18:	3910      	subs	r1, #16
 8000e1a:	0a1b      	lsrs	r3, r3, #8
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	d301      	bcc.n	8000e24 <__clzsi2+0x18>
 8000e20:	0a00      	lsrs	r0, r0, #8
 8000e22:	3908      	subs	r1, #8
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	4298      	cmp	r0, r3
 8000e28:	d301      	bcc.n	8000e2e <__clzsi2+0x22>
 8000e2a:	0900      	lsrs	r0, r0, #4
 8000e2c:	3904      	subs	r1, #4
 8000e2e:	a202      	add	r2, pc, #8	@ (adr r2, 8000e38 <__clzsi2+0x2c>)
 8000e30:	5c10      	ldrb	r0, [r2, r0]
 8000e32:	1840      	adds	r0, r0, r1
 8000e34:	4770      	bx	lr
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	02020304 	.word	0x02020304
 8000e3c:	01010101 	.word	0x01010101
	...

08000e48 <__eqsf2>:
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	0042      	lsls	r2, r0, #1
 8000e4c:	024e      	lsls	r6, r1, #9
 8000e4e:	004c      	lsls	r4, r1, #1
 8000e50:	0245      	lsls	r5, r0, #9
 8000e52:	0a6d      	lsrs	r5, r5, #9
 8000e54:	0e12      	lsrs	r2, r2, #24
 8000e56:	0fc3      	lsrs	r3, r0, #31
 8000e58:	0a76      	lsrs	r6, r6, #9
 8000e5a:	0e24      	lsrs	r4, r4, #24
 8000e5c:	0fc9      	lsrs	r1, r1, #31
 8000e5e:	2aff      	cmp	r2, #255	@ 0xff
 8000e60:	d010      	beq.n	8000e84 <__eqsf2+0x3c>
 8000e62:	2cff      	cmp	r4, #255	@ 0xff
 8000e64:	d00c      	beq.n	8000e80 <__eqsf2+0x38>
 8000e66:	2001      	movs	r0, #1
 8000e68:	42a2      	cmp	r2, r4
 8000e6a:	d10a      	bne.n	8000e82 <__eqsf2+0x3a>
 8000e6c:	42b5      	cmp	r5, r6
 8000e6e:	d108      	bne.n	8000e82 <__eqsf2+0x3a>
 8000e70:	428b      	cmp	r3, r1
 8000e72:	d00f      	beq.n	8000e94 <__eqsf2+0x4c>
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d104      	bne.n	8000e82 <__eqsf2+0x3a>
 8000e78:	0028      	movs	r0, r5
 8000e7a:	1e43      	subs	r3, r0, #1
 8000e7c:	4198      	sbcs	r0, r3
 8000e7e:	e000      	b.n	8000e82 <__eqsf2+0x3a>
 8000e80:	2001      	movs	r0, #1
 8000e82:	bd70      	pop	{r4, r5, r6, pc}
 8000e84:	2001      	movs	r0, #1
 8000e86:	2cff      	cmp	r4, #255	@ 0xff
 8000e88:	d1fb      	bne.n	8000e82 <__eqsf2+0x3a>
 8000e8a:	4335      	orrs	r5, r6
 8000e8c:	d1f9      	bne.n	8000e82 <__eqsf2+0x3a>
 8000e8e:	404b      	eors	r3, r1
 8000e90:	0018      	movs	r0, r3
 8000e92:	e7f6      	b.n	8000e82 <__eqsf2+0x3a>
 8000e94:	2000      	movs	r0, #0
 8000e96:	e7f4      	b.n	8000e82 <__eqsf2+0x3a>

08000e98 <__gesf2>:
 8000e98:	b530      	push	{r4, r5, lr}
 8000e9a:	0042      	lsls	r2, r0, #1
 8000e9c:	0244      	lsls	r4, r0, #9
 8000e9e:	024d      	lsls	r5, r1, #9
 8000ea0:	0fc3      	lsrs	r3, r0, #31
 8000ea2:	0048      	lsls	r0, r1, #1
 8000ea4:	0a64      	lsrs	r4, r4, #9
 8000ea6:	0e12      	lsrs	r2, r2, #24
 8000ea8:	0a6d      	lsrs	r5, r5, #9
 8000eaa:	0e00      	lsrs	r0, r0, #24
 8000eac:	0fc9      	lsrs	r1, r1, #31
 8000eae:	2aff      	cmp	r2, #255	@ 0xff
 8000eb0:	d019      	beq.n	8000ee6 <__gesf2+0x4e>
 8000eb2:	28ff      	cmp	r0, #255	@ 0xff
 8000eb4:	d00b      	beq.n	8000ece <__gesf2+0x36>
 8000eb6:	2a00      	cmp	r2, #0
 8000eb8:	d11e      	bne.n	8000ef8 <__gesf2+0x60>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	d10b      	bne.n	8000ed6 <__gesf2+0x3e>
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d027      	beq.n	8000f12 <__gesf2+0x7a>
 8000ec2:	2c00      	cmp	r4, #0
 8000ec4:	d134      	bne.n	8000f30 <__gesf2+0x98>
 8000ec6:	2900      	cmp	r1, #0
 8000ec8:	d02f      	beq.n	8000f2a <__gesf2+0x92>
 8000eca:	0008      	movs	r0, r1
 8000ecc:	bd30      	pop	{r4, r5, pc}
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d128      	bne.n	8000f24 <__gesf2+0x8c>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d101      	bne.n	8000eda <__gesf2+0x42>
 8000ed6:	2c00      	cmp	r4, #0
 8000ed8:	d0f5      	beq.n	8000ec6 <__gesf2+0x2e>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d107      	bne.n	8000eee <__gesf2+0x56>
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d023      	beq.n	8000f2a <__gesf2+0x92>
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	e7f2      	b.n	8000ecc <__gesf2+0x34>
 8000ee6:	2c00      	cmp	r4, #0
 8000ee8:	d11c      	bne.n	8000f24 <__gesf2+0x8c>
 8000eea:	28ff      	cmp	r0, #255	@ 0xff
 8000eec:	d014      	beq.n	8000f18 <__gesf2+0x80>
 8000eee:	1e58      	subs	r0, r3, #1
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	4018      	ands	r0, r3
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7e9      	b.n	8000ecc <__gesf2+0x34>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d0f8      	beq.n	8000eee <__gesf2+0x56>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d1f6      	bne.n	8000eee <__gesf2+0x56>
 8000f00:	4282      	cmp	r2, r0
 8000f02:	dcf4      	bgt.n	8000eee <__gesf2+0x56>
 8000f04:	dbeb      	blt.n	8000ede <__gesf2+0x46>
 8000f06:	42ac      	cmp	r4, r5
 8000f08:	d8f1      	bhi.n	8000eee <__gesf2+0x56>
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	42ac      	cmp	r4, r5
 8000f0e:	d2dd      	bcs.n	8000ecc <__gesf2+0x34>
 8000f10:	e7e5      	b.n	8000ede <__gesf2+0x46>
 8000f12:	2c00      	cmp	r4, #0
 8000f14:	d0da      	beq.n	8000ecc <__gesf2+0x34>
 8000f16:	e7ea      	b.n	8000eee <__gesf2+0x56>
 8000f18:	2d00      	cmp	r5, #0
 8000f1a:	d103      	bne.n	8000f24 <__gesf2+0x8c>
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d1e6      	bne.n	8000eee <__gesf2+0x56>
 8000f20:	2000      	movs	r0, #0
 8000f22:	e7d3      	b.n	8000ecc <__gesf2+0x34>
 8000f24:	2002      	movs	r0, #2
 8000f26:	4240      	negs	r0, r0
 8000f28:	e7d0      	b.n	8000ecc <__gesf2+0x34>
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	4240      	negs	r0, r0
 8000f2e:	e7cd      	b.n	8000ecc <__gesf2+0x34>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d0e8      	beq.n	8000f06 <__gesf2+0x6e>
 8000f34:	e7db      	b.n	8000eee <__gesf2+0x56>
 8000f36:	46c0      	nop			@ (mov r8, r8)

08000f38 <__lesf2>:
 8000f38:	b530      	push	{r4, r5, lr}
 8000f3a:	0042      	lsls	r2, r0, #1
 8000f3c:	0244      	lsls	r4, r0, #9
 8000f3e:	024d      	lsls	r5, r1, #9
 8000f40:	0fc3      	lsrs	r3, r0, #31
 8000f42:	0048      	lsls	r0, r1, #1
 8000f44:	0a64      	lsrs	r4, r4, #9
 8000f46:	0e12      	lsrs	r2, r2, #24
 8000f48:	0a6d      	lsrs	r5, r5, #9
 8000f4a:	0e00      	lsrs	r0, r0, #24
 8000f4c:	0fc9      	lsrs	r1, r1, #31
 8000f4e:	2aff      	cmp	r2, #255	@ 0xff
 8000f50:	d01a      	beq.n	8000f88 <__lesf2+0x50>
 8000f52:	28ff      	cmp	r0, #255	@ 0xff
 8000f54:	d00e      	beq.n	8000f74 <__lesf2+0x3c>
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	d11e      	bne.n	8000f98 <__lesf2+0x60>
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	d10e      	bne.n	8000f7c <__lesf2+0x44>
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	d02a      	beq.n	8000fb8 <__lesf2+0x80>
 8000f62:	2c00      	cmp	r4, #0
 8000f64:	d00c      	beq.n	8000f80 <__lesf2+0x48>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d01d      	beq.n	8000fa6 <__lesf2+0x6e>
 8000f6a:	1e58      	subs	r0, r3, #1
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	4018      	ands	r0, r3
 8000f70:	3801      	subs	r0, #1
 8000f72:	e010      	b.n	8000f96 <__lesf2+0x5e>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d10d      	bne.n	8000f94 <__lesf2+0x5c>
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	d120      	bne.n	8000fbe <__lesf2+0x86>
 8000f7c:	2c00      	cmp	r4, #0
 8000f7e:	d11e      	bne.n	8000fbe <__lesf2+0x86>
 8000f80:	2900      	cmp	r1, #0
 8000f82:	d023      	beq.n	8000fcc <__lesf2+0x94>
 8000f84:	0008      	movs	r0, r1
 8000f86:	e006      	b.n	8000f96 <__lesf2+0x5e>
 8000f88:	2c00      	cmp	r4, #0
 8000f8a:	d103      	bne.n	8000f94 <__lesf2+0x5c>
 8000f8c:	28ff      	cmp	r0, #255	@ 0xff
 8000f8e:	d1ec      	bne.n	8000f6a <__lesf2+0x32>
 8000f90:	2d00      	cmp	r5, #0
 8000f92:	d017      	beq.n	8000fc4 <__lesf2+0x8c>
 8000f94:	2002      	movs	r0, #2
 8000f96:	bd30      	pop	{r4, r5, pc}
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d0e6      	beq.n	8000f6a <__lesf2+0x32>
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d1e4      	bne.n	8000f6a <__lesf2+0x32>
 8000fa0:	4282      	cmp	r2, r0
 8000fa2:	dce2      	bgt.n	8000f6a <__lesf2+0x32>
 8000fa4:	db04      	blt.n	8000fb0 <__lesf2+0x78>
 8000fa6:	42ac      	cmp	r4, r5
 8000fa8:	d8df      	bhi.n	8000f6a <__lesf2+0x32>
 8000faa:	2000      	movs	r0, #0
 8000fac:	42ac      	cmp	r4, r5
 8000fae:	d2f2      	bcs.n	8000f96 <__lesf2+0x5e>
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00b      	beq.n	8000fcc <__lesf2+0x94>
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	e7ee      	b.n	8000f96 <__lesf2+0x5e>
 8000fb8:	2c00      	cmp	r4, #0
 8000fba:	d0ec      	beq.n	8000f96 <__lesf2+0x5e>
 8000fbc:	e7d5      	b.n	8000f6a <__lesf2+0x32>
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	d1d3      	bne.n	8000f6a <__lesf2+0x32>
 8000fc2:	e7f5      	b.n	8000fb0 <__lesf2+0x78>
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d0e5      	beq.n	8000f96 <__lesf2+0x5e>
 8000fca:	e7ce      	b.n	8000f6a <__lesf2+0x32>
 8000fcc:	2001      	movs	r0, #1
 8000fce:	4240      	negs	r0, r0
 8000fd0:	e7e1      	b.n	8000f96 <__lesf2+0x5e>
 8000fd2:	46c0      	nop			@ (mov r8, r8)

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fda:	f000 fd65 	bl	8001aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fde:	f000 f895 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe2:	f000 fa4d 	bl	8001480 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe6:	f000 fa2d 	bl	8001444 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000fea:	f000 f9fb 	bl	80013e4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000fee:	f000 f8ed 	bl	80011cc <MX_TIM3_Init>
  MX_TIM15_Init();
 8000ff2:	f000 f941 	bl	8001278 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3); // IR Receiver timer start
 8000ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80010f4 <main+0x120>)
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 ff93 	bl	8002f24 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim3, 0); // IR Receiver timer cnt set
 8000ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80010f4 <main+0x120>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24

  WS28XX_Init(&ws, &htim15, 48, TIM_CHANNEL_1, 3);
 8001006:	493c      	ldr	r1, [pc, #240]	@ (80010f8 <main+0x124>)
 8001008:	483c      	ldr	r0, [pc, #240]	@ (80010fc <main+0x128>)
 800100a:	2303      	movs	r3, #3
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2300      	movs	r3, #0
 8001010:	2230      	movs	r2, #48	@ 0x30
 8001012:	f003 fcdb 	bl	80049cc <WS28XX_Init>

  uint32_t tm=0, tm2 = 0; // Timestamp variable
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  uint8_t dir = 0;
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
 8001024:	1dbb      	adds	r3, r7, #6
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]

	WS28XX_SetPixel_RGBW_565(&ws, 0, COLOR_RGB565_BLUE, 50);
 800102a:	4834      	ldr	r0, [pc, #208]	@ (80010fc <main+0x128>)
 800102c:	2332      	movs	r3, #50	@ 0x32
 800102e:	221f      	movs	r2, #31
 8001030:	2100      	movs	r1, #0
 8001032:	f003 fd7b 	bl	8004b2c <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB565_CRIMSON, i);
 8001036:	1dbb      	adds	r3, r7, #6
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	4a31      	ldr	r2, [pc, #196]	@ (8001100 <main+0x12c>)
 800103c:	482f      	ldr	r0, [pc, #188]	@ (80010fc <main+0x128>)
 800103e:	2101      	movs	r1, #1
 8001040:	f003 fd74 	bl	8004b2c <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 2, COLOR_RGB565_ORANGE, 50);
 8001044:	4a2f      	ldr	r2, [pc, #188]	@ (8001104 <main+0x130>)
 8001046:	482d      	ldr	r0, [pc, #180]	@ (80010fc <main+0x128>)
 8001048:	2332      	movs	r3, #50	@ 0x32
 800104a:	2102      	movs	r1, #2
 800104c:	f003 fd6e 	bl	8004b2c <WS28XX_SetPixel_RGBW_565>
	WS28XX_Update(&ws);
 8001050:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <main+0x128>)
 8001052:	0018      	movs	r0, r3
 8001054:	f003 fdf8 	bl	8004c48 <WS28XX_Update>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {


		if (tm < HAL_GetTick()) {
 8001058:	f000 fd80 	bl	8001b5c <HAL_GetTick>
 800105c:	0002      	movs	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4293      	cmp	r3, r2
 8001062:	d20b      	bcs.n	800107c <main+0xa8>
			tm = HAL_GetTick() + 100;
 8001064:	f000 fd7a 	bl	8001b5c <HAL_GetTick>
 8001068:	0003      	movs	r3, r0
 800106a:	3364      	adds	r3, #100	@ 0x64
 800106c:	60fb      	str	r3, [r7, #12]

			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //LED
 800106e:	2380      	movs	r3, #128	@ 0x80
 8001070:	019b      	lsls	r3, r3, #6
 8001072:	4a25      	ldr	r2, [pc, #148]	@ (8001108 <main+0x134>)
 8001074:	0019      	movs	r1, r3
 8001076:	0010      	movs	r0, r2
 8001078:	f001 f9a1 	bl	80023be <HAL_GPIO_TogglePin>
		}

		if (tm2 < HAL_GetTick()) {
 800107c:	f000 fd6e 	bl	8001b5c <HAL_GetTick>
 8001080:	0002      	movs	r2, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	4293      	cmp	r3, r2
 8001086:	d2e7      	bcs.n	8001058 <main+0x84>
					tm2 = HAL_GetTick() + 10;
 8001088:	f000 fd68 	bl	8001b5c <HAL_GetTick>
 800108c:	0003      	movs	r3, r0
 800108e:	330a      	adds	r3, #10
 8001090:	60bb      	str	r3, [r7, #8]

	     			if(dir==0)
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d113      	bne.n	80010c2 <main+0xee>
	     			{
	     				WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB565_CRIMSON, i);
 800109a:	1dbb      	adds	r3, r7, #6
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4a18      	ldr	r2, [pc, #96]	@ (8001100 <main+0x12c>)
 80010a0:	4816      	ldr	r0, [pc, #88]	@ (80010fc <main+0x128>)
 80010a2:	2101      	movs	r1, #1
 80010a4:	f003 fd42 	bl	8004b2c <WS28XX_SetPixel_RGBW_565>
	     				i++;
 80010a8:	1dbb      	adds	r3, r7, #6
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	1dbb      	adds	r3, r7, #6
 80010ae:	3201      	adds	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
	     				if(i>=254)
 80010b2:	1dbb      	adds	r3, r7, #6
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2bfd      	cmp	r3, #253	@ 0xfd
 80010b8:	d916      	bls.n	80010e8 <main+0x114>
	     					dir = 1;
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	e012      	b.n	80010e8 <main+0x114>
	     			}
	     			else
	     			{
	     				WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB565_CRIMSON, i);
 80010c2:	1dbb      	adds	r3, r7, #6
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <main+0x12c>)
 80010c8:	480c      	ldr	r0, [pc, #48]	@ (80010fc <main+0x128>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	f003 fd2e 	bl	8004b2c <WS28XX_SetPixel_RGBW_565>
	     				i--;
 80010d0:	1dbb      	adds	r3, r7, #6
 80010d2:	781a      	ldrb	r2, [r3, #0]
 80010d4:	1dbb      	adds	r3, r7, #6
 80010d6:	3a01      	subs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
	     				if(i<=1)
 80010da:	1dbb      	adds	r3, r7, #6
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d802      	bhi.n	80010e8 <main+0x114>
	     					dir = 0;
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
	     			}
	     			WS28XX_Update(&ws);
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <main+0x128>)
 80010ea:	0018      	movs	r0, r3
 80010ec:	f003 fdac 	bl	8004c48 <WS28XX_Update>
		if (tm < HAL_GetTick()) {
 80010f0:	e7b2      	b.n	8001058 <main+0x84>
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	20000084 	.word	0x20000084
 80010f8:	200000cc 	.word	0x200000cc
 80010fc:	200001ec 	.word	0x200001ec
 8001100:	0000d8a7 	.word	0x0000d8a7
 8001104:	0000fd20 	.word	0x0000fd20
 8001108:	48000800 	.word	0x48000800

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b095      	sub	sp, #84	@ 0x54
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	2420      	movs	r4, #32
 8001114:	193b      	adds	r3, r7, r4
 8001116:	0018      	movs	r0, r3
 8001118:	2330      	movs	r3, #48	@ 0x30
 800111a:	001a      	movs	r2, r3
 800111c:	2100      	movs	r1, #0
 800111e:	f003 ff33 	bl	8004f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001122:	2310      	movs	r3, #16
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	0018      	movs	r0, r3
 8001128:	2310      	movs	r3, #16
 800112a:	001a      	movs	r2, r3
 800112c:	2100      	movs	r1, #0
 800112e:	f003 ff2b 	bl	8004f88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001132:	003b      	movs	r3, r7
 8001134:	0018      	movs	r0, r3
 8001136:	2310      	movs	r3, #16
 8001138:	001a      	movs	r2, r3
 800113a:	2100      	movs	r1, #0
 800113c:	f003 ff24 	bl	8004f88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001140:	0021      	movs	r1, r4
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001148:	187b      	adds	r3, r7, r1
 800114a:	2201      	movs	r2, #1
 800114c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2202      	movs	r2, #2
 8001152:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2280      	movs	r2, #128	@ 0x80
 8001158:	0252      	lsls	r2, r2, #9
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2280      	movs	r2, #128	@ 0x80
 8001160:	0352      	lsls	r2, r2, #13
 8001162:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2200      	movs	r2, #0
 8001168:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	187b      	adds	r3, r7, r1
 800116c:	0018      	movs	r0, r3
 800116e:	f001 f95d 	bl	800242c <HAL_RCC_OscConfig>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001176:	f000 fa93 	bl	80016a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117a:	2110      	movs	r1, #16
 800117c:	187b      	adds	r3, r7, r1
 800117e:	2207      	movs	r2, #7
 8001180:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2202      	movs	r2, #2
 8001186:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	187b      	adds	r3, r7, r1
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2101      	movs	r1, #1
 8001198:	0018      	movs	r0, r3
 800119a:	f001 fc61 	bl	8002a60 <HAL_RCC_ClockConfig>
 800119e:	1e03      	subs	r3, r0, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011a2:	f000 fa7d 	bl	80016a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011a6:	003b      	movs	r3, r7
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011ac:	003b      	movs	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b2:	003b      	movs	r3, r7
 80011b4:	0018      	movs	r0, r3
 80011b6:	f001 fd97 	bl	8002ce8 <HAL_RCCEx_PeriphCLKConfig>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80011be:	f000 fa6f 	bl	80016a0 <Error_Handler>
  }
}
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b015      	add	sp, #84	@ 0x54
 80011c8:	bd90      	pop	{r4, r7, pc}
	...

080011cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	2308      	movs	r3, #8
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	0018      	movs	r0, r3
 80011d8:	2310      	movs	r3, #16
 80011da:	001a      	movs	r2, r3
 80011dc:	2100      	movs	r1, #0
 80011de:	f003 fed3 	bl	8004f88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	003b      	movs	r3, r7
 80011e4:	0018      	movs	r0, r3
 80011e6:	2308      	movs	r3, #8
 80011e8:	001a      	movs	r2, r3
 80011ea:	2100      	movs	r1, #0
 80011ec:	f003 fecc 	bl	8004f88 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <MX_TIM3_Init+0xa0>)
 80011f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001270 <MX_TIM3_Init+0xa4>)
 80011f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <MX_TIM3_Init+0xa0>)
 80011f8:	2230      	movs	r2, #48	@ 0x30
 80011fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <MX_TIM3_Init+0xa0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <MX_TIM3_Init+0xa0>)
 8001204:	4a1b      	ldr	r2, [pc, #108]	@ (8001274 <MX_TIM3_Init+0xa8>)
 8001206:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <MX_TIM3_Init+0xa0>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <MX_TIM3_Init+0xa0>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <MX_TIM3_Init+0xa0>)
 8001216:	0018      	movs	r0, r3
 8001218:	f001 fe34 	bl	8002e84 <HAL_TIM_Base_Init>
 800121c:	1e03      	subs	r3, r0, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001220:	f000 fa3e 	bl	80016a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001224:	2108      	movs	r1, #8
 8001226:	187b      	adds	r3, r7, r1
 8001228:	2280      	movs	r2, #128	@ 0x80
 800122a:	0152      	lsls	r2, r2, #5
 800122c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800122e:	187a      	adds	r2, r7, r1
 8001230:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <MX_TIM3_Init+0xa0>)
 8001232:	0011      	movs	r1, r2
 8001234:	0018      	movs	r0, r3
 8001236:	f002 f987 	bl	8003548 <HAL_TIM_ConfigClockSource>
 800123a:	1e03      	subs	r3, r0, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800123e:	f000 fa2f 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	003b      	movs	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001248:	003b      	movs	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800124e:	003a      	movs	r2, r7
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <MX_TIM3_Init+0xa0>)
 8001252:	0011      	movs	r1, r2
 8001254:	0018      	movs	r0, r3
 8001256:	f002 fe75 	bl	8003f44 <HAL_TIMEx_MasterConfigSynchronization>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800125e:	f000 fa1f 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b006      	add	sp, #24
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	20000084 	.word	0x20000084
 8001270:	40000400 	.word	0x40000400
 8001274:	0000ffff 	.word	0x0000ffff

08001278 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b096      	sub	sp, #88	@ 0x58
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */
//
  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	2348      	movs	r3, #72	@ 0x48
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	0018      	movs	r0, r3
 8001284:	2310      	movs	r3, #16
 8001286:	001a      	movs	r2, r3
 8001288:	2100      	movs	r1, #0
 800128a:	f003 fe7d 	bl	8004f88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128e:	2340      	movs	r3, #64	@ 0x40
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	0018      	movs	r0, r3
 8001294:	2308      	movs	r3, #8
 8001296:	001a      	movs	r2, r3
 8001298:	2100      	movs	r1, #0
 800129a:	f003 fe75 	bl	8004f88 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129e:	2324      	movs	r3, #36	@ 0x24
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	0018      	movs	r0, r3
 80012a4:	231c      	movs	r3, #28
 80012a6:	001a      	movs	r2, r3
 80012a8:	2100      	movs	r1, #0
 80012aa:	f003 fe6d 	bl	8004f88 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	0018      	movs	r0, r3
 80012b2:	2320      	movs	r3, #32
 80012b4:	001a      	movs	r2, r3
 80012b6:	2100      	movs	r1, #0
 80012b8:	f003 fe66 	bl	8004f88 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */
//
  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80012bc:	4b46      	ldr	r3, [pc, #280]	@ (80013d8 <MX_TIM15_Init+0x160>)
 80012be:	4a47      	ldr	r2, [pc, #284]	@ (80013dc <MX_TIM15_Init+0x164>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80012c2:	4b45      	ldr	r3, [pc, #276]	@ (80013d8 <MX_TIM15_Init+0x160>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b43      	ldr	r3, [pc, #268]	@ (80013d8 <MX_TIM15_Init+0x160>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80012ce:	4b42      	ldr	r3, [pc, #264]	@ (80013d8 <MX_TIM15_Init+0x160>)
 80012d0:	4a43      	ldr	r2, [pc, #268]	@ (80013e0 <MX_TIM15_Init+0x168>)
 80012d2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b40      	ldr	r3, [pc, #256]	@ (80013d8 <MX_TIM15_Init+0x160>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80012da:	4b3f      	ldr	r3, [pc, #252]	@ (80013d8 <MX_TIM15_Init+0x160>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b3d      	ldr	r3, [pc, #244]	@ (80013d8 <MX_TIM15_Init+0x160>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <MX_TIM15_Init+0x160>)
 80012e8:	0018      	movs	r0, r3
 80012ea:	f001 fdcb 	bl	8002e84 <HAL_TIM_Base_Init>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80012f2:	f000 f9d5 	bl	80016a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f6:	2148      	movs	r1, #72	@ 0x48
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	2280      	movs	r2, #128	@ 0x80
 80012fc:	0152      	lsls	r2, r2, #5
 80012fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001300:	187a      	adds	r2, r7, r1
 8001302:	4b35      	ldr	r3, [pc, #212]	@ (80013d8 <MX_TIM15_Init+0x160>)
 8001304:	0011      	movs	r1, r2
 8001306:	0018      	movs	r0, r3
 8001308:	f002 f91e 	bl	8003548 <HAL_TIM_ConfigClockSource>
 800130c:	1e03      	subs	r3, r0, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001310:	f000 f9c6 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001314:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <MX_TIM15_Init+0x160>)
 8001316:	0018      	movs	r0, r3
 8001318:	f001 fe48 	bl	8002fac <HAL_TIM_PWM_Init>
 800131c:	1e03      	subs	r3, r0, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8001320:	f000 f9be 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2140      	movs	r1, #64	@ 0x40
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	187b      	adds	r3, r7, r1
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001332:	187a      	adds	r2, r7, r1
 8001334:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <MX_TIM15_Init+0x160>)
 8001336:	0011      	movs	r1, r2
 8001338:	0018      	movs	r0, r3
 800133a:	f002 fe03 	bl	8003f44 <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8001342:	f000 f9ad 	bl	80016a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001346:	2124      	movs	r1, #36	@ 0x24
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2260      	movs	r2, #96	@ 0x60
 800134c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001366:	187b      	adds	r3, r7, r1
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800136c:	187b      	adds	r3, r7, r1
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001372:	1879      	adds	r1, r7, r1
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <MX_TIM15_Init+0x160>)
 8001376:	2200      	movs	r2, #0
 8001378:	0018      	movs	r0, r3
 800137a:	f002 f81f 	bl	80033bc <HAL_TIM_PWM_ConfigChannel>
 800137e:	1e03      	subs	r3, r0, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001382:	f000 f98d 	bl	80016a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2280      	movs	r2, #128	@ 0x80
 80013a8:	0192      	lsls	r2, r2, #6
 80013aa:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80013b2:	1d3a      	adds	r2, r7, #4
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <MX_TIM15_Init+0x160>)
 80013b6:	0011      	movs	r1, r2
 80013b8:	0018      	movs	r0, r3
 80013ba:	f002 fe1b 	bl	8003ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM15_Init+0x14e>
  {
    Error_Handler();
 80013c2:	f000 f96d 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
//
  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80013c6:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <MX_TIM15_Init+0x160>)
 80013c8:	0018      	movs	r0, r3
 80013ca:	f000 fa03 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b016      	add	sp, #88	@ 0x58
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	200000cc 	.word	0x200000cc
 80013dc:	40014000 	.word	0x40014000
 80013e0:	0000ffff 	.word	0x0000ffff

080013e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e8:	4b14      	ldr	r3, [pc, #80]	@ (800143c <MX_USART1_UART_Init+0x58>)
 80013ea:	4a15      	ldr	r2, [pc, #84]	@ (8001440 <MX_USART1_UART_Init+0x5c>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ee:	4b13      	ldr	r3, [pc, #76]	@ (800143c <MX_USART1_UART_Init+0x58>)
 80013f0:	22e1      	movs	r2, #225	@ 0xe1
 80013f2:	0252      	lsls	r2, r2, #9
 80013f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_USART1_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <MX_USART1_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_USART1_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_USART1_UART_Init+0x58>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <MX_USART1_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_USART1_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141a:	4b08      	ldr	r3, [pc, #32]	@ (800143c <MX_USART1_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_USART1_UART_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001426:	4b05      	ldr	r3, [pc, #20]	@ (800143c <MX_USART1_UART_Init+0x58>)
 8001428:	0018      	movs	r0, r3
 800142a:	f002 fe41 	bl	80040b0 <HAL_UART_Init>
 800142e:	1e03      	subs	r3, r0, #0
 8001430:	d001      	beq.n	8001436 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001432:	f000 f935 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000158 	.word	0x20000158
 8001440:	40013800 	.word	0x40013800

08001444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_DMA_Init+0x38>)
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <MX_DMA_Init+0x38>)
 8001450:	2101      	movs	r1, #1
 8001452:	430a      	orrs	r2, r1
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_DMA_Init+0x38>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	2201      	movs	r2, #1
 800145c:	4013      	ands	r3, r2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	200b      	movs	r0, #11
 8001468:	f000 fc52 	bl	8001d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800146c:	200b      	movs	r0, #11
 800146e:	f000 fc64 	bl	8001d3a <HAL_NVIC_EnableIRQ>

}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b002      	add	sp, #8
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	40021000 	.word	0x40021000

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	240c      	movs	r4, #12
 8001488:	193b      	adds	r3, r7, r4
 800148a:	0018      	movs	r0, r3
 800148c:	2314      	movs	r3, #20
 800148e:	001a      	movs	r2, r3
 8001490:	2100      	movs	r1, #0
 8001492:	f003 fd79 	bl	8004f88 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	4b31      	ldr	r3, [pc, #196]	@ (800155c <MX_GPIO_Init+0xdc>)
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	4b30      	ldr	r3, [pc, #192]	@ (800155c <MX_GPIO_Init+0xdc>)
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	0309      	lsls	r1, r1, #12
 80014a0:	430a      	orrs	r2, r1
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	4b2d      	ldr	r3, [pc, #180]	@ (800155c <MX_GPIO_Init+0xdc>)
 80014a6:	695a      	ldr	r2, [r3, #20]
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	031b      	lsls	r3, r3, #12
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b2:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <MX_GPIO_Init+0xdc>)
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	4b29      	ldr	r3, [pc, #164]	@ (800155c <MX_GPIO_Init+0xdc>)
 80014b8:	2180      	movs	r1, #128	@ 0x80
 80014ba:	03c9      	lsls	r1, r1, #15
 80014bc:	430a      	orrs	r2, r1
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	4b26      	ldr	r3, [pc, #152]	@ (800155c <MX_GPIO_Init+0xdc>)
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	2380      	movs	r3, #128	@ 0x80
 80014c6:	03db      	lsls	r3, r3, #15
 80014c8:	4013      	ands	r3, r2
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b23      	ldr	r3, [pc, #140]	@ (800155c <MX_GPIO_Init+0xdc>)
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	4b22      	ldr	r3, [pc, #136]	@ (800155c <MX_GPIO_Init+0xdc>)
 80014d4:	2180      	movs	r1, #128	@ 0x80
 80014d6:	0289      	lsls	r1, r1, #10
 80014d8:	430a      	orrs	r2, r1
 80014da:	615a      	str	r2, [r3, #20]
 80014dc:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <MX_GPIO_Init+0xdc>)
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	2380      	movs	r3, #128	@ 0x80
 80014e2:	029b      	lsls	r3, r3, #10
 80014e4:	4013      	ands	r3, r2
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014ea:	2380      	movs	r3, #128	@ 0x80
 80014ec:	019b      	lsls	r3, r3, #6
 80014ee:	481c      	ldr	r0, [pc, #112]	@ (8001560 <MX_GPIO_Init+0xe0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	0019      	movs	r1, r3
 80014f4:	f000 ff46 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014f8:	193b      	adds	r3, r7, r4
 80014fa:	2280      	movs	r2, #128	@ 0x80
 80014fc:	0192      	lsls	r2, r2, #6
 80014fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	193b      	adds	r3, r7, r4
 8001502:	2201      	movs	r2, #1
 8001504:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	193b      	adds	r3, r7, r4
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	193b      	adds	r3, r7, r4
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	193b      	adds	r3, r7, r4
 8001514:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <MX_GPIO_Init+0xe0>)
 8001516:	0019      	movs	r1, r3
 8001518:	0010      	movs	r0, r2
 800151a:	f000 fdc3 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800151e:	0021      	movs	r1, r4
 8001520:	187b      	adds	r3, r7, r1
 8001522:	2240      	movs	r2, #64	@ 0x40
 8001524:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001526:	187b      	adds	r3, r7, r1
 8001528:	2284      	movs	r2, #132	@ 0x84
 800152a:	0392      	lsls	r2, r2, #14
 800152c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	187b      	adds	r3, r7, r1
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	187a      	adds	r2, r7, r1
 8001536:	2390      	movs	r3, #144	@ 0x90
 8001538:	05db      	lsls	r3, r3, #23
 800153a:	0011      	movs	r1, r2
 800153c:	0018      	movs	r0, r3
 800153e:	f000 fdb1 	bl	80020a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2007      	movs	r0, #7
 8001548:	f000 fbe2 	bl	8001d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800154c:	2007      	movs	r0, #7
 800154e:	f000 fbf4 	bl	8001d3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b009      	add	sp, #36	@ 0x24
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	40021000 	.word	0x40021000
 8001560:	48000800 	.word	0x48000800

08001564 <_write>:

/* USER CODE BEGIN 4 */

/* UART PRINTF MAP */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	b29a      	uxth	r2, r3
 8001574:	2301      	movs	r3, #1
 8001576:	425b      	negs	r3, r3
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	4804      	ldr	r0, [pc, #16]	@ (800158c <_write+0x28>)
 800157c:	f002 fdec 	bl	8004158 <HAL_UART_Transmit>
	return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	0018      	movs	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	b004      	add	sp, #16
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	20000158 	.word	0x20000158

08001590 <HAL_GPIO_EXTI_Callback>:



/* IR TIMER AND DECODING */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	0002      	movs	r2, r0
 8001598:	1dbb      	adds	r3, r7, #6
 800159a:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_6)
 800159c:	1dbb      	adds	r3, r7, #6
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	2b40      	cmp	r3, #64	@ 0x40
 80015a2:	d168      	bne.n	8001676 <HAL_GPIO_EXTI_Callback+0xe6>
  {
    if (__HAL_TIM_GET_COUNTER(&htim3) > 8000)
 80015a4:	4b36      	ldr	r3, [pc, #216]	@ (8001680 <HAL_GPIO_EXTI_Callback+0xf0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015aa:	23fa      	movs	r3, #250	@ 0xfa
 80015ac:	015b      	lsls	r3, r3, #5
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d906      	bls.n	80015c0 <HAL_GPIO_EXTI_Callback+0x30>
    {
      tempCode = 0;
 80015b2:	4b34      	ldr	r3, [pc, #208]	@ (8001684 <HAL_GPIO_EXTI_Callback+0xf4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
      bitIndex = 0;
 80015b8:	4b33      	ldr	r3, [pc, #204]	@ (8001688 <HAL_GPIO_EXTI_Callback+0xf8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
 80015be:	e031      	b.n	8001624 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim3) > 1700)
 80015c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001680 <HAL_GPIO_EXTI_Callback+0xf0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c6:	4a31      	ldr	r2, [pc, #196]	@ (800168c <HAL_GPIO_EXTI_Callback+0xfc>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d912      	bls.n	80015f2 <HAL_GPIO_EXTI_Callback+0x62>
    {
      tempCode |= (1UL << (31-bitIndex));   // write 1
 80015cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001688 <HAL_GPIO_EXTI_Callback+0xf8>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	001a      	movs	r2, r3
 80015d2:	2380      	movs	r3, #128	@ 0x80
 80015d4:	061b      	lsls	r3, r3, #24
 80015d6:	40d3      	lsrs	r3, r2
 80015d8:	001a      	movs	r2, r3
 80015da:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <HAL_GPIO_EXTI_Callback+0xf4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	431a      	orrs	r2, r3
 80015e0:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <HAL_GPIO_EXTI_Callback+0xf4>)
 80015e2:	601a      	str	r2, [r3, #0]
      bitIndex++;
 80015e4:	4b28      	ldr	r3, [pc, #160]	@ (8001688 <HAL_GPIO_EXTI_Callback+0xf8>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b26      	ldr	r3, [pc, #152]	@ (8001688 <HAL_GPIO_EXTI_Callback+0xf8>)
 80015ee:	701a      	strb	r2, [r3, #0]
 80015f0:	e018      	b.n	8001624 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim3) > 1000)
 80015f2:	4b23      	ldr	r3, [pc, #140]	@ (8001680 <HAL_GPIO_EXTI_Callback+0xf0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015f8:	23fa      	movs	r3, #250	@ 0xfa
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d911      	bls.n	8001624 <HAL_GPIO_EXTI_Callback+0x94>
    {
      tempCode &= ~(1UL << (31-bitIndex));  // write 0
 8001600:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	001a      	movs	r2, r3
 8001606:	2380      	movs	r3, #128	@ 0x80
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	40d3      	lsrs	r3, r2
 800160c:	43da      	mvns	r2, r3
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	401a      	ands	r2, r3
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001616:	601a      	str	r2, [r3, #0]
      bitIndex++;
 8001618:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <HAL_GPIO_EXTI_Callback+0xf8>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001622:	701a      	strb	r2, [r3, #0]
    }
    if(bitIndex == 32)
 8001624:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b20      	cmp	r3, #32
 800162a:	d120      	bne.n	800166e <HAL_GPIO_EXTI_Callback+0xde>
    {
      cmdli = ~tempCode; // Logical inverted last 8 bits
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <HAL_GPIO_EXTI_Callback+0xf4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <HAL_GPIO_EXTI_Callback+0x100>)
 8001638:	701a      	strb	r2, [r3, #0]
      cmd = tempCode >> 8; // Second last 8 bits
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <HAL_GPIO_EXTI_Callback+0xf4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <HAL_GPIO_EXTI_Callback+0x104>)
 8001644:	701a      	strb	r2, [r3, #0]
      if(cmdli == cmd) // Check for errors
 8001646:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HAL_GPIO_EXTI_Callback+0x100>)
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <HAL_GPIO_EXTI_Callback+0x104>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d10a      	bne.n	8001668 <HAL_GPIO_EXTI_Callback+0xd8>
      {
        code = tempCode; // If no bit errors
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <HAL_GPIO_EXTI_Callback+0x108>)
 8001658:	601a      	str	r2, [r3, #0]
        // Do your main work HERE
        printf("Data: %X\r\n",code);
 800165a:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <HAL_GPIO_EXTI_Callback+0x108>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <HAL_GPIO_EXTI_Callback+0x10c>)
 8001660:	0011      	movs	r1, r2
 8001662:	0018      	movs	r0, r3
 8001664:	f003 fc34 	bl	8004ed0 <iprintf>
      }
      bitIndex = 0;
 8001668:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <HAL_GPIO_EXTI_Callback+0xf8>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
    }
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b002      	add	sp, #8
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	20000084 	.word	0x20000084
 8001684:	200001e0 	.word	0x200001e0
 8001688:	200001e4 	.word	0x200001e4
 800168c:	000006a4 	.word	0x000006a4
 8001690:	200001e6 	.word	0x200001e6
 8001694:	200001e5 	.word	0x200001e5
 8001698:	200001e8 	.word	0x200001e8
 800169c:	08005c24 	.word	0x08005c24

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
}
 80016a6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016a8:	46c0      	nop			@ (mov r8, r8)
 80016aa:	e7fd      	b.n	80016a8 <Error_Handler+0x8>

080016ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <HAL_MspInit+0x44>)
 80016b4:	699a      	ldr	r2, [r3, #24]
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_MspInit+0x44>)
 80016b8:	2101      	movs	r1, #1
 80016ba:	430a      	orrs	r2, r1
 80016bc:	619a      	str	r2, [r3, #24]
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <HAL_MspInit+0x44>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2201      	movs	r2, #1
 80016c4:	4013      	ands	r3, r2
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_MspInit+0x44>)
 80016cc:	69da      	ldr	r2, [r3, #28]
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <HAL_MspInit+0x44>)
 80016d0:	2180      	movs	r1, #128	@ 0x80
 80016d2:	0549      	lsls	r1, r1, #21
 80016d4:	430a      	orrs	r2, r1
 80016d6:	61da      	str	r2, [r3, #28]
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_MspInit+0x44>)
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	055b      	lsls	r3, r3, #21
 80016e0:	4013      	ands	r3, r2
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b002      	add	sp, #8
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a2f      	ldr	r2, [pc, #188]	@ (80017c0 <HAL_TIM_Base_MspInit+0xcc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10c      	bne.n	8001720 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001706:	4b2f      	ldr	r3, [pc, #188]	@ (80017c4 <HAL_TIM_Base_MspInit+0xd0>)
 8001708:	69da      	ldr	r2, [r3, #28]
 800170a:	4b2e      	ldr	r3, [pc, #184]	@ (80017c4 <HAL_TIM_Base_MspInit+0xd0>)
 800170c:	2102      	movs	r1, #2
 800170e:	430a      	orrs	r2, r1
 8001710:	61da      	str	r2, [r3, #28]
 8001712:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <HAL_TIM_Base_MspInit+0xd0>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	2202      	movs	r2, #2
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800171e:	e04b      	b.n	80017b8 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM15)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a28      	ldr	r2, [pc, #160]	@ (80017c8 <HAL_TIM_Base_MspInit+0xd4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d146      	bne.n	80017b8 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800172a:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <HAL_TIM_Base_MspInit+0xd0>)
 800172c:	699a      	ldr	r2, [r3, #24]
 800172e:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <HAL_TIM_Base_MspInit+0xd0>)
 8001730:	2180      	movs	r1, #128	@ 0x80
 8001732:	0249      	lsls	r1, r1, #9
 8001734:	430a      	orrs	r2, r1
 8001736:	619a      	str	r2, [r3, #24]
 8001738:	4b22      	ldr	r3, [pc, #136]	@ (80017c4 <HAL_TIM_Base_MspInit+0xd0>)
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	2380      	movs	r3, #128	@ 0x80
 800173e:	025b      	lsls	r3, r3, #9
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8001746:	4b21      	ldr	r3, [pc, #132]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 8001748:	4a21      	ldr	r2, [pc, #132]	@ (80017d0 <HAL_TIM_Base_MspInit+0xdc>)
 800174a:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800174c:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 800174e:	2210      	movs	r2, #16
 8001750:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8001752:	4b1e      	ldr	r3, [pc, #120]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001758:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 800175a:	2280      	movs	r2, #128	@ 0x80
 800175c:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800175e:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 8001760:	2280      	movs	r2, #128	@ 0x80
 8001762:	0052      	lsls	r2, r2, #1
 8001764:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001766:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 800176c:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8001772:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 8001774:	2200      	movs	r2, #0
 8001776:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 800177a:	0018      	movs	r0, r3
 800177c:	f000 fafa 	bl	8001d74 <HAL_DMA_Init>
 8001780:	1e03      	subs	r3, r0, #0
 8001782:	d001      	beq.n	8001788 <HAL_TIM_Base_MspInit+0x94>
      Error_Handler();
 8001784:	f7ff ff8c 	bl	80016a0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a10      	ldr	r2, [pc, #64]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 800178c:	625a      	str	r2, [r3, #36]	@ 0x24
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a0d      	ldr	r2, [pc, #52]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 8001798:	621a      	str	r2, [r3, #32]
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 80017a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a07      	ldr	r2, [pc, #28]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 80017b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_TIM_Base_MspInit+0xd8>)
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017b8:	46c0      	nop			@ (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b004      	add	sp, #16
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40000400 	.word	0x40000400
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40014000 	.word	0x40014000
 80017cc:	20000114 	.word	0x20000114
 80017d0:	40020058 	.word	0x40020058

080017d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b089      	sub	sp, #36	@ 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	240c      	movs	r4, #12
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	0018      	movs	r0, r3
 80017e2:	2314      	movs	r3, #20
 80017e4:	001a      	movs	r2, r3
 80017e6:	2100      	movs	r1, #0
 80017e8:	f003 fbce 	bl	8004f88 <memset>
  if(htim->Instance==TIM15)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a15      	ldr	r2, [pc, #84]	@ (8001848 <HAL_TIM_MspPostInit+0x74>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d124      	bne.n	8001840 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_TIM_MspPostInit+0x78>)
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	4b14      	ldr	r3, [pc, #80]	@ (800184c <HAL_TIM_MspPostInit+0x78>)
 80017fc:	2180      	movs	r1, #128	@ 0x80
 80017fe:	0289      	lsls	r1, r1, #10
 8001800:	430a      	orrs	r2, r1
 8001802:	615a      	str	r2, [r3, #20]
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <HAL_TIM_MspPostInit+0x78>)
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	029b      	lsls	r3, r3, #10
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001812:	0021      	movs	r1, r4
 8001814:	187b      	adds	r3, r7, r1
 8001816:	2204      	movs	r2, #4
 8001818:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	187b      	adds	r3, r7, r1
 800181c:	2202      	movs	r2, #2
 800181e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	187b      	adds	r3, r7, r1
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	187b      	adds	r3, r7, r1
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	187a      	adds	r2, r7, r1
 8001834:	2390      	movs	r3, #144	@ 0x90
 8001836:	05db      	lsls	r3, r3, #23
 8001838:	0011      	movs	r1, r2
 800183a:	0018      	movs	r0, r3
 800183c:	f000 fc32 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001840:	46c0      	nop			@ (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b009      	add	sp, #36	@ 0x24
 8001846:	bd90      	pop	{r4, r7, pc}
 8001848:	40014000 	.word	0x40014000
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b08b      	sub	sp, #44	@ 0x2c
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	2414      	movs	r4, #20
 800185a:	193b      	adds	r3, r7, r4
 800185c:	0018      	movs	r0, r3
 800185e:	2314      	movs	r3, #20
 8001860:	001a      	movs	r2, r3
 8001862:	2100      	movs	r1, #0
 8001864:	f003 fb90 	bl	8004f88 <memset>
  if(huart->Instance==USART1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1d      	ldr	r2, [pc, #116]	@ (80018e4 <HAL_UART_MspInit+0x94>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d133      	bne.n	80018da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <HAL_UART_MspInit+0x98>)
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <HAL_UART_MspInit+0x98>)
 8001878:	2180      	movs	r1, #128	@ 0x80
 800187a:	01c9      	lsls	r1, r1, #7
 800187c:	430a      	orrs	r2, r1
 800187e:	619a      	str	r2, [r3, #24]
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <HAL_UART_MspInit+0x98>)
 8001882:	699a      	ldr	r2, [r3, #24]
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	01db      	lsls	r3, r3, #7
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <HAL_UART_MspInit+0x98>)
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <HAL_UART_MspInit+0x98>)
 8001894:	2180      	movs	r1, #128	@ 0x80
 8001896:	0289      	lsls	r1, r1, #10
 8001898:	430a      	orrs	r2, r1
 800189a:	615a      	str	r2, [r3, #20]
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_UART_MspInit+0x98>)
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	2380      	movs	r3, #128	@ 0x80
 80018a2:	029b      	lsls	r3, r3, #10
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	22c0      	movs	r2, #192	@ 0xc0
 80018ae:	00d2      	lsls	r2, r2, #3
 80018b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	0021      	movs	r1, r4
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	2202      	movs	r2, #2
 80018b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	187b      	adds	r3, r7, r1
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c0:	187b      	adds	r3, r7, r1
 80018c2:	2203      	movs	r2, #3
 80018c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80018c6:	187b      	adds	r3, r7, r1
 80018c8:	2201      	movs	r2, #1
 80018ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	187a      	adds	r2, r7, r1
 80018ce:	2390      	movs	r3, #144	@ 0x90
 80018d0:	05db      	lsls	r3, r3, #23
 80018d2:	0011      	movs	r1, r2
 80018d4:	0018      	movs	r0, r3
 80018d6:	f000 fbe5 	bl	80020a4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b00b      	add	sp, #44	@ 0x2c
 80018e0:	bd90      	pop	{r4, r7, pc}
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	40013800 	.word	0x40013800
 80018e8:	40021000 	.word	0x40021000

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f0:	46c0      	nop			@ (mov r8, r8)
 80018f2:	e7fd      	b.n	80018f0 <NMI_Handler+0x4>

080018f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f8:	46c0      	nop			@ (mov r8, r8)
 80018fa:	e7fd      	b.n	80018f8 <HardFault_Handler+0x4>

080018fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001900:	46c0      	nop			@ (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001914:	f000 f910 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001922:	2040      	movs	r0, #64	@ 0x40
 8001924:	f000 fd66 	bl	80023f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <DMA1_Channel4_5_IRQHandler+0x14>)
 8001936:	0018      	movs	r0, r3
 8001938:	f000 faca 	bl	8001ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 800193c:	46c0      	nop			@ (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	20000114 	.word	0x20000114

08001948 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e00a      	b.n	8001970 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800195a:	e000      	b.n	800195e <_read+0x16>
 800195c:	bf00      	nop
 800195e:	0001      	movs	r1, r0
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	60ba      	str	r2, [r7, #8]
 8001966:	b2ca      	uxtb	r2, r1
 8001968:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	dbf0      	blt.n	800195a <_read+0x12>
  }

  return len;
 8001978:	687b      	ldr	r3, [r7, #4]
}
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b006      	add	sp, #24
 8001980:	bd80      	pop	{r7, pc}

08001982 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800198a:	2301      	movs	r3, #1
 800198c:	425b      	negs	r3, r3
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b002      	add	sp, #8
 8001994:	bd80      	pop	{r7, pc}

08001996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2280      	movs	r2, #128	@ 0x80
 80019a4:	0192      	lsls	r2, r2, #6
 80019a6:	605a      	str	r2, [r3, #4]
  return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b002      	add	sp, #8
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_isatty>:

int _isatty(int file)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b004      	add	sp, #16
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	18d3      	adds	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f003 fb12 	bl	8005034 <__errno>
 8001a10:	0003      	movs	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	2301      	movs	r3, #1
 8001a18:	425b      	negs	r3, r3
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	18d2      	adds	r2, r2, r3
 8001a2a:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <_sbrk+0x64>)
 8001a2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	0018      	movs	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b006      	add	sp, #24
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20002000 	.word	0x20002000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	2000030c 	.word	0x2000030c
 8001a44:	20000460 	.word	0x20000460

08001a48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */

}
 8001a4c:	46c0      	nop			@ (mov r8, r8)
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a54:	480d      	ldr	r0, [pc, #52]	@ (8001a8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a58:	f7ff fff6 	bl	8001a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a5c:	480c      	ldr	r0, [pc, #48]	@ (8001a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a5e:	490d      	ldr	r1, [pc, #52]	@ (8001a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a60:	4a0d      	ldr	r2, [pc, #52]	@ (8001a98 <LoopForever+0xe>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a64:	e002      	b.n	8001a6c <LoopCopyDataInit>

08001a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6a:	3304      	adds	r3, #4

08001a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a70:	d3f9      	bcc.n	8001a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a74:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa0 <LoopForever+0x16>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a78:	e001      	b.n	8001a7e <LoopFillZerobss>

08001a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a7c:	3204      	adds	r2, #4

08001a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a80:	d3fb      	bcc.n	8001a7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a82:	f003 fadd 	bl	8005040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a86:	f7ff faa5 	bl	8000fd4 <main>

08001a8a <LoopForever>:

LoopForever:
    b LoopForever
 8001a8a:	e7fe      	b.n	8001a8a <LoopForever>
  ldr   r0, =_estack
 8001a8c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a98:	08005e20 	.word	0x08005e20
  ldr r2, =_sbss
 8001a9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001aa0:	20000460 	.word	0x20000460

08001aa4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC1_IRQHandler>
	...

08001aa8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aac:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <HAL_Init+0x24>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_Init+0x24>)
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f000 f809 	bl	8001ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001abe:	f7ff fdf5 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	40022000 	.word	0x40022000

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad8:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <HAL_InitTick+0x5c>)
 8001ada:	681c      	ldr	r4, [r3, #0]
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <HAL_InitTick+0x60>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	23fa      	movs	r3, #250	@ 0xfa
 8001ae4:	0098      	lsls	r0, r3, #2
 8001ae6:	f7fe fb19 	bl	800011c <__udivsi3>
 8001aea:	0003      	movs	r3, r0
 8001aec:	0019      	movs	r1, r3
 8001aee:	0020      	movs	r0, r4
 8001af0:	f7fe fb14 	bl	800011c <__udivsi3>
 8001af4:	0003      	movs	r3, r0
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 f92f 	bl	8001d5a <HAL_SYSTICK_Config>
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e00f      	b.n	8001b24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d80b      	bhi.n	8001b22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	425b      	negs	r3, r3
 8001b10:	2200      	movs	r2, #0
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 f8fc 	bl	8001d10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_InitTick+0x64>)
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b003      	add	sp, #12
 8001b2a:	bd90      	pop	{r4, r7, pc}
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_IncTick+0x1c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	001a      	movs	r2, r3
 8001b42:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <HAL_IncTick+0x20>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	18d2      	adds	r2, r2, r3
 8001b48:	4b03      	ldr	r3, [pc, #12]	@ (8001b58 <HAL_IncTick+0x20>)
 8001b4a:	601a      	str	r2, [r3, #0]
}
 8001b4c:	46c0      	nop			@ (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	20000008 	.word	0x20000008
 8001b58:	20000310 	.word	0x20000310

08001b5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b02      	ldr	r3, [pc, #8]	@ (8001b6c <HAL_GetTick+0x10>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			@ (mov r8, r8)
 8001b6c:	20000310 	.word	0x20000310

08001b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff fff0 	bl	8001b5c <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3301      	adds	r3, #1
 8001b88:	d005      	beq.n	8001b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <HAL_Delay+0x44>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	001a      	movs	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	189b      	adds	r3, r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	f7ff ffe0 	bl	8001b5c <HAL_GetTick>
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d8f7      	bhi.n	8001b98 <HAL_Delay+0x28>
  {
  }
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b004      	add	sp, #16
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	46c0      	nop			@ (mov r8, r8)
 8001bb4:	20000008 	.word	0x20000008

08001bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	1dfb      	adds	r3, r7, #7
 8001bc2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	1dfb      	adds	r3, r7, #7
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bca:	d809      	bhi.n	8001be0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	231f      	movs	r3, #31
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	4b04      	ldr	r3, [pc, #16]	@ (8001be8 <__NVIC_EnableIRQ+0x30>)
 8001bd8:	2101      	movs	r1, #1
 8001bda:	4091      	lsls	r1, r2
 8001bdc:	000a      	movs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]
  }
}
 8001be0:	46c0      	nop			@ (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b002      	add	sp, #8
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	e000e100 	.word	0xe000e100

08001bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c00:	d828      	bhi.n	8001c54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c02:	4a2f      	ldr	r2, [pc, #188]	@ (8001cc0 <__NVIC_SetPriority+0xd4>)
 8001c04:	1dfb      	adds	r3, r7, #7
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	33c0      	adds	r3, #192	@ 0xc0
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	589b      	ldr	r3, [r3, r2]
 8001c12:	1dfa      	adds	r2, r7, #7
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	0011      	movs	r1, r2
 8001c18:	2203      	movs	r2, #3
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	00d2      	lsls	r2, r2, #3
 8001c1e:	21ff      	movs	r1, #255	@ 0xff
 8001c20:	4091      	lsls	r1, r2
 8001c22:	000a      	movs	r2, r1
 8001c24:	43d2      	mvns	r2, r2
 8001c26:	401a      	ands	r2, r3
 8001c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	22ff      	movs	r2, #255	@ 0xff
 8001c30:	401a      	ands	r2, r3
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	0018      	movs	r0, r3
 8001c38:	2303      	movs	r3, #3
 8001c3a:	4003      	ands	r3, r0
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c40:	481f      	ldr	r0, [pc, #124]	@ (8001cc0 <__NVIC_SetPriority+0xd4>)
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	33c0      	adds	r3, #192	@ 0xc0
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c52:	e031      	b.n	8001cb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c54:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <__NVIC_SetPriority+0xd8>)
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	400b      	ands	r3, r1
 8001c60:	3b08      	subs	r3, #8
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3306      	adds	r3, #6
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	18d3      	adds	r3, r2, r3
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	1dfa      	adds	r2, r7, #7
 8001c70:	7812      	ldrb	r2, [r2, #0]
 8001c72:	0011      	movs	r1, r2
 8001c74:	2203      	movs	r2, #3
 8001c76:	400a      	ands	r2, r1
 8001c78:	00d2      	lsls	r2, r2, #3
 8001c7a:	21ff      	movs	r1, #255	@ 0xff
 8001c7c:	4091      	lsls	r1, r2
 8001c7e:	000a      	movs	r2, r1
 8001c80:	43d2      	mvns	r2, r2
 8001c82:	401a      	ands	r2, r3
 8001c84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	019b      	lsls	r3, r3, #6
 8001c8a:	22ff      	movs	r2, #255	@ 0xff
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	0018      	movs	r0, r3
 8001c94:	2303      	movs	r3, #3
 8001c96:	4003      	ands	r3, r0
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c9c:	4809      	ldr	r0, [pc, #36]	@ (8001cc4 <__NVIC_SetPriority+0xd8>)
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	001c      	movs	r4, r3
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	4023      	ands	r3, r4
 8001ca8:	3b08      	subs	r3, #8
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	430a      	orrs	r2, r1
 8001cae:	3306      	adds	r3, #6
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	18c3      	adds	r3, r0, r3
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	46c0      	nop			@ (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b003      	add	sp, #12
 8001cbe:	bd90      	pop	{r4, r7, pc}
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	1e5a      	subs	r2, r3, #1
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	045b      	lsls	r3, r3, #17
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d301      	bcc.n	8001ce0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e010      	b.n	8001d02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <SysTick_Config+0x44>)
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	3a01      	subs	r2, #1
 8001ce6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce8:	2301      	movs	r3, #1
 8001cea:	425b      	negs	r3, r3
 8001cec:	2103      	movs	r1, #3
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff ff7c 	bl	8001bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <SysTick_Config+0x44>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <SysTick_Config+0x44>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	0018      	movs	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b002      	add	sp, #8
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			@ (mov r8, r8)
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	1c02      	adds	r2, r0, #0
 8001d20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b25b      	sxtb	r3, r3
 8001d2a:	0011      	movs	r1, r2
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7ff ff5d 	bl	8001bec <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b004      	add	sp, #16
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	0002      	movs	r2, r0
 8001d42:	1dfb      	adds	r3, r7, #7
 8001d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d46:	1dfb      	adds	r3, r7, #7
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7ff ff33 	bl	8001bb8 <__NVIC_EnableIRQ>
}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b002      	add	sp, #8
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	0018      	movs	r0, r3
 8001d66:	f7ff ffaf 	bl	8001cc8 <SysTick_Config>
 8001d6a:	0003      	movs	r3, r0
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e036      	b.n	8001df8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2221      	movs	r2, #33	@ 0x21
 8001d8e:	2102      	movs	r1, #2
 8001d90:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4a18      	ldr	r2, [pc, #96]	@ (8001e00 <HAL_DMA_Init+0x8c>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001daa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 f946 	bl	800206c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2221      	movs	r2, #33	@ 0x21
 8001dea:	2101      	movs	r1, #1
 8001dec:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2220      	movs	r2, #32
 8001df2:	2100      	movs	r1, #0
 8001df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b004      	add	sp, #16
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	ffffc00f 	.word	0xffffc00f

08001e04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e12:	2317      	movs	r3, #23
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	5c9b      	ldrb	r3, [r3, r2]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_DMA_Start_IT+0x24>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e04f      	b.n	8001ec8 <HAL_DMA_Start_IT+0xc4>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2221      	movs	r2, #33	@ 0x21
 8001e34:	5c9b      	ldrb	r3, [r3, r2]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d13a      	bne.n	8001eb2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2221      	movs	r2, #33	@ 0x21
 8001e40:	2102      	movs	r1, #2
 8001e42:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2101      	movs	r1, #1
 8001e56:	438a      	bics	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f8d7 	bl	8002014 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	210e      	movs	r1, #14
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e00f      	b.n	8001ea0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	210a      	movs	r1, #10
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	438a      	bics	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2101      	movs	r1, #1
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e007      	b.n	8001ec2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001eba:	2317      	movs	r3, #23
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001ec2:	2317      	movs	r3, #23
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	781b      	ldrb	r3, [r3, #0]
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b006      	add	sp, #24
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	2204      	movs	r2, #4
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d024      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x72>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2204      	movs	r2, #4
 8001efc:	4013      	ands	r3, r2
 8001efe:	d020      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2220      	movs	r2, #32
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d107      	bne.n	8001f1c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2104      	movs	r1, #4
 8001f18:	438a      	bics	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f24:	2104      	movs	r1, #4
 8001f26:	4091      	lsls	r1, r2
 8001f28:	000a      	movs	r2, r1
 8001f2a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d100      	bne.n	8001f36 <HAL_DMA_IRQHandler+0x66>
 8001f34:	e06a      	b.n	800200c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	0010      	movs	r0, r2
 8001f3e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001f40:	e064      	b.n	800200c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	2202      	movs	r2, #2
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	0013      	movs	r3, r2
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d02b      	beq.n	8001faa <HAL_DMA_IRQHandler+0xda>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2202      	movs	r2, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d027      	beq.n	8001faa <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2220      	movs	r2, #32
 8001f62:	4013      	ands	r3, r2
 8001f64:	d10b      	bne.n	8001f7e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	210a      	movs	r1, #10
 8001f72:	438a      	bics	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2221      	movs	r2, #33	@ 0x21
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f86:	2102      	movs	r1, #2
 8001f88:	4091      	lsls	r1, r2
 8001f8a:	000a      	movs	r2, r1
 8001f8c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2220      	movs	r2, #32
 8001f92:	2100      	movs	r1, #0
 8001f94:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d036      	beq.n	800200c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	0010      	movs	r0, r2
 8001fa6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001fa8:	e030      	b.n	800200c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	2208      	movs	r2, #8
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	0013      	movs	r3, r2
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d028      	beq.n	800200c <HAL_DMA_IRQHandler+0x13c>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d024      	beq.n	800200c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	210e      	movs	r1, #14
 8001fce:	438a      	bics	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fda:	2101      	movs	r1, #1
 8001fdc:	4091      	lsls	r1, r2
 8001fde:	000a      	movs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2221      	movs	r2, #33	@ 0x21
 8001fec:	2101      	movs	r1, #1
 8001fee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	0010      	movs	r0, r2
 8002008:	4798      	blx	r3
    }
  }
}
 800200a:	e7ff      	b.n	800200c <HAL_DMA_IRQHandler+0x13c>
 800200c:	46c0      	nop			@ (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b004      	add	sp, #16
 8002012:	bd80      	pop	{r7, pc}

08002014 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202a:	2101      	movs	r1, #1
 800202c:	4091      	lsls	r1, r2
 800202e:	000a      	movs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b10      	cmp	r3, #16
 8002040:	d108      	bne.n	8002054 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002052:	e007      	b.n	8002064 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	60da      	str	r2, [r3, #12]
}
 8002064:	46c0      	nop			@ (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b004      	add	sp, #16
 800206a:	bd80      	pop	{r7, pc}

0800206c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a08      	ldr	r2, [pc, #32]	@ (800209c <DMA_CalcBaseAndBitshift+0x30>)
 800207a:	4694      	mov	ip, r2
 800207c:	4463      	add	r3, ip
 800207e:	2114      	movs	r1, #20
 8002080:	0018      	movs	r0, r3
 8002082:	f7fe f84b 	bl	800011c <__udivsi3>
 8002086:	0003      	movs	r3, r0
 8002088:	009a      	lsls	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a03      	ldr	r2, [pc, #12]	@ (80020a0 <DMA_CalcBaseAndBitshift+0x34>)
 8002092:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002094:	46c0      	nop			@ (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}
 800209c:	bffdfff8 	.word	0xbffdfff8
 80020a0:	40020000 	.word	0x40020000

080020a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b2:	e14f      	b.n	8002354 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2101      	movs	r1, #1
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4091      	lsls	r1, r2
 80020be:	000a      	movs	r2, r1
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d100      	bne.n	80020cc <HAL_GPIO_Init+0x28>
 80020ca:	e140      	b.n	800234e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2203      	movs	r2, #3
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d005      	beq.n	80020e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2203      	movs	r2, #3
 80020de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d130      	bne.n	8002146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	409a      	lsls	r2, r3
 80020f2:	0013      	movs	r3, r2
 80020f4:	43da      	mvns	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	409a      	lsls	r2, r3
 8002106:	0013      	movs	r3, r2
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800211a:	2201      	movs	r2, #1
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
 8002120:	0013      	movs	r3, r2
 8002122:	43da      	mvns	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	2201      	movs	r2, #1
 8002132:	401a      	ands	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	409a      	lsls	r2, r3
 8002138:	0013      	movs	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2203      	movs	r2, #3
 800214c:	4013      	ands	r3, r2
 800214e:	2b03      	cmp	r3, #3
 8002150:	d017      	beq.n	8002182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	409a      	lsls	r2, r3
 8002160:	0013      	movs	r3, r2
 8002162:	43da      	mvns	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	409a      	lsls	r2, r3
 8002174:	0013      	movs	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2203      	movs	r2, #3
 8002188:	4013      	ands	r3, r2
 800218a:	2b02      	cmp	r3, #2
 800218c:	d123      	bne.n	80021d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	0092      	lsls	r2, r2, #2
 8002198:	58d3      	ldr	r3, [r2, r3]
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2207      	movs	r2, #7
 80021a0:	4013      	ands	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	409a      	lsls	r2, r3
 80021a8:	0013      	movs	r3, r2
 80021aa:	43da      	mvns	r2, r3
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2107      	movs	r1, #7
 80021ba:	400b      	ands	r3, r1
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	409a      	lsls	r2, r3
 80021c0:	0013      	movs	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3208      	adds	r2, #8
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	6939      	ldr	r1, [r7, #16]
 80021d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	409a      	lsls	r2, r3
 80021e4:	0013      	movs	r3, r2
 80021e6:	43da      	mvns	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2203      	movs	r2, #3
 80021f4:	401a      	ands	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	409a      	lsls	r2, r3
 80021fc:	0013      	movs	r3, r2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	23c0      	movs	r3, #192	@ 0xc0
 8002210:	029b      	lsls	r3, r3, #10
 8002212:	4013      	ands	r3, r2
 8002214:	d100      	bne.n	8002218 <HAL_GPIO_Init+0x174>
 8002216:	e09a      	b.n	800234e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002218:	4b54      	ldr	r3, [pc, #336]	@ (800236c <HAL_GPIO_Init+0x2c8>)
 800221a:	699a      	ldr	r2, [r3, #24]
 800221c:	4b53      	ldr	r3, [pc, #332]	@ (800236c <HAL_GPIO_Init+0x2c8>)
 800221e:	2101      	movs	r1, #1
 8002220:	430a      	orrs	r2, r1
 8002222:	619a      	str	r2, [r3, #24]
 8002224:	4b51      	ldr	r3, [pc, #324]	@ (800236c <HAL_GPIO_Init+0x2c8>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2201      	movs	r2, #1
 800222a:	4013      	ands	r3, r2
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002230:	4a4f      	ldr	r2, [pc, #316]	@ (8002370 <HAL_GPIO_Init+0x2cc>)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	589b      	ldr	r3, [r3, r2]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2203      	movs	r2, #3
 8002242:	4013      	ands	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	409a      	lsls	r2, r3
 800224a:	0013      	movs	r3, r2
 800224c:	43da      	mvns	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	2390      	movs	r3, #144	@ 0x90
 8002258:	05db      	lsls	r3, r3, #23
 800225a:	429a      	cmp	r2, r3
 800225c:	d013      	beq.n	8002286 <HAL_GPIO_Init+0x1e2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a44      	ldr	r2, [pc, #272]	@ (8002374 <HAL_GPIO_Init+0x2d0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00d      	beq.n	8002282 <HAL_GPIO_Init+0x1de>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a43      	ldr	r2, [pc, #268]	@ (8002378 <HAL_GPIO_Init+0x2d4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <HAL_GPIO_Init+0x1da>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a42      	ldr	r2, [pc, #264]	@ (800237c <HAL_GPIO_Init+0x2d8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_GPIO_Init+0x1d6>
 8002276:	2303      	movs	r3, #3
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x1e4>
 800227a:	2305      	movs	r3, #5
 800227c:	e004      	b.n	8002288 <HAL_GPIO_Init+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	e002      	b.n	8002288 <HAL_GPIO_Init+0x1e4>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x1e4>
 8002286:	2300      	movs	r3, #0
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	2103      	movs	r1, #3
 800228c:	400a      	ands	r2, r1
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	4093      	lsls	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002298:	4935      	ldr	r1, [pc, #212]	@ (8002370 <HAL_GPIO_Init+0x2cc>)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a6:	4b36      	ldr	r3, [pc, #216]	@ (8002380 <HAL_GPIO_Init+0x2dc>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43da      	mvns	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	2380      	movs	r3, #128	@ 0x80
 80022bc:	035b      	lsls	r3, r3, #13
 80022be:	4013      	ands	r3, r2
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <HAL_GPIO_Init+0x2dc>)
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80022d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002380 <HAL_GPIO_Init+0x2dc>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43da      	mvns	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	039b      	lsls	r3, r3, #14
 80022e8:	4013      	ands	r3, r2
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022f4:	4b22      	ldr	r3, [pc, #136]	@ (8002380 <HAL_GPIO_Init+0x2dc>)
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80022fa:	4b21      	ldr	r3, [pc, #132]	@ (8002380 <HAL_GPIO_Init+0x2dc>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43da      	mvns	r2, r3
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	029b      	lsls	r3, r3, #10
 8002312:	4013      	ands	r3, r2
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800231e:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <HAL_GPIO_Init+0x2dc>)
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002324:	4b16      	ldr	r3, [pc, #88]	@ (8002380 <HAL_GPIO_Init+0x2dc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	43da      	mvns	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	2380      	movs	r3, #128	@ 0x80
 800233a:	025b      	lsls	r3, r3, #9
 800233c:	4013      	ands	r3, r2
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002348:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <HAL_GPIO_Init+0x2dc>)
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	40da      	lsrs	r2, r3
 800235c:	1e13      	subs	r3, r2, #0
 800235e:	d000      	beq.n	8002362 <HAL_GPIO_Init+0x2be>
 8002360:	e6a8      	b.n	80020b4 <HAL_GPIO_Init+0x10>
  } 
}
 8002362:	46c0      	nop			@ (mov r8, r8)
 8002364:	46c0      	nop			@ (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b006      	add	sp, #24
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	40010000 	.word	0x40010000
 8002374:	48000400 	.word	0x48000400
 8002378:	48000800 	.word	0x48000800
 800237c:	48000c00 	.word	0x48000c00
 8002380:	40010400 	.word	0x40010400

08002384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	0008      	movs	r0, r1
 800238e:	0011      	movs	r1, r2
 8002390:	1cbb      	adds	r3, r7, #2
 8002392:	1c02      	adds	r2, r0, #0
 8002394:	801a      	strh	r2, [r3, #0]
 8002396:	1c7b      	adds	r3, r7, #1
 8002398:	1c0a      	adds	r2, r1, #0
 800239a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800239c:	1c7b      	adds	r3, r7, #1
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d004      	beq.n	80023ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023a4:	1cbb      	adds	r3, r7, #2
 80023a6:	881a      	ldrh	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023ac:	e003      	b.n	80023b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ae:	1cbb      	adds	r3, r7, #2
 80023b0:	881a      	ldrh	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b002      	add	sp, #8
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	000a      	movs	r2, r1
 80023c8:	1cbb      	adds	r3, r7, #2
 80023ca:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023d2:	1cbb      	adds	r3, r7, #2
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4013      	ands	r3, r2
 80023da:	041a      	lsls	r2, r3, #16
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43db      	mvns	r3, r3
 80023e0:	1cb9      	adds	r1, r7, #2
 80023e2:	8809      	ldrh	r1, [r1, #0]
 80023e4:	400b      	ands	r3, r1
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	619a      	str	r2, [r3, #24]
}
 80023ec:	46c0      	nop			@ (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b004      	add	sp, #16
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	0002      	movs	r2, r0
 80023fc:	1dbb      	adds	r3, r7, #6
 80023fe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002400:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	1dba      	adds	r2, r7, #6
 8002406:	8812      	ldrh	r2, [r2, #0]
 8002408:	4013      	ands	r3, r2
 800240a:	d008      	beq.n	800241e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800240e:	1dba      	adds	r2, r7, #6
 8002410:	8812      	ldrh	r2, [r2, #0]
 8002412:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002414:	1dbb      	adds	r3, r7, #6
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	0018      	movs	r0, r3
 800241a:	f7ff f8b9 	bl	8001590 <HAL_GPIO_EXTI_Callback>
  }
}
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	46bd      	mov	sp, r7
 8002422:	b002      	add	sp, #8
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	40010400 	.word	0x40010400

0800242c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e301      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2201      	movs	r2, #1
 8002444:	4013      	ands	r3, r2
 8002446:	d100      	bne.n	800244a <HAL_RCC_OscConfig+0x1e>
 8002448:	e08d      	b.n	8002566 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800244a:	4bc3      	ldr	r3, [pc, #780]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	220c      	movs	r2, #12
 8002450:	4013      	ands	r3, r2
 8002452:	2b04      	cmp	r3, #4
 8002454:	d00e      	beq.n	8002474 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002456:	4bc0      	ldr	r3, [pc, #768]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	220c      	movs	r2, #12
 800245c:	4013      	ands	r3, r2
 800245e:	2b08      	cmp	r3, #8
 8002460:	d116      	bne.n	8002490 <HAL_RCC_OscConfig+0x64>
 8002462:	4bbd      	ldr	r3, [pc, #756]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	2380      	movs	r3, #128	@ 0x80
 8002468:	025b      	lsls	r3, r3, #9
 800246a:	401a      	ands	r2, r3
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	025b      	lsls	r3, r3, #9
 8002470:	429a      	cmp	r2, r3
 8002472:	d10d      	bne.n	8002490 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	4bb8      	ldr	r3, [pc, #736]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2380      	movs	r3, #128	@ 0x80
 800247a:	029b      	lsls	r3, r3, #10
 800247c:	4013      	ands	r3, r2
 800247e:	d100      	bne.n	8002482 <HAL_RCC_OscConfig+0x56>
 8002480:	e070      	b.n	8002564 <HAL_RCC_OscConfig+0x138>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d000      	beq.n	800248c <HAL_RCC_OscConfig+0x60>
 800248a:	e06b      	b.n	8002564 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e2d8      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d107      	bne.n	80024a8 <HAL_RCC_OscConfig+0x7c>
 8002498:	4baf      	ldr	r3, [pc, #700]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4bae      	ldr	r3, [pc, #696]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800249e:	2180      	movs	r1, #128	@ 0x80
 80024a0:	0249      	lsls	r1, r1, #9
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e02f      	b.n	8002508 <HAL_RCC_OscConfig+0xdc>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10c      	bne.n	80024ca <HAL_RCC_OscConfig+0x9e>
 80024b0:	4ba9      	ldr	r3, [pc, #676]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4ba8      	ldr	r3, [pc, #672]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024b6:	49a9      	ldr	r1, [pc, #676]	@ (800275c <HAL_RCC_OscConfig+0x330>)
 80024b8:	400a      	ands	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	4ba6      	ldr	r3, [pc, #664]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4ba5      	ldr	r3, [pc, #660]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024c2:	49a7      	ldr	r1, [pc, #668]	@ (8002760 <HAL_RCC_OscConfig+0x334>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e01e      	b.n	8002508 <HAL_RCC_OscConfig+0xdc>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d10e      	bne.n	80024f0 <HAL_RCC_OscConfig+0xc4>
 80024d2:	4ba1      	ldr	r3, [pc, #644]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4ba0      	ldr	r3, [pc, #640]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024d8:	2180      	movs	r1, #128	@ 0x80
 80024da:	02c9      	lsls	r1, r1, #11
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	4b9d      	ldr	r3, [pc, #628]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024e6:	2180      	movs	r1, #128	@ 0x80
 80024e8:	0249      	lsls	r1, r1, #9
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e00b      	b.n	8002508 <HAL_RCC_OscConfig+0xdc>
 80024f0:	4b99      	ldr	r3, [pc, #612]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b98      	ldr	r3, [pc, #608]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024f6:	4999      	ldr	r1, [pc, #612]	@ (800275c <HAL_RCC_OscConfig+0x330>)
 80024f8:	400a      	ands	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	4b96      	ldr	r3, [pc, #600]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b95      	ldr	r3, [pc, #596]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002502:	4997      	ldr	r1, [pc, #604]	@ (8002760 <HAL_RCC_OscConfig+0x334>)
 8002504:	400a      	ands	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d014      	beq.n	800253a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff fb24 	bl	8001b5c <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251a:	f7ff fb1f 	bl	8001b5c <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b64      	cmp	r3, #100	@ 0x64
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e28a      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252c:	4b8a      	ldr	r3, [pc, #552]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	@ 0x80
 8002532:	029b      	lsls	r3, r3, #10
 8002534:	4013      	ands	r3, r2
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0xee>
 8002538:	e015      	b.n	8002566 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7ff fb0f 	bl	8001b5c <HAL_GetTick>
 800253e:	0003      	movs	r3, r0
 8002540:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002544:	f7ff fb0a 	bl	8001b5c <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	@ 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e275      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	4b80      	ldr	r3, [pc, #512]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	029b      	lsls	r3, r3, #10
 800255e:	4013      	ands	r3, r2
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x118>
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2202      	movs	r2, #2
 800256c:	4013      	ands	r3, r2
 800256e:	d100      	bne.n	8002572 <HAL_RCC_OscConfig+0x146>
 8002570:	e069      	b.n	8002646 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002572:	4b79      	ldr	r3, [pc, #484]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	220c      	movs	r2, #12
 8002578:	4013      	ands	r3, r2
 800257a:	d00b      	beq.n	8002594 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800257c:	4b76      	ldr	r3, [pc, #472]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	220c      	movs	r2, #12
 8002582:	4013      	ands	r3, r2
 8002584:	2b08      	cmp	r3, #8
 8002586:	d11c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x196>
 8002588:	4b73      	ldr	r3, [pc, #460]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	025b      	lsls	r3, r3, #9
 8002590:	4013      	ands	r3, r2
 8002592:	d116      	bne.n	80025c2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002594:	4b70      	ldr	r3, [pc, #448]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2202      	movs	r2, #2
 800259a:	4013      	ands	r3, r2
 800259c:	d005      	beq.n	80025aa <HAL_RCC_OscConfig+0x17e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e24b      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	22f8      	movs	r2, #248	@ 0xf8
 80025b0:	4393      	bics	r3, r2
 80025b2:	0019      	movs	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	00da      	lsls	r2, r3, #3
 80025ba:	4b67      	ldr	r3, [pc, #412]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c0:	e041      	b.n	8002646 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d024      	beq.n	8002614 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ca:	4b63      	ldr	r3, [pc, #396]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b62      	ldr	r3, [pc, #392]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80025d0:	2101      	movs	r1, #1
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7ff fac1 	bl	8001b5c <HAL_GetTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e0:	f7ff fabc 	bl	8001b5c <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e227      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f2:	4b59      	ldr	r3, [pc, #356]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2202      	movs	r2, #2
 80025f8:	4013      	ands	r3, r2
 80025fa:	d0f1      	beq.n	80025e0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fc:	4b56      	ldr	r3, [pc, #344]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	22f8      	movs	r2, #248	@ 0xf8
 8002602:	4393      	bics	r3, r2
 8002604:	0019      	movs	r1, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00da      	lsls	r2, r3, #3
 800260c:	4b52      	ldr	r3, [pc, #328]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e018      	b.n	8002646 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002614:	4b50      	ldr	r3, [pc, #320]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b4f      	ldr	r3, [pc, #316]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800261a:	2101      	movs	r1, #1
 800261c:	438a      	bics	r2, r1
 800261e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7ff fa9c 	bl	8001b5c <HAL_GetTick>
 8002624:	0003      	movs	r3, r0
 8002626:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262a:	f7ff fa97 	bl	8001b5c <HAL_GetTick>
 800262e:	0002      	movs	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e202      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263c:	4b46      	ldr	r3, [pc, #280]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2202      	movs	r2, #2
 8002642:	4013      	ands	r3, r2
 8002644:	d1f1      	bne.n	800262a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2208      	movs	r2, #8
 800264c:	4013      	ands	r3, r2
 800264e:	d036      	beq.n	80026be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d019      	beq.n	800268c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002658:	4b3f      	ldr	r3, [pc, #252]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800265a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800265c:	4b3e      	ldr	r3, [pc, #248]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800265e:	2101      	movs	r1, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002664:	f7ff fa7a 	bl	8001b5c <HAL_GetTick>
 8002668:	0003      	movs	r3, r0
 800266a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266e:	f7ff fa75 	bl	8001b5c <HAL_GetTick>
 8002672:	0002      	movs	r2, r0
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e1e0      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002680:	4b35      	ldr	r3, [pc, #212]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	2202      	movs	r2, #2
 8002686:	4013      	ands	r3, r2
 8002688:	d0f1      	beq.n	800266e <HAL_RCC_OscConfig+0x242>
 800268a:	e018      	b.n	80026be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268c:	4b32      	ldr	r3, [pc, #200]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800268e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002690:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002692:	2101      	movs	r1, #1
 8002694:	438a      	bics	r2, r1
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002698:	f7ff fa60 	bl	8001b5c <HAL_GetTick>
 800269c:	0003      	movs	r3, r0
 800269e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a2:	f7ff fa5b 	bl	8001b5c <HAL_GetTick>
 80026a6:	0002      	movs	r2, r0
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e1c6      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b4:	4b28      	ldr	r3, [pc, #160]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	2202      	movs	r2, #2
 80026ba:	4013      	ands	r3, r2
 80026bc:	d1f1      	bne.n	80026a2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2204      	movs	r2, #4
 80026c4:	4013      	ands	r3, r2
 80026c6:	d100      	bne.n	80026ca <HAL_RCC_OscConfig+0x29e>
 80026c8:	e0b4      	b.n	8002834 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ca:	201f      	movs	r0, #31
 80026cc:	183b      	adds	r3, r7, r0
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d2:	4b21      	ldr	r3, [pc, #132]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	055b      	lsls	r3, r3, #21
 80026da:	4013      	ands	r3, r2
 80026dc:	d110      	bne.n	8002700 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4b1e      	ldr	r3, [pc, #120]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80026e4:	2180      	movs	r1, #128	@ 0x80
 80026e6:	0549      	lsls	r1, r1, #21
 80026e8:	430a      	orrs	r2, r1
 80026ea:	61da      	str	r2, [r3, #28]
 80026ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	055b      	lsls	r3, r3, #21
 80026f4:	4013      	ands	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026fa:	183b      	adds	r3, r7, r0
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <HAL_RCC_OscConfig+0x338>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4013      	ands	r3, r2
 800270a:	d11a      	bne.n	8002742 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270c:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <HAL_RCC_OscConfig+0x338>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b14      	ldr	r3, [pc, #80]	@ (8002764 <HAL_RCC_OscConfig+0x338>)
 8002712:	2180      	movs	r1, #128	@ 0x80
 8002714:	0049      	lsls	r1, r1, #1
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271a:	f7ff fa1f 	bl	8001b5c <HAL_GetTick>
 800271e:	0003      	movs	r3, r0
 8002720:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002724:	f7ff fa1a 	bl	8001b5c <HAL_GetTick>
 8002728:	0002      	movs	r2, r0
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	@ 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e185      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002736:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_RCC_OscConfig+0x338>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	2380      	movs	r3, #128	@ 0x80
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4013      	ands	r3, r2
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d10e      	bne.n	8002768 <HAL_RCC_OscConfig+0x33c>
 800274a:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 800274c:	6a1a      	ldr	r2, [r3, #32]
 800274e:	4b02      	ldr	r3, [pc, #8]	@ (8002758 <HAL_RCC_OscConfig+0x32c>)
 8002750:	2101      	movs	r1, #1
 8002752:	430a      	orrs	r2, r1
 8002754:	621a      	str	r2, [r3, #32]
 8002756:	e035      	b.n	80027c4 <HAL_RCC_OscConfig+0x398>
 8002758:	40021000 	.word	0x40021000
 800275c:	fffeffff 	.word	0xfffeffff
 8002760:	fffbffff 	.word	0xfffbffff
 8002764:	40007000 	.word	0x40007000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10c      	bne.n	800278a <HAL_RCC_OscConfig+0x35e>
 8002770:	4bb6      	ldr	r3, [pc, #728]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002772:	6a1a      	ldr	r2, [r3, #32]
 8002774:	4bb5      	ldr	r3, [pc, #724]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002776:	2101      	movs	r1, #1
 8002778:	438a      	bics	r2, r1
 800277a:	621a      	str	r2, [r3, #32]
 800277c:	4bb3      	ldr	r3, [pc, #716]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	4bb2      	ldr	r3, [pc, #712]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002782:	2104      	movs	r1, #4
 8002784:	438a      	bics	r2, r1
 8002786:	621a      	str	r2, [r3, #32]
 8002788:	e01c      	b.n	80027c4 <HAL_RCC_OscConfig+0x398>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b05      	cmp	r3, #5
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x380>
 8002792:	4bae      	ldr	r3, [pc, #696]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002794:	6a1a      	ldr	r2, [r3, #32]
 8002796:	4bad      	ldr	r3, [pc, #692]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002798:	2104      	movs	r1, #4
 800279a:	430a      	orrs	r2, r1
 800279c:	621a      	str	r2, [r3, #32]
 800279e:	4bab      	ldr	r3, [pc, #684]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80027a0:	6a1a      	ldr	r2, [r3, #32]
 80027a2:	4baa      	ldr	r3, [pc, #680]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80027a4:	2101      	movs	r1, #1
 80027a6:	430a      	orrs	r2, r1
 80027a8:	621a      	str	r2, [r3, #32]
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0x398>
 80027ac:	4ba7      	ldr	r3, [pc, #668]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80027ae:	6a1a      	ldr	r2, [r3, #32]
 80027b0:	4ba6      	ldr	r3, [pc, #664]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80027b2:	2101      	movs	r1, #1
 80027b4:	438a      	bics	r2, r1
 80027b6:	621a      	str	r2, [r3, #32]
 80027b8:	4ba4      	ldr	r3, [pc, #656]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80027ba:	6a1a      	ldr	r2, [r3, #32]
 80027bc:	4ba3      	ldr	r3, [pc, #652]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80027be:	2104      	movs	r1, #4
 80027c0:	438a      	bics	r2, r1
 80027c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d014      	beq.n	80027f6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027cc:	f7ff f9c6 	bl	8001b5c <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	e009      	b.n	80027ea <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7ff f9c1 	bl	8001b5c <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	4a9b      	ldr	r2, [pc, #620]	@ (8002a50 <HAL_RCC_OscConfig+0x624>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e12b      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ea:	4b98      	ldr	r3, [pc, #608]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	2202      	movs	r2, #2
 80027f0:	4013      	ands	r3, r2
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x3aa>
 80027f4:	e013      	b.n	800281e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7ff f9b1 	bl	8001b5c <HAL_GetTick>
 80027fa:	0003      	movs	r3, r0
 80027fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fe:	e009      	b.n	8002814 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7ff f9ac 	bl	8001b5c <HAL_GetTick>
 8002804:	0002      	movs	r2, r0
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	4a91      	ldr	r2, [pc, #580]	@ (8002a50 <HAL_RCC_OscConfig+0x624>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e116      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002814:	4b8d      	ldr	r3, [pc, #564]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800281e:	231f      	movs	r3, #31
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002828:	4b88      	ldr	r3, [pc, #544]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	4b87      	ldr	r3, [pc, #540]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 800282e:	4989      	ldr	r1, [pc, #548]	@ (8002a54 <HAL_RCC_OscConfig+0x628>)
 8002830:	400a      	ands	r2, r1
 8002832:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2210      	movs	r2, #16
 800283a:	4013      	ands	r3, r2
 800283c:	d063      	beq.n	8002906 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d12a      	bne.n	800289c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002846:	4b81      	ldr	r3, [pc, #516]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002848:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800284a:	4b80      	ldr	r3, [pc, #512]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 800284c:	2104      	movs	r1, #4
 800284e:	430a      	orrs	r2, r1
 8002850:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002852:	4b7e      	ldr	r3, [pc, #504]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002856:	4b7d      	ldr	r3, [pc, #500]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002858:	2101      	movs	r1, #1
 800285a:	430a      	orrs	r2, r1
 800285c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7ff f97d 	bl	8001b5c <HAL_GetTick>
 8002862:	0003      	movs	r3, r0
 8002864:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002868:	f7ff f978 	bl	8001b5c <HAL_GetTick>
 800286c:	0002      	movs	r2, r0
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e0e3      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800287a:	4b74      	ldr	r3, [pc, #464]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 800287c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287e:	2202      	movs	r2, #2
 8002880:	4013      	ands	r3, r2
 8002882:	d0f1      	beq.n	8002868 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002884:	4b71      	ldr	r3, [pc, #452]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002888:	22f8      	movs	r2, #248	@ 0xf8
 800288a:	4393      	bics	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	00da      	lsls	r2, r3, #3
 8002894:	4b6d      	ldr	r3, [pc, #436]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002896:	430a      	orrs	r2, r1
 8002898:	635a      	str	r2, [r3, #52]	@ 0x34
 800289a:	e034      	b.n	8002906 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	3305      	adds	r3, #5
 80028a2:	d111      	bne.n	80028c8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80028a4:	4b69      	ldr	r3, [pc, #420]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80028a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028a8:	4b68      	ldr	r3, [pc, #416]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80028aa:	2104      	movs	r1, #4
 80028ac:	438a      	bics	r2, r1
 80028ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028b0:	4b66      	ldr	r3, [pc, #408]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80028b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b4:	22f8      	movs	r2, #248	@ 0xf8
 80028b6:	4393      	bics	r3, r2
 80028b8:	0019      	movs	r1, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	00da      	lsls	r2, r3, #3
 80028c0:	4b62      	ldr	r3, [pc, #392]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80028c2:	430a      	orrs	r2, r1
 80028c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80028c6:	e01e      	b.n	8002906 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028c8:	4b60      	ldr	r3, [pc, #384]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80028ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028cc:	4b5f      	ldr	r3, [pc, #380]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80028ce:	2104      	movs	r1, #4
 80028d0:	430a      	orrs	r2, r1
 80028d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80028d4:	4b5d      	ldr	r3, [pc, #372]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80028d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028d8:	4b5c      	ldr	r3, [pc, #368]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80028da:	2101      	movs	r1, #1
 80028dc:	438a      	bics	r2, r1
 80028de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e0:	f7ff f93c 	bl	8001b5c <HAL_GetTick>
 80028e4:	0003      	movs	r3, r0
 80028e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028ea:	f7ff f937 	bl	8001b5c <HAL_GetTick>
 80028ee:	0002      	movs	r2, r0
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e0a2      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028fc:	4b53      	ldr	r3, [pc, #332]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80028fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002900:	2202      	movs	r2, #2
 8002902:	4013      	ands	r3, r2
 8002904:	d1f1      	bne.n	80028ea <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d100      	bne.n	8002910 <HAL_RCC_OscConfig+0x4e4>
 800290e:	e097      	b.n	8002a40 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002910:	4b4e      	ldr	r3, [pc, #312]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	220c      	movs	r2, #12
 8002916:	4013      	ands	r3, r2
 8002918:	2b08      	cmp	r3, #8
 800291a:	d100      	bne.n	800291e <HAL_RCC_OscConfig+0x4f2>
 800291c:	e06b      	b.n	80029f6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d14c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002926:	4b49      	ldr	r3, [pc, #292]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b48      	ldr	r3, [pc, #288]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 800292c:	494a      	ldr	r1, [pc, #296]	@ (8002a58 <HAL_RCC_OscConfig+0x62c>)
 800292e:	400a      	ands	r2, r1
 8002930:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7ff f913 	bl	8001b5c <HAL_GetTick>
 8002936:	0003      	movs	r3, r0
 8002938:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293c:	f7ff f90e 	bl	8001b5c <HAL_GetTick>
 8002940:	0002      	movs	r2, r0
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e079      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2380      	movs	r3, #128	@ 0x80
 8002954:	049b      	lsls	r3, r3, #18
 8002956:	4013      	ands	r3, r2
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 800295c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295e:	220f      	movs	r2, #15
 8002960:	4393      	bics	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002968:	4b38      	ldr	r3, [pc, #224]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 800296a:	430a      	orrs	r2, r1
 800296c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800296e:	4b37      	ldr	r3, [pc, #220]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a3a      	ldr	r2, [pc, #232]	@ (8002a5c <HAL_RCC_OscConfig+0x630>)
 8002974:	4013      	ands	r3, r2
 8002976:	0019      	movs	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	431a      	orrs	r2, r3
 8002982:	4b32      	ldr	r3, [pc, #200]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002984:	430a      	orrs	r2, r1
 8002986:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002988:	4b30      	ldr	r3, [pc, #192]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 800298e:	2180      	movs	r1, #128	@ 0x80
 8002990:	0449      	lsls	r1, r1, #17
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7ff f8e1 	bl	8001b5c <HAL_GetTick>
 800299a:	0003      	movs	r3, r0
 800299c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7ff f8dc 	bl	8001b5c <HAL_GetTick>
 80029a4:	0002      	movs	r2, r0
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e047      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b2:	4b26      	ldr	r3, [pc, #152]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	2380      	movs	r3, #128	@ 0x80
 80029b8:	049b      	lsls	r3, r3, #18
 80029ba:	4013      	ands	r3, r2
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x574>
 80029be:	e03f      	b.n	8002a40 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c0:	4b22      	ldr	r3, [pc, #136]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b21      	ldr	r3, [pc, #132]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80029c6:	4924      	ldr	r1, [pc, #144]	@ (8002a58 <HAL_RCC_OscConfig+0x62c>)
 80029c8:	400a      	ands	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7ff f8c6 	bl	8001b5c <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d6:	f7ff f8c1 	bl	8001b5c <HAL_GetTick>
 80029da:	0002      	movs	r2, r0
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e02c      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e8:	4b18      	ldr	r3, [pc, #96]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	2380      	movs	r3, #128	@ 0x80
 80029ee:	049b      	lsls	r3, r3, #18
 80029f0:	4013      	ands	r3, r2
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x5aa>
 80029f4:	e024      	b.n	8002a40 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e01f      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a02:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a08:	4b10      	ldr	r3, [pc, #64]	@ (8002a4c <HAL_RCC_OscConfig+0x620>)
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	025b      	lsls	r3, r3, #9
 8002a14:	401a      	ands	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d10e      	bne.n	8002a3c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	220f      	movs	r2, #15
 8002a22:	401a      	ands	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d107      	bne.n	8002a3c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	23f0      	movs	r3, #240	@ 0xf0
 8002a30:	039b      	lsls	r3, r3, #14
 8002a32:	401a      	ands	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	0018      	movs	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b008      	add	sp, #32
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			@ (mov r8, r8)
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	00001388 	.word	0x00001388
 8002a54:	efffffff 	.word	0xefffffff
 8002a58:	feffffff 	.word	0xfeffffff
 8002a5c:	ffc2ffff 	.word	0xffc2ffff

08002a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0b3      	b.n	8002bdc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b5b      	ldr	r3, [pc, #364]	@ (8002be4 <HAL_RCC_ClockConfig+0x184>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d911      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b58      	ldr	r3, [pc, #352]	@ (8002be4 <HAL_RCC_ClockConfig+0x184>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2201      	movs	r2, #1
 8002a88:	4393      	bics	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	4b55      	ldr	r3, [pc, #340]	@ (8002be4 <HAL_RCC_ClockConfig+0x184>)
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a94:	4b53      	ldr	r3, [pc, #332]	@ (8002be4 <HAL_RCC_ClockConfig+0x184>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e09a      	b.n	8002bdc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	4013      	ands	r3, r2
 8002aae:	d015      	beq.n	8002adc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d006      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002aba:	4b4b      	ldr	r3, [pc, #300]	@ (8002be8 <HAL_RCC_ClockConfig+0x188>)
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4b4a      	ldr	r3, [pc, #296]	@ (8002be8 <HAL_RCC_ClockConfig+0x188>)
 8002ac0:	21e0      	movs	r1, #224	@ 0xe0
 8002ac2:	00c9      	lsls	r1, r1, #3
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b47      	ldr	r3, [pc, #284]	@ (8002be8 <HAL_RCC_ClockConfig+0x188>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	22f0      	movs	r2, #240	@ 0xf0
 8002ace:	4393      	bics	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	4b44      	ldr	r3, [pc, #272]	@ (8002be8 <HAL_RCC_ClockConfig+0x188>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d040      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b3e      	ldr	r3, [pc, #248]	@ (8002be8 <HAL_RCC_ClockConfig+0x188>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	4013      	ands	r3, r2
 8002af8:	d114      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e06e      	b.n	8002bdc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	4b38      	ldr	r3, [pc, #224]	@ (8002be8 <HAL_RCC_ClockConfig+0x188>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	2380      	movs	r3, #128	@ 0x80
 8002b0c:	049b      	lsls	r3, r3, #18
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d108      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e062      	b.n	8002bdc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b34      	ldr	r3, [pc, #208]	@ (8002be8 <HAL_RCC_ClockConfig+0x188>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e05b      	b.n	8002bdc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b24:	4b30      	ldr	r3, [pc, #192]	@ (8002be8 <HAL_RCC_ClockConfig+0x188>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2203      	movs	r2, #3
 8002b2a:	4393      	bics	r3, r2
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	4b2d      	ldr	r3, [pc, #180]	@ (8002be8 <HAL_RCC_ClockConfig+0x188>)
 8002b34:	430a      	orrs	r2, r1
 8002b36:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7ff f810 	bl	8001b5c <HAL_GetTick>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b40:	e009      	b.n	8002b56 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b42:	f7ff f80b 	bl	8001b5c <HAL_GetTick>
 8002b46:	0002      	movs	r2, r0
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	4a27      	ldr	r2, [pc, #156]	@ (8002bec <HAL_RCC_ClockConfig+0x18c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e042      	b.n	8002bdc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <HAL_RCC_ClockConfig+0x188>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1ec      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b1e      	ldr	r3, [pc, #120]	@ (8002be4 <HAL_RCC_ClockConfig+0x184>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d211      	bcs.n	8002b9a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b1b      	ldr	r3, [pc, #108]	@ (8002be4 <HAL_RCC_ClockConfig+0x184>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4393      	bics	r3, r2
 8002b7e:	0019      	movs	r1, r3
 8002b80:	4b18      	ldr	r3, [pc, #96]	@ (8002be4 <HAL_RCC_ClockConfig+0x184>)
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b88:	4b16      	ldr	r3, [pc, #88]	@ (8002be4 <HAL_RCC_ClockConfig+0x184>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	4013      	ands	r3, r2
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e020      	b.n	8002bdc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_RCC_ClockConfig+0x188>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a11      	ldr	r2, [pc, #68]	@ (8002bf0 <HAL_RCC_ClockConfig+0x190>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <HAL_RCC_ClockConfig+0x188>)
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bb8:	f000 f820 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002bbc:	0001      	movs	r1, r0
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <HAL_RCC_ClockConfig+0x188>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf4 <HAL_RCC_ClockConfig+0x194>)
 8002bca:	5cd3      	ldrb	r3, [r2, r3]
 8002bcc:	000a      	movs	r2, r1
 8002bce:	40da      	lsrs	r2, r3
 8002bd0:	4b09      	ldr	r3, [pc, #36]	@ (8002bf8 <HAL_RCC_ClockConfig+0x198>)
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bd4:	2003      	movs	r0, #3
 8002bd6:	f7fe ff7b 	bl	8001ad0 <HAL_InitTick>
  
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40022000 	.word	0x40022000
 8002be8:	40021000 	.word	0x40021000
 8002bec:	00001388 	.word	0x00001388
 8002bf0:	fffff8ff 	.word	0xfffff8ff
 8002bf4:	08005cac 	.word	0x08005cac
 8002bf8:	20000000 	.word	0x20000000

08002bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c16:	4b20      	ldr	r3, [pc, #128]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	220c      	movs	r2, #12
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x30>
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x36>
 8002c2a:	e02c      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c2e:	613b      	str	r3, [r7, #16]
      break;
 8002c30:	e02c      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	0c9b      	lsrs	r3, r3, #18
 8002c36:	220f      	movs	r2, #15
 8002c38:	4013      	ands	r3, r2
 8002c3a:	4a19      	ldr	r2, [pc, #100]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c3c:	5cd3      	ldrb	r3, [r2, r3]
 8002c3e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c40:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	220f      	movs	r2, #15
 8002c46:	4013      	ands	r3, r2
 8002c48:	4a16      	ldr	r2, [pc, #88]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002c4a:	5cd3      	ldrb	r3, [r2, r3]
 8002c4c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	025b      	lsls	r3, r3, #9
 8002c54:	4013      	ands	r3, r2
 8002c56:	d009      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	4810      	ldr	r0, [pc, #64]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c5c:	f7fd fa5e 	bl	800011c <__udivsi3>
 8002c60:	0003      	movs	r3, r0
 8002c62:	001a      	movs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4353      	muls	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e009      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	000a      	movs	r2, r1
 8002c70:	0152      	lsls	r2, r2, #5
 8002c72:	1a52      	subs	r2, r2, r1
 8002c74:	0193      	lsls	r3, r2, #6
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	185b      	adds	r3, r3, r1
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	613b      	str	r3, [r7, #16]
      break;
 8002c84:	e002      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c86:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c88:	613b      	str	r3, [r7, #16]
      break;
 8002c8a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c8c:	693b      	ldr	r3, [r7, #16]
}
 8002c8e:	0018      	movs	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b006      	add	sp, #24
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	007a1200 	.word	0x007a1200
 8002ca0:	08005cc4 	.word	0x08005cc4
 8002ca4:	08005cd4 	.word	0x08005cd4

08002ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cac:	4b02      	ldr	r3, [pc, #8]	@ (8002cb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	20000000 	.word	0x20000000

08002cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002cc0:	f7ff fff2 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cc4:	0001      	movs	r1, r0
 8002cc6:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	2207      	movs	r2, #7
 8002cce:	4013      	ands	r3, r2
 8002cd0:	4a04      	ldr	r2, [pc, #16]	@ (8002ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cd2:	5cd3      	ldrb	r3, [r2, r3]
 8002cd4:	40d9      	lsrs	r1, r3
 8002cd6:	000b      	movs	r3, r1
}    
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	46c0      	nop			@ (mov r8, r8)
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	08005cbc 	.word	0x08005cbc

08002ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	2380      	movs	r3, #128	@ 0x80
 8002cfe:	025b      	lsls	r3, r3, #9
 8002d00:	4013      	ands	r3, r2
 8002d02:	d100      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d04:	e08e      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d06:	2017      	movs	r0, #23
 8002d08:	183b      	adds	r3, r7, r0
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0e:	4b57      	ldr	r3, [pc, #348]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	2380      	movs	r3, #128	@ 0x80
 8002d14:	055b      	lsls	r3, r3, #21
 8002d16:	4013      	ands	r3, r2
 8002d18:	d110      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	4b54      	ldr	r3, [pc, #336]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	4b53      	ldr	r3, [pc, #332]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d20:	2180      	movs	r1, #128	@ 0x80
 8002d22:	0549      	lsls	r1, r1, #21
 8002d24:	430a      	orrs	r2, r1
 8002d26:	61da      	str	r2, [r3, #28]
 8002d28:	4b50      	ldr	r3, [pc, #320]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d2a:	69da      	ldr	r2, [r3, #28]
 8002d2c:	2380      	movs	r3, #128	@ 0x80
 8002d2e:	055b      	lsls	r3, r3, #21
 8002d30:	4013      	ands	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d36:	183b      	adds	r3, r7, r0
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	2380      	movs	r3, #128	@ 0x80
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4013      	ands	r3, r2
 8002d46:	d11a      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d48:	4b49      	ldr	r3, [pc, #292]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b48      	ldr	r3, [pc, #288]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d4e:	2180      	movs	r1, #128	@ 0x80
 8002d50:	0049      	lsls	r1, r1, #1
 8002d52:	430a      	orrs	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d56:	f7fe ff01 	bl	8001b5c <HAL_GetTick>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5e:	e008      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d60:	f7fe fefc 	bl	8001b5c <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	@ 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e077      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d72:	4b3f      	ldr	r3, [pc, #252]	@ (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d80:	6a1a      	ldr	r2, [r3, #32]
 8002d82:	23c0      	movs	r3, #192	@ 0xc0
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4013      	ands	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d034      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	23c0      	movs	r3, #192	@ 0xc0
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d02c      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002da0:	4b32      	ldr	r3, [pc, #200]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4a33      	ldr	r2, [pc, #204]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002daa:	4b30      	ldr	r3, [pc, #192]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	4b2f      	ldr	r3, [pc, #188]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002db0:	2180      	movs	r1, #128	@ 0x80
 8002db2:	0249      	lsls	r1, r1, #9
 8002db4:	430a      	orrs	r2, r1
 8002db6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002db8:	4b2c      	ldr	r3, [pc, #176]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dba:	6a1a      	ldr	r2, [r3, #32]
 8002dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dbe:	492e      	ldr	r1, [pc, #184]	@ (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dc4:	4b29      	ldr	r3, [pc, #164]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fec3 	bl	8001b5c <HAL_GetTick>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dda:	e009      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe febe 	bl	8001b5c <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	4a25      	ldr	r2, [pc, #148]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e038      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	2202      	movs	r2, #2
 8002df6:	4013      	ands	r3, r2
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	4b18      	ldr	r3, [pc, #96]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e0e:	2317      	movs	r3, #23
 8002e10:	18fb      	adds	r3, r7, r3
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d105      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e18:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	4b13      	ldr	r3, [pc, #76]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e1e:	4918      	ldr	r1, [pc, #96]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002e20:	400a      	ands	r2, r1
 8002e22:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	2203      	movs	r2, #3
 8002e34:	4393      	bics	r3, r2
 8002e36:	0019      	movs	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2220      	movs	r2, #32
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d009      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e4c:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e50:	2210      	movs	r2, #16
 8002e52:	4393      	bics	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	0018      	movs	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b006      	add	sp, #24
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			@ (mov r8, r8)
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40007000 	.word	0x40007000
 8002e74:	fffffcff 	.word	0xfffffcff
 8002e78:	fffeffff 	.word	0xfffeffff
 8002e7c:	00001388 	.word	0x00001388
 8002e80:	efffffff 	.word	0xefffffff

08002e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e042      	b.n	8002f1c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	223d      	movs	r2, #61	@ 0x3d
 8002e9a:	5c9b      	ldrb	r3, [r3, r2]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d107      	bne.n	8002eb2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	223c      	movs	r2, #60	@ 0x3c
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	0018      	movs	r0, r3
 8002eae:	f7fe fc21 	bl	80016f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	223d      	movs	r2, #61	@ 0x3d
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	0010      	movs	r0, r2
 8002ec6:	f000 fcff 	bl	80038c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2246      	movs	r2, #70	@ 0x46
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	223e      	movs	r2, #62	@ 0x3e
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	5499      	strb	r1, [r3, r2]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	223f      	movs	r2, #63	@ 0x3f
 8002ede:	2101      	movs	r1, #1
 8002ee0:	5499      	strb	r1, [r3, r2]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2240      	movs	r2, #64	@ 0x40
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	5499      	strb	r1, [r3, r2]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2241      	movs	r2, #65	@ 0x41
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2242      	movs	r2, #66	@ 0x42
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	5499      	strb	r1, [r3, r2]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2243      	movs	r2, #67	@ 0x43
 8002efe:	2101      	movs	r1, #1
 8002f00:	5499      	strb	r1, [r3, r2]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2244      	movs	r2, #68	@ 0x44
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2245      	movs	r2, #69	@ 0x45
 8002f0e:	2101      	movs	r1, #1
 8002f10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	223d      	movs	r2, #61	@ 0x3d
 8002f16:	2101      	movs	r1, #1
 8002f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	223d      	movs	r2, #61	@ 0x3d
 8002f30:	5c9b      	ldrb	r3, [r3, r2]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d001      	beq.n	8002f3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e02d      	b.n	8002f98 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	223d      	movs	r2, #61	@ 0x3d
 8002f40:	2102      	movs	r1, #2
 8002f42:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a15      	ldr	r2, [pc, #84]	@ (8002fa0 <HAL_TIM_Base_Start+0x7c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d009      	beq.n	8002f62 <HAL_TIM_Base_Start+0x3e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a14      	ldr	r2, [pc, #80]	@ (8002fa4 <HAL_TIM_Base_Start+0x80>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d004      	beq.n	8002f62 <HAL_TIM_Base_Start+0x3e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a12      	ldr	r2, [pc, #72]	@ (8002fa8 <HAL_TIM_Base_Start+0x84>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d111      	bne.n	8002f86 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2207      	movs	r2, #7
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b06      	cmp	r3, #6
 8002f72:	d010      	beq.n	8002f96 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2101      	movs	r1, #1
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	e007      	b.n	8002f96 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b004      	add	sp, #16
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40014000 	.word	0x40014000

08002fac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e042      	b.n	8003044 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	223d      	movs	r2, #61	@ 0x3d
 8002fc2:	5c9b      	ldrb	r3, [r3, r2]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d107      	bne.n	8002fda <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	223c      	movs	r2, #60	@ 0x3c
 8002fce:	2100      	movs	r1, #0
 8002fd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f000 f839 	bl	800304c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	223d      	movs	r2, #61	@ 0x3d
 8002fde:	2102      	movs	r1, #2
 8002fe0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	0019      	movs	r1, r3
 8002fec:	0010      	movs	r0, r2
 8002fee:	f000 fc6b 	bl	80038c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2246      	movs	r2, #70	@ 0x46
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	223e      	movs	r2, #62	@ 0x3e
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	223f      	movs	r2, #63	@ 0x3f
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2240      	movs	r2, #64	@ 0x40
 800300e:	2101      	movs	r1, #1
 8003010:	5499      	strb	r1, [r3, r2]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2241      	movs	r2, #65	@ 0x41
 8003016:	2101      	movs	r1, #1
 8003018:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2242      	movs	r2, #66	@ 0x42
 800301e:	2101      	movs	r1, #1
 8003020:	5499      	strb	r1, [r3, r2]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2243      	movs	r2, #67	@ 0x43
 8003026:	2101      	movs	r1, #1
 8003028:	5499      	strb	r1, [r3, r2]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2244      	movs	r2, #68	@ 0x44
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2245      	movs	r2, #69	@ 0x45
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	223d      	movs	r2, #61	@ 0x3d
 800303e:	2101      	movs	r1, #1
 8003040:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	001a      	movs	r2, r3
 800306a:	1cbb      	adds	r3, r7, #2
 800306c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306e:	2317      	movs	r3, #23
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d108      	bne.n	800308e <HAL_TIM_PWM_Start_DMA+0x32>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	223e      	movs	r2, #62	@ 0x3e
 8003080:	5c9b      	ldrb	r3, [r3, r2]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3b02      	subs	r3, #2
 8003086:	425a      	negs	r2, r3
 8003088:	4153      	adcs	r3, r2
 800308a:	b2db      	uxtb	r3, r3
 800308c:	e01f      	b.n	80030ce <HAL_TIM_PWM_Start_DMA+0x72>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b04      	cmp	r3, #4
 8003092:	d108      	bne.n	80030a6 <HAL_TIM_PWM_Start_DMA+0x4a>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	223f      	movs	r2, #63	@ 0x3f
 8003098:	5c9b      	ldrb	r3, [r3, r2]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3b02      	subs	r3, #2
 800309e:	425a      	negs	r2, r3
 80030a0:	4153      	adcs	r3, r2
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	e013      	b.n	80030ce <HAL_TIM_PWM_Start_DMA+0x72>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d108      	bne.n	80030be <HAL_TIM_PWM_Start_DMA+0x62>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2240      	movs	r2, #64	@ 0x40
 80030b0:	5c9b      	ldrb	r3, [r3, r2]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3b02      	subs	r3, #2
 80030b6:	425a      	negs	r2, r3
 80030b8:	4153      	adcs	r3, r2
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	e007      	b.n	80030ce <HAL_TIM_PWM_Start_DMA+0x72>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2241      	movs	r2, #65	@ 0x41
 80030c2:	5c9b      	ldrb	r3, [r3, r2]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	3b02      	subs	r3, #2
 80030c8:	425a      	negs	r2, r3
 80030ca:	4153      	adcs	r3, r2
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
 80030d4:	e15e      	b.n	8003394 <HAL_TIM_PWM_Start_DMA+0x338>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d108      	bne.n	80030ee <HAL_TIM_PWM_Start_DMA+0x92>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	223e      	movs	r2, #62	@ 0x3e
 80030e0:	5c9b      	ldrb	r3, [r3, r2]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	425a      	negs	r2, r3
 80030e8:	4153      	adcs	r3, r2
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	e01f      	b.n	800312e <HAL_TIM_PWM_Start_DMA+0xd2>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d108      	bne.n	8003106 <HAL_TIM_PWM_Start_DMA+0xaa>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	223f      	movs	r2, #63	@ 0x3f
 80030f8:	5c9b      	ldrb	r3, [r3, r2]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	425a      	negs	r2, r3
 8003100:	4153      	adcs	r3, r2
 8003102:	b2db      	uxtb	r3, r3
 8003104:	e013      	b.n	800312e <HAL_TIM_PWM_Start_DMA+0xd2>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b08      	cmp	r3, #8
 800310a:	d108      	bne.n	800311e <HAL_TIM_PWM_Start_DMA+0xc2>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2240      	movs	r2, #64	@ 0x40
 8003110:	5c9b      	ldrb	r3, [r3, r2]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	425a      	negs	r2, r3
 8003118:	4153      	adcs	r3, r2
 800311a:	b2db      	uxtb	r3, r3
 800311c:	e007      	b.n	800312e <HAL_TIM_PWM_Start_DMA+0xd2>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2241      	movs	r2, #65	@ 0x41
 8003122:	5c9b      	ldrb	r3, [r3, r2]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	425a      	negs	r2, r3
 800312a:	4153      	adcs	r3, r2
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d025      	beq.n	800317e <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_TIM_PWM_Start_DMA+0xe4>
 8003138:	1cbb      	adds	r3, r7, #2
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e127      	b.n	8003394 <HAL_TIM_PWM_Start_DMA+0x338>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d104      	bne.n	8003154 <HAL_TIM_PWM_Start_DMA+0xf8>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	223e      	movs	r2, #62	@ 0x3e
 800314e:	2102      	movs	r1, #2
 8003150:	5499      	strb	r1, [r3, r2]
 8003152:	e016      	b.n	8003182 <HAL_TIM_PWM_Start_DMA+0x126>
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b04      	cmp	r3, #4
 8003158:	d104      	bne.n	8003164 <HAL_TIM_PWM_Start_DMA+0x108>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	223f      	movs	r2, #63	@ 0x3f
 800315e:	2102      	movs	r1, #2
 8003160:	5499      	strb	r1, [r3, r2]
 8003162:	e00e      	b.n	8003182 <HAL_TIM_PWM_Start_DMA+0x126>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b08      	cmp	r3, #8
 8003168:	d104      	bne.n	8003174 <HAL_TIM_PWM_Start_DMA+0x118>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2240      	movs	r2, #64	@ 0x40
 800316e:	2102      	movs	r1, #2
 8003170:	5499      	strb	r1, [r3, r2]
 8003172:	e006      	b.n	8003182 <HAL_TIM_PWM_Start_DMA+0x126>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2241      	movs	r2, #65	@ 0x41
 8003178:	2102      	movs	r1, #2
 800317a:	5499      	strb	r1, [r3, r2]
 800317c:	e001      	b.n	8003182 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e108      	b.n	8003394 <HAL_TIM_PWM_Start_DMA+0x338>
  }

  switch (Channel)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b0c      	cmp	r3, #12
 8003186:	d100      	bne.n	800318a <HAL_TIM_PWM_Start_DMA+0x12e>
 8003188:	e080      	b.n	800328c <HAL_TIM_PWM_Start_DMA+0x230>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b0c      	cmp	r3, #12
 800318e:	d900      	bls.n	8003192 <HAL_TIM_PWM_Start_DMA+0x136>
 8003190:	e0a1      	b.n	80032d6 <HAL_TIM_PWM_Start_DMA+0x27a>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d054      	beq.n	8003242 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b08      	cmp	r3, #8
 800319c:	d900      	bls.n	80031a0 <HAL_TIM_PWM_Start_DMA+0x144>
 800319e:	e09a      	b.n	80032d6 <HAL_TIM_PWM_Start_DMA+0x27a>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_PWM_Start_DMA+0x152>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d025      	beq.n	80031f8 <HAL_TIM_PWM_Start_DMA+0x19c>
 80031ac:	e093      	b.n	80032d6 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	4a7a      	ldr	r2, [pc, #488]	@ (800339c <HAL_TIM_PWM_Start_DMA+0x340>)
 80031b4:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	4a79      	ldr	r2, [pc, #484]	@ (80033a0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80031bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	4a78      	ldr	r2, [pc, #480]	@ (80033a4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80031c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3334      	adds	r3, #52	@ 0x34
 80031d2:	001a      	movs	r2, r3
 80031d4:	1cbb      	adds	r3, r7, #2
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	f7fe fe14 	bl	8001e04 <HAL_DMA_Start_IT>
 80031dc:	1e03      	subs	r3, r0, #0
 80031de:	d001      	beq.n	80031e4 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0d7      	b.n	8003394 <HAL_TIM_PWM_Start_DMA+0x338>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2180      	movs	r1, #128	@ 0x80
 80031f0:	0089      	lsls	r1, r1, #2
 80031f2:	430a      	orrs	r2, r1
 80031f4:	60da      	str	r2, [r3, #12]
      break;
 80031f6:	e073      	b.n	80032e0 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fc:	4a67      	ldr	r2, [pc, #412]	@ (800339c <HAL_TIM_PWM_Start_DMA+0x340>)
 80031fe:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003204:	4a66      	ldr	r2, [pc, #408]	@ (80033a0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003206:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	4a65      	ldr	r2, [pc, #404]	@ (80033a4 <HAL_TIM_PWM_Start_DMA+0x348>)
 800320e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3338      	adds	r3, #56	@ 0x38
 800321c:	001a      	movs	r2, r3
 800321e:	1cbb      	adds	r3, r7, #2
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	f7fe fdef 	bl	8001e04 <HAL_DMA_Start_IT>
 8003226:	1e03      	subs	r3, r0, #0
 8003228:	d001      	beq.n	800322e <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0b2      	b.n	8003394 <HAL_TIM_PWM_Start_DMA+0x338>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2180      	movs	r1, #128	@ 0x80
 800323a:	00c9      	lsls	r1, r1, #3
 800323c:	430a      	orrs	r2, r1
 800323e:	60da      	str	r2, [r3, #12]
      break;
 8003240:	e04e      	b.n	80032e0 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003246:	4a55      	ldr	r2, [pc, #340]	@ (800339c <HAL_TIM_PWM_Start_DMA+0x340>)
 8003248:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324e:	4a54      	ldr	r2, [pc, #336]	@ (80033a0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003250:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003256:	4a53      	ldr	r2, [pc, #332]	@ (80033a4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003258:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	333c      	adds	r3, #60	@ 0x3c
 8003266:	001a      	movs	r2, r3
 8003268:	1cbb      	adds	r3, r7, #2
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	f7fe fdca 	bl	8001e04 <HAL_DMA_Start_IT>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d001      	beq.n	8003278 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e08d      	b.n	8003394 <HAL_TIM_PWM_Start_DMA+0x338>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2180      	movs	r1, #128	@ 0x80
 8003284:	0109      	lsls	r1, r1, #4
 8003286:	430a      	orrs	r2, r1
 8003288:	60da      	str	r2, [r3, #12]
      break;
 800328a:	e029      	b.n	80032e0 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003290:	4a42      	ldr	r2, [pc, #264]	@ (800339c <HAL_TIM_PWM_Start_DMA+0x340>)
 8003292:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003298:	4a41      	ldr	r2, [pc, #260]	@ (80033a0 <HAL_TIM_PWM_Start_DMA+0x344>)
 800329a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	4a40      	ldr	r2, [pc, #256]	@ (80033a4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80032a2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3340      	adds	r3, #64	@ 0x40
 80032b0:	001a      	movs	r2, r3
 80032b2:	1cbb      	adds	r3, r7, #2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	f7fe fda5 	bl	8001e04 <HAL_DMA_Start_IT>
 80032ba:	1e03      	subs	r3, r0, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e068      	b.n	8003394 <HAL_TIM_PWM_Start_DMA+0x338>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2180      	movs	r1, #128	@ 0x80
 80032ce:	0149      	lsls	r1, r1, #5
 80032d0:	430a      	orrs	r2, r1
 80032d2:	60da      	str	r2, [r3, #12]
      break;
 80032d4:	e004      	b.n	80032e0 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 80032d6:	2317      	movs	r3, #23
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
      break;
 80032de:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80032e0:	2317      	movs	r3, #23
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d151      	bne.n	800338e <HAL_TIM_PWM_Start_DMA+0x332>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	2201      	movs	r2, #1
 80032f2:	0018      	movs	r0, r3
 80032f4:	f000 fe02 	bl	8003efc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2a      	ldr	r2, [pc, #168]	@ (80033a8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a29      	ldr	r2, [pc, #164]	@ (80033ac <HAL_TIM_PWM_Start_DMA+0x350>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a27      	ldr	r2, [pc, #156]	@ (80033b0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a26      	ldr	r2, [pc, #152]	@ (80033b4 <HAL_TIM_PWM_Start_DMA+0x358>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d101      	bne.n	8003324 <HAL_TIM_PWM_Start_DMA+0x2c8>
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <HAL_TIM_PWM_Start_DMA+0x2ca>
 8003324:	2300      	movs	r3, #0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2180      	movs	r1, #128	@ 0x80
 8003336:	0209      	lsls	r1, r1, #8
 8003338:	430a      	orrs	r2, r1
 800333a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a19      	ldr	r2, [pc, #100]	@ (80033a8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_TIM_PWM_Start_DMA+0x2fe>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1b      	ldr	r2, [pc, #108]	@ (80033b8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_TIM_PWM_Start_DMA+0x2fe>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a15      	ldr	r2, [pc, #84]	@ (80033ac <HAL_TIM_PWM_Start_DMA+0x350>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d111      	bne.n	800337e <HAL_TIM_PWM_Start_DMA+0x322>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2207      	movs	r2, #7
 8003362:	4013      	ands	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b06      	cmp	r3, #6
 800336a:	d010      	beq.n	800338e <HAL_TIM_PWM_Start_DMA+0x332>
      {
        __HAL_TIM_ENABLE(htim);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2101      	movs	r1, #1
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	e007      	b.n	800338e <HAL_TIM_PWM_Start_DMA+0x332>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2101      	movs	r1, #1
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800338e:	2317      	movs	r3, #23
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	781b      	ldrb	r3, [r3, #0]
}
 8003394:	0018      	movs	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	b006      	add	sp, #24
 800339a:	bd80      	pop	{r7, pc}
 800339c:	080037b5 	.word	0x080037b5
 80033a0:	0800385f 	.word	0x0800385f
 80033a4:	08003721 	.word	0x08003721
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800
 80033b8:	40000400 	.word	0x40000400

080033bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c8:	2317      	movs	r3, #23
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	223c      	movs	r2, #60	@ 0x3c
 80033d4:	5c9b      	ldrb	r3, [r3, r2]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_TIM_PWM_ConfigChannel+0x22>
 80033da:	2302      	movs	r3, #2
 80033dc:	e0ad      	b.n	800353a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	223c      	movs	r2, #60	@ 0x3c
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d100      	bne.n	80033ee <HAL_TIM_PWM_ConfigChannel+0x32>
 80033ec:	e076      	b.n	80034dc <HAL_TIM_PWM_ConfigChannel+0x120>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b0c      	cmp	r3, #12
 80033f2:	d900      	bls.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80033f4:	e095      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x166>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d04e      	beq.n	800349a <HAL_TIM_PWM_ConfigChannel+0xde>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d900      	bls.n	8003404 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003402:	e08e      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_PWM_ConfigChannel+0x56>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d021      	beq.n	8003454 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003410:	e087      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	0011      	movs	r1, r2
 800341a:	0018      	movs	r0, r3
 800341c:	f000 fad8 	bl	80039d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2108      	movs	r1, #8
 800342c:	430a      	orrs	r2, r1
 800342e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2104      	movs	r1, #4
 800343c:	438a      	bics	r2, r1
 800343e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6999      	ldr	r1, [r3, #24]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	619a      	str	r2, [r3, #24]
      break;
 8003452:	e06b      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	0011      	movs	r1, r2
 800345c:	0018      	movs	r0, r3
 800345e:	f000 fb3f 	bl	8003ae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699a      	ldr	r2, [r3, #24]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2180      	movs	r1, #128	@ 0x80
 800346e:	0109      	lsls	r1, r1, #4
 8003470:	430a      	orrs	r2, r1
 8003472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4931      	ldr	r1, [pc, #196]	@ (8003544 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003480:	400a      	ands	r2, r1
 8003482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6999      	ldr	r1, [r3, #24]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	021a      	lsls	r2, r3, #8
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	619a      	str	r2, [r3, #24]
      break;
 8003498:	e048      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	0011      	movs	r1, r2
 80034a2:	0018      	movs	r0, r3
 80034a4:	f000 fba0 	bl	8003be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2108      	movs	r1, #8
 80034b4:	430a      	orrs	r2, r1
 80034b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2104      	movs	r1, #4
 80034c4:	438a      	bics	r2, r1
 80034c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69d9      	ldr	r1, [r3, #28]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	61da      	str	r2, [r3, #28]
      break;
 80034da:	e027      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	0011      	movs	r1, r2
 80034e4:	0018      	movs	r0, r3
 80034e6:	f000 fc05 	bl	8003cf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2180      	movs	r1, #128	@ 0x80
 80034f6:	0109      	lsls	r1, r1, #4
 80034f8:	430a      	orrs	r2, r1
 80034fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	490f      	ldr	r1, [pc, #60]	@ (8003544 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003508:	400a      	ands	r2, r1
 800350a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69d9      	ldr	r1, [r3, #28]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	021a      	lsls	r2, r3, #8
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	61da      	str	r2, [r3, #28]
      break;
 8003520:	e004      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003522:	2317      	movs	r3, #23
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	2201      	movs	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
      break;
 800352a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	223c      	movs	r2, #60	@ 0x3c
 8003530:	2100      	movs	r1, #0
 8003532:	5499      	strb	r1, [r3, r2]

  return status;
 8003534:	2317      	movs	r3, #23
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	781b      	ldrb	r3, [r3, #0]
}
 800353a:	0018      	movs	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	b006      	add	sp, #24
 8003540:	bd80      	pop	{r7, pc}
 8003542:	46c0      	nop			@ (mov r8, r8)
 8003544:	fffffbff 	.word	0xfffffbff

08003548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003552:	230f      	movs	r3, #15
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	223c      	movs	r2, #60	@ 0x3c
 800355e:	5c9b      	ldrb	r3, [r3, r2]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_TIM_ConfigClockSource+0x20>
 8003564:	2302      	movs	r3, #2
 8003566:	e0bc      	b.n	80036e2 <HAL_TIM_ConfigClockSource+0x19a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	223c      	movs	r2, #60	@ 0x3c
 800356c:	2101      	movs	r1, #1
 800356e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	223d      	movs	r2, #61	@ 0x3d
 8003574:	2102      	movs	r1, #2
 8003576:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2277      	movs	r2, #119	@ 0x77
 8003584:	4393      	bics	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4a58      	ldr	r2, [pc, #352]	@ (80036ec <HAL_TIM_ConfigClockSource+0x1a4>)
 800358c:	4013      	ands	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2280      	movs	r2, #128	@ 0x80
 800359e:	0192      	lsls	r2, r2, #6
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d040      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0xde>
 80035a4:	2280      	movs	r2, #128	@ 0x80
 80035a6:	0192      	lsls	r2, r2, #6
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d900      	bls.n	80035ae <HAL_TIM_ConfigClockSource+0x66>
 80035ac:	e088      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035ae:	2280      	movs	r2, #128	@ 0x80
 80035b0:	0152      	lsls	r2, r2, #5
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d100      	bne.n	80035b8 <HAL_TIM_ConfigClockSource+0x70>
 80035b6:	e088      	b.n	80036ca <HAL_TIM_ConfigClockSource+0x182>
 80035b8:	2280      	movs	r2, #128	@ 0x80
 80035ba:	0152      	lsls	r2, r2, #5
 80035bc:	4293      	cmp	r3, r2
 80035be:	d900      	bls.n	80035c2 <HAL_TIM_ConfigClockSource+0x7a>
 80035c0:	e07e      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035c2:	2b70      	cmp	r3, #112	@ 0x70
 80035c4:	d018      	beq.n	80035f8 <HAL_TIM_ConfigClockSource+0xb0>
 80035c6:	d900      	bls.n	80035ca <HAL_TIM_ConfigClockSource+0x82>
 80035c8:	e07a      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035ca:	2b60      	cmp	r3, #96	@ 0x60
 80035cc:	d04f      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x126>
 80035ce:	d900      	bls.n	80035d2 <HAL_TIM_ConfigClockSource+0x8a>
 80035d0:	e076      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035d2:	2b50      	cmp	r3, #80	@ 0x50
 80035d4:	d03b      	beq.n	800364e <HAL_TIM_ConfigClockSource+0x106>
 80035d6:	d900      	bls.n	80035da <HAL_TIM_ConfigClockSource+0x92>
 80035d8:	e072      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035da:	2b40      	cmp	r3, #64	@ 0x40
 80035dc:	d057      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x146>
 80035de:	d900      	bls.n	80035e2 <HAL_TIM_ConfigClockSource+0x9a>
 80035e0:	e06e      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035e2:	2b30      	cmp	r3, #48	@ 0x30
 80035e4:	d063      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x166>
 80035e6:	d86b      	bhi.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d060      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x166>
 80035ec:	d868      	bhi.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d05d      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x166>
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d05b      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x166>
 80035f6:	e063      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003608:	f000 fc58 	bl	8003ebc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2277      	movs	r2, #119	@ 0x77
 8003618:	4313      	orrs	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	609a      	str	r2, [r3, #8]
      break;
 8003624:	e052      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003636:	f000 fc41 	bl	8003ebc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2180      	movs	r1, #128	@ 0x80
 8003646:	01c9      	lsls	r1, r1, #7
 8003648:	430a      	orrs	r2, r1
 800364a:	609a      	str	r2, [r3, #8]
      break;
 800364c:	e03e      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800365a:	001a      	movs	r2, r3
 800365c:	f000 fbb4 	bl	8003dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2150      	movs	r1, #80	@ 0x50
 8003666:	0018      	movs	r0, r3
 8003668:	f000 fc0e 	bl	8003e88 <TIM_ITRx_SetConfig>
      break;
 800366c:	e02e      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800367a:	001a      	movs	r2, r3
 800367c:	f000 fbd2 	bl	8003e24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2160      	movs	r1, #96	@ 0x60
 8003686:	0018      	movs	r0, r3
 8003688:	f000 fbfe 	bl	8003e88 <TIM_ITRx_SetConfig>
      break;
 800368c:	e01e      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369a:	001a      	movs	r2, r3
 800369c:	f000 fb94 	bl	8003dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2140      	movs	r1, #64	@ 0x40
 80036a6:	0018      	movs	r0, r3
 80036a8:	f000 fbee 	bl	8003e88 <TIM_ITRx_SetConfig>
      break;
 80036ac:	e00e      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	0019      	movs	r1, r3
 80036b8:	0010      	movs	r0, r2
 80036ba:	f000 fbe5 	bl	8003e88 <TIM_ITRx_SetConfig>
      break;
 80036be:	e005      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80036c0:	230f      	movs	r3, #15
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
      break;
 80036c8:	e000      	b.n	80036cc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80036ca:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	223d      	movs	r2, #61	@ 0x3d
 80036d0:	2101      	movs	r1, #1
 80036d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	223c      	movs	r2, #60	@ 0x3c
 80036d8:	2100      	movs	r1, #0
 80036da:	5499      	strb	r1, [r3, r2]

  return status;
 80036dc:	230f      	movs	r3, #15
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	781b      	ldrb	r3, [r3, #0]
}
 80036e2:	0018      	movs	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b004      	add	sp, #16
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	ffff00ff 	.word	0xffff00ff

080036f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036f8:	46c0      	nop			@ (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003708:	46c0      	nop			@ (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003718:	46c0      	nop			@ (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b002      	add	sp, #8
 800371e:	bd80      	pop	{r7, pc}

08003720 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	d107      	bne.n	8003748 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	223e      	movs	r2, #62	@ 0x3e
 8003742:	2101      	movs	r1, #1
 8003744:	5499      	strb	r1, [r3, r2]
 8003746:	e02a      	b.n	800379e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	429a      	cmp	r2, r3
 8003750:	d107      	bne.n	8003762 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2202      	movs	r2, #2
 8003756:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	223f      	movs	r2, #63	@ 0x3f
 800375c:	2101      	movs	r1, #1
 800375e:	5499      	strb	r1, [r3, r2]
 8003760:	e01d      	b.n	800379e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d107      	bne.n	800377c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2204      	movs	r2, #4
 8003770:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2240      	movs	r2, #64	@ 0x40
 8003776:	2101      	movs	r1, #1
 8003778:	5499      	strb	r1, [r3, r2]
 800377a:	e010      	b.n	800379e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d107      	bne.n	8003796 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2208      	movs	r2, #8
 800378a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2241      	movs	r2, #65	@ 0x41
 8003790:	2101      	movs	r1, #1
 8003792:	5499      	strb	r1, [r3, r2]
 8003794:	e003      	b.n	800379e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	223d      	movs	r2, #61	@ 0x3d
 800379a:	2101      	movs	r1, #1
 800379c:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f7ff ffb5 	bl	8003710 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
}
 80037ac:	46c0      	nop			@ (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b004      	add	sp, #16
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d10b      	bne.n	80037e4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d136      	bne.n	8003848 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	223e      	movs	r2, #62	@ 0x3e
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]
 80037e2:	e031      	b.n	8003848 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d10b      	bne.n	8003806 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2202      	movs	r2, #2
 80037f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d125      	bne.n	8003848 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	223f      	movs	r2, #63	@ 0x3f
 8003800:	2101      	movs	r1, #1
 8003802:	5499      	strb	r1, [r3, r2]
 8003804:	e020      	b.n	8003848 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	429a      	cmp	r2, r3
 800380e:	d10b      	bne.n	8003828 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2204      	movs	r2, #4
 8003814:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d114      	bne.n	8003848 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2240      	movs	r2, #64	@ 0x40
 8003822:	2101      	movs	r1, #1
 8003824:	5499      	strb	r1, [r3, r2]
 8003826:	e00f      	b.n	8003848 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	d10a      	bne.n	8003848 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2208      	movs	r2, #8
 8003836:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2241      	movs	r2, #65	@ 0x41
 8003844:	2101      	movs	r1, #1
 8003846:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	0018      	movs	r0, r3
 800384c:	f7ff ff50 	bl	80036f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	771a      	strb	r2, [r3, #28]
}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	46bd      	mov	sp, r7
 800385a:	b004      	add	sp, #16
 800385c:	bd80      	pop	{r7, pc}

0800385e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	429a      	cmp	r2, r3
 8003874:	d103      	bne.n	800387e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	771a      	strb	r2, [r3, #28]
 800387c:	e019      	b.n	80038b2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	d103      	bne.n	8003890 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2202      	movs	r2, #2
 800388c:	771a      	strb	r2, [r3, #28]
 800388e:	e010      	b.n	80038b2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	429a      	cmp	r2, r3
 8003898:	d103      	bne.n	80038a2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2204      	movs	r2, #4
 800389e:	771a      	strb	r2, [r3, #28]
 80038a0:	e007      	b.n	80038b2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d102      	bne.n	80038b2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2208      	movs	r2, #8
 80038b0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7ff ff23 	bl	8003700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
}
 80038c0:	46c0      	nop			@ (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b004      	add	sp, #16
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a36      	ldr	r2, [pc, #216]	@ (80039b4 <TIM_Base_SetConfig+0xec>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0x20>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a35      	ldr	r2, [pc, #212]	@ (80039b8 <TIM_Base_SetConfig+0xf0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d108      	bne.n	80038fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2270      	movs	r2, #112	@ 0x70
 80038ec:	4393      	bics	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a2d      	ldr	r2, [pc, #180]	@ (80039b4 <TIM_Base_SetConfig+0xec>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <TIM_Base_SetConfig+0x62>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a2c      	ldr	r2, [pc, #176]	@ (80039b8 <TIM_Base_SetConfig+0xf0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00f      	beq.n	800392a <TIM_Base_SetConfig+0x62>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2b      	ldr	r2, [pc, #172]	@ (80039bc <TIM_Base_SetConfig+0xf4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00b      	beq.n	800392a <TIM_Base_SetConfig+0x62>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2a      	ldr	r2, [pc, #168]	@ (80039c0 <TIM_Base_SetConfig+0xf8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <TIM_Base_SetConfig+0x62>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a29      	ldr	r2, [pc, #164]	@ (80039c4 <TIM_Base_SetConfig+0xfc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_Base_SetConfig+0x62>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a28      	ldr	r2, [pc, #160]	@ (80039c8 <TIM_Base_SetConfig+0x100>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d108      	bne.n	800393c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4a27      	ldr	r2, [pc, #156]	@ (80039cc <TIM_Base_SetConfig+0x104>)
 800392e:	4013      	ands	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2280      	movs	r2, #128	@ 0x80
 8003940:	4393      	bics	r3, r2
 8003942:	001a      	movs	r2, r3
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a13      	ldr	r2, [pc, #76]	@ (80039b4 <TIM_Base_SetConfig+0xec>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00b      	beq.n	8003982 <TIM_Base_SetConfig+0xba>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a14      	ldr	r2, [pc, #80]	@ (80039c0 <TIM_Base_SetConfig+0xf8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <TIM_Base_SetConfig+0xba>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a13      	ldr	r2, [pc, #76]	@ (80039c4 <TIM_Base_SetConfig+0xfc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_Base_SetConfig+0xba>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a12      	ldr	r2, [pc, #72]	@ (80039c8 <TIM_Base_SetConfig+0x100>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d103      	bne.n	800398a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2201      	movs	r2, #1
 8003996:	4013      	ands	r3, r2
 8003998:	2b01      	cmp	r3, #1
 800399a:	d106      	bne.n	80039aa <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2201      	movs	r2, #1
 80039a2:	4393      	bics	r3, r2
 80039a4:	001a      	movs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	611a      	str	r2, [r3, #16]
  }
}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b004      	add	sp, #16
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40002000 	.word	0x40002000
 80039c0:	40014000 	.word	0x40014000
 80039c4:	40014400 	.word	0x40014400
 80039c8:	40014800 	.word	0x40014800
 80039cc:	fffffcff 	.word	0xfffffcff

080039d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	2201      	movs	r2, #1
 80039e6:	4393      	bics	r3, r2
 80039e8:	001a      	movs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2270      	movs	r2, #112	@ 0x70
 80039fe:	4393      	bics	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2203      	movs	r2, #3
 8003a06:	4393      	bics	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2202      	movs	r2, #2
 8003a18:	4393      	bics	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a27      	ldr	r2, [pc, #156]	@ (8003ac8 <TIM_OC1_SetConfig+0xf8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00b      	beq.n	8003a46 <TIM_OC1_SetConfig+0x76>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a26      	ldr	r2, [pc, #152]	@ (8003acc <TIM_OC1_SetConfig+0xfc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d007      	beq.n	8003a46 <TIM_OC1_SetConfig+0x76>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a25      	ldr	r2, [pc, #148]	@ (8003ad0 <TIM_OC1_SetConfig+0x100>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_OC1_SetConfig+0x76>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a24      	ldr	r2, [pc, #144]	@ (8003ad4 <TIM_OC1_SetConfig+0x104>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10c      	bne.n	8003a60 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2208      	movs	r2, #8
 8003a4a:	4393      	bics	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a19      	ldr	r2, [pc, #100]	@ (8003ac8 <TIM_OC1_SetConfig+0xf8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <TIM_OC1_SetConfig+0xb0>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a18      	ldr	r2, [pc, #96]	@ (8003acc <TIM_OC1_SetConfig+0xfc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <TIM_OC1_SetConfig+0xb0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a17      	ldr	r2, [pc, #92]	@ (8003ad0 <TIM_OC1_SetConfig+0x100>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_OC1_SetConfig+0xb0>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a16      	ldr	r2, [pc, #88]	@ (8003ad4 <TIM_OC1_SetConfig+0x104>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d111      	bne.n	8003aa4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4a15      	ldr	r2, [pc, #84]	@ (8003ad8 <TIM_OC1_SetConfig+0x108>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4a14      	ldr	r2, [pc, #80]	@ (8003adc <TIM_OC1_SetConfig+0x10c>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	621a      	str	r2, [r3, #32]
}
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b006      	add	sp, #24
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			@ (mov r8, r8)
 8003ac8:	40012c00 	.word	0x40012c00
 8003acc:	40014000 	.word	0x40014000
 8003ad0:	40014400 	.word	0x40014400
 8003ad4:	40014800 	.word	0x40014800
 8003ad8:	fffffeff 	.word	0xfffffeff
 8003adc:	fffffdff 	.word	0xfffffdff

08003ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	2210      	movs	r2, #16
 8003af6:	4393      	bics	r3, r2
 8003af8:	001a      	movs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc8 <TIM_OC2_SetConfig+0xe8>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4a2d      	ldr	r2, [pc, #180]	@ (8003bcc <TIM_OC2_SetConfig+0xec>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	4393      	bics	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a24      	ldr	r2, [pc, #144]	@ (8003bd0 <TIM_OC2_SetConfig+0xf0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10d      	bne.n	8003b5e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2280      	movs	r2, #128	@ 0x80
 8003b46:	4393      	bics	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2240      	movs	r2, #64	@ 0x40
 8003b5a:	4393      	bics	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd0 <TIM_OC2_SetConfig+0xf0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00b      	beq.n	8003b7e <TIM_OC2_SetConfig+0x9e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1a      	ldr	r2, [pc, #104]	@ (8003bd4 <TIM_OC2_SetConfig+0xf4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d007      	beq.n	8003b7e <TIM_OC2_SetConfig+0x9e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a19      	ldr	r2, [pc, #100]	@ (8003bd8 <TIM_OC2_SetConfig+0xf8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d003      	beq.n	8003b7e <TIM_OC2_SetConfig+0x9e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a18      	ldr	r2, [pc, #96]	@ (8003bdc <TIM_OC2_SetConfig+0xfc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d113      	bne.n	8003ba6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4a17      	ldr	r2, [pc, #92]	@ (8003be0 <TIM_OC2_SetConfig+0x100>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4a16      	ldr	r2, [pc, #88]	@ (8003be4 <TIM_OC2_SetConfig+0x104>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	621a      	str	r2, [r3, #32]
}
 8003bc0:	46c0      	nop			@ (mov r8, r8)
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b006      	add	sp, #24
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	ffff8fff 	.word	0xffff8fff
 8003bcc:	fffffcff 	.word	0xfffffcff
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	40014800 	.word	0x40014800
 8003be0:	fffffbff 	.word	0xfffffbff
 8003be4:	fffff7ff 	.word	0xfffff7ff

08003be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4a33      	ldr	r2, [pc, #204]	@ (8003ccc <TIM_OC3_SetConfig+0xe4>)
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2270      	movs	r2, #112	@ 0x70
 8003c14:	4393      	bics	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	4a28      	ldr	r2, [pc, #160]	@ (8003cd0 <TIM_OC3_SetConfig+0xe8>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a24      	ldr	r2, [pc, #144]	@ (8003cd4 <TIM_OC3_SetConfig+0xec>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d10d      	bne.n	8003c62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	4a23      	ldr	r2, [pc, #140]	@ (8003cd8 <TIM_OC3_SetConfig+0xf0>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	021b      	lsls	r3, r3, #8
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cdc <TIM_OC3_SetConfig+0xf4>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd4 <TIM_OC3_SetConfig+0xec>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00b      	beq.n	8003c82 <TIM_OC3_SetConfig+0x9a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce0 <TIM_OC3_SetConfig+0xf8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d007      	beq.n	8003c82 <TIM_OC3_SetConfig+0x9a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce4 <TIM_OC3_SetConfig+0xfc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d003      	beq.n	8003c82 <TIM_OC3_SetConfig+0x9a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ce8 <TIM_OC3_SetConfig+0x100>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d113      	bne.n	8003caa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4a19      	ldr	r2, [pc, #100]	@ (8003cec <TIM_OC3_SetConfig+0x104>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4a18      	ldr	r2, [pc, #96]	@ (8003cf0 <TIM_OC3_SetConfig+0x108>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	621a      	str	r2, [r3, #32]
}
 8003cc4:	46c0      	nop			@ (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b006      	add	sp, #24
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	fffffeff 	.word	0xfffffeff
 8003cd0:	fffffdff 	.word	0xfffffdff
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	fffff7ff 	.word	0xfffff7ff
 8003cdc:	fffffbff 	.word	0xfffffbff
 8003ce0:	40014000 	.word	0x40014000
 8003ce4:	40014400 	.word	0x40014400
 8003ce8:	40014800 	.word	0x40014800
 8003cec:	ffffefff 	.word	0xffffefff
 8003cf0:	ffffdfff 	.word	0xffffdfff

08003cf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	4a26      	ldr	r2, [pc, #152]	@ (8003da4 <TIM_OC4_SetConfig+0xb0>)
 8003d0a:	401a      	ands	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a22      	ldr	r2, [pc, #136]	@ (8003da8 <TIM_OC4_SetConfig+0xb4>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4a21      	ldr	r2, [pc, #132]	@ (8003dac <TIM_OC4_SetConfig+0xb8>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003db0 <TIM_OC4_SetConfig+0xbc>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	031b      	lsls	r3, r3, #12
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a19      	ldr	r2, [pc, #100]	@ (8003db4 <TIM_OC4_SetConfig+0xc0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00b      	beq.n	8003d6c <TIM_OC4_SetConfig+0x78>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a18      	ldr	r2, [pc, #96]	@ (8003db8 <TIM_OC4_SetConfig+0xc4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d007      	beq.n	8003d6c <TIM_OC4_SetConfig+0x78>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a17      	ldr	r2, [pc, #92]	@ (8003dbc <TIM_OC4_SetConfig+0xc8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <TIM_OC4_SetConfig+0x78>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a16      	ldr	r2, [pc, #88]	@ (8003dc0 <TIM_OC4_SetConfig+0xcc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d109      	bne.n	8003d80 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	4a15      	ldr	r2, [pc, #84]	@ (8003dc4 <TIM_OC4_SetConfig+0xd0>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	019b      	lsls	r3, r3, #6
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	46c0      	nop			@ (mov r8, r8)
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b006      	add	sp, #24
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	ffffefff 	.word	0xffffefff
 8003da8:	ffff8fff 	.word	0xffff8fff
 8003dac:	fffffcff 	.word	0xfffffcff
 8003db0:	ffffdfff 	.word	0xffffdfff
 8003db4:	40012c00 	.word	0x40012c00
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800
 8003dc4:	ffffbfff 	.word	0xffffbfff

08003dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	2201      	movs	r2, #1
 8003de0:	4393      	bics	r3, r2
 8003de2:	001a      	movs	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	22f0      	movs	r2, #240	@ 0xf0
 8003df2:	4393      	bics	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	220a      	movs	r2, #10
 8003e04:	4393      	bics	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	621a      	str	r2, [r3, #32]
}
 8003e1c:	46c0      	nop			@ (mov r8, r8)
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b006      	add	sp, #24
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	001a      	movs	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e84 <TIM_TI2_ConfigInputStage+0x60>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	031b      	lsls	r3, r3, #12
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	22a0      	movs	r2, #160	@ 0xa0
 8003e60:	4393      	bics	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b006      	add	sp, #24
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	ffff0fff 	.word	0xffff0fff

08003e88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2270      	movs	r2, #112	@ 0x70
 8003e9c:	4393      	bics	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	2207      	movs	r2, #7
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	609a      	str	r2, [r3, #8]
}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b004      	add	sp, #16
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	4a09      	ldr	r2, [pc, #36]	@ (8003ef8 <TIM_ETR_SetConfig+0x3c>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	021a      	lsls	r2, r3, #8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	609a      	str	r2, [r3, #8]
}
 8003ef0:	46c0      	nop			@ (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b006      	add	sp, #24
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	ffff00ff 	.word	0xffff00ff

08003efc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	221f      	movs	r2, #31
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2201      	movs	r2, #1
 8003f10:	409a      	lsls	r2, r3
 8003f12:	0013      	movs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	43d2      	mvns	r2, r2
 8003f1e:	401a      	ands	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1a      	ldr	r2, [r3, #32]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	211f      	movs	r1, #31
 8003f2c:	400b      	ands	r3, r1
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4099      	lsls	r1, r3
 8003f32:	000b      	movs	r3, r1
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	621a      	str	r2, [r3, #32]
}
 8003f3a:	46c0      	nop			@ (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b006      	add	sp, #24
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	223c      	movs	r2, #60	@ 0x3c
 8003f52:	5c9b      	ldrb	r3, [r3, r2]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e041      	b.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	223c      	movs	r2, #60	@ 0x3c
 8003f60:	2101      	movs	r1, #1
 8003f62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	223d      	movs	r2, #61	@ 0x3d
 8003f68:	2102      	movs	r1, #2
 8003f6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2270      	movs	r2, #112	@ 0x70
 8003f80:	4393      	bics	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a13      	ldr	r2, [pc, #76]	@ (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a11      	ldr	r2, [pc, #68]	@ (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a10      	ldr	r2, [pc, #64]	@ (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10c      	bne.n	8003fce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2280      	movs	r2, #128	@ 0x80
 8003fb8:	4393      	bics	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	223d      	movs	r2, #61	@ 0x3d
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	223c      	movs	r2, #60	@ 0x3c
 8003fda:	2100      	movs	r1, #0
 8003fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	b004      	add	sp, #16
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40012c00 	.word	0x40012c00
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40014000 	.word	0x40014000

08003ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	223c      	movs	r2, #60	@ 0x3c
 8004006:	5c9b      	ldrb	r3, [r3, r2]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800400c:	2302      	movs	r3, #2
 800400e:	e03e      	b.n	800408e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	223c      	movs	r2, #60	@ 0x3c
 8004014:	2101      	movs	r1, #1
 8004016:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	22ff      	movs	r2, #255	@ 0xff
 800401c:	4393      	bics	r3, r2
 800401e:	001a      	movs	r2, r3
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a1b      	ldr	r2, [pc, #108]	@ (8004098 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800402c:	401a      	ands	r2, r3
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4a18      	ldr	r2, [pc, #96]	@ (800409c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800403a:	401a      	ands	r2, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4a16      	ldr	r2, [pc, #88]	@ (80040a0 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004048:	401a      	ands	r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4a13      	ldr	r2, [pc, #76]	@ (80040a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004056:	401a      	ands	r2, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a11      	ldr	r2, [pc, #68]	@ (80040a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004064:	401a      	ands	r2, r3
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a0e      	ldr	r2, [pc, #56]	@ (80040ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004072:	401a      	ands	r2, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	223c      	movs	r2, #60	@ 0x3c
 8004088:	2100      	movs	r1, #0
 800408a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	0018      	movs	r0, r3
 8004090:	46bd      	mov	sp, r7
 8004092:	b004      	add	sp, #16
 8004094:	bd80      	pop	{r7, pc}
 8004096:	46c0      	nop			@ (mov r8, r8)
 8004098:	fffffcff 	.word	0xfffffcff
 800409c:	fffffbff 	.word	0xfffffbff
 80040a0:	fffff7ff 	.word	0xfffff7ff
 80040a4:	ffffefff 	.word	0xffffefff
 80040a8:	ffffdfff 	.word	0xffffdfff
 80040ac:	ffffbfff 	.word	0xffffbfff

080040b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e044      	b.n	800414c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d107      	bne.n	80040da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2278      	movs	r2, #120	@ 0x78
 80040ce:	2100      	movs	r1, #0
 80040d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7fd fbbb 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2224      	movs	r2, #36	@ 0x24
 80040de:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2101      	movs	r1, #1
 80040ec:	438a      	bics	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 fa0c 	bl	8004518 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	0018      	movs	r0, r3
 8004104:	f000 f8c8 	bl	8004298 <UART_SetConfig>
 8004108:	0003      	movs	r3, r0
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e01c      	b.n	800414c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	490d      	ldr	r1, [pc, #52]	@ (8004154 <HAL_UART_Init+0xa4>)
 800411e:	400a      	ands	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2108      	movs	r1, #8
 800412e:	438a      	bics	r2, r1
 8004130:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2101      	movs	r1, #1
 800413e:	430a      	orrs	r2, r1
 8004140:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	0018      	movs	r0, r3
 8004146:	f000 fa9b 	bl	8004680 <UART_CheckIdleState>
 800414a:	0003      	movs	r3, r0
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b002      	add	sp, #8
 8004152:	bd80      	pop	{r7, pc}
 8004154:	fffff7ff 	.word	0xfffff7ff

08004158 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	@ 0x28
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	1dbb      	adds	r3, r7, #6
 8004166:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800416c:	2b20      	cmp	r3, #32
 800416e:	d000      	beq.n	8004172 <HAL_UART_Transmit+0x1a>
 8004170:	e08c      	b.n	800428c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_UART_Transmit+0x28>
 8004178:	1dbb      	adds	r3, r7, #6
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e084      	b.n	800428e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	2380      	movs	r3, #128	@ 0x80
 800418a:	015b      	lsls	r3, r3, #5
 800418c:	429a      	cmp	r2, r3
 800418e:	d109      	bne.n	80041a4 <HAL_UART_Transmit+0x4c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2201      	movs	r2, #1
 800419c:	4013      	ands	r3, r2
 800419e:	d001      	beq.n	80041a4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e074      	b.n	800428e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2284      	movs	r2, #132	@ 0x84
 80041a8:	2100      	movs	r1, #0
 80041aa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2221      	movs	r2, #33	@ 0x21
 80041b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041b2:	f7fd fcd3 	bl	8001b5c <HAL_GetTick>
 80041b6:	0003      	movs	r3, r0
 80041b8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1dba      	adds	r2, r7, #6
 80041be:	2150      	movs	r1, #80	@ 0x50
 80041c0:	8812      	ldrh	r2, [r2, #0]
 80041c2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1dba      	adds	r2, r7, #6
 80041c8:	2152      	movs	r1, #82	@ 0x52
 80041ca:	8812      	ldrh	r2, [r2, #0]
 80041cc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	2380      	movs	r3, #128	@ 0x80
 80041d4:	015b      	lsls	r3, r3, #5
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d108      	bne.n	80041ec <HAL_UART_Transmit+0x94>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e003      	b.n	80041f4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041f4:	e02f      	b.n	8004256 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	0013      	movs	r3, r2
 8004200:	2200      	movs	r2, #0
 8004202:	2180      	movs	r1, #128	@ 0x80
 8004204:	f000 fae4 	bl	80047d0 <UART_WaitOnFlagUntilTimeout>
 8004208:	1e03      	subs	r3, r0, #0
 800420a:	d004      	beq.n	8004216 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e03b      	b.n	800428e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	881a      	ldrh	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	05d2      	lsls	r2, r2, #23
 8004226:	0dd2      	lsrs	r2, r2, #23
 8004228:	b292      	uxth	r2, r2
 800422a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	3302      	adds	r3, #2
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	e007      	b.n	8004244 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3301      	adds	r3, #1
 8004242:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2252      	movs	r2, #82	@ 0x52
 8004248:	5a9b      	ldrh	r3, [r3, r2]
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b299      	uxth	r1, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2252      	movs	r2, #82	@ 0x52
 8004254:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2252      	movs	r2, #82	@ 0x52
 800425a:	5a9b      	ldrh	r3, [r3, r2]
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1c9      	bne.n	80041f6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	0013      	movs	r3, r2
 800426c:	2200      	movs	r2, #0
 800426e:	2140      	movs	r1, #64	@ 0x40
 8004270:	f000 faae 	bl	80047d0 <UART_WaitOnFlagUntilTimeout>
 8004274:	1e03      	subs	r3, r0, #0
 8004276:	d004      	beq.n	8004282 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e005      	b.n	800428e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800428c:	2302      	movs	r3, #2
  }
}
 800428e:	0018      	movs	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	b008      	add	sp, #32
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042a0:	231e      	movs	r3, #30
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a8d      	ldr	r2, [pc, #564]	@ (80044fc <UART_SetConfig+0x264>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	0019      	movs	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a88      	ldr	r2, [pc, #544]	@ (8004500 <UART_SetConfig+0x268>)
 80042de:	4013      	ands	r3, r2
 80042e0:	0019      	movs	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	4a7f      	ldr	r2, [pc, #508]	@ (8004504 <UART_SetConfig+0x26c>)
 8004306:	4013      	ands	r3, r2
 8004308:	0019      	movs	r1, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	430a      	orrs	r2, r1
 8004312:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a7b      	ldr	r2, [pc, #492]	@ (8004508 <UART_SetConfig+0x270>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d127      	bne.n	800436e <UART_SetConfig+0xd6>
 800431e:	4b7b      	ldr	r3, [pc, #492]	@ (800450c <UART_SetConfig+0x274>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004322:	2203      	movs	r2, #3
 8004324:	4013      	ands	r3, r2
 8004326:	2b03      	cmp	r3, #3
 8004328:	d00d      	beq.n	8004346 <UART_SetConfig+0xae>
 800432a:	d81b      	bhi.n	8004364 <UART_SetConfig+0xcc>
 800432c:	2b02      	cmp	r3, #2
 800432e:	d014      	beq.n	800435a <UART_SetConfig+0xc2>
 8004330:	d818      	bhi.n	8004364 <UART_SetConfig+0xcc>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <UART_SetConfig+0xa4>
 8004336:	2b01      	cmp	r3, #1
 8004338:	d00a      	beq.n	8004350 <UART_SetConfig+0xb8>
 800433a:	e013      	b.n	8004364 <UART_SetConfig+0xcc>
 800433c:	231f      	movs	r3, #31
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e021      	b.n	800438a <UART_SetConfig+0xf2>
 8004346:	231f      	movs	r3, #31
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	e01c      	b.n	800438a <UART_SetConfig+0xf2>
 8004350:	231f      	movs	r3, #31
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	2204      	movs	r2, #4
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e017      	b.n	800438a <UART_SetConfig+0xf2>
 800435a:	231f      	movs	r3, #31
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	2208      	movs	r2, #8
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	e012      	b.n	800438a <UART_SetConfig+0xf2>
 8004364:	231f      	movs	r3, #31
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	2210      	movs	r2, #16
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e00d      	b.n	800438a <UART_SetConfig+0xf2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a67      	ldr	r2, [pc, #412]	@ (8004510 <UART_SetConfig+0x278>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d104      	bne.n	8004382 <UART_SetConfig+0xea>
 8004378:	231f      	movs	r3, #31
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e003      	b.n	800438a <UART_SetConfig+0xf2>
 8004382:	231f      	movs	r3, #31
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	2210      	movs	r2, #16
 8004388:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	2380      	movs	r3, #128	@ 0x80
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	429a      	cmp	r2, r3
 8004394:	d15c      	bne.n	8004450 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004396:	231f      	movs	r3, #31
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d015      	beq.n	80043cc <UART_SetConfig+0x134>
 80043a0:	dc18      	bgt.n	80043d4 <UART_SetConfig+0x13c>
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d00d      	beq.n	80043c2 <UART_SetConfig+0x12a>
 80043a6:	dc15      	bgt.n	80043d4 <UART_SetConfig+0x13c>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <UART_SetConfig+0x11a>
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d005      	beq.n	80043bc <UART_SetConfig+0x124>
 80043b0:	e010      	b.n	80043d4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b2:	f7fe fc83 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 80043b6:	0003      	movs	r3, r0
 80043b8:	61bb      	str	r3, [r7, #24]
        break;
 80043ba:	e012      	b.n	80043e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043bc:	4b55      	ldr	r3, [pc, #340]	@ (8004514 <UART_SetConfig+0x27c>)
 80043be:	61bb      	str	r3, [r7, #24]
        break;
 80043c0:	e00f      	b.n	80043e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c2:	f7fe fc1b 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 80043c6:	0003      	movs	r3, r0
 80043c8:	61bb      	str	r3, [r7, #24]
        break;
 80043ca:	e00a      	b.n	80043e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043cc:	2380      	movs	r3, #128	@ 0x80
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	61bb      	str	r3, [r7, #24]
        break;
 80043d2:	e006      	b.n	80043e2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043d8:	231e      	movs	r3, #30
 80043da:	18fb      	adds	r3, r7, r3
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
        break;
 80043e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d100      	bne.n	80043ea <UART_SetConfig+0x152>
 80043e8:	e07a      	b.n	80044e0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	005a      	lsls	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	18d2      	adds	r2, r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	0019      	movs	r1, r3
 80043fc:	0010      	movs	r0, r2
 80043fe:	f7fb fe8d 	bl	800011c <__udivsi3>
 8004402:	0003      	movs	r3, r0
 8004404:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b0f      	cmp	r3, #15
 800440a:	d91c      	bls.n	8004446 <UART_SetConfig+0x1ae>
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	2380      	movs	r3, #128	@ 0x80
 8004410:	025b      	lsls	r3, r3, #9
 8004412:	429a      	cmp	r2, r3
 8004414:	d217      	bcs.n	8004446 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	b29a      	uxth	r2, r3
 800441a:	200e      	movs	r0, #14
 800441c:	183b      	adds	r3, r7, r0
 800441e:	210f      	movs	r1, #15
 8004420:	438a      	bics	r2, r1
 8004422:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	b29b      	uxth	r3, r3
 800442a:	2207      	movs	r2, #7
 800442c:	4013      	ands	r3, r2
 800442e:	b299      	uxth	r1, r3
 8004430:	183b      	adds	r3, r7, r0
 8004432:	183a      	adds	r2, r7, r0
 8004434:	8812      	ldrh	r2, [r2, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	183a      	adds	r2, r7, r0
 8004440:	8812      	ldrh	r2, [r2, #0]
 8004442:	60da      	str	r2, [r3, #12]
 8004444:	e04c      	b.n	80044e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004446:	231e      	movs	r3, #30
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e047      	b.n	80044e0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004450:	231f      	movs	r3, #31
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b08      	cmp	r3, #8
 8004458:	d015      	beq.n	8004486 <UART_SetConfig+0x1ee>
 800445a:	dc18      	bgt.n	800448e <UART_SetConfig+0x1f6>
 800445c:	2b04      	cmp	r3, #4
 800445e:	d00d      	beq.n	800447c <UART_SetConfig+0x1e4>
 8004460:	dc15      	bgt.n	800448e <UART_SetConfig+0x1f6>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <UART_SetConfig+0x1d4>
 8004466:	2b02      	cmp	r3, #2
 8004468:	d005      	beq.n	8004476 <UART_SetConfig+0x1de>
 800446a:	e010      	b.n	800448e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800446c:	f7fe fc26 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 8004470:	0003      	movs	r3, r0
 8004472:	61bb      	str	r3, [r7, #24]
        break;
 8004474:	e012      	b.n	800449c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004476:	4b27      	ldr	r3, [pc, #156]	@ (8004514 <UART_SetConfig+0x27c>)
 8004478:	61bb      	str	r3, [r7, #24]
        break;
 800447a:	e00f      	b.n	800449c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447c:	f7fe fbbe 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8004480:	0003      	movs	r3, r0
 8004482:	61bb      	str	r3, [r7, #24]
        break;
 8004484:	e00a      	b.n	800449c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004486:	2380      	movs	r3, #128	@ 0x80
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	61bb      	str	r3, [r7, #24]
        break;
 800448c:	e006      	b.n	800449c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004492:	231e      	movs	r3, #30
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	2201      	movs	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
        break;
 800449a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01e      	beq.n	80044e0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	085a      	lsrs	r2, r3, #1
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	18d2      	adds	r2, r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	0019      	movs	r1, r3
 80044b2:	0010      	movs	r0, r2
 80044b4:	f7fb fe32 	bl	800011c <__udivsi3>
 80044b8:	0003      	movs	r3, r0
 80044ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b0f      	cmp	r3, #15
 80044c0:	d90a      	bls.n	80044d8 <UART_SetConfig+0x240>
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	2380      	movs	r3, #128	@ 0x80
 80044c6:	025b      	lsls	r3, r3, #9
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d205      	bcs.n	80044d8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	e003      	b.n	80044e0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80044d8:	231e      	movs	r3, #30
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	2201      	movs	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80044ec:	231e      	movs	r3, #30
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	781b      	ldrb	r3, [r3, #0]
}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b008      	add	sp, #32
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	ffff69f3 	.word	0xffff69f3
 8004500:	ffffcfff 	.word	0xffffcfff
 8004504:	fffff4ff 	.word	0xfffff4ff
 8004508:	40013800 	.word	0x40013800
 800450c:	40021000 	.word	0x40021000
 8004510:	40004400 	.word	0x40004400
 8004514:	007a1200 	.word	0x007a1200

08004518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	2208      	movs	r2, #8
 8004526:	4013      	ands	r3, r2
 8004528:	d00b      	beq.n	8004542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4a4a      	ldr	r2, [pc, #296]	@ (800465c <UART_AdvFeatureConfig+0x144>)
 8004532:	4013      	ands	r3, r2
 8004534:	0019      	movs	r1, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	2201      	movs	r2, #1
 8004548:	4013      	ands	r3, r2
 800454a:	d00b      	beq.n	8004564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4a43      	ldr	r2, [pc, #268]	@ (8004660 <UART_AdvFeatureConfig+0x148>)
 8004554:	4013      	ands	r3, r2
 8004556:	0019      	movs	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004568:	2202      	movs	r2, #2
 800456a:	4013      	ands	r3, r2
 800456c:	d00b      	beq.n	8004586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4a3b      	ldr	r2, [pc, #236]	@ (8004664 <UART_AdvFeatureConfig+0x14c>)
 8004576:	4013      	ands	r3, r2
 8004578:	0019      	movs	r1, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	2204      	movs	r2, #4
 800458c:	4013      	ands	r3, r2
 800458e:	d00b      	beq.n	80045a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4a34      	ldr	r2, [pc, #208]	@ (8004668 <UART_AdvFeatureConfig+0x150>)
 8004598:	4013      	ands	r3, r2
 800459a:	0019      	movs	r1, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	2210      	movs	r2, #16
 80045ae:	4013      	ands	r3, r2
 80045b0:	d00b      	beq.n	80045ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4a2c      	ldr	r2, [pc, #176]	@ (800466c <UART_AdvFeatureConfig+0x154>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	0019      	movs	r1, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ce:	2220      	movs	r2, #32
 80045d0:	4013      	ands	r3, r2
 80045d2:	d00b      	beq.n	80045ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	4a25      	ldr	r2, [pc, #148]	@ (8004670 <UART_AdvFeatureConfig+0x158>)
 80045dc:	4013      	ands	r3, r2
 80045de:	0019      	movs	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	2240      	movs	r2, #64	@ 0x40
 80045f2:	4013      	ands	r3, r2
 80045f4:	d01d      	beq.n	8004632 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004674 <UART_AdvFeatureConfig+0x15c>)
 80045fe:	4013      	ands	r3, r2
 8004600:	0019      	movs	r1, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004612:	2380      	movs	r3, #128	@ 0x80
 8004614:	035b      	lsls	r3, r3, #13
 8004616:	429a      	cmp	r2, r3
 8004618:	d10b      	bne.n	8004632 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a15      	ldr	r2, [pc, #84]	@ (8004678 <UART_AdvFeatureConfig+0x160>)
 8004622:	4013      	ands	r3, r2
 8004624:	0019      	movs	r1, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	2280      	movs	r2, #128	@ 0x80
 8004638:	4013      	ands	r3, r2
 800463a:	d00b      	beq.n	8004654 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4a0e      	ldr	r2, [pc, #56]	@ (800467c <UART_AdvFeatureConfig+0x164>)
 8004644:	4013      	ands	r3, r2
 8004646:	0019      	movs	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }
}
 8004654:	46c0      	nop			@ (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	b002      	add	sp, #8
 800465a:	bd80      	pop	{r7, pc}
 800465c:	ffff7fff 	.word	0xffff7fff
 8004660:	fffdffff 	.word	0xfffdffff
 8004664:	fffeffff 	.word	0xfffeffff
 8004668:	fffbffff 	.word	0xfffbffff
 800466c:	ffffefff 	.word	0xffffefff
 8004670:	ffffdfff 	.word	0xffffdfff
 8004674:	ffefffff 	.word	0xffefffff
 8004678:	ff9fffff 	.word	0xff9fffff
 800467c:	fff7ffff 	.word	0xfff7ffff

08004680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b092      	sub	sp, #72	@ 0x48
 8004684:	af02      	add	r7, sp, #8
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2284      	movs	r2, #132	@ 0x84
 800468c:	2100      	movs	r1, #0
 800468e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004690:	f7fd fa64 	bl	8001b5c <HAL_GetTick>
 8004694:	0003      	movs	r3, r0
 8004696:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2208      	movs	r2, #8
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d12c      	bne.n	8004700 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046a8:	2280      	movs	r2, #128	@ 0x80
 80046aa:	0391      	lsls	r1, r2, #14
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4a46      	ldr	r2, [pc, #280]	@ (80047c8 <UART_CheckIdleState+0x148>)
 80046b0:	9200      	str	r2, [sp, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f000 f88c 	bl	80047d0 <UART_WaitOnFlagUntilTimeout>
 80046b8:	1e03      	subs	r3, r0, #0
 80046ba:	d021      	beq.n	8004700 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046bc:	f3ef 8310 	mrs	r3, PRIMASK
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046c6:	2301      	movs	r3, #1
 80046c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046cc:	f383 8810 	msr	PRIMASK, r3
}
 80046d0:	46c0      	nop			@ (mov r8, r8)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2180      	movs	r1, #128	@ 0x80
 80046de:	438a      	bics	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e8:	f383 8810 	msr	PRIMASK, r3
}
 80046ec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2278      	movs	r2, #120	@ 0x78
 80046f8:	2100      	movs	r1, #0
 80046fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e05f      	b.n	80047c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2204      	movs	r2, #4
 8004708:	4013      	ands	r3, r2
 800470a:	2b04      	cmp	r3, #4
 800470c:	d146      	bne.n	800479c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800470e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004710:	2280      	movs	r2, #128	@ 0x80
 8004712:	03d1      	lsls	r1, r2, #15
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	4a2c      	ldr	r2, [pc, #176]	@ (80047c8 <UART_CheckIdleState+0x148>)
 8004718:	9200      	str	r2, [sp, #0]
 800471a:	2200      	movs	r2, #0
 800471c:	f000 f858 	bl	80047d0 <UART_WaitOnFlagUntilTimeout>
 8004720:	1e03      	subs	r3, r0, #0
 8004722:	d03b      	beq.n	800479c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004724:	f3ef 8310 	mrs	r3, PRIMASK
 8004728:	60fb      	str	r3, [r7, #12]
  return(result);
 800472a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472c:	637b      	str	r3, [r7, #52]	@ 0x34
 800472e:	2301      	movs	r3, #1
 8004730:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f383 8810 	msr	PRIMASK, r3
}
 8004738:	46c0      	nop			@ (mov r8, r8)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4921      	ldr	r1, [pc, #132]	@ (80047cc <UART_CheckIdleState+0x14c>)
 8004746:	400a      	ands	r2, r1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004756:	f3ef 8310 	mrs	r3, PRIMASK
 800475a:	61bb      	str	r3, [r7, #24]
  return(result);
 800475c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004760:	2301      	movs	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f383 8810 	msr	PRIMASK, r3
}
 800476a:	46c0      	nop			@ (mov r8, r8)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2101      	movs	r1, #1
 8004778:	438a      	bics	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	f383 8810 	msr	PRIMASK, r3
}
 8004786:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2280      	movs	r2, #128	@ 0x80
 800478c:	2120      	movs	r1, #32
 800478e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2278      	movs	r2, #120	@ 0x78
 8004794:	2100      	movs	r1, #0
 8004796:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e011      	b.n	80047c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2280      	movs	r2, #128	@ 0x80
 80047a6:	2120      	movs	r1, #32
 80047a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2278      	movs	r2, #120	@ 0x78
 80047ba:	2100      	movs	r1, #0
 80047bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	0018      	movs	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b010      	add	sp, #64	@ 0x40
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	01ffffff 	.word	0x01ffffff
 80047cc:	fffffedf 	.word	0xfffffedf

080047d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	1dfb      	adds	r3, r7, #7
 80047de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e0:	e051      	b.n	8004886 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	3301      	adds	r3, #1
 80047e6:	d04e      	beq.n	8004886 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e8:	f7fd f9b8 	bl	8001b5c <HAL_GetTick>
 80047ec:	0002      	movs	r2, r0
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d302      	bcc.n	80047fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e051      	b.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2204      	movs	r2, #4
 800480a:	4013      	ands	r3, r2
 800480c:	d03b      	beq.n	8004886 <UART_WaitOnFlagUntilTimeout+0xb6>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b80      	cmp	r3, #128	@ 0x80
 8004812:	d038      	beq.n	8004886 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b40      	cmp	r3, #64	@ 0x40
 8004818:	d035      	beq.n	8004886 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	2208      	movs	r2, #8
 8004822:	4013      	ands	r3, r2
 8004824:	2b08      	cmp	r3, #8
 8004826:	d111      	bne.n	800484c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2208      	movs	r2, #8
 800482e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	0018      	movs	r0, r3
 8004834:	f000 f83c 	bl	80048b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2284      	movs	r2, #132	@ 0x84
 800483c:	2108      	movs	r1, #8
 800483e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2278      	movs	r2, #120	@ 0x78
 8004844:	2100      	movs	r1, #0
 8004846:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e02c      	b.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	2380      	movs	r3, #128	@ 0x80
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	401a      	ands	r2, r3
 8004858:	2380      	movs	r3, #128	@ 0x80
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	429a      	cmp	r2, r3
 800485e:	d112      	bne.n	8004886 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2280      	movs	r2, #128	@ 0x80
 8004866:	0112      	lsls	r2, r2, #4
 8004868:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	0018      	movs	r0, r3
 800486e:	f000 f81f 	bl	80048b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2284      	movs	r2, #132	@ 0x84
 8004876:	2120      	movs	r1, #32
 8004878:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2278      	movs	r2, #120	@ 0x78
 800487e:	2100      	movs	r1, #0
 8004880:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e00f      	b.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	4013      	ands	r3, r2
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	425a      	negs	r2, r3
 8004896:	4153      	adcs	r3, r2
 8004898:	b2db      	uxtb	r3, r3
 800489a:	001a      	movs	r2, r3
 800489c:	1dfb      	adds	r3, r7, #7
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d09e      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	0018      	movs	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b004      	add	sp, #16
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08e      	sub	sp, #56	@ 0x38
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b8:	f3ef 8310 	mrs	r3, PRIMASK
 80048bc:	617b      	str	r3, [r7, #20]
  return(result);
 80048be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c2:	2301      	movs	r3, #1
 80048c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	f383 8810 	msr	PRIMASK, r3
}
 80048cc:	46c0      	nop			@ (mov r8, r8)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4926      	ldr	r1, [pc, #152]	@ (8004974 <UART_EndRxTransfer+0xc4>)
 80048da:	400a      	ands	r2, r1
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f383 8810 	msr	PRIMASK, r3
}
 80048e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ea:	f3ef 8310 	mrs	r3, PRIMASK
 80048ee:	623b      	str	r3, [r7, #32]
  return(result);
 80048f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80048f4:	2301      	movs	r3, #1
 80048f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	f383 8810 	msr	PRIMASK, r3
}
 80048fe:	46c0      	nop			@ (mov r8, r8)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2101      	movs	r1, #1
 800490c:	438a      	bics	r2, r1
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004912:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004916:	f383 8810 	msr	PRIMASK, r3
}
 800491a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004920:	2b01      	cmp	r3, #1
 8004922:	d118      	bne.n	8004956 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004924:	f3ef 8310 	mrs	r3, PRIMASK
 8004928:	60bb      	str	r3, [r7, #8]
  return(result);
 800492a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800492e:	2301      	movs	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f383 8810 	msr	PRIMASK, r3
}
 8004938:	46c0      	nop			@ (mov r8, r8)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2110      	movs	r1, #16
 8004946:	438a      	bics	r2, r1
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f383 8810 	msr	PRIMASK, r3
}
 8004954:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2280      	movs	r2, #128	@ 0x80
 800495a:	2120      	movs	r1, #32
 800495c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800496a:	46c0      	nop			@ (mov r8, r8)
 800496c:	46bd      	mov	sp, r7
 800496e:	b00e      	add	sp, #56	@ 0x38
 8004970:	bd80      	pop	{r7, pc}
 8004972:	46c0      	nop			@ (mov r8, r8)
 8004974:	fffffedf 	.word	0xfffffedf

08004978 <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	0018      	movs	r0, r3
 8004984:	f7fd f8f4 	bl	8001b70 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8004988:	46c0      	nop			@ (mov r8, r8)
 800498a:	46bd      	mov	sp, r7
 800498c:	b002      	add	sp, #8
 800498e:	bd80      	pop	{r7, pc}

08004990 <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *hLed)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  while (hLed->Lock)
 8004998:	e002      	b.n	80049a0 <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 800499a:	2001      	movs	r0, #1
 800499c:	f7ff ffec 	bl	8004978 <WS28XX_Delay>
  while (hLed->Lock)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	795b      	ldrb	r3, [r3, #5]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f8      	bne.n	800499a <WS28XX_Lock+0xa>
  }
  hLed->Lock = 1;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	715a      	strb	r2, [r3, #5]
}
 80049ae:	46c0      	nop			@ (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b002      	add	sp, #8
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  hLed->Lock = 0;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	715a      	strb	r2, [r3, #5]
}
 80049c4:	46c0      	nop			@ (mov r8, r8)
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b002      	add	sp, #8
 80049ca:	bd80      	pop	{r7, pc}

080049cc <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *hLed, TIM_HandleTypeDef *hTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 80049cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	0019      	movs	r1, r3
 80049d8:	1dbb      	adds	r3, r7, #6
 80049da:	801a      	strh	r2, [r3, #0]
 80049dc:	1d7b      	adds	r3, r7, #5
 80049de:	1c0a      	adds	r2, r1, #0
 80049e0:	701a      	strb	r2, [r3, #0]
  bool answer = false;
 80049e2:	2517      	movs	r5, #23
 80049e4:	197b      	adds	r3, r7, r5
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
  uint32_t aar_value;
  do
  {
    if (hLed == NULL || hTim == NULL)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d100      	bne.n	80049f2 <WS28XX_Init+0x26>
 80049f0:	e08e      	b.n	8004b10 <WS28XX_Init+0x144>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d100      	bne.n	80049fa <WS28XX_Init+0x2e>
 80049f8:	e08a      	b.n	8004b10 <WS28XX_Init+0x144>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 80049fa:	2420      	movs	r4, #32
 80049fc:	2608      	movs	r6, #8
 80049fe:	19a3      	adds	r3, r4, r6
 8004a00:	2208      	movs	r2, #8
 8004a02:	4694      	mov	ip, r2
 8004a04:	44bc      	add	ip, r7
 8004a06:	4463      	add	r3, ip
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	2b0a      	cmp	r3, #10
 8004a0c:	d900      	bls.n	8004a10 <WS28XX_Init+0x44>
 8004a0e:	e07e      	b.n	8004b0e <WS28XX_Init+0x142>
    {
      break;
    }
    hLed->Channel = Channel;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	1d7a      	adds	r2, r7, #5
 8004a14:	7812      	ldrb	r2, [r2, #0]
 8004a16:	711a      	strb	r2, [r3, #4]
    hLed->MaxPixel = Pixel;
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	19a3      	adds	r3, r4, r6
 8004a1c:	2108      	movs	r1, #8
 8004a1e:	468c      	mov	ip, r1
 8004a20:	44bc      	add	ip, r7
 8004a22:	4463      	add	r3, ip
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	8153      	strh	r3, [r2, #10]
    hLed->hTim = hTim;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 8004a2e:	1dbb      	adds	r3, r7, #6
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	0018      	movs	r0, r3
 8004a34:	f7fc f922 	bl	8000c7c <__aeabi_i2f>
 8004a38:	1c03      	adds	r3, r0, #0
 8004a3a:	4939      	ldr	r1, [pc, #228]	@ (8004b20 <WS28XX_Init+0x154>)
 8004a3c:	1c18      	adds	r0, r3, #0
 8004a3e:	f7fb fcfb 	bl	8000438 <__aeabi_fdiv>
 8004a42:	1c03      	adds	r3, r0, #0
 8004a44:	21fe      	movs	r1, #254	@ 0xfe
 8004a46:	0589      	lsls	r1, r1, #22
 8004a48:	1c18      	adds	r0, r3, #0
 8004a4a:	f7fb ff53 	bl	80008f4 <__aeabi_fsub>
 8004a4e:	1c03      	adds	r3, r0, #0
 8004a50:	1c18      	adds	r0, r3, #0
 8004a52:	f7fb fcd9 	bl	8000408 <__aeabi_f2uiz>
 8004a56:	0003      	movs	r3, r0
 8004a58:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(hLed->hTim ,aar_value);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(hLed->hTim, 0);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	629a      	str	r2, [r3, #40]	@ 0x28
    hLed->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8004a76:	6938      	ldr	r0, [r7, #16]
 8004a78:	f7fc f94c 	bl	8000d14 <__aeabi_ui2f>
 8004a7c:	1c03      	adds	r3, r0, #0
 8004a7e:	4929      	ldr	r1, [pc, #164]	@ (8004b24 <WS28XX_Init+0x158>)
 8004a80:	1c18      	adds	r0, r3, #0
 8004a82:	f7fb fdf9 	bl	8000678 <__aeabi_fmul>
 8004a86:	1c03      	adds	r3, r0, #0
 8004a88:	4927      	ldr	r1, [pc, #156]	@ (8004b28 <WS28XX_Init+0x15c>)
 8004a8a:	1c18      	adds	r0, r3, #0
 8004a8c:	f7fb fcd4 	bl	8000438 <__aeabi_fdiv>
 8004a90:	1c03      	adds	r3, r0, #0
 8004a92:	1c18      	adds	r0, r3, #0
 8004a94:	f7fb fcb8 	bl	8000408 <__aeabi_f2uiz>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	80da      	strh	r2, [r3, #6]
    hLed->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8004aa0:	6938      	ldr	r0, [r7, #16]
 8004aa2:	f7fc f937 	bl	8000d14 <__aeabi_ui2f>
 8004aa6:	1c03      	adds	r3, r0, #0
 8004aa8:	491d      	ldr	r1, [pc, #116]	@ (8004b20 <WS28XX_Init+0x154>)
 8004aaa:	1c18      	adds	r0, r3, #0
 8004aac:	f7fb fde4 	bl	8000678 <__aeabi_fmul>
 8004ab0:	1c03      	adds	r3, r0, #0
 8004ab2:	491d      	ldr	r1, [pc, #116]	@ (8004b28 <WS28XX_Init+0x15c>)
 8004ab4:	1c18      	adds	r0, r3, #0
 8004ab6:	f7fb fcbf 	bl	8000438 <__aeabi_fdiv>
 8004aba:	1c03      	adds	r3, r0, #0
 8004abc:	1c18      	adds	r0, r3, #0
 8004abe:	f7fb fca3 	bl	8000408 <__aeabi_f2uiz>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	811a      	strh	r2, [r3, #8]
    memset(hLed->Pixel, 0, sizeof(hLed->Pixel));
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	330c      	adds	r3, #12
 8004ace:	221e      	movs	r2, #30
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f000 fa58 	bl	8004f88 <memset>
    memset(hLed->Buffer, 0, sizeof(hLed->Buffer));
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	332a      	adds	r3, #42	@ 0x2a
 8004adc:	22f4      	movs	r2, #244	@ 0xf4
 8004ade:	2100      	movs	r1, #0
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f000 fa51 	bl	8004f88 <memset>
    HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, Pixel);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	791b      	ldrb	r3, [r3, #4]
 8004aee:	0019      	movs	r1, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	332a      	adds	r3, #42	@ 0x2a
 8004af4:	001a      	movs	r2, r3
 8004af6:	19a3      	adds	r3, r4, r6
 8004af8:	2408      	movs	r4, #8
 8004afa:	46a4      	mov	ip, r4
 8004afc:	44bc      	add	ip, r7
 8004afe:	4463      	add	r3, ip
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	f7fe faab 	bl	800305c <HAL_TIM_PWM_Start_DMA>
    answer = true;
 8004b06:	197b      	adds	r3, r7, r5
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	e000      	b.n	8004b10 <WS28XX_Init+0x144>
      break;
 8004b0e:	46c0      	nop			@ (mov r8, r8)
  }
  while (0);

  return answer;
 8004b10:	2317      	movs	r3, #23
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	781b      	ldrb	r3, [r3, #0]
}
 8004b16:	0018      	movs	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b007      	add	sp, #28
 8004b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	3f4ccccd 	.word	0x3f4ccccd
 8004b24:	3ecccccd 	.word	0x3ecccccd
 8004b28:	3fa00000 	.word	0x3fa00000

08004b2c <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *hLed, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 8004b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	000c      	movs	r4, r1
 8004b36:	0010      	movs	r0, r2
 8004b38:	0019      	movs	r1, r3
 8004b3a:	250a      	movs	r5, #10
 8004b3c:	197b      	adds	r3, r7, r5
 8004b3e:	1c22      	adds	r2, r4, #0
 8004b40:	801a      	strh	r2, [r3, #0]
 8004b42:	2308      	movs	r3, #8
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	1c02      	adds	r2, r0, #0
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	1dfb      	adds	r3, r7, #7
 8004b4c:	1c0a      	adds	r2, r1, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
  bool answer = true;
 8004b50:	2117      	movs	r1, #23
 8004b52:	187b      	adds	r3, r7, r1
 8004b54:	2201      	movs	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= hLed->MaxPixel)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	895b      	ldrh	r3, [r3, #10]
 8004b5c:	197a      	adds	r2, r7, r5
 8004b5e:	8812      	ldrh	r2, [r2, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d303      	bcc.n	8004b6c <WS28XX_SetPixel_RGBW_565+0x40>
    {
      answer = false;
 8004b64:	187b      	adds	r3, r7, r1
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
      break;
 8004b6a:	e063      	b.n	8004c34 <WS28XX_SetPixel_RGBW_565+0x108>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 8004b6c:	2408      	movs	r4, #8
 8004b6e:	193b      	adds	r3, r7, r4
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	0a1b      	lsrs	r3, r3, #8
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	001a      	movs	r2, r3
 8004b78:	23f8      	movs	r3, #248	@ 0xf8
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	1dfa      	adds	r2, r7, #7
 8004b7e:	7812      	ldrb	r2, [r2, #0]
 8004b80:	4353      	muls	r3, r2
 8004b82:	21ff      	movs	r1, #255	@ 0xff
 8004b84:	0018      	movs	r0, r3
 8004b86:	f7fb fb53 	bl	8000230 <__divsi3>
 8004b8a:	0003      	movs	r3, r0
 8004b8c:	001a      	movs	r2, r3
 8004b8e:	2516      	movs	r5, #22
 8004b90:	197b      	adds	r3, r7, r5
 8004b92:	701a      	strb	r2, [r3, #0]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 8004b94:	193b      	adds	r3, r7, r4
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	08db      	lsrs	r3, r3, #3
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	001a      	movs	r2, r3
 8004b9e:	23fc      	movs	r3, #252	@ 0xfc
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	1dfa      	adds	r2, r7, #7
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	4353      	muls	r3, r2
 8004ba8:	21ff      	movs	r1, #255	@ 0xff
 8004baa:	0018      	movs	r0, r3
 8004bac:	f7fb fb40 	bl	8000230 <__divsi3>
 8004bb0:	0003      	movs	r3, r0
 8004bb2:	001a      	movs	r2, r3
 8004bb4:	2615      	movs	r6, #21
 8004bb6:	19bb      	adds	r3, r7, r6
 8004bb8:	701a      	strb	r2, [r3, #0]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 8004bba:	193b      	adds	r3, r7, r4
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	22ff      	movs	r2, #255	@ 0xff
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	1dfa      	adds	r2, r7, #7
 8004bc6:	7812      	ldrb	r2, [r2, #0]
 8004bc8:	4353      	muls	r3, r2
 8004bca:	21ff      	movs	r1, #255	@ 0xff
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f7fb fb2f 	bl	8000230 <__divsi3>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	001a      	movs	r2, r3
 8004bd6:	2314      	movs	r3, #20
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	701a      	strb	r2, [r3, #0]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8004bdc:	19bb      	adds	r3, r7, r6
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	240a      	movs	r4, #10
 8004be2:	193a      	adds	r2, r7, r4
 8004be4:	8812      	ldrh	r2, [r2, #0]
 8004be6:	4917      	ldr	r1, [pc, #92]	@ (8004c44 <WS28XX_SetPixel_RGBW_565+0x118>)
 8004be8:	5cc8      	ldrb	r0, [r1, r3]
 8004bea:	68f9      	ldr	r1, [r7, #12]
 8004bec:	0013      	movs	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	189b      	adds	r3, r3, r2
 8004bf2:	18cb      	adds	r3, r1, r3
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	1c02      	adds	r2, r0, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8004bfa:	197b      	adds	r3, r7, r5
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	193a      	adds	r2, r7, r4
 8004c00:	8812      	ldrh	r2, [r2, #0]
 8004c02:	4910      	ldr	r1, [pc, #64]	@ (8004c44 <WS28XX_SetPixel_RGBW_565+0x118>)
 8004c04:	5cc8      	ldrb	r0, [r1, r3]
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	0013      	movs	r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	189b      	adds	r3, r3, r2
 8004c0e:	18cb      	adds	r3, r1, r3
 8004c10:	330d      	adds	r3, #13
 8004c12:	1c02      	adds	r2, r0, #0
 8004c14:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 8004c16:	2314      	movs	r3, #20
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	193a      	adds	r2, r7, r4
 8004c1e:	8812      	ldrh	r2, [r2, #0]
 8004c20:	4908      	ldr	r1, [pc, #32]	@ (8004c44 <WS28XX_SetPixel_RGBW_565+0x118>)
 8004c22:	5cc8      	ldrb	r0, [r1, r3]
 8004c24:	68f9      	ldr	r1, [r7, #12]
 8004c26:	0013      	movs	r3, r2
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	189b      	adds	r3, r3, r2
 8004c2c:	18cb      	adds	r3, r1, r3
 8004c2e:	330e      	adds	r3, #14
 8004c30:	1c02      	adds	r2, r0, #0
 8004c32:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 8004c34:	2317      	movs	r3, #23
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	781b      	ldrb	r3, [r3, #0]
}
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b007      	add	sp, #28
 8004c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	08005ce4 	.word	0x08005ce4

08004c48 <WS28XX_Update>:
  * @param  *hLed: Pointer to WS28XX_hLedTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *hLed)
{
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b089      	sub	sp, #36	@ 0x24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  bool answer = true;
 8004c50:	231f      	movs	r3, #31
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2201      	movs	r2, #1
 8004c56:	701a      	strb	r2, [r3, #0]
  uint32_t i = 2;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(hLed);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7ff fe96 	bl	8004990 <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8004c64:	2316      	movs	r3, #22
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	2200      	movs	r2, #0
 8004c6a:	801a      	strh	r2, [r3, #0]
 8004c6c:	e042      	b.n	8004cf4 <WS28XX_Update+0xac>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	e036      	b.n	8004ce2 <WS28XX_Update+0x9a>
    {
      for (int b = 7; b >= 0 ; b--)
 8004c74:	2307      	movs	r3, #7
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	e02d      	b.n	8004cd6 <WS28XX_Update+0x8e>
      {
        if ((hLed->Pixel[pixel][rgb] & (1 << b)) == 0)
 8004c7a:	2316      	movs	r3, #22
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	881a      	ldrh	r2, [r3, #0]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	0013      	movs	r3, r2
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	189b      	adds	r3, r3, r2
 8004c88:	18ca      	adds	r2, r1, r3
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	18d3      	adds	r3, r2, r3
 8004c8e:	330c      	adds	r3, #12
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	001a      	movs	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	411a      	asrs	r2, r3
 8004c98:	0013      	movs	r3, r2
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d10a      	bne.n	8004cb6 <WS28XX_Update+0x6e>
        {
          hLed->Buffer[i] = hLed->Pulse0;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	88db      	ldrh	r3, [r3, #6]
 8004ca4:	b2d8      	uxtb	r0, r3
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	212a      	movs	r1, #42	@ 0x2a
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	18d3      	adds	r3, r2, r3
 8004cae:	185b      	adds	r3, r3, r1
 8004cb0:	1c02      	adds	r2, r0, #0
 8004cb2:	701a      	strb	r2, [r3, #0]
 8004cb4:	e009      	b.n	8004cca <WS28XX_Update+0x82>
        }
        else
        {
          hLed->Buffer[i] = hLed->Pulse1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	891b      	ldrh	r3, [r3, #8]
 8004cba:	b2d8      	uxtb	r0, r3
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	212a      	movs	r1, #42	@ 0x2a
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	18d3      	adds	r3, r2, r3
 8004cc4:	185b      	adds	r3, r3, r1
 8004cc6:	1c02      	adds	r2, r0, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	dace      	bge.n	8004c7a <WS28XX_Update+0x32>
    for (int rgb = 0; rgb < 3; rgb ++)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	ddc5      	ble.n	8004c74 <WS28XX_Update+0x2c>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8004ce8:	2116      	movs	r1, #22
 8004cea:	187b      	adds	r3, r7, r1
 8004cec:	881a      	ldrh	r2, [r3, #0]
 8004cee:	187b      	adds	r3, r7, r1
 8004cf0:	3201      	adds	r2, #1
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	895b      	ldrh	r3, [r3, #10]
 8004cf8:	2216      	movs	r2, #22
 8004cfa:	18ba      	adds	r2, r7, r2
 8004cfc:	8812      	ldrh	r2, [r2, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d3b5      	bcc.n	8004c6e <WS28XX_Update+0x26>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, (hLed->MaxPixel * 24) + 4) != HAL_OK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	791b      	ldrb	r3, [r3, #4]
 8004d0a:	001c      	movs	r4, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	332a      	adds	r3, #42	@ 0x2a
 8004d10:	001a      	movs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	895b      	ldrh	r3, [r3, #10]
 8004d16:	2118      	movs	r1, #24
 8004d18:	434b      	muls	r3, r1
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	0021      	movs	r1, r4
 8004d22:	f7fe f99b 	bl	800305c <HAL_TIM_PWM_Start_DMA>
 8004d26:	1e03      	subs	r3, r0, #0
 8004d28:	d003      	beq.n	8004d32 <WS28XX_Update+0xea>
  {
    answer = false;
 8004d2a:	231f      	movs	r3, #31
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]
  }
  WS28XX_UnLock(hLed);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7ff fe3e 	bl	80049b6 <WS28XX_UnLock>
  return answer;
 8004d3a:	231f      	movs	r3, #31
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	781b      	ldrb	r3, [r3, #0]
}
 8004d40:	0018      	movs	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b009      	add	sp, #36	@ 0x24
 8004d46:	bd90      	pop	{r4, r7, pc}

08004d48 <std>:
 8004d48:	2300      	movs	r3, #0
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	0004      	movs	r4, r0
 8004d4e:	6003      	str	r3, [r0, #0]
 8004d50:	6043      	str	r3, [r0, #4]
 8004d52:	6083      	str	r3, [r0, #8]
 8004d54:	8181      	strh	r1, [r0, #12]
 8004d56:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d58:	81c2      	strh	r2, [r0, #14]
 8004d5a:	6103      	str	r3, [r0, #16]
 8004d5c:	6143      	str	r3, [r0, #20]
 8004d5e:	6183      	str	r3, [r0, #24]
 8004d60:	0019      	movs	r1, r3
 8004d62:	2208      	movs	r2, #8
 8004d64:	305c      	adds	r0, #92	@ 0x5c
 8004d66:	f000 f90f 	bl	8004f88 <memset>
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <std+0x50>)
 8004d6c:	6224      	str	r4, [r4, #32]
 8004d6e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d70:	4b0a      	ldr	r3, [pc, #40]	@ (8004d9c <std+0x54>)
 8004d72:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d74:	4b0a      	ldr	r3, [pc, #40]	@ (8004da0 <std+0x58>)
 8004d76:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d78:	4b0a      	ldr	r3, [pc, #40]	@ (8004da4 <std+0x5c>)
 8004d7a:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004da8 <std+0x60>)
 8004d7e:	429c      	cmp	r4, r3
 8004d80:	d005      	beq.n	8004d8e <std+0x46>
 8004d82:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <std+0x64>)
 8004d84:	429c      	cmp	r4, r3
 8004d86:	d002      	beq.n	8004d8e <std+0x46>
 8004d88:	4b09      	ldr	r3, [pc, #36]	@ (8004db0 <std+0x68>)
 8004d8a:	429c      	cmp	r4, r3
 8004d8c:	d103      	bne.n	8004d96 <std+0x4e>
 8004d8e:	0020      	movs	r0, r4
 8004d90:	3058      	adds	r0, #88	@ 0x58
 8004d92:	f000 f979 	bl	8005088 <__retarget_lock_init_recursive>
 8004d96:	bd10      	pop	{r4, pc}
 8004d98:	08004ef1 	.word	0x08004ef1
 8004d9c:	08004f19 	.word	0x08004f19
 8004da0:	08004f51 	.word	0x08004f51
 8004da4:	08004f7d 	.word	0x08004f7d
 8004da8:	20000314 	.word	0x20000314
 8004dac:	2000037c 	.word	0x2000037c
 8004db0:	200003e4 	.word	0x200003e4

08004db4 <stdio_exit_handler>:
 8004db4:	b510      	push	{r4, lr}
 8004db6:	4a03      	ldr	r2, [pc, #12]	@ (8004dc4 <stdio_exit_handler+0x10>)
 8004db8:	4903      	ldr	r1, [pc, #12]	@ (8004dc8 <stdio_exit_handler+0x14>)
 8004dba:	4804      	ldr	r0, [pc, #16]	@ (8004dcc <stdio_exit_handler+0x18>)
 8004dbc:	f000 f86c 	bl	8004e98 <_fwalk_sglue>
 8004dc0:	bd10      	pop	{r4, pc}
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	2000000c 	.word	0x2000000c
 8004dc8:	08005919 	.word	0x08005919
 8004dcc:	2000001c 	.word	0x2000001c

08004dd0 <cleanup_stdio>:
 8004dd0:	6841      	ldr	r1, [r0, #4]
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <cleanup_stdio+0x30>)
 8004dd4:	b510      	push	{r4, lr}
 8004dd6:	0004      	movs	r4, r0
 8004dd8:	4299      	cmp	r1, r3
 8004dda:	d001      	beq.n	8004de0 <cleanup_stdio+0x10>
 8004ddc:	f000 fd9c 	bl	8005918 <_fflush_r>
 8004de0:	68a1      	ldr	r1, [r4, #8]
 8004de2:	4b08      	ldr	r3, [pc, #32]	@ (8004e04 <cleanup_stdio+0x34>)
 8004de4:	4299      	cmp	r1, r3
 8004de6:	d002      	beq.n	8004dee <cleanup_stdio+0x1e>
 8004de8:	0020      	movs	r0, r4
 8004dea:	f000 fd95 	bl	8005918 <_fflush_r>
 8004dee:	68e1      	ldr	r1, [r4, #12]
 8004df0:	4b05      	ldr	r3, [pc, #20]	@ (8004e08 <cleanup_stdio+0x38>)
 8004df2:	4299      	cmp	r1, r3
 8004df4:	d002      	beq.n	8004dfc <cleanup_stdio+0x2c>
 8004df6:	0020      	movs	r0, r4
 8004df8:	f000 fd8e 	bl	8005918 <_fflush_r>
 8004dfc:	bd10      	pop	{r4, pc}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	20000314 	.word	0x20000314
 8004e04:	2000037c 	.word	0x2000037c
 8004e08:	200003e4 	.word	0x200003e4

08004e0c <global_stdio_init.part.0>:
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	4b09      	ldr	r3, [pc, #36]	@ (8004e34 <global_stdio_init.part.0+0x28>)
 8004e10:	4a09      	ldr	r2, [pc, #36]	@ (8004e38 <global_stdio_init.part.0+0x2c>)
 8004e12:	2104      	movs	r1, #4
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	4809      	ldr	r0, [pc, #36]	@ (8004e3c <global_stdio_init.part.0+0x30>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f7ff ff95 	bl	8004d48 <std>
 8004e1e:	2201      	movs	r2, #1
 8004e20:	2109      	movs	r1, #9
 8004e22:	4807      	ldr	r0, [pc, #28]	@ (8004e40 <global_stdio_init.part.0+0x34>)
 8004e24:	f7ff ff90 	bl	8004d48 <std>
 8004e28:	2202      	movs	r2, #2
 8004e2a:	2112      	movs	r1, #18
 8004e2c:	4805      	ldr	r0, [pc, #20]	@ (8004e44 <global_stdio_init.part.0+0x38>)
 8004e2e:	f7ff ff8b 	bl	8004d48 <std>
 8004e32:	bd10      	pop	{r4, pc}
 8004e34:	2000044c 	.word	0x2000044c
 8004e38:	08004db5 	.word	0x08004db5
 8004e3c:	20000314 	.word	0x20000314
 8004e40:	2000037c 	.word	0x2000037c
 8004e44:	200003e4 	.word	0x200003e4

08004e48 <__sfp_lock_acquire>:
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	4802      	ldr	r0, [pc, #8]	@ (8004e54 <__sfp_lock_acquire+0xc>)
 8004e4c:	f000 f91d 	bl	800508a <__retarget_lock_acquire_recursive>
 8004e50:	bd10      	pop	{r4, pc}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	20000455 	.word	0x20000455

08004e58 <__sfp_lock_release>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	4802      	ldr	r0, [pc, #8]	@ (8004e64 <__sfp_lock_release+0xc>)
 8004e5c:	f000 f916 	bl	800508c <__retarget_lock_release_recursive>
 8004e60:	bd10      	pop	{r4, pc}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	20000455 	.word	0x20000455

08004e68 <__sinit>:
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	0004      	movs	r4, r0
 8004e6c:	f7ff ffec 	bl	8004e48 <__sfp_lock_acquire>
 8004e70:	6a23      	ldr	r3, [r4, #32]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <__sinit+0x14>
 8004e76:	f7ff ffef 	bl	8004e58 <__sfp_lock_release>
 8004e7a:	bd10      	pop	{r4, pc}
 8004e7c:	4b04      	ldr	r3, [pc, #16]	@ (8004e90 <__sinit+0x28>)
 8004e7e:	6223      	str	r3, [r4, #32]
 8004e80:	4b04      	ldr	r3, [pc, #16]	@ (8004e94 <__sinit+0x2c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f6      	bne.n	8004e76 <__sinit+0xe>
 8004e88:	f7ff ffc0 	bl	8004e0c <global_stdio_init.part.0>
 8004e8c:	e7f3      	b.n	8004e76 <__sinit+0xe>
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	08004dd1 	.word	0x08004dd1
 8004e94:	2000044c 	.word	0x2000044c

08004e98 <_fwalk_sglue>:
 8004e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e9a:	0014      	movs	r4, r2
 8004e9c:	2600      	movs	r6, #0
 8004e9e:	9000      	str	r0, [sp, #0]
 8004ea0:	9101      	str	r1, [sp, #4]
 8004ea2:	68a5      	ldr	r5, [r4, #8]
 8004ea4:	6867      	ldr	r7, [r4, #4]
 8004ea6:	3f01      	subs	r7, #1
 8004ea8:	d504      	bpl.n	8004eb4 <_fwalk_sglue+0x1c>
 8004eaa:	6824      	ldr	r4, [r4, #0]
 8004eac:	2c00      	cmp	r4, #0
 8004eae:	d1f8      	bne.n	8004ea2 <_fwalk_sglue+0xa>
 8004eb0:	0030      	movs	r0, r6
 8004eb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004eb4:	89ab      	ldrh	r3, [r5, #12]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d908      	bls.n	8004ecc <_fwalk_sglue+0x34>
 8004eba:	220e      	movs	r2, #14
 8004ebc:	5eab      	ldrsh	r3, [r5, r2]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	d004      	beq.n	8004ecc <_fwalk_sglue+0x34>
 8004ec2:	0029      	movs	r1, r5
 8004ec4:	9800      	ldr	r0, [sp, #0]
 8004ec6:	9b01      	ldr	r3, [sp, #4]
 8004ec8:	4798      	blx	r3
 8004eca:	4306      	orrs	r6, r0
 8004ecc:	3568      	adds	r5, #104	@ 0x68
 8004ece:	e7ea      	b.n	8004ea6 <_fwalk_sglue+0xe>

08004ed0 <iprintf>:
 8004ed0:	b40f      	push	{r0, r1, r2, r3}
 8004ed2:	b507      	push	{r0, r1, r2, lr}
 8004ed4:	4905      	ldr	r1, [pc, #20]	@ (8004eec <iprintf+0x1c>)
 8004ed6:	ab04      	add	r3, sp, #16
 8004ed8:	6808      	ldr	r0, [r1, #0]
 8004eda:	cb04      	ldmia	r3!, {r2}
 8004edc:	6881      	ldr	r1, [r0, #8]
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	f000 f9fa 	bl	80052d8 <_vfiprintf_r>
 8004ee4:	b003      	add	sp, #12
 8004ee6:	bc08      	pop	{r3}
 8004ee8:	b004      	add	sp, #16
 8004eea:	4718      	bx	r3
 8004eec:	20000018 	.word	0x20000018

08004ef0 <__sread>:
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	000c      	movs	r4, r1
 8004ef4:	250e      	movs	r5, #14
 8004ef6:	5f49      	ldrsh	r1, [r1, r5]
 8004ef8:	f000 f874 	bl	8004fe4 <_read_r>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	db03      	blt.n	8004f08 <__sread+0x18>
 8004f00:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004f02:	181b      	adds	r3, r3, r0
 8004f04:	6563      	str	r3, [r4, #84]	@ 0x54
 8004f06:	bd70      	pop	{r4, r5, r6, pc}
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	4a02      	ldr	r2, [pc, #8]	@ (8004f14 <__sread+0x24>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	81a3      	strh	r3, [r4, #12]
 8004f10:	e7f9      	b.n	8004f06 <__sread+0x16>
 8004f12:	46c0      	nop			@ (mov r8, r8)
 8004f14:	ffffefff 	.word	0xffffefff

08004f18 <__swrite>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	001f      	movs	r7, r3
 8004f1c:	898b      	ldrh	r3, [r1, #12]
 8004f1e:	0005      	movs	r5, r0
 8004f20:	000c      	movs	r4, r1
 8004f22:	0016      	movs	r6, r2
 8004f24:	05db      	lsls	r3, r3, #23
 8004f26:	d505      	bpl.n	8004f34 <__swrite+0x1c>
 8004f28:	230e      	movs	r3, #14
 8004f2a:	5ec9      	ldrsh	r1, [r1, r3]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2302      	movs	r3, #2
 8004f30:	f000 f844 	bl	8004fbc <_lseek_r>
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	4a05      	ldr	r2, [pc, #20]	@ (8004f4c <__swrite+0x34>)
 8004f38:	0028      	movs	r0, r5
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	81a3      	strh	r3, [r4, #12]
 8004f3e:	0032      	movs	r2, r6
 8004f40:	230e      	movs	r3, #14
 8004f42:	5ee1      	ldrsh	r1, [r4, r3]
 8004f44:	003b      	movs	r3, r7
 8004f46:	f000 f861 	bl	800500c <_write_r>
 8004f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f4c:	ffffefff 	.word	0xffffefff

08004f50 <__sseek>:
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	000c      	movs	r4, r1
 8004f54:	250e      	movs	r5, #14
 8004f56:	5f49      	ldrsh	r1, [r1, r5]
 8004f58:	f000 f830 	bl	8004fbc <_lseek_r>
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	1c42      	adds	r2, r0, #1
 8004f60:	d103      	bne.n	8004f6a <__sseek+0x1a>
 8004f62:	4a05      	ldr	r2, [pc, #20]	@ (8004f78 <__sseek+0x28>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	bd70      	pop	{r4, r5, r6, pc}
 8004f6a:	2280      	movs	r2, #128	@ 0x80
 8004f6c:	0152      	lsls	r2, r2, #5
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	81a3      	strh	r3, [r4, #12]
 8004f72:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f74:	e7f8      	b.n	8004f68 <__sseek+0x18>
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	ffffefff 	.word	0xffffefff

08004f7c <__sclose>:
 8004f7c:	b510      	push	{r4, lr}
 8004f7e:	230e      	movs	r3, #14
 8004f80:	5ec9      	ldrsh	r1, [r1, r3]
 8004f82:	f000 f809 	bl	8004f98 <_close_r>
 8004f86:	bd10      	pop	{r4, pc}

08004f88 <memset>:
 8004f88:	0003      	movs	r3, r0
 8004f8a:	1882      	adds	r2, r0, r2
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d100      	bne.n	8004f92 <memset+0xa>
 8004f90:	4770      	bx	lr
 8004f92:	7019      	strb	r1, [r3, #0]
 8004f94:	3301      	adds	r3, #1
 8004f96:	e7f9      	b.n	8004f8c <memset+0x4>

08004f98 <_close_r>:
 8004f98:	2300      	movs	r3, #0
 8004f9a:	b570      	push	{r4, r5, r6, lr}
 8004f9c:	4d06      	ldr	r5, [pc, #24]	@ (8004fb8 <_close_r+0x20>)
 8004f9e:	0004      	movs	r4, r0
 8004fa0:	0008      	movs	r0, r1
 8004fa2:	602b      	str	r3, [r5, #0]
 8004fa4:	f7fc fced 	bl	8001982 <_close>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d103      	bne.n	8004fb4 <_close_r+0x1c>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d000      	beq.n	8004fb4 <_close_r+0x1c>
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	bd70      	pop	{r4, r5, r6, pc}
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	20000450 	.word	0x20000450

08004fbc <_lseek_r>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	0004      	movs	r4, r0
 8004fc0:	0008      	movs	r0, r1
 8004fc2:	0011      	movs	r1, r2
 8004fc4:	001a      	movs	r2, r3
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4d05      	ldr	r5, [pc, #20]	@ (8004fe0 <_lseek_r+0x24>)
 8004fca:	602b      	str	r3, [r5, #0]
 8004fcc:	f7fc fcfa 	bl	80019c4 <_lseek>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d103      	bne.n	8004fdc <_lseek_r+0x20>
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d000      	beq.n	8004fdc <_lseek_r+0x20>
 8004fda:	6023      	str	r3, [r4, #0]
 8004fdc:	bd70      	pop	{r4, r5, r6, pc}
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	20000450 	.word	0x20000450

08004fe4 <_read_r>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	0004      	movs	r4, r0
 8004fe8:	0008      	movs	r0, r1
 8004fea:	0011      	movs	r1, r2
 8004fec:	001a      	movs	r2, r3
 8004fee:	2300      	movs	r3, #0
 8004ff0:	4d05      	ldr	r5, [pc, #20]	@ (8005008 <_read_r+0x24>)
 8004ff2:	602b      	str	r3, [r5, #0]
 8004ff4:	f7fc fca8 	bl	8001948 <_read>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d103      	bne.n	8005004 <_read_r+0x20>
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d000      	beq.n	8005004 <_read_r+0x20>
 8005002:	6023      	str	r3, [r4, #0]
 8005004:	bd70      	pop	{r4, r5, r6, pc}
 8005006:	46c0      	nop			@ (mov r8, r8)
 8005008:	20000450 	.word	0x20000450

0800500c <_write_r>:
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	0004      	movs	r4, r0
 8005010:	0008      	movs	r0, r1
 8005012:	0011      	movs	r1, r2
 8005014:	001a      	movs	r2, r3
 8005016:	2300      	movs	r3, #0
 8005018:	4d05      	ldr	r5, [pc, #20]	@ (8005030 <_write_r+0x24>)
 800501a:	602b      	str	r3, [r5, #0]
 800501c:	f7fc faa2 	bl	8001564 <_write>
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	d103      	bne.n	800502c <_write_r+0x20>
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d000      	beq.n	800502c <_write_r+0x20>
 800502a:	6023      	str	r3, [r4, #0]
 800502c:	bd70      	pop	{r4, r5, r6, pc}
 800502e:	46c0      	nop			@ (mov r8, r8)
 8005030:	20000450 	.word	0x20000450

08005034 <__errno>:
 8005034:	4b01      	ldr	r3, [pc, #4]	@ (800503c <__errno+0x8>)
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	4770      	bx	lr
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	20000018 	.word	0x20000018

08005040 <__libc_init_array>:
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	2600      	movs	r6, #0
 8005044:	4c0c      	ldr	r4, [pc, #48]	@ (8005078 <__libc_init_array+0x38>)
 8005046:	4d0d      	ldr	r5, [pc, #52]	@ (800507c <__libc_init_array+0x3c>)
 8005048:	1b64      	subs	r4, r4, r5
 800504a:	10a4      	asrs	r4, r4, #2
 800504c:	42a6      	cmp	r6, r4
 800504e:	d109      	bne.n	8005064 <__libc_init_array+0x24>
 8005050:	2600      	movs	r6, #0
 8005052:	f000 fddb 	bl	8005c0c <_init>
 8005056:	4c0a      	ldr	r4, [pc, #40]	@ (8005080 <__libc_init_array+0x40>)
 8005058:	4d0a      	ldr	r5, [pc, #40]	@ (8005084 <__libc_init_array+0x44>)
 800505a:	1b64      	subs	r4, r4, r5
 800505c:	10a4      	asrs	r4, r4, #2
 800505e:	42a6      	cmp	r6, r4
 8005060:	d105      	bne.n	800506e <__libc_init_array+0x2e>
 8005062:	bd70      	pop	{r4, r5, r6, pc}
 8005064:	00b3      	lsls	r3, r6, #2
 8005066:	58eb      	ldr	r3, [r5, r3]
 8005068:	4798      	blx	r3
 800506a:	3601      	adds	r6, #1
 800506c:	e7ee      	b.n	800504c <__libc_init_array+0xc>
 800506e:	00b3      	lsls	r3, r6, #2
 8005070:	58eb      	ldr	r3, [r5, r3]
 8005072:	4798      	blx	r3
 8005074:	3601      	adds	r6, #1
 8005076:	e7f2      	b.n	800505e <__libc_init_array+0x1e>
 8005078:	08005e18 	.word	0x08005e18
 800507c:	08005e18 	.word	0x08005e18
 8005080:	08005e1c 	.word	0x08005e1c
 8005084:	08005e18 	.word	0x08005e18

08005088 <__retarget_lock_init_recursive>:
 8005088:	4770      	bx	lr

0800508a <__retarget_lock_acquire_recursive>:
 800508a:	4770      	bx	lr

0800508c <__retarget_lock_release_recursive>:
 800508c:	4770      	bx	lr
	...

08005090 <_free_r>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	0005      	movs	r5, r0
 8005094:	1e0c      	subs	r4, r1, #0
 8005096:	d010      	beq.n	80050ba <_free_r+0x2a>
 8005098:	3c04      	subs	r4, #4
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	da00      	bge.n	80050a2 <_free_r+0x12>
 80050a0:	18e4      	adds	r4, r4, r3
 80050a2:	0028      	movs	r0, r5
 80050a4:	f000 f8e0 	bl	8005268 <__malloc_lock>
 80050a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005120 <_free_r+0x90>)
 80050aa:	6813      	ldr	r3, [r2, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d105      	bne.n	80050bc <_free_r+0x2c>
 80050b0:	6063      	str	r3, [r4, #4]
 80050b2:	6014      	str	r4, [r2, #0]
 80050b4:	0028      	movs	r0, r5
 80050b6:	f000 f8df 	bl	8005278 <__malloc_unlock>
 80050ba:	bd70      	pop	{r4, r5, r6, pc}
 80050bc:	42a3      	cmp	r3, r4
 80050be:	d908      	bls.n	80050d2 <_free_r+0x42>
 80050c0:	6820      	ldr	r0, [r4, #0]
 80050c2:	1821      	adds	r1, r4, r0
 80050c4:	428b      	cmp	r3, r1
 80050c6:	d1f3      	bne.n	80050b0 <_free_r+0x20>
 80050c8:	6819      	ldr	r1, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	1809      	adds	r1, r1, r0
 80050ce:	6021      	str	r1, [r4, #0]
 80050d0:	e7ee      	b.n	80050b0 <_free_r+0x20>
 80050d2:	001a      	movs	r2, r3
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <_free_r+0x4e>
 80050da:	42a3      	cmp	r3, r4
 80050dc:	d9f9      	bls.n	80050d2 <_free_r+0x42>
 80050de:	6811      	ldr	r1, [r2, #0]
 80050e0:	1850      	adds	r0, r2, r1
 80050e2:	42a0      	cmp	r0, r4
 80050e4:	d10b      	bne.n	80050fe <_free_r+0x6e>
 80050e6:	6820      	ldr	r0, [r4, #0]
 80050e8:	1809      	adds	r1, r1, r0
 80050ea:	1850      	adds	r0, r2, r1
 80050ec:	6011      	str	r1, [r2, #0]
 80050ee:	4283      	cmp	r3, r0
 80050f0:	d1e0      	bne.n	80050b4 <_free_r+0x24>
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	1841      	adds	r1, r0, r1
 80050f8:	6011      	str	r1, [r2, #0]
 80050fa:	6053      	str	r3, [r2, #4]
 80050fc:	e7da      	b.n	80050b4 <_free_r+0x24>
 80050fe:	42a0      	cmp	r0, r4
 8005100:	d902      	bls.n	8005108 <_free_r+0x78>
 8005102:	230c      	movs	r3, #12
 8005104:	602b      	str	r3, [r5, #0]
 8005106:	e7d5      	b.n	80050b4 <_free_r+0x24>
 8005108:	6820      	ldr	r0, [r4, #0]
 800510a:	1821      	adds	r1, r4, r0
 800510c:	428b      	cmp	r3, r1
 800510e:	d103      	bne.n	8005118 <_free_r+0x88>
 8005110:	6819      	ldr	r1, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	1809      	adds	r1, r1, r0
 8005116:	6021      	str	r1, [r4, #0]
 8005118:	6063      	str	r3, [r4, #4]
 800511a:	6054      	str	r4, [r2, #4]
 800511c:	e7ca      	b.n	80050b4 <_free_r+0x24>
 800511e:	46c0      	nop			@ (mov r8, r8)
 8005120:	2000045c 	.word	0x2000045c

08005124 <sbrk_aligned>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	4e0f      	ldr	r6, [pc, #60]	@ (8005164 <sbrk_aligned+0x40>)
 8005128:	000d      	movs	r5, r1
 800512a:	6831      	ldr	r1, [r6, #0]
 800512c:	0004      	movs	r4, r0
 800512e:	2900      	cmp	r1, #0
 8005130:	d102      	bne.n	8005138 <sbrk_aligned+0x14>
 8005132:	f000 fcbd 	bl	8005ab0 <_sbrk_r>
 8005136:	6030      	str	r0, [r6, #0]
 8005138:	0029      	movs	r1, r5
 800513a:	0020      	movs	r0, r4
 800513c:	f000 fcb8 	bl	8005ab0 <_sbrk_r>
 8005140:	1c43      	adds	r3, r0, #1
 8005142:	d103      	bne.n	800514c <sbrk_aligned+0x28>
 8005144:	2501      	movs	r5, #1
 8005146:	426d      	negs	r5, r5
 8005148:	0028      	movs	r0, r5
 800514a:	bd70      	pop	{r4, r5, r6, pc}
 800514c:	2303      	movs	r3, #3
 800514e:	1cc5      	adds	r5, r0, #3
 8005150:	439d      	bics	r5, r3
 8005152:	42a8      	cmp	r0, r5
 8005154:	d0f8      	beq.n	8005148 <sbrk_aligned+0x24>
 8005156:	1a29      	subs	r1, r5, r0
 8005158:	0020      	movs	r0, r4
 800515a:	f000 fca9 	bl	8005ab0 <_sbrk_r>
 800515e:	3001      	adds	r0, #1
 8005160:	d1f2      	bne.n	8005148 <sbrk_aligned+0x24>
 8005162:	e7ef      	b.n	8005144 <sbrk_aligned+0x20>
 8005164:	20000458 	.word	0x20000458

08005168 <_malloc_r>:
 8005168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800516a:	2203      	movs	r2, #3
 800516c:	1ccb      	adds	r3, r1, #3
 800516e:	4393      	bics	r3, r2
 8005170:	3308      	adds	r3, #8
 8005172:	0005      	movs	r5, r0
 8005174:	001f      	movs	r7, r3
 8005176:	2b0c      	cmp	r3, #12
 8005178:	d234      	bcs.n	80051e4 <_malloc_r+0x7c>
 800517a:	270c      	movs	r7, #12
 800517c:	42b9      	cmp	r1, r7
 800517e:	d833      	bhi.n	80051e8 <_malloc_r+0x80>
 8005180:	0028      	movs	r0, r5
 8005182:	f000 f871 	bl	8005268 <__malloc_lock>
 8005186:	4e37      	ldr	r6, [pc, #220]	@ (8005264 <_malloc_r+0xfc>)
 8005188:	6833      	ldr	r3, [r6, #0]
 800518a:	001c      	movs	r4, r3
 800518c:	2c00      	cmp	r4, #0
 800518e:	d12f      	bne.n	80051f0 <_malloc_r+0x88>
 8005190:	0039      	movs	r1, r7
 8005192:	0028      	movs	r0, r5
 8005194:	f7ff ffc6 	bl	8005124 <sbrk_aligned>
 8005198:	0004      	movs	r4, r0
 800519a:	1c43      	adds	r3, r0, #1
 800519c:	d15f      	bne.n	800525e <_malloc_r+0xf6>
 800519e:	6834      	ldr	r4, [r6, #0]
 80051a0:	9400      	str	r4, [sp, #0]
 80051a2:	9b00      	ldr	r3, [sp, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d14a      	bne.n	800523e <_malloc_r+0xd6>
 80051a8:	2c00      	cmp	r4, #0
 80051aa:	d052      	beq.n	8005252 <_malloc_r+0xea>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	0028      	movs	r0, r5
 80051b0:	18e3      	adds	r3, r4, r3
 80051b2:	9900      	ldr	r1, [sp, #0]
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	f000 fc7b 	bl	8005ab0 <_sbrk_r>
 80051ba:	9b01      	ldr	r3, [sp, #4]
 80051bc:	4283      	cmp	r3, r0
 80051be:	d148      	bne.n	8005252 <_malloc_r+0xea>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	0028      	movs	r0, r5
 80051c4:	1aff      	subs	r7, r7, r3
 80051c6:	0039      	movs	r1, r7
 80051c8:	f7ff ffac 	bl	8005124 <sbrk_aligned>
 80051cc:	3001      	adds	r0, #1
 80051ce:	d040      	beq.n	8005252 <_malloc_r+0xea>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	19db      	adds	r3, r3, r7
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	6833      	ldr	r3, [r6, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	2a00      	cmp	r2, #0
 80051dc:	d133      	bne.n	8005246 <_malloc_r+0xde>
 80051de:	9b00      	ldr	r3, [sp, #0]
 80051e0:	6033      	str	r3, [r6, #0]
 80051e2:	e019      	b.n	8005218 <_malloc_r+0xb0>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	dac9      	bge.n	800517c <_malloc_r+0x14>
 80051e8:	230c      	movs	r3, #12
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	2000      	movs	r0, #0
 80051ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051f0:	6821      	ldr	r1, [r4, #0]
 80051f2:	1bc9      	subs	r1, r1, r7
 80051f4:	d420      	bmi.n	8005238 <_malloc_r+0xd0>
 80051f6:	290b      	cmp	r1, #11
 80051f8:	d90a      	bls.n	8005210 <_malloc_r+0xa8>
 80051fa:	19e2      	adds	r2, r4, r7
 80051fc:	6027      	str	r7, [r4, #0]
 80051fe:	42a3      	cmp	r3, r4
 8005200:	d104      	bne.n	800520c <_malloc_r+0xa4>
 8005202:	6032      	str	r2, [r6, #0]
 8005204:	6863      	ldr	r3, [r4, #4]
 8005206:	6011      	str	r1, [r2, #0]
 8005208:	6053      	str	r3, [r2, #4]
 800520a:	e005      	b.n	8005218 <_malloc_r+0xb0>
 800520c:	605a      	str	r2, [r3, #4]
 800520e:	e7f9      	b.n	8005204 <_malloc_r+0x9c>
 8005210:	6862      	ldr	r2, [r4, #4]
 8005212:	42a3      	cmp	r3, r4
 8005214:	d10e      	bne.n	8005234 <_malloc_r+0xcc>
 8005216:	6032      	str	r2, [r6, #0]
 8005218:	0028      	movs	r0, r5
 800521a:	f000 f82d 	bl	8005278 <__malloc_unlock>
 800521e:	0020      	movs	r0, r4
 8005220:	2207      	movs	r2, #7
 8005222:	300b      	adds	r0, #11
 8005224:	1d23      	adds	r3, r4, #4
 8005226:	4390      	bics	r0, r2
 8005228:	1ac2      	subs	r2, r0, r3
 800522a:	4298      	cmp	r0, r3
 800522c:	d0df      	beq.n	80051ee <_malloc_r+0x86>
 800522e:	1a1b      	subs	r3, r3, r0
 8005230:	50a3      	str	r3, [r4, r2]
 8005232:	e7dc      	b.n	80051ee <_malloc_r+0x86>
 8005234:	605a      	str	r2, [r3, #4]
 8005236:	e7ef      	b.n	8005218 <_malloc_r+0xb0>
 8005238:	0023      	movs	r3, r4
 800523a:	6864      	ldr	r4, [r4, #4]
 800523c:	e7a6      	b.n	800518c <_malloc_r+0x24>
 800523e:	9c00      	ldr	r4, [sp, #0]
 8005240:	6863      	ldr	r3, [r4, #4]
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	e7ad      	b.n	80051a2 <_malloc_r+0x3a>
 8005246:	001a      	movs	r2, r3
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	42a3      	cmp	r3, r4
 800524c:	d1fb      	bne.n	8005246 <_malloc_r+0xde>
 800524e:	2300      	movs	r3, #0
 8005250:	e7da      	b.n	8005208 <_malloc_r+0xa0>
 8005252:	230c      	movs	r3, #12
 8005254:	0028      	movs	r0, r5
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	f000 f80e 	bl	8005278 <__malloc_unlock>
 800525c:	e7c6      	b.n	80051ec <_malloc_r+0x84>
 800525e:	6007      	str	r7, [r0, #0]
 8005260:	e7da      	b.n	8005218 <_malloc_r+0xb0>
 8005262:	46c0      	nop			@ (mov r8, r8)
 8005264:	2000045c 	.word	0x2000045c

08005268 <__malloc_lock>:
 8005268:	b510      	push	{r4, lr}
 800526a:	4802      	ldr	r0, [pc, #8]	@ (8005274 <__malloc_lock+0xc>)
 800526c:	f7ff ff0d 	bl	800508a <__retarget_lock_acquire_recursive>
 8005270:	bd10      	pop	{r4, pc}
 8005272:	46c0      	nop			@ (mov r8, r8)
 8005274:	20000454 	.word	0x20000454

08005278 <__malloc_unlock>:
 8005278:	b510      	push	{r4, lr}
 800527a:	4802      	ldr	r0, [pc, #8]	@ (8005284 <__malloc_unlock+0xc>)
 800527c:	f7ff ff06 	bl	800508c <__retarget_lock_release_recursive>
 8005280:	bd10      	pop	{r4, pc}
 8005282:	46c0      	nop			@ (mov r8, r8)
 8005284:	20000454 	.word	0x20000454

08005288 <__sfputc_r>:
 8005288:	6893      	ldr	r3, [r2, #8]
 800528a:	b510      	push	{r4, lr}
 800528c:	3b01      	subs	r3, #1
 800528e:	6093      	str	r3, [r2, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	da04      	bge.n	800529e <__sfputc_r+0x16>
 8005294:	6994      	ldr	r4, [r2, #24]
 8005296:	42a3      	cmp	r3, r4
 8005298:	db07      	blt.n	80052aa <__sfputc_r+0x22>
 800529a:	290a      	cmp	r1, #10
 800529c:	d005      	beq.n	80052aa <__sfputc_r+0x22>
 800529e:	6813      	ldr	r3, [r2, #0]
 80052a0:	1c58      	adds	r0, r3, #1
 80052a2:	6010      	str	r0, [r2, #0]
 80052a4:	7019      	strb	r1, [r3, #0]
 80052a6:	0008      	movs	r0, r1
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	f000 fb60 	bl	800596e <__swbuf_r>
 80052ae:	0001      	movs	r1, r0
 80052b0:	e7f9      	b.n	80052a6 <__sfputc_r+0x1e>

080052b2 <__sfputs_r>:
 80052b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b4:	0006      	movs	r6, r0
 80052b6:	000f      	movs	r7, r1
 80052b8:	0014      	movs	r4, r2
 80052ba:	18d5      	adds	r5, r2, r3
 80052bc:	42ac      	cmp	r4, r5
 80052be:	d101      	bne.n	80052c4 <__sfputs_r+0x12>
 80052c0:	2000      	movs	r0, #0
 80052c2:	e007      	b.n	80052d4 <__sfputs_r+0x22>
 80052c4:	7821      	ldrb	r1, [r4, #0]
 80052c6:	003a      	movs	r2, r7
 80052c8:	0030      	movs	r0, r6
 80052ca:	f7ff ffdd 	bl	8005288 <__sfputc_r>
 80052ce:	3401      	adds	r4, #1
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d1f3      	bne.n	80052bc <__sfputs_r+0xa>
 80052d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052d8 <_vfiprintf_r>:
 80052d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052da:	b0a1      	sub	sp, #132	@ 0x84
 80052dc:	000f      	movs	r7, r1
 80052de:	0015      	movs	r5, r2
 80052e0:	001e      	movs	r6, r3
 80052e2:	9003      	str	r0, [sp, #12]
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d004      	beq.n	80052f2 <_vfiprintf_r+0x1a>
 80052e8:	6a03      	ldr	r3, [r0, #32]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <_vfiprintf_r+0x1a>
 80052ee:	f7ff fdbb 	bl	8004e68 <__sinit>
 80052f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052f4:	07db      	lsls	r3, r3, #31
 80052f6:	d405      	bmi.n	8005304 <_vfiprintf_r+0x2c>
 80052f8:	89bb      	ldrh	r3, [r7, #12]
 80052fa:	059b      	lsls	r3, r3, #22
 80052fc:	d402      	bmi.n	8005304 <_vfiprintf_r+0x2c>
 80052fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005300:	f7ff fec3 	bl	800508a <__retarget_lock_acquire_recursive>
 8005304:	89bb      	ldrh	r3, [r7, #12]
 8005306:	071b      	lsls	r3, r3, #28
 8005308:	d502      	bpl.n	8005310 <_vfiprintf_r+0x38>
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d113      	bne.n	8005338 <_vfiprintf_r+0x60>
 8005310:	0039      	movs	r1, r7
 8005312:	9803      	ldr	r0, [sp, #12]
 8005314:	f000 fb6e 	bl	80059f4 <__swsetup_r>
 8005318:	2800      	cmp	r0, #0
 800531a:	d00d      	beq.n	8005338 <_vfiprintf_r+0x60>
 800531c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800531e:	07db      	lsls	r3, r3, #31
 8005320:	d503      	bpl.n	800532a <_vfiprintf_r+0x52>
 8005322:	2001      	movs	r0, #1
 8005324:	4240      	negs	r0, r0
 8005326:	b021      	add	sp, #132	@ 0x84
 8005328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800532a:	89bb      	ldrh	r3, [r7, #12]
 800532c:	059b      	lsls	r3, r3, #22
 800532e:	d4f8      	bmi.n	8005322 <_vfiprintf_r+0x4a>
 8005330:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005332:	f7ff feab 	bl	800508c <__retarget_lock_release_recursive>
 8005336:	e7f4      	b.n	8005322 <_vfiprintf_r+0x4a>
 8005338:	2300      	movs	r3, #0
 800533a:	ac08      	add	r4, sp, #32
 800533c:	6163      	str	r3, [r4, #20]
 800533e:	3320      	adds	r3, #32
 8005340:	7663      	strb	r3, [r4, #25]
 8005342:	3310      	adds	r3, #16
 8005344:	76a3      	strb	r3, [r4, #26]
 8005346:	9607      	str	r6, [sp, #28]
 8005348:	002e      	movs	r6, r5
 800534a:	7833      	ldrb	r3, [r6, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <_vfiprintf_r+0x7c>
 8005350:	2b25      	cmp	r3, #37	@ 0x25
 8005352:	d148      	bne.n	80053e6 <_vfiprintf_r+0x10e>
 8005354:	1b73      	subs	r3, r6, r5
 8005356:	9305      	str	r3, [sp, #20]
 8005358:	42ae      	cmp	r6, r5
 800535a:	d00b      	beq.n	8005374 <_vfiprintf_r+0x9c>
 800535c:	002a      	movs	r2, r5
 800535e:	0039      	movs	r1, r7
 8005360:	9803      	ldr	r0, [sp, #12]
 8005362:	f7ff ffa6 	bl	80052b2 <__sfputs_r>
 8005366:	3001      	adds	r0, #1
 8005368:	d100      	bne.n	800536c <_vfiprintf_r+0x94>
 800536a:	e0ae      	b.n	80054ca <_vfiprintf_r+0x1f2>
 800536c:	6963      	ldr	r3, [r4, #20]
 800536e:	9a05      	ldr	r2, [sp, #20]
 8005370:	189b      	adds	r3, r3, r2
 8005372:	6163      	str	r3, [r4, #20]
 8005374:	7833      	ldrb	r3, [r6, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d100      	bne.n	800537c <_vfiprintf_r+0xa4>
 800537a:	e0a6      	b.n	80054ca <_vfiprintf_r+0x1f2>
 800537c:	2201      	movs	r2, #1
 800537e:	2300      	movs	r3, #0
 8005380:	4252      	negs	r2, r2
 8005382:	6062      	str	r2, [r4, #4]
 8005384:	a904      	add	r1, sp, #16
 8005386:	3254      	adds	r2, #84	@ 0x54
 8005388:	1852      	adds	r2, r2, r1
 800538a:	1c75      	adds	r5, r6, #1
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	60e3      	str	r3, [r4, #12]
 8005390:	60a3      	str	r3, [r4, #8]
 8005392:	7013      	strb	r3, [r2, #0]
 8005394:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005396:	4b59      	ldr	r3, [pc, #356]	@ (80054fc <_vfiprintf_r+0x224>)
 8005398:	2205      	movs	r2, #5
 800539a:	0018      	movs	r0, r3
 800539c:	7829      	ldrb	r1, [r5, #0]
 800539e:	9305      	str	r3, [sp, #20]
 80053a0:	f000 fb98 	bl	8005ad4 <memchr>
 80053a4:	1c6e      	adds	r6, r5, #1
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d11f      	bne.n	80053ea <_vfiprintf_r+0x112>
 80053aa:	6822      	ldr	r2, [r4, #0]
 80053ac:	06d3      	lsls	r3, r2, #27
 80053ae:	d504      	bpl.n	80053ba <_vfiprintf_r+0xe2>
 80053b0:	2353      	movs	r3, #83	@ 0x53
 80053b2:	a904      	add	r1, sp, #16
 80053b4:	185b      	adds	r3, r3, r1
 80053b6:	2120      	movs	r1, #32
 80053b8:	7019      	strb	r1, [r3, #0]
 80053ba:	0713      	lsls	r3, r2, #28
 80053bc:	d504      	bpl.n	80053c8 <_vfiprintf_r+0xf0>
 80053be:	2353      	movs	r3, #83	@ 0x53
 80053c0:	a904      	add	r1, sp, #16
 80053c2:	185b      	adds	r3, r3, r1
 80053c4:	212b      	movs	r1, #43	@ 0x2b
 80053c6:	7019      	strb	r1, [r3, #0]
 80053c8:	782b      	ldrb	r3, [r5, #0]
 80053ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80053cc:	d016      	beq.n	80053fc <_vfiprintf_r+0x124>
 80053ce:	002e      	movs	r6, r5
 80053d0:	2100      	movs	r1, #0
 80053d2:	200a      	movs	r0, #10
 80053d4:	68e3      	ldr	r3, [r4, #12]
 80053d6:	7832      	ldrb	r2, [r6, #0]
 80053d8:	1c75      	adds	r5, r6, #1
 80053da:	3a30      	subs	r2, #48	@ 0x30
 80053dc:	2a09      	cmp	r2, #9
 80053de:	d950      	bls.n	8005482 <_vfiprintf_r+0x1aa>
 80053e0:	2900      	cmp	r1, #0
 80053e2:	d111      	bne.n	8005408 <_vfiprintf_r+0x130>
 80053e4:	e017      	b.n	8005416 <_vfiprintf_r+0x13e>
 80053e6:	3601      	adds	r6, #1
 80053e8:	e7af      	b.n	800534a <_vfiprintf_r+0x72>
 80053ea:	9b05      	ldr	r3, [sp, #20]
 80053ec:	6822      	ldr	r2, [r4, #0]
 80053ee:	1ac0      	subs	r0, r0, r3
 80053f0:	2301      	movs	r3, #1
 80053f2:	4083      	lsls	r3, r0
 80053f4:	4313      	orrs	r3, r2
 80053f6:	0035      	movs	r5, r6
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	e7cc      	b.n	8005396 <_vfiprintf_r+0xbe>
 80053fc:	9b07      	ldr	r3, [sp, #28]
 80053fe:	1d19      	adds	r1, r3, #4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	9107      	str	r1, [sp, #28]
 8005404:	2b00      	cmp	r3, #0
 8005406:	db01      	blt.n	800540c <_vfiprintf_r+0x134>
 8005408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800540a:	e004      	b.n	8005416 <_vfiprintf_r+0x13e>
 800540c:	425b      	negs	r3, r3
 800540e:	60e3      	str	r3, [r4, #12]
 8005410:	2302      	movs	r3, #2
 8005412:	4313      	orrs	r3, r2
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	7833      	ldrb	r3, [r6, #0]
 8005418:	2b2e      	cmp	r3, #46	@ 0x2e
 800541a:	d10c      	bne.n	8005436 <_vfiprintf_r+0x15e>
 800541c:	7873      	ldrb	r3, [r6, #1]
 800541e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005420:	d134      	bne.n	800548c <_vfiprintf_r+0x1b4>
 8005422:	9b07      	ldr	r3, [sp, #28]
 8005424:	3602      	adds	r6, #2
 8005426:	1d1a      	adds	r2, r3, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	9207      	str	r2, [sp, #28]
 800542c:	2b00      	cmp	r3, #0
 800542e:	da01      	bge.n	8005434 <_vfiprintf_r+0x15c>
 8005430:	2301      	movs	r3, #1
 8005432:	425b      	negs	r3, r3
 8005434:	9309      	str	r3, [sp, #36]	@ 0x24
 8005436:	4d32      	ldr	r5, [pc, #200]	@ (8005500 <_vfiprintf_r+0x228>)
 8005438:	2203      	movs	r2, #3
 800543a:	0028      	movs	r0, r5
 800543c:	7831      	ldrb	r1, [r6, #0]
 800543e:	f000 fb49 	bl	8005ad4 <memchr>
 8005442:	2800      	cmp	r0, #0
 8005444:	d006      	beq.n	8005454 <_vfiprintf_r+0x17c>
 8005446:	2340      	movs	r3, #64	@ 0x40
 8005448:	1b40      	subs	r0, r0, r5
 800544a:	4083      	lsls	r3, r0
 800544c:	6822      	ldr	r2, [r4, #0]
 800544e:	3601      	adds	r6, #1
 8005450:	4313      	orrs	r3, r2
 8005452:	6023      	str	r3, [r4, #0]
 8005454:	7831      	ldrb	r1, [r6, #0]
 8005456:	2206      	movs	r2, #6
 8005458:	482a      	ldr	r0, [pc, #168]	@ (8005504 <_vfiprintf_r+0x22c>)
 800545a:	1c75      	adds	r5, r6, #1
 800545c:	7621      	strb	r1, [r4, #24]
 800545e:	f000 fb39 	bl	8005ad4 <memchr>
 8005462:	2800      	cmp	r0, #0
 8005464:	d040      	beq.n	80054e8 <_vfiprintf_r+0x210>
 8005466:	4b28      	ldr	r3, [pc, #160]	@ (8005508 <_vfiprintf_r+0x230>)
 8005468:	2b00      	cmp	r3, #0
 800546a:	d122      	bne.n	80054b2 <_vfiprintf_r+0x1da>
 800546c:	2207      	movs	r2, #7
 800546e:	9b07      	ldr	r3, [sp, #28]
 8005470:	3307      	adds	r3, #7
 8005472:	4393      	bics	r3, r2
 8005474:	3308      	adds	r3, #8
 8005476:	9307      	str	r3, [sp, #28]
 8005478:	6963      	ldr	r3, [r4, #20]
 800547a:	9a04      	ldr	r2, [sp, #16]
 800547c:	189b      	adds	r3, r3, r2
 800547e:	6163      	str	r3, [r4, #20]
 8005480:	e762      	b.n	8005348 <_vfiprintf_r+0x70>
 8005482:	4343      	muls	r3, r0
 8005484:	002e      	movs	r6, r5
 8005486:	2101      	movs	r1, #1
 8005488:	189b      	adds	r3, r3, r2
 800548a:	e7a4      	b.n	80053d6 <_vfiprintf_r+0xfe>
 800548c:	2300      	movs	r3, #0
 800548e:	200a      	movs	r0, #10
 8005490:	0019      	movs	r1, r3
 8005492:	3601      	adds	r6, #1
 8005494:	6063      	str	r3, [r4, #4]
 8005496:	7832      	ldrb	r2, [r6, #0]
 8005498:	1c75      	adds	r5, r6, #1
 800549a:	3a30      	subs	r2, #48	@ 0x30
 800549c:	2a09      	cmp	r2, #9
 800549e:	d903      	bls.n	80054a8 <_vfiprintf_r+0x1d0>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0c8      	beq.n	8005436 <_vfiprintf_r+0x15e>
 80054a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80054a6:	e7c6      	b.n	8005436 <_vfiprintf_r+0x15e>
 80054a8:	4341      	muls	r1, r0
 80054aa:	002e      	movs	r6, r5
 80054ac:	2301      	movs	r3, #1
 80054ae:	1889      	adds	r1, r1, r2
 80054b0:	e7f1      	b.n	8005496 <_vfiprintf_r+0x1be>
 80054b2:	aa07      	add	r2, sp, #28
 80054b4:	9200      	str	r2, [sp, #0]
 80054b6:	0021      	movs	r1, r4
 80054b8:	003a      	movs	r2, r7
 80054ba:	4b14      	ldr	r3, [pc, #80]	@ (800550c <_vfiprintf_r+0x234>)
 80054bc:	9803      	ldr	r0, [sp, #12]
 80054be:	e000      	b.n	80054c2 <_vfiprintf_r+0x1ea>
 80054c0:	bf00      	nop
 80054c2:	9004      	str	r0, [sp, #16]
 80054c4:	9b04      	ldr	r3, [sp, #16]
 80054c6:	3301      	adds	r3, #1
 80054c8:	d1d6      	bne.n	8005478 <_vfiprintf_r+0x1a0>
 80054ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054cc:	07db      	lsls	r3, r3, #31
 80054ce:	d405      	bmi.n	80054dc <_vfiprintf_r+0x204>
 80054d0:	89bb      	ldrh	r3, [r7, #12]
 80054d2:	059b      	lsls	r3, r3, #22
 80054d4:	d402      	bmi.n	80054dc <_vfiprintf_r+0x204>
 80054d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80054d8:	f7ff fdd8 	bl	800508c <__retarget_lock_release_recursive>
 80054dc:	89bb      	ldrh	r3, [r7, #12]
 80054de:	065b      	lsls	r3, r3, #25
 80054e0:	d500      	bpl.n	80054e4 <_vfiprintf_r+0x20c>
 80054e2:	e71e      	b.n	8005322 <_vfiprintf_r+0x4a>
 80054e4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80054e6:	e71e      	b.n	8005326 <_vfiprintf_r+0x4e>
 80054e8:	aa07      	add	r2, sp, #28
 80054ea:	9200      	str	r2, [sp, #0]
 80054ec:	0021      	movs	r1, r4
 80054ee:	003a      	movs	r2, r7
 80054f0:	4b06      	ldr	r3, [pc, #24]	@ (800550c <_vfiprintf_r+0x234>)
 80054f2:	9803      	ldr	r0, [sp, #12]
 80054f4:	f000 f87c 	bl	80055f0 <_printf_i>
 80054f8:	e7e3      	b.n	80054c2 <_vfiprintf_r+0x1ea>
 80054fa:	46c0      	nop			@ (mov r8, r8)
 80054fc:	08005de4 	.word	0x08005de4
 8005500:	08005dea 	.word	0x08005dea
 8005504:	08005dee 	.word	0x08005dee
 8005508:	00000000 	.word	0x00000000
 800550c:	080052b3 	.word	0x080052b3

08005510 <_printf_common>:
 8005510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005512:	0016      	movs	r6, r2
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	688a      	ldr	r2, [r1, #8]
 8005518:	690b      	ldr	r3, [r1, #16]
 800551a:	000c      	movs	r4, r1
 800551c:	9000      	str	r0, [sp, #0]
 800551e:	4293      	cmp	r3, r2
 8005520:	da00      	bge.n	8005524 <_printf_common+0x14>
 8005522:	0013      	movs	r3, r2
 8005524:	0022      	movs	r2, r4
 8005526:	6033      	str	r3, [r6, #0]
 8005528:	3243      	adds	r2, #67	@ 0x43
 800552a:	7812      	ldrb	r2, [r2, #0]
 800552c:	2a00      	cmp	r2, #0
 800552e:	d001      	beq.n	8005534 <_printf_common+0x24>
 8005530:	3301      	adds	r3, #1
 8005532:	6033      	str	r3, [r6, #0]
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	069b      	lsls	r3, r3, #26
 8005538:	d502      	bpl.n	8005540 <_printf_common+0x30>
 800553a:	6833      	ldr	r3, [r6, #0]
 800553c:	3302      	adds	r3, #2
 800553e:	6033      	str	r3, [r6, #0]
 8005540:	6822      	ldr	r2, [r4, #0]
 8005542:	2306      	movs	r3, #6
 8005544:	0015      	movs	r5, r2
 8005546:	401d      	ands	r5, r3
 8005548:	421a      	tst	r2, r3
 800554a:	d027      	beq.n	800559c <_printf_common+0x8c>
 800554c:	0023      	movs	r3, r4
 800554e:	3343      	adds	r3, #67	@ 0x43
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	1e5a      	subs	r2, r3, #1
 8005554:	4193      	sbcs	r3, r2
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	0692      	lsls	r2, r2, #26
 800555a:	d430      	bmi.n	80055be <_printf_common+0xae>
 800555c:	0022      	movs	r2, r4
 800555e:	9901      	ldr	r1, [sp, #4]
 8005560:	9800      	ldr	r0, [sp, #0]
 8005562:	9d08      	ldr	r5, [sp, #32]
 8005564:	3243      	adds	r2, #67	@ 0x43
 8005566:	47a8      	blx	r5
 8005568:	3001      	adds	r0, #1
 800556a:	d025      	beq.n	80055b8 <_printf_common+0xa8>
 800556c:	2206      	movs	r2, #6
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	2500      	movs	r5, #0
 8005572:	4013      	ands	r3, r2
 8005574:	2b04      	cmp	r3, #4
 8005576:	d105      	bne.n	8005584 <_printf_common+0x74>
 8005578:	6833      	ldr	r3, [r6, #0]
 800557a:	68e5      	ldr	r5, [r4, #12]
 800557c:	1aed      	subs	r5, r5, r3
 800557e:	43eb      	mvns	r3, r5
 8005580:	17db      	asrs	r3, r3, #31
 8005582:	401d      	ands	r5, r3
 8005584:	68a3      	ldr	r3, [r4, #8]
 8005586:	6922      	ldr	r2, [r4, #16]
 8005588:	4293      	cmp	r3, r2
 800558a:	dd01      	ble.n	8005590 <_printf_common+0x80>
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	18ed      	adds	r5, r5, r3
 8005590:	2600      	movs	r6, #0
 8005592:	42b5      	cmp	r5, r6
 8005594:	d120      	bne.n	80055d8 <_printf_common+0xc8>
 8005596:	2000      	movs	r0, #0
 8005598:	e010      	b.n	80055bc <_printf_common+0xac>
 800559a:	3501      	adds	r5, #1
 800559c:	68e3      	ldr	r3, [r4, #12]
 800559e:	6832      	ldr	r2, [r6, #0]
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	42ab      	cmp	r3, r5
 80055a4:	ddd2      	ble.n	800554c <_printf_common+0x3c>
 80055a6:	0022      	movs	r2, r4
 80055a8:	2301      	movs	r3, #1
 80055aa:	9901      	ldr	r1, [sp, #4]
 80055ac:	9800      	ldr	r0, [sp, #0]
 80055ae:	9f08      	ldr	r7, [sp, #32]
 80055b0:	3219      	adds	r2, #25
 80055b2:	47b8      	blx	r7
 80055b4:	3001      	adds	r0, #1
 80055b6:	d1f0      	bne.n	800559a <_printf_common+0x8a>
 80055b8:	2001      	movs	r0, #1
 80055ba:	4240      	negs	r0, r0
 80055bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055be:	2030      	movs	r0, #48	@ 0x30
 80055c0:	18e1      	adds	r1, r4, r3
 80055c2:	3143      	adds	r1, #67	@ 0x43
 80055c4:	7008      	strb	r0, [r1, #0]
 80055c6:	0021      	movs	r1, r4
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	3145      	adds	r1, #69	@ 0x45
 80055cc:	7809      	ldrb	r1, [r1, #0]
 80055ce:	18a2      	adds	r2, r4, r2
 80055d0:	3243      	adds	r2, #67	@ 0x43
 80055d2:	3302      	adds	r3, #2
 80055d4:	7011      	strb	r1, [r2, #0]
 80055d6:	e7c1      	b.n	800555c <_printf_common+0x4c>
 80055d8:	0022      	movs	r2, r4
 80055da:	2301      	movs	r3, #1
 80055dc:	9901      	ldr	r1, [sp, #4]
 80055de:	9800      	ldr	r0, [sp, #0]
 80055e0:	9f08      	ldr	r7, [sp, #32]
 80055e2:	321a      	adds	r2, #26
 80055e4:	47b8      	blx	r7
 80055e6:	3001      	adds	r0, #1
 80055e8:	d0e6      	beq.n	80055b8 <_printf_common+0xa8>
 80055ea:	3601      	adds	r6, #1
 80055ec:	e7d1      	b.n	8005592 <_printf_common+0x82>
	...

080055f0 <_printf_i>:
 80055f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055f2:	b08b      	sub	sp, #44	@ 0x2c
 80055f4:	9206      	str	r2, [sp, #24]
 80055f6:	000a      	movs	r2, r1
 80055f8:	3243      	adds	r2, #67	@ 0x43
 80055fa:	9307      	str	r3, [sp, #28]
 80055fc:	9005      	str	r0, [sp, #20]
 80055fe:	9203      	str	r2, [sp, #12]
 8005600:	7e0a      	ldrb	r2, [r1, #24]
 8005602:	000c      	movs	r4, r1
 8005604:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005606:	2a78      	cmp	r2, #120	@ 0x78
 8005608:	d809      	bhi.n	800561e <_printf_i+0x2e>
 800560a:	2a62      	cmp	r2, #98	@ 0x62
 800560c:	d80b      	bhi.n	8005626 <_printf_i+0x36>
 800560e:	2a00      	cmp	r2, #0
 8005610:	d100      	bne.n	8005614 <_printf_i+0x24>
 8005612:	e0bc      	b.n	800578e <_printf_i+0x19e>
 8005614:	497b      	ldr	r1, [pc, #492]	@ (8005804 <_printf_i+0x214>)
 8005616:	9104      	str	r1, [sp, #16]
 8005618:	2a58      	cmp	r2, #88	@ 0x58
 800561a:	d100      	bne.n	800561e <_printf_i+0x2e>
 800561c:	e090      	b.n	8005740 <_printf_i+0x150>
 800561e:	0025      	movs	r5, r4
 8005620:	3542      	adds	r5, #66	@ 0x42
 8005622:	702a      	strb	r2, [r5, #0]
 8005624:	e022      	b.n	800566c <_printf_i+0x7c>
 8005626:	0010      	movs	r0, r2
 8005628:	3863      	subs	r0, #99	@ 0x63
 800562a:	2815      	cmp	r0, #21
 800562c:	d8f7      	bhi.n	800561e <_printf_i+0x2e>
 800562e:	f7fa fd6b 	bl	8000108 <__gnu_thumb1_case_shi>
 8005632:	0016      	.short	0x0016
 8005634:	fff6001f 	.word	0xfff6001f
 8005638:	fff6fff6 	.word	0xfff6fff6
 800563c:	001ffff6 	.word	0x001ffff6
 8005640:	fff6fff6 	.word	0xfff6fff6
 8005644:	fff6fff6 	.word	0xfff6fff6
 8005648:	003600a1 	.word	0x003600a1
 800564c:	fff60080 	.word	0xfff60080
 8005650:	00b2fff6 	.word	0x00b2fff6
 8005654:	0036fff6 	.word	0x0036fff6
 8005658:	fff6fff6 	.word	0xfff6fff6
 800565c:	0084      	.short	0x0084
 800565e:	0025      	movs	r5, r4
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	3542      	adds	r5, #66	@ 0x42
 8005664:	1d11      	adds	r1, r2, #4
 8005666:	6019      	str	r1, [r3, #0]
 8005668:	6813      	ldr	r3, [r2, #0]
 800566a:	702b      	strb	r3, [r5, #0]
 800566c:	2301      	movs	r3, #1
 800566e:	e0a0      	b.n	80057b2 <_printf_i+0x1c2>
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	6809      	ldr	r1, [r1, #0]
 8005674:	1d02      	adds	r2, r0, #4
 8005676:	060d      	lsls	r5, r1, #24
 8005678:	d50b      	bpl.n	8005692 <_printf_i+0xa2>
 800567a:	6806      	ldr	r6, [r0, #0]
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	2e00      	cmp	r6, #0
 8005680:	da03      	bge.n	800568a <_printf_i+0x9a>
 8005682:	232d      	movs	r3, #45	@ 0x2d
 8005684:	9a03      	ldr	r2, [sp, #12]
 8005686:	4276      	negs	r6, r6
 8005688:	7013      	strb	r3, [r2, #0]
 800568a:	4b5e      	ldr	r3, [pc, #376]	@ (8005804 <_printf_i+0x214>)
 800568c:	270a      	movs	r7, #10
 800568e:	9304      	str	r3, [sp, #16]
 8005690:	e018      	b.n	80056c4 <_printf_i+0xd4>
 8005692:	6806      	ldr	r6, [r0, #0]
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	0649      	lsls	r1, r1, #25
 8005698:	d5f1      	bpl.n	800567e <_printf_i+0x8e>
 800569a:	b236      	sxth	r6, r6
 800569c:	e7ef      	b.n	800567e <_printf_i+0x8e>
 800569e:	6808      	ldr	r0, [r1, #0]
 80056a0:	6819      	ldr	r1, [r3, #0]
 80056a2:	c940      	ldmia	r1!, {r6}
 80056a4:	0605      	lsls	r5, r0, #24
 80056a6:	d402      	bmi.n	80056ae <_printf_i+0xbe>
 80056a8:	0640      	lsls	r0, r0, #25
 80056aa:	d500      	bpl.n	80056ae <_printf_i+0xbe>
 80056ac:	b2b6      	uxth	r6, r6
 80056ae:	6019      	str	r1, [r3, #0]
 80056b0:	4b54      	ldr	r3, [pc, #336]	@ (8005804 <_printf_i+0x214>)
 80056b2:	270a      	movs	r7, #10
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	2a6f      	cmp	r2, #111	@ 0x6f
 80056b8:	d100      	bne.n	80056bc <_printf_i+0xcc>
 80056ba:	3f02      	subs	r7, #2
 80056bc:	0023      	movs	r3, r4
 80056be:	2200      	movs	r2, #0
 80056c0:	3343      	adds	r3, #67	@ 0x43
 80056c2:	701a      	strb	r2, [r3, #0]
 80056c4:	6863      	ldr	r3, [r4, #4]
 80056c6:	60a3      	str	r3, [r4, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	db03      	blt.n	80056d4 <_printf_i+0xe4>
 80056cc:	2104      	movs	r1, #4
 80056ce:	6822      	ldr	r2, [r4, #0]
 80056d0:	438a      	bics	r2, r1
 80056d2:	6022      	str	r2, [r4, #0]
 80056d4:	2e00      	cmp	r6, #0
 80056d6:	d102      	bne.n	80056de <_printf_i+0xee>
 80056d8:	9d03      	ldr	r5, [sp, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <_printf_i+0x108>
 80056de:	9d03      	ldr	r5, [sp, #12]
 80056e0:	0030      	movs	r0, r6
 80056e2:	0039      	movs	r1, r7
 80056e4:	f7fa fda0 	bl	8000228 <__aeabi_uidivmod>
 80056e8:	9b04      	ldr	r3, [sp, #16]
 80056ea:	3d01      	subs	r5, #1
 80056ec:	5c5b      	ldrb	r3, [r3, r1]
 80056ee:	702b      	strb	r3, [r5, #0]
 80056f0:	0033      	movs	r3, r6
 80056f2:	0006      	movs	r6, r0
 80056f4:	429f      	cmp	r7, r3
 80056f6:	d9f3      	bls.n	80056e0 <_printf_i+0xf0>
 80056f8:	2f08      	cmp	r7, #8
 80056fa:	d109      	bne.n	8005710 <_printf_i+0x120>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	07db      	lsls	r3, r3, #31
 8005700:	d506      	bpl.n	8005710 <_printf_i+0x120>
 8005702:	6862      	ldr	r2, [r4, #4]
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	429a      	cmp	r2, r3
 8005708:	dc02      	bgt.n	8005710 <_printf_i+0x120>
 800570a:	2330      	movs	r3, #48	@ 0x30
 800570c:	3d01      	subs	r5, #1
 800570e:	702b      	strb	r3, [r5, #0]
 8005710:	9b03      	ldr	r3, [sp, #12]
 8005712:	1b5b      	subs	r3, r3, r5
 8005714:	6123      	str	r3, [r4, #16]
 8005716:	9b07      	ldr	r3, [sp, #28]
 8005718:	0021      	movs	r1, r4
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	9805      	ldr	r0, [sp, #20]
 800571e:	9b06      	ldr	r3, [sp, #24]
 8005720:	aa09      	add	r2, sp, #36	@ 0x24
 8005722:	f7ff fef5 	bl	8005510 <_printf_common>
 8005726:	3001      	adds	r0, #1
 8005728:	d148      	bne.n	80057bc <_printf_i+0x1cc>
 800572a:	2001      	movs	r0, #1
 800572c:	4240      	negs	r0, r0
 800572e:	b00b      	add	sp, #44	@ 0x2c
 8005730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005732:	2220      	movs	r2, #32
 8005734:	6809      	ldr	r1, [r1, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	6022      	str	r2, [r4, #0]
 800573a:	2278      	movs	r2, #120	@ 0x78
 800573c:	4932      	ldr	r1, [pc, #200]	@ (8005808 <_printf_i+0x218>)
 800573e:	9104      	str	r1, [sp, #16]
 8005740:	0021      	movs	r1, r4
 8005742:	3145      	adds	r1, #69	@ 0x45
 8005744:	700a      	strb	r2, [r1, #0]
 8005746:	6819      	ldr	r1, [r3, #0]
 8005748:	6822      	ldr	r2, [r4, #0]
 800574a:	c940      	ldmia	r1!, {r6}
 800574c:	0610      	lsls	r0, r2, #24
 800574e:	d402      	bmi.n	8005756 <_printf_i+0x166>
 8005750:	0650      	lsls	r0, r2, #25
 8005752:	d500      	bpl.n	8005756 <_printf_i+0x166>
 8005754:	b2b6      	uxth	r6, r6
 8005756:	6019      	str	r1, [r3, #0]
 8005758:	07d3      	lsls	r3, r2, #31
 800575a:	d502      	bpl.n	8005762 <_printf_i+0x172>
 800575c:	2320      	movs	r3, #32
 800575e:	4313      	orrs	r3, r2
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	2e00      	cmp	r6, #0
 8005764:	d001      	beq.n	800576a <_printf_i+0x17a>
 8005766:	2710      	movs	r7, #16
 8005768:	e7a8      	b.n	80056bc <_printf_i+0xcc>
 800576a:	2220      	movs	r2, #32
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	4393      	bics	r3, r2
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	e7f8      	b.n	8005766 <_printf_i+0x176>
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	680d      	ldr	r5, [r1, #0]
 8005778:	1d10      	adds	r0, r2, #4
 800577a:	6949      	ldr	r1, [r1, #20]
 800577c:	6018      	str	r0, [r3, #0]
 800577e:	6813      	ldr	r3, [r2, #0]
 8005780:	062e      	lsls	r6, r5, #24
 8005782:	d501      	bpl.n	8005788 <_printf_i+0x198>
 8005784:	6019      	str	r1, [r3, #0]
 8005786:	e002      	b.n	800578e <_printf_i+0x19e>
 8005788:	066d      	lsls	r5, r5, #25
 800578a:	d5fb      	bpl.n	8005784 <_printf_i+0x194>
 800578c:	8019      	strh	r1, [r3, #0]
 800578e:	2300      	movs	r3, #0
 8005790:	9d03      	ldr	r5, [sp, #12]
 8005792:	6123      	str	r3, [r4, #16]
 8005794:	e7bf      	b.n	8005716 <_printf_i+0x126>
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	1d11      	adds	r1, r2, #4
 800579a:	6019      	str	r1, [r3, #0]
 800579c:	6815      	ldr	r5, [r2, #0]
 800579e:	2100      	movs	r1, #0
 80057a0:	0028      	movs	r0, r5
 80057a2:	6862      	ldr	r2, [r4, #4]
 80057a4:	f000 f996 	bl	8005ad4 <memchr>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d001      	beq.n	80057b0 <_printf_i+0x1c0>
 80057ac:	1b40      	subs	r0, r0, r5
 80057ae:	6060      	str	r0, [r4, #4]
 80057b0:	6863      	ldr	r3, [r4, #4]
 80057b2:	6123      	str	r3, [r4, #16]
 80057b4:	2300      	movs	r3, #0
 80057b6:	9a03      	ldr	r2, [sp, #12]
 80057b8:	7013      	strb	r3, [r2, #0]
 80057ba:	e7ac      	b.n	8005716 <_printf_i+0x126>
 80057bc:	002a      	movs	r2, r5
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	9906      	ldr	r1, [sp, #24]
 80057c2:	9805      	ldr	r0, [sp, #20]
 80057c4:	9d07      	ldr	r5, [sp, #28]
 80057c6:	47a8      	blx	r5
 80057c8:	3001      	adds	r0, #1
 80057ca:	d0ae      	beq.n	800572a <_printf_i+0x13a>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	079b      	lsls	r3, r3, #30
 80057d0:	d415      	bmi.n	80057fe <_printf_i+0x20e>
 80057d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d4:	68e0      	ldr	r0, [r4, #12]
 80057d6:	4298      	cmp	r0, r3
 80057d8:	daa9      	bge.n	800572e <_printf_i+0x13e>
 80057da:	0018      	movs	r0, r3
 80057dc:	e7a7      	b.n	800572e <_printf_i+0x13e>
 80057de:	0022      	movs	r2, r4
 80057e0:	2301      	movs	r3, #1
 80057e2:	9906      	ldr	r1, [sp, #24]
 80057e4:	9805      	ldr	r0, [sp, #20]
 80057e6:	9e07      	ldr	r6, [sp, #28]
 80057e8:	3219      	adds	r2, #25
 80057ea:	47b0      	blx	r6
 80057ec:	3001      	adds	r0, #1
 80057ee:	d09c      	beq.n	800572a <_printf_i+0x13a>
 80057f0:	3501      	adds	r5, #1
 80057f2:	68e3      	ldr	r3, [r4, #12]
 80057f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057f6:	1a9b      	subs	r3, r3, r2
 80057f8:	42ab      	cmp	r3, r5
 80057fa:	dcf0      	bgt.n	80057de <_printf_i+0x1ee>
 80057fc:	e7e9      	b.n	80057d2 <_printf_i+0x1e2>
 80057fe:	2500      	movs	r5, #0
 8005800:	e7f7      	b.n	80057f2 <_printf_i+0x202>
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	08005df5 	.word	0x08005df5
 8005808:	08005e06 	.word	0x08005e06

0800580c <__sflush_r>:
 800580c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800580e:	220c      	movs	r2, #12
 8005810:	5e8b      	ldrsh	r3, [r1, r2]
 8005812:	0005      	movs	r5, r0
 8005814:	000c      	movs	r4, r1
 8005816:	071a      	lsls	r2, r3, #28
 8005818:	d456      	bmi.n	80058c8 <__sflush_r+0xbc>
 800581a:	684a      	ldr	r2, [r1, #4]
 800581c:	2a00      	cmp	r2, #0
 800581e:	dc02      	bgt.n	8005826 <__sflush_r+0x1a>
 8005820:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005822:	2a00      	cmp	r2, #0
 8005824:	dd4e      	ble.n	80058c4 <__sflush_r+0xb8>
 8005826:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005828:	2f00      	cmp	r7, #0
 800582a:	d04b      	beq.n	80058c4 <__sflush_r+0xb8>
 800582c:	2200      	movs	r2, #0
 800582e:	2080      	movs	r0, #128	@ 0x80
 8005830:	682e      	ldr	r6, [r5, #0]
 8005832:	602a      	str	r2, [r5, #0]
 8005834:	001a      	movs	r2, r3
 8005836:	0140      	lsls	r0, r0, #5
 8005838:	6a21      	ldr	r1, [r4, #32]
 800583a:	4002      	ands	r2, r0
 800583c:	4203      	tst	r3, r0
 800583e:	d033      	beq.n	80058a8 <__sflush_r+0x9c>
 8005840:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	075b      	lsls	r3, r3, #29
 8005846:	d506      	bpl.n	8005856 <__sflush_r+0x4a>
 8005848:	6863      	ldr	r3, [r4, #4]
 800584a:	1ad2      	subs	r2, r2, r3
 800584c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <__sflush_r+0x4a>
 8005852:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005854:	1ad2      	subs	r2, r2, r3
 8005856:	2300      	movs	r3, #0
 8005858:	0028      	movs	r0, r5
 800585a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800585c:	6a21      	ldr	r1, [r4, #32]
 800585e:	47b8      	blx	r7
 8005860:	89a2      	ldrh	r2, [r4, #12]
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d106      	bne.n	8005874 <__sflush_r+0x68>
 8005866:	6829      	ldr	r1, [r5, #0]
 8005868:	291d      	cmp	r1, #29
 800586a:	d846      	bhi.n	80058fa <__sflush_r+0xee>
 800586c:	4b29      	ldr	r3, [pc, #164]	@ (8005914 <__sflush_r+0x108>)
 800586e:	410b      	asrs	r3, r1
 8005870:	07db      	lsls	r3, r3, #31
 8005872:	d442      	bmi.n	80058fa <__sflush_r+0xee>
 8005874:	2300      	movs	r3, #0
 8005876:	6063      	str	r3, [r4, #4]
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	6023      	str	r3, [r4, #0]
 800587c:	04d2      	lsls	r2, r2, #19
 800587e:	d505      	bpl.n	800588c <__sflush_r+0x80>
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	d102      	bne.n	800588a <__sflush_r+0x7e>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d100      	bne.n	800588c <__sflush_r+0x80>
 800588a:	6560      	str	r0, [r4, #84]	@ 0x54
 800588c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800588e:	602e      	str	r6, [r5, #0]
 8005890:	2900      	cmp	r1, #0
 8005892:	d017      	beq.n	80058c4 <__sflush_r+0xb8>
 8005894:	0023      	movs	r3, r4
 8005896:	3344      	adds	r3, #68	@ 0x44
 8005898:	4299      	cmp	r1, r3
 800589a:	d002      	beq.n	80058a2 <__sflush_r+0x96>
 800589c:	0028      	movs	r0, r5
 800589e:	f7ff fbf7 	bl	8005090 <_free_r>
 80058a2:	2300      	movs	r3, #0
 80058a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80058a6:	e00d      	b.n	80058c4 <__sflush_r+0xb8>
 80058a8:	2301      	movs	r3, #1
 80058aa:	0028      	movs	r0, r5
 80058ac:	47b8      	blx	r7
 80058ae:	0002      	movs	r2, r0
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d1c6      	bne.n	8005842 <__sflush_r+0x36>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0c3      	beq.n	8005842 <__sflush_r+0x36>
 80058ba:	2b1d      	cmp	r3, #29
 80058bc:	d001      	beq.n	80058c2 <__sflush_r+0xb6>
 80058be:	2b16      	cmp	r3, #22
 80058c0:	d11a      	bne.n	80058f8 <__sflush_r+0xec>
 80058c2:	602e      	str	r6, [r5, #0]
 80058c4:	2000      	movs	r0, #0
 80058c6:	e01e      	b.n	8005906 <__sflush_r+0xfa>
 80058c8:	690e      	ldr	r6, [r1, #16]
 80058ca:	2e00      	cmp	r6, #0
 80058cc:	d0fa      	beq.n	80058c4 <__sflush_r+0xb8>
 80058ce:	680f      	ldr	r7, [r1, #0]
 80058d0:	600e      	str	r6, [r1, #0]
 80058d2:	1bba      	subs	r2, r7, r6
 80058d4:	9201      	str	r2, [sp, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	079b      	lsls	r3, r3, #30
 80058da:	d100      	bne.n	80058de <__sflush_r+0xd2>
 80058dc:	694a      	ldr	r2, [r1, #20]
 80058de:	60a2      	str	r2, [r4, #8]
 80058e0:	9b01      	ldr	r3, [sp, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	ddee      	ble.n	80058c4 <__sflush_r+0xb8>
 80058e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80058e8:	0032      	movs	r2, r6
 80058ea:	001f      	movs	r7, r3
 80058ec:	0028      	movs	r0, r5
 80058ee:	9b01      	ldr	r3, [sp, #4]
 80058f0:	6a21      	ldr	r1, [r4, #32]
 80058f2:	47b8      	blx	r7
 80058f4:	2800      	cmp	r0, #0
 80058f6:	dc07      	bgt.n	8005908 <__sflush_r+0xfc>
 80058f8:	89a2      	ldrh	r2, [r4, #12]
 80058fa:	2340      	movs	r3, #64	@ 0x40
 80058fc:	2001      	movs	r0, #1
 80058fe:	4313      	orrs	r3, r2
 8005900:	b21b      	sxth	r3, r3
 8005902:	81a3      	strh	r3, [r4, #12]
 8005904:	4240      	negs	r0, r0
 8005906:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005908:	9b01      	ldr	r3, [sp, #4]
 800590a:	1836      	adds	r6, r6, r0
 800590c:	1a1b      	subs	r3, r3, r0
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	e7e6      	b.n	80058e0 <__sflush_r+0xd4>
 8005912:	46c0      	nop			@ (mov r8, r8)
 8005914:	dfbffffe 	.word	0xdfbffffe

08005918 <_fflush_r>:
 8005918:	690b      	ldr	r3, [r1, #16]
 800591a:	b570      	push	{r4, r5, r6, lr}
 800591c:	0005      	movs	r5, r0
 800591e:	000c      	movs	r4, r1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <_fflush_r+0x12>
 8005924:	2500      	movs	r5, #0
 8005926:	0028      	movs	r0, r5
 8005928:	bd70      	pop	{r4, r5, r6, pc}
 800592a:	2800      	cmp	r0, #0
 800592c:	d004      	beq.n	8005938 <_fflush_r+0x20>
 800592e:	6a03      	ldr	r3, [r0, #32]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <_fflush_r+0x20>
 8005934:	f7ff fa98 	bl	8004e68 <__sinit>
 8005938:	220c      	movs	r2, #12
 800593a:	5ea3      	ldrsh	r3, [r4, r2]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0f1      	beq.n	8005924 <_fflush_r+0xc>
 8005940:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005942:	07d2      	lsls	r2, r2, #31
 8005944:	d404      	bmi.n	8005950 <_fflush_r+0x38>
 8005946:	059b      	lsls	r3, r3, #22
 8005948:	d402      	bmi.n	8005950 <_fflush_r+0x38>
 800594a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800594c:	f7ff fb9d 	bl	800508a <__retarget_lock_acquire_recursive>
 8005950:	0028      	movs	r0, r5
 8005952:	0021      	movs	r1, r4
 8005954:	f7ff ff5a 	bl	800580c <__sflush_r>
 8005958:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800595a:	0005      	movs	r5, r0
 800595c:	07db      	lsls	r3, r3, #31
 800595e:	d4e2      	bmi.n	8005926 <_fflush_r+0xe>
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	059b      	lsls	r3, r3, #22
 8005964:	d4df      	bmi.n	8005926 <_fflush_r+0xe>
 8005966:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005968:	f7ff fb90 	bl	800508c <__retarget_lock_release_recursive>
 800596c:	e7db      	b.n	8005926 <_fflush_r+0xe>

0800596e <__swbuf_r>:
 800596e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005970:	0006      	movs	r6, r0
 8005972:	000d      	movs	r5, r1
 8005974:	0014      	movs	r4, r2
 8005976:	2800      	cmp	r0, #0
 8005978:	d004      	beq.n	8005984 <__swbuf_r+0x16>
 800597a:	6a03      	ldr	r3, [r0, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <__swbuf_r+0x16>
 8005980:	f7ff fa72 	bl	8004e68 <__sinit>
 8005984:	69a3      	ldr	r3, [r4, #24]
 8005986:	60a3      	str	r3, [r4, #8]
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	071b      	lsls	r3, r3, #28
 800598c:	d502      	bpl.n	8005994 <__swbuf_r+0x26>
 800598e:	6923      	ldr	r3, [r4, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d109      	bne.n	80059a8 <__swbuf_r+0x3a>
 8005994:	0021      	movs	r1, r4
 8005996:	0030      	movs	r0, r6
 8005998:	f000 f82c 	bl	80059f4 <__swsetup_r>
 800599c:	2800      	cmp	r0, #0
 800599e:	d003      	beq.n	80059a8 <__swbuf_r+0x3a>
 80059a0:	2501      	movs	r5, #1
 80059a2:	426d      	negs	r5, r5
 80059a4:	0028      	movs	r0, r5
 80059a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059a8:	6923      	ldr	r3, [r4, #16]
 80059aa:	6820      	ldr	r0, [r4, #0]
 80059ac:	b2ef      	uxtb	r7, r5
 80059ae:	1ac0      	subs	r0, r0, r3
 80059b0:	6963      	ldr	r3, [r4, #20]
 80059b2:	b2ed      	uxtb	r5, r5
 80059b4:	4283      	cmp	r3, r0
 80059b6:	dc05      	bgt.n	80059c4 <__swbuf_r+0x56>
 80059b8:	0021      	movs	r1, r4
 80059ba:	0030      	movs	r0, r6
 80059bc:	f7ff ffac 	bl	8005918 <_fflush_r>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d1ed      	bne.n	80059a0 <__swbuf_r+0x32>
 80059c4:	68a3      	ldr	r3, [r4, #8]
 80059c6:	3001      	adds	r0, #1
 80059c8:	3b01      	subs	r3, #1
 80059ca:	60a3      	str	r3, [r4, #8]
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	6022      	str	r2, [r4, #0]
 80059d2:	701f      	strb	r7, [r3, #0]
 80059d4:	6963      	ldr	r3, [r4, #20]
 80059d6:	4283      	cmp	r3, r0
 80059d8:	d004      	beq.n	80059e4 <__swbuf_r+0x76>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	07db      	lsls	r3, r3, #31
 80059de:	d5e1      	bpl.n	80059a4 <__swbuf_r+0x36>
 80059e0:	2d0a      	cmp	r5, #10
 80059e2:	d1df      	bne.n	80059a4 <__swbuf_r+0x36>
 80059e4:	0021      	movs	r1, r4
 80059e6:	0030      	movs	r0, r6
 80059e8:	f7ff ff96 	bl	8005918 <_fflush_r>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d0d9      	beq.n	80059a4 <__swbuf_r+0x36>
 80059f0:	e7d6      	b.n	80059a0 <__swbuf_r+0x32>
	...

080059f4 <__swsetup_r>:
 80059f4:	4b2d      	ldr	r3, [pc, #180]	@ (8005aac <__swsetup_r+0xb8>)
 80059f6:	b570      	push	{r4, r5, r6, lr}
 80059f8:	0005      	movs	r5, r0
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	000c      	movs	r4, r1
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d004      	beq.n	8005a0c <__swsetup_r+0x18>
 8005a02:	6a03      	ldr	r3, [r0, #32]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <__swsetup_r+0x18>
 8005a08:	f7ff fa2e 	bl	8004e68 <__sinit>
 8005a0c:	230c      	movs	r3, #12
 8005a0e:	5ee2      	ldrsh	r2, [r4, r3]
 8005a10:	0713      	lsls	r3, r2, #28
 8005a12:	d423      	bmi.n	8005a5c <__swsetup_r+0x68>
 8005a14:	06d3      	lsls	r3, r2, #27
 8005a16:	d407      	bmi.n	8005a28 <__swsetup_r+0x34>
 8005a18:	2309      	movs	r3, #9
 8005a1a:	602b      	str	r3, [r5, #0]
 8005a1c:	2340      	movs	r3, #64	@ 0x40
 8005a1e:	2001      	movs	r0, #1
 8005a20:	4313      	orrs	r3, r2
 8005a22:	81a3      	strh	r3, [r4, #12]
 8005a24:	4240      	negs	r0, r0
 8005a26:	e03a      	b.n	8005a9e <__swsetup_r+0xaa>
 8005a28:	0752      	lsls	r2, r2, #29
 8005a2a:	d513      	bpl.n	8005a54 <__swsetup_r+0x60>
 8005a2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	d008      	beq.n	8005a44 <__swsetup_r+0x50>
 8005a32:	0023      	movs	r3, r4
 8005a34:	3344      	adds	r3, #68	@ 0x44
 8005a36:	4299      	cmp	r1, r3
 8005a38:	d002      	beq.n	8005a40 <__swsetup_r+0x4c>
 8005a3a:	0028      	movs	r0, r5
 8005a3c:	f7ff fb28 	bl	8005090 <_free_r>
 8005a40:	2300      	movs	r3, #0
 8005a42:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a44:	2224      	movs	r2, #36	@ 0x24
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	4393      	bics	r3, r2
 8005a4a:	81a3      	strh	r3, [r4, #12]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	6063      	str	r3, [r4, #4]
 8005a50:	6923      	ldr	r3, [r4, #16]
 8005a52:	6023      	str	r3, [r4, #0]
 8005a54:	2308      	movs	r3, #8
 8005a56:	89a2      	ldrh	r2, [r4, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	81a3      	strh	r3, [r4, #12]
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10b      	bne.n	8005a7a <__swsetup_r+0x86>
 8005a62:	21a0      	movs	r1, #160	@ 0xa0
 8005a64:	2280      	movs	r2, #128	@ 0x80
 8005a66:	89a3      	ldrh	r3, [r4, #12]
 8005a68:	0089      	lsls	r1, r1, #2
 8005a6a:	0092      	lsls	r2, r2, #2
 8005a6c:	400b      	ands	r3, r1
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d003      	beq.n	8005a7a <__swsetup_r+0x86>
 8005a72:	0021      	movs	r1, r4
 8005a74:	0028      	movs	r0, r5
 8005a76:	f000 f863 	bl	8005b40 <__smakebuf_r>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	5ee2      	ldrsh	r2, [r4, r3]
 8005a7e:	2101      	movs	r1, #1
 8005a80:	0013      	movs	r3, r2
 8005a82:	400b      	ands	r3, r1
 8005a84:	420a      	tst	r2, r1
 8005a86:	d00b      	beq.n	8005aa0 <__swsetup_r+0xac>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60a3      	str	r3, [r4, #8]
 8005a8c:	6963      	ldr	r3, [r4, #20]
 8005a8e:	425b      	negs	r3, r3
 8005a90:	61a3      	str	r3, [r4, #24]
 8005a92:	2000      	movs	r0, #0
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	4283      	cmp	r3, r0
 8005a98:	d101      	bne.n	8005a9e <__swsetup_r+0xaa>
 8005a9a:	0613      	lsls	r3, r2, #24
 8005a9c:	d4be      	bmi.n	8005a1c <__swsetup_r+0x28>
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	0791      	lsls	r1, r2, #30
 8005aa2:	d400      	bmi.n	8005aa6 <__swsetup_r+0xb2>
 8005aa4:	6963      	ldr	r3, [r4, #20]
 8005aa6:	60a3      	str	r3, [r4, #8]
 8005aa8:	e7f3      	b.n	8005a92 <__swsetup_r+0x9e>
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	20000018 	.word	0x20000018

08005ab0 <_sbrk_r>:
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	b570      	push	{r4, r5, r6, lr}
 8005ab4:	4d06      	ldr	r5, [pc, #24]	@ (8005ad0 <_sbrk_r+0x20>)
 8005ab6:	0004      	movs	r4, r0
 8005ab8:	0008      	movs	r0, r1
 8005aba:	602b      	str	r3, [r5, #0]
 8005abc:	f7fb ff8e 	bl	80019dc <_sbrk>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d103      	bne.n	8005acc <_sbrk_r+0x1c>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d000      	beq.n	8005acc <_sbrk_r+0x1c>
 8005aca:	6023      	str	r3, [r4, #0]
 8005acc:	bd70      	pop	{r4, r5, r6, pc}
 8005ace:	46c0      	nop			@ (mov r8, r8)
 8005ad0:	20000450 	.word	0x20000450

08005ad4 <memchr>:
 8005ad4:	b2c9      	uxtb	r1, r1
 8005ad6:	1882      	adds	r2, r0, r2
 8005ad8:	4290      	cmp	r0, r2
 8005ada:	d101      	bne.n	8005ae0 <memchr+0xc>
 8005adc:	2000      	movs	r0, #0
 8005ade:	4770      	bx	lr
 8005ae0:	7803      	ldrb	r3, [r0, #0]
 8005ae2:	428b      	cmp	r3, r1
 8005ae4:	d0fb      	beq.n	8005ade <memchr+0xa>
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	e7f6      	b.n	8005ad8 <memchr+0x4>
	...

08005aec <__swhatbuf_r>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	000e      	movs	r6, r1
 8005af0:	001d      	movs	r5, r3
 8005af2:	230e      	movs	r3, #14
 8005af4:	5ec9      	ldrsh	r1, [r1, r3]
 8005af6:	0014      	movs	r4, r2
 8005af8:	b096      	sub	sp, #88	@ 0x58
 8005afa:	2900      	cmp	r1, #0
 8005afc:	da0c      	bge.n	8005b18 <__swhatbuf_r+0x2c>
 8005afe:	89b2      	ldrh	r2, [r6, #12]
 8005b00:	2380      	movs	r3, #128	@ 0x80
 8005b02:	0011      	movs	r1, r2
 8005b04:	4019      	ands	r1, r3
 8005b06:	421a      	tst	r2, r3
 8005b08:	d114      	bne.n	8005b34 <__swhatbuf_r+0x48>
 8005b0a:	2380      	movs	r3, #128	@ 0x80
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	2000      	movs	r0, #0
 8005b10:	6029      	str	r1, [r5, #0]
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	b016      	add	sp, #88	@ 0x58
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	466a      	mov	r2, sp
 8005b1a:	f000 f853 	bl	8005bc4 <_fstat_r>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	dbed      	blt.n	8005afe <__swhatbuf_r+0x12>
 8005b22:	23f0      	movs	r3, #240	@ 0xf0
 8005b24:	9901      	ldr	r1, [sp, #4]
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	4019      	ands	r1, r3
 8005b2a:	4b04      	ldr	r3, [pc, #16]	@ (8005b3c <__swhatbuf_r+0x50>)
 8005b2c:	18c9      	adds	r1, r1, r3
 8005b2e:	424b      	negs	r3, r1
 8005b30:	4159      	adcs	r1, r3
 8005b32:	e7ea      	b.n	8005b0a <__swhatbuf_r+0x1e>
 8005b34:	2100      	movs	r1, #0
 8005b36:	2340      	movs	r3, #64	@ 0x40
 8005b38:	e7e9      	b.n	8005b0e <__swhatbuf_r+0x22>
 8005b3a:	46c0      	nop			@ (mov r8, r8)
 8005b3c:	ffffe000 	.word	0xffffe000

08005b40 <__smakebuf_r>:
 8005b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b42:	2602      	movs	r6, #2
 8005b44:	898b      	ldrh	r3, [r1, #12]
 8005b46:	0005      	movs	r5, r0
 8005b48:	000c      	movs	r4, r1
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	4233      	tst	r3, r6
 8005b4e:	d007      	beq.n	8005b60 <__smakebuf_r+0x20>
 8005b50:	0023      	movs	r3, r4
 8005b52:	3347      	adds	r3, #71	@ 0x47
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	6123      	str	r3, [r4, #16]
 8005b58:	2301      	movs	r3, #1
 8005b5a:	6163      	str	r3, [r4, #20]
 8005b5c:	b005      	add	sp, #20
 8005b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b60:	ab03      	add	r3, sp, #12
 8005b62:	aa02      	add	r2, sp, #8
 8005b64:	f7ff ffc2 	bl	8005aec <__swhatbuf_r>
 8005b68:	9f02      	ldr	r7, [sp, #8]
 8005b6a:	9001      	str	r0, [sp, #4]
 8005b6c:	0039      	movs	r1, r7
 8005b6e:	0028      	movs	r0, r5
 8005b70:	f7ff fafa 	bl	8005168 <_malloc_r>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d108      	bne.n	8005b8a <__smakebuf_r+0x4a>
 8005b78:	220c      	movs	r2, #12
 8005b7a:	5ea3      	ldrsh	r3, [r4, r2]
 8005b7c:	059a      	lsls	r2, r3, #22
 8005b7e:	d4ed      	bmi.n	8005b5c <__smakebuf_r+0x1c>
 8005b80:	2203      	movs	r2, #3
 8005b82:	4393      	bics	r3, r2
 8005b84:	431e      	orrs	r6, r3
 8005b86:	81a6      	strh	r6, [r4, #12]
 8005b88:	e7e2      	b.n	8005b50 <__smakebuf_r+0x10>
 8005b8a:	2380      	movs	r3, #128	@ 0x80
 8005b8c:	89a2      	ldrh	r2, [r4, #12]
 8005b8e:	6020      	str	r0, [r4, #0]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	81a3      	strh	r3, [r4, #12]
 8005b94:	9b03      	ldr	r3, [sp, #12]
 8005b96:	6120      	str	r0, [r4, #16]
 8005b98:	6167      	str	r7, [r4, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00c      	beq.n	8005bb8 <__smakebuf_r+0x78>
 8005b9e:	0028      	movs	r0, r5
 8005ba0:	230e      	movs	r3, #14
 8005ba2:	5ee1      	ldrsh	r1, [r4, r3]
 8005ba4:	f000 f820 	bl	8005be8 <_isatty_r>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d005      	beq.n	8005bb8 <__smakebuf_r+0x78>
 8005bac:	2303      	movs	r3, #3
 8005bae:	89a2      	ldrh	r2, [r4, #12]
 8005bb0:	439a      	bics	r2, r3
 8005bb2:	3b02      	subs	r3, #2
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	9a01      	ldr	r2, [sp, #4]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	81a3      	strh	r3, [r4, #12]
 8005bc0:	e7cc      	b.n	8005b5c <__smakebuf_r+0x1c>
	...

08005bc4 <_fstat_r>:
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	b570      	push	{r4, r5, r6, lr}
 8005bc8:	4d06      	ldr	r5, [pc, #24]	@ (8005be4 <_fstat_r+0x20>)
 8005bca:	0004      	movs	r4, r0
 8005bcc:	0008      	movs	r0, r1
 8005bce:	0011      	movs	r1, r2
 8005bd0:	602b      	str	r3, [r5, #0]
 8005bd2:	f7fb fee0 	bl	8001996 <_fstat>
 8005bd6:	1c43      	adds	r3, r0, #1
 8005bd8:	d103      	bne.n	8005be2 <_fstat_r+0x1e>
 8005bda:	682b      	ldr	r3, [r5, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d000      	beq.n	8005be2 <_fstat_r+0x1e>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd70      	pop	{r4, r5, r6, pc}
 8005be4:	20000450 	.word	0x20000450

08005be8 <_isatty_r>:
 8005be8:	2300      	movs	r3, #0
 8005bea:	b570      	push	{r4, r5, r6, lr}
 8005bec:	4d06      	ldr	r5, [pc, #24]	@ (8005c08 <_isatty_r+0x20>)
 8005bee:	0004      	movs	r4, r0
 8005bf0:	0008      	movs	r0, r1
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	f7fb fedd 	bl	80019b2 <_isatty>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d103      	bne.n	8005c04 <_isatty_r+0x1c>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d000      	beq.n	8005c04 <_isatty_r+0x1c>
 8005c02:	6023      	str	r3, [r4, #0]
 8005c04:	bd70      	pop	{r4, r5, r6, pc}
 8005c06:	46c0      	nop			@ (mov r8, r8)
 8005c08:	20000450 	.word	0x20000450

08005c0c <_init>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	46c0      	nop			@ (mov r8, r8)
 8005c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c12:	bc08      	pop	{r3}
 8005c14:	469e      	mov	lr, r3
 8005c16:	4770      	bx	lr

08005c18 <_fini>:
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	46c0      	nop			@ (mov r8, r8)
 8005c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1e:	bc08      	pop	{r3}
 8005c20:	469e      	mov	lr, r3
 8005c22:	4770      	bx	lr
