
IR_decoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a78  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004b38  08004b38  00005b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb0  08004bb0  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004bb0  08004bb0  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bb0  08004bb0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb0  08004bb0  00005bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bb4  08004bb4  00005bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004bb8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000068  08004c20  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08004c20  0000638c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce82  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eea  00000000  00000000  00012f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00014e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ee  00000000  00000000  00015aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011259  00000000  00000000  00016496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f238  00000000  00000000  000276ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066f80  00000000  00000000  00036927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009d8a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a4  00000000  00000000  0009d8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000a0d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b20 	.word	0x08004b20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004b20 	.word	0x08004b20

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fdcb 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f843 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f9f9 	bl	8000638 <MX_GPIO_Init>
  MX_DMA_Init();
 8000246:	f000 f9d9 	bl	80005fc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800024a:	f000 f9a7 	bl	800059c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800024e:	f000 f89b 	bl	8000388 <MX_TIM3_Init>
  MX_TIM15_Init();
 8000252:	f000 f8ef 	bl	8000434 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); // IR Receiver timer start
 8000256:	4b1a      	ldr	r3, [pc, #104]	@ (80002c0 <main+0x8c>)
 8000258:	0018      	movs	r0, r3
 800025a:	f001 ffd5 	bl	8002208 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim3, 0); // IR Receiver timer cnt set
 800025e:	4b18      	ldr	r3, [pc, #96]	@ (80002c0 <main+0x8c>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2200      	movs	r2, #0
 8000264:	625a      	str	r2, [r3, #36]	@ 0x24


  // Set an initial LED color (e.g., red)
     set_all_leds(255,0,0);
 8000266:	2200      	movs	r2, #0
 8000268:	2100      	movs	r1, #0
 800026a:	20ff      	movs	r0, #255	@ 0xff
 800026c:	f000 fb74 	bl	8000958 <set_all_leds>
     send_led_data();
 8000270:	f000 fb9a 	bl	80009a8 <send_led_data>


  //HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);

  uint32_t tm = 0; // Timestamp variable
 8000274:	2300      	movs	r3, #0
 8000276:	607b      	str	r3, [r7, #4]
  uint8_t i = 0;
 8000278:	1cfb      	adds	r3, r7, #3
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (tm < HAL_GetTick()) {
 800027e:	f000 fe03 	bl	8000e88 <HAL_GetTick>
 8000282:	0002      	movs	r2, r0
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4293      	cmp	r3, r2
 8000288:	d2f9      	bcs.n	800027e <main+0x4a>
			tm = HAL_GetTick() + 100;
 800028a:	f000 fdfd 	bl	8000e88 <HAL_GetTick>
 800028e:	0003      	movs	r3, r0
 8000290:	3364      	adds	r3, #100	@ 0x64
 8000292:	607b      	str	r3, [r7, #4]

			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //LED
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	019b      	lsls	r3, r3, #6
 8000298:	4a0a      	ldr	r2, [pc, #40]	@ (80002c4 <main+0x90>)
 800029a:	0019      	movs	r1, r3
 800029c:	0010      	movs	r0, r2
 800029e:	f001 fa00 	bl	80016a2 <HAL_GPIO_TogglePin>

			set_all_leds(i, 255, 0);
 80002a2:	1cfb      	adds	r3, r7, #3
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2200      	movs	r2, #0
 80002a8:	21ff      	movs	r1, #255	@ 0xff
 80002aa:	0018      	movs	r0, r3
 80002ac:	f000 fb54 	bl	8000958 <set_all_leds>
			send_led_data();
 80002b0:	f000 fb7a 	bl	80009a8 <send_led_data>

			i+=10;
 80002b4:	1cfb      	adds	r3, r7, #3
 80002b6:	1cfa      	adds	r2, r7, #3
 80002b8:	7812      	ldrb	r2, [r2, #0]
 80002ba:	320a      	adds	r2, #10
 80002bc:	701a      	strb	r2, [r3, #0]
		if (tm < HAL_GetTick()) {
 80002be:	e7de      	b.n	800027e <main+0x4a>
 80002c0:	20000084 	.word	0x20000084
 80002c4:	48000800 	.word	0x48000800

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b095      	sub	sp, #84	@ 0x54
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	2420      	movs	r4, #32
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	0018      	movs	r0, r3
 80002d4:	2330      	movs	r3, #48	@ 0x30
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f003 fddf 	bl	8003e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002de:	2310      	movs	r3, #16
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	0018      	movs	r0, r3
 80002e4:	2310      	movs	r3, #16
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f003 fdd7 	bl	8003e9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ee:	003b      	movs	r3, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	2310      	movs	r3, #16
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f003 fdd0 	bl	8003e9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002fc:	0021      	movs	r1, r4
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2201      	movs	r2, #1
 8000302:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2201      	movs	r2, #1
 8000308:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2202      	movs	r2, #2
 800030e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2280      	movs	r2, #128	@ 0x80
 8000314:	0252      	lsls	r2, r2, #9
 8000316:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2280      	movs	r2, #128	@ 0x80
 800031c:	0352      	lsls	r2, r2, #13
 800031e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	187b      	adds	r3, r7, r1
 8000328:	0018      	movs	r0, r3
 800032a:	f001 f9f1 	bl	8001710 <HAL_RCC_OscConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000332:	f000 fb49 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	2110      	movs	r1, #16
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2207      	movs	r2, #7
 800033c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2202      	movs	r2, #2
 8000342:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2101      	movs	r1, #1
 8000354:	0018      	movs	r0, r3
 8000356:	f001 fcf5 	bl	8001d44 <HAL_RCC_ClockConfig>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800035e:	f000 fb33 	bl	80009c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000362:	003b      	movs	r3, r7
 8000364:	2201      	movs	r2, #1
 8000366:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000368:	003b      	movs	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036e:	003b      	movs	r3, r7
 8000370:	0018      	movs	r0, r3
 8000372:	f001 fe2b 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800037a:	f000 fb25 	bl	80009c8 <Error_Handler>
  }
}
 800037e:	46c0      	nop			@ (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	b015      	add	sp, #84	@ 0x54
 8000384:	bd90      	pop	{r4, r7, pc}
	...

08000388 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800038e:	2308      	movs	r3, #8
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	0018      	movs	r0, r3
 8000394:	2310      	movs	r3, #16
 8000396:	001a      	movs	r2, r3
 8000398:	2100      	movs	r1, #0
 800039a:	f003 fd7f 	bl	8003e9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800039e:	003b      	movs	r3, r7
 80003a0:	0018      	movs	r0, r3
 80003a2:	2308      	movs	r3, #8
 80003a4:	001a      	movs	r2, r3
 80003a6:	2100      	movs	r1, #0
 80003a8:	f003 fd78 	bl	8003e9c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000428 <MX_TIM3_Init+0xa0>)
 80003ae:	4a1f      	ldr	r2, [pc, #124]	@ (800042c <MX_TIM3_Init+0xa4>)
 80003b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <MX_TIM3_Init+0xa0>)
 80003b4:	2230      	movs	r2, #48	@ 0x30
 80003b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <MX_TIM3_Init+0xa0>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003be:	4b1a      	ldr	r3, [pc, #104]	@ (8000428 <MX_TIM3_Init+0xa0>)
 80003c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000430 <MX_TIM3_Init+0xa8>)
 80003c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c4:	4b18      	ldr	r3, [pc, #96]	@ (8000428 <MX_TIM3_Init+0xa0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ca:	4b17      	ldr	r3, [pc, #92]	@ (8000428 <MX_TIM3_Init+0xa0>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003d0:	4b15      	ldr	r3, [pc, #84]	@ (8000428 <MX_TIM3_Init+0xa0>)
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 fec8 	bl	8002168 <HAL_TIM_Base_Init>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80003dc:	f000 faf4 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e0:	2108      	movs	r1, #8
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2280      	movs	r2, #128	@ 0x80
 80003e6:	0152      	lsls	r2, r2, #5
 80003e8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003ea:	187a      	adds	r2, r7, r1
 80003ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <MX_TIM3_Init+0xa0>)
 80003ee:	0011      	movs	r1, r2
 80003f0:	0018      	movs	r0, r3
 80003f2:	f002 fa1b 	bl	800282c <HAL_TIM_ConfigClockSource>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80003fa:	f000 fae5 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fe:	003b      	movs	r3, r7
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000404:	003b      	movs	r3, r7
 8000406:	2200      	movs	r2, #0
 8000408:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800040a:	003a      	movs	r2, r7
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <MX_TIM3_Init+0xa0>)
 800040e:	0011      	movs	r1, r2
 8000410:	0018      	movs	r0, r3
 8000412:	f002 ff09 	bl	8003228 <HAL_TIMEx_MasterConfigSynchronization>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800041a:	f000 fad5 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b006      	add	sp, #24
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	20000084 	.word	0x20000084
 800042c:	40000400 	.word	0x40000400
 8000430:	0000ffff 	.word	0x0000ffff

08000434 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b096      	sub	sp, #88	@ 0x58
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043a:	2348      	movs	r3, #72	@ 0x48
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	0018      	movs	r0, r3
 8000440:	2310      	movs	r3, #16
 8000442:	001a      	movs	r2, r3
 8000444:	2100      	movs	r1, #0
 8000446:	f003 fd29 	bl	8003e9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800044a:	2340      	movs	r3, #64	@ 0x40
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	0018      	movs	r0, r3
 8000450:	2308      	movs	r3, #8
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f003 fd21 	bl	8003e9c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800045a:	2324      	movs	r3, #36	@ 0x24
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	0018      	movs	r0, r3
 8000460:	231c      	movs	r3, #28
 8000462:	001a      	movs	r2, r3
 8000464:	2100      	movs	r1, #0
 8000466:	f003 fd19 	bl	8003e9c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	0018      	movs	r0, r3
 800046e:	2320      	movs	r3, #32
 8000470:	001a      	movs	r2, r3
 8000472:	2100      	movs	r1, #0
 8000474:	f003 fd12 	bl	8003e9c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000478:	4b46      	ldr	r3, [pc, #280]	@ (8000594 <MX_TIM15_Init+0x160>)
 800047a:	4a47      	ldr	r2, [pc, #284]	@ (8000598 <MX_TIM15_Init+0x164>)
 800047c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800047e:	4b45      	ldr	r3, [pc, #276]	@ (8000594 <MX_TIM15_Init+0x160>)
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000484:	4b43      	ldr	r3, [pc, #268]	@ (8000594 <MX_TIM15_Init+0x160>)
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 59;
 800048a:	4b42      	ldr	r3, [pc, #264]	@ (8000594 <MX_TIM15_Init+0x160>)
 800048c:	223b      	movs	r2, #59	@ 0x3b
 800048e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000490:	4b40      	ldr	r3, [pc, #256]	@ (8000594 <MX_TIM15_Init+0x160>)
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000496:	4b3f      	ldr	r3, [pc, #252]	@ (8000594 <MX_TIM15_Init+0x160>)
 8000498:	2200      	movs	r2, #0
 800049a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800049c:	4b3d      	ldr	r3, [pc, #244]	@ (8000594 <MX_TIM15_Init+0x160>)
 800049e:	2280      	movs	r2, #128	@ 0x80
 80004a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80004a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000594 <MX_TIM15_Init+0x160>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 fe5f 	bl	8002168 <HAL_TIM_Base_Init>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80004ae:	f000 fa8b 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b2:	2148      	movs	r1, #72	@ 0x48
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2280      	movs	r2, #128	@ 0x80
 80004b8:	0152      	lsls	r2, r2, #5
 80004ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80004bc:	187a      	adds	r2, r7, r1
 80004be:	4b35      	ldr	r3, [pc, #212]	@ (8000594 <MX_TIM15_Init+0x160>)
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f002 f9b2 	bl	800282c <HAL_TIM_ConfigClockSource>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80004cc:	f000 fa7c 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80004d0:	4b30      	ldr	r3, [pc, #192]	@ (8000594 <MX_TIM15_Init+0x160>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f001 fedc 	bl	8002290 <HAL_TIM_PWM_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80004dc:	f000 fa74 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e0:	2140      	movs	r1, #64	@ 0x40
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80004ee:	187a      	adds	r2, r7, r1
 80004f0:	4b28      	ldr	r3, [pc, #160]	@ (8000594 <MX_TIM15_Init+0x160>)
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f002 fe97 	bl	8003228 <HAL_TIMEx_MasterConfigSynchronization>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80004fe:	f000 fa63 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000502:	2124      	movs	r1, #36	@ 0x24
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2260      	movs	r2, #96	@ 0x60
 8000508:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 30;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	221e      	movs	r2, #30
 800050e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2200      	movs	r2, #0
 8000526:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800052e:	1879      	adds	r1, r7, r1
 8000530:	4b18      	ldr	r3, [pc, #96]	@ (8000594 <MX_TIM15_Init+0x160>)
 8000532:	2200      	movs	r2, #0
 8000534:	0018      	movs	r0, r3
 8000536:	f002 f8b3 	bl	80026a0 <HAL_TIM_PWM_ConfigChannel>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800053e:	f000 fa43 	bl	80009c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2280      	movs	r2, #128	@ 0x80
 8000564:	0192      	lsls	r2, r2, #6
 8000566:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800056e:	1d3a      	adds	r2, r7, #4
 8000570:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <MX_TIM15_Init+0x160>)
 8000572:	0011      	movs	r1, r2
 8000574:	0018      	movs	r0, r3
 8000576:	f002 feaf 	bl	80032d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM15_Init+0x14e>
  {
    Error_Handler();
 800057e:	f000 fa23 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000582:	4b04      	ldr	r3, [pc, #16]	@ (8000594 <MX_TIM15_Init+0x160>)
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fabb 	bl	8000b00 <HAL_TIM_MspPostInit>

}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b016      	add	sp, #88	@ 0x58
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	200000cc 	.word	0x200000cc
 8000598:	40014000 	.word	0x40014000

0800059c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005a0:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <MX_USART1_UART_Init+0x58>)
 80005a2:	4a15      	ldr	r2, [pc, #84]	@ (80005f8 <MX_USART1_UART_Init+0x5c>)
 80005a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005a6:	4b13      	ldr	r3, [pc, #76]	@ (80005f4 <MX_USART1_UART_Init+0x58>)
 80005a8:	22e1      	movs	r2, #225	@ 0xe1
 80005aa:	0252      	lsls	r2, r2, #9
 80005ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ae:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <MX_USART1_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <MX_USART1_UART_Init+0x58>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_USART1_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <MX_USART1_UART_Init+0x58>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <MX_USART1_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005cc:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <MX_USART1_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <MX_USART1_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d8:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <MX_USART1_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005de:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <MX_USART1_UART_Init+0x58>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 fed7 	bl	8003394 <HAL_UART_Init>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005ea:	f000 f9ed 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000158 	.word	0x20000158
 80005f8:	40013800 	.word	0x40013800

080005fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <MX_DMA_Init+0x38>)
 8000604:	695a      	ldr	r2, [r3, #20]
 8000606:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <MX_DMA_Init+0x38>)
 8000608:	2101      	movs	r1, #1
 800060a:	430a      	orrs	r2, r1
 800060c:	615a      	str	r2, [r3, #20]
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_DMA_Init+0x38>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	2201      	movs	r2, #1
 8000614:	4013      	ands	r3, r2
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	200b      	movs	r0, #11
 8000620:	f000 fce8 	bl	8000ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000624:	200b      	movs	r0, #11
 8000626:	f000 fcfa 	bl	800101e <HAL_NVIC_EnableIRQ>

}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	40021000 	.word	0x40021000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b08b      	sub	sp, #44	@ 0x2c
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	2414      	movs	r4, #20
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2314      	movs	r3, #20
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f003 fc27 	bl	8003e9c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b43      	ldr	r3, [pc, #268]	@ (800075c <MX_GPIO_Init+0x124>)
 8000650:	695a      	ldr	r2, [r3, #20]
 8000652:	4b42      	ldr	r3, [pc, #264]	@ (800075c <MX_GPIO_Init+0x124>)
 8000654:	2180      	movs	r1, #128	@ 0x80
 8000656:	0309      	lsls	r1, r1, #12
 8000658:	430a      	orrs	r2, r1
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	4b3f      	ldr	r3, [pc, #252]	@ (800075c <MX_GPIO_Init+0x124>)
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	2380      	movs	r3, #128	@ 0x80
 8000662:	031b      	lsls	r3, r3, #12
 8000664:	4013      	ands	r3, r2
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4b3c      	ldr	r3, [pc, #240]	@ (800075c <MX_GPIO_Init+0x124>)
 800066c:	695a      	ldr	r2, [r3, #20]
 800066e:	4b3b      	ldr	r3, [pc, #236]	@ (800075c <MX_GPIO_Init+0x124>)
 8000670:	2180      	movs	r1, #128	@ 0x80
 8000672:	03c9      	lsls	r1, r1, #15
 8000674:	430a      	orrs	r2, r1
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	4b38      	ldr	r3, [pc, #224]	@ (800075c <MX_GPIO_Init+0x124>)
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	2380      	movs	r3, #128	@ 0x80
 800067e:	03db      	lsls	r3, r3, #15
 8000680:	4013      	ands	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b35      	ldr	r3, [pc, #212]	@ (800075c <MX_GPIO_Init+0x124>)
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	4b34      	ldr	r3, [pc, #208]	@ (800075c <MX_GPIO_Init+0x124>)
 800068c:	2180      	movs	r1, #128	@ 0x80
 800068e:	0289      	lsls	r1, r1, #10
 8000690:	430a      	orrs	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	4b31      	ldr	r3, [pc, #196]	@ (800075c <MX_GPIO_Init+0x124>)
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	2380      	movs	r3, #128	@ 0x80
 800069a:	029b      	lsls	r3, r3, #10
 800069c:	4013      	ands	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b2e      	ldr	r3, [pc, #184]	@ (800075c <MX_GPIO_Init+0x124>)
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	4b2d      	ldr	r3, [pc, #180]	@ (800075c <MX_GPIO_Init+0x124>)
 80006a8:	2180      	movs	r1, #128	@ 0x80
 80006aa:	02c9      	lsls	r1, r1, #11
 80006ac:	430a      	orrs	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	4b2a      	ldr	r3, [pc, #168]	@ (800075c <MX_GPIO_Init+0x124>)
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	2380      	movs	r3, #128	@ 0x80
 80006b6:	02db      	lsls	r3, r3, #11
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006be:	2380      	movs	r3, #128	@ 0x80
 80006c0:	019b      	lsls	r3, r3, #6
 80006c2:	4827      	ldr	r0, [pc, #156]	@ (8000760 <MX_GPIO_Init+0x128>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	0019      	movs	r1, r3
 80006c8:	f000 ffce 	bl	8001668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2280      	movs	r2, #128	@ 0x80
 80006d0:	0192      	lsls	r2, r2, #6
 80006d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2201      	movs	r2, #1
 80006d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000760 <MX_GPIO_Init+0x128>)
 80006ea:	0019      	movs	r1, r3
 80006ec:	0010      	movs	r0, r2
 80006ee:	f000 fe4b 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2240      	movs	r2, #64	@ 0x40
 80006f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2284      	movs	r2, #132	@ 0x84
 80006fc:	0392      	lsls	r2, r2, #14
 80006fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	193a      	adds	r2, r7, r4
 8000708:	2390      	movs	r3, #144	@ 0x90
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	0011      	movs	r1, r2
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fe3a 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000714:	0021      	movs	r1, r4
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2280      	movs	r2, #128	@ 0x80
 800071a:	0192      	lsls	r2, r2, #6
 800071c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2202      	movs	r2, #2
 8000722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2202      	movs	r2, #2
 8000734:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	187b      	adds	r3, r7, r1
 8000738:	4a0a      	ldr	r2, [pc, #40]	@ (8000764 <MX_GPIO_Init+0x12c>)
 800073a:	0019      	movs	r1, r3
 800073c:	0010      	movs	r0, r2
 800073e:	f000 fe23 	bl	8001388 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	2007      	movs	r0, #7
 8000748:	f000 fc54 	bl	8000ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800074c:	2007      	movs	r0, #7
 800074e:	f000 fc66 	bl	800101e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b00b      	add	sp, #44	@ 0x2c
 8000758:	bd90      	pop	{r4, r7, pc}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	40021000 	.word	0x40021000
 8000760:	48000800 	.word	0x48000800
 8000764:	48000400 	.word	0x48000400

08000768 <_write>:

/* USER CODE BEGIN 4 */

/* UART PRINTF MAP */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	b29a      	uxth	r2, r3
 8000778:	2301      	movs	r3, #1
 800077a:	425b      	negs	r3, r3
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	4804      	ldr	r0, [pc, #16]	@ (8000790 <_write+0x28>)
 8000780:	f002 fe5c 	bl	800343c <HAL_UART_Transmit>
	return len;
 8000784:	687b      	ldr	r3, [r7, #4]
}
 8000786:	0018      	movs	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	b004      	add	sp, #16
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	20000158 	.word	0x20000158

08000794 <HAL_GPIO_EXTI_Callback>:



/* IR TIMER AND DECODING */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	0002      	movs	r2, r0
 800079c:	1dbb      	adds	r3, r7, #6
 800079e:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_6)
 80007a0:	1dbb      	adds	r3, r7, #6
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	2b40      	cmp	r3, #64	@ 0x40
 80007a6:	d168      	bne.n	800087a <HAL_GPIO_EXTI_Callback+0xe6>
  {
    if (__HAL_TIM_GET_COUNTER(&htim3) > 8000)
 80007a8:	4b36      	ldr	r3, [pc, #216]	@ (8000884 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007ae:	23fa      	movs	r3, #250	@ 0xfa
 80007b0:	015b      	lsls	r3, r3, #5
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d906      	bls.n	80007c4 <HAL_GPIO_EXTI_Callback+0x30>
    {
      tempCode = 0;
 80007b6:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <HAL_GPIO_EXTI_Callback+0xf4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
      bitIndex = 0;
 80007bc:	4b33      	ldr	r3, [pc, #204]	@ (800088c <HAL_GPIO_EXTI_Callback+0xf8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	e031      	b.n	8000828 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim3) > 1700)
 80007c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000884 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ca:	4a31      	ldr	r2, [pc, #196]	@ (8000890 <HAL_GPIO_EXTI_Callback+0xfc>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d912      	bls.n	80007f6 <HAL_GPIO_EXTI_Callback+0x62>
    {
      tempCode |= (1UL << (31-bitIndex));   // write 1
 80007d0:	4b2e      	ldr	r3, [pc, #184]	@ (800088c <HAL_GPIO_EXTI_Callback+0xf8>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	001a      	movs	r2, r3
 80007d6:	2380      	movs	r3, #128	@ 0x80
 80007d8:	061b      	lsls	r3, r3, #24
 80007da:	40d3      	lsrs	r3, r2
 80007dc:	001a      	movs	r2, r3
 80007de:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <HAL_GPIO_EXTI_Callback+0xf4>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	431a      	orrs	r2, r3
 80007e4:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <HAL_GPIO_EXTI_Callback+0xf4>)
 80007e6:	601a      	str	r2, [r3, #0]
      bitIndex++;
 80007e8:	4b28      	ldr	r3, [pc, #160]	@ (800088c <HAL_GPIO_EXTI_Callback+0xf8>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b26      	ldr	r3, [pc, #152]	@ (800088c <HAL_GPIO_EXTI_Callback+0xf8>)
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	e018      	b.n	8000828 <HAL_GPIO_EXTI_Callback+0x94>
    }
    else if (__HAL_TIM_GET_COUNTER(&htim3) > 1000)
 80007f6:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007fc:	23fa      	movs	r3, #250	@ 0xfa
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	429a      	cmp	r2, r3
 8000802:	d911      	bls.n	8000828 <HAL_GPIO_EXTI_Callback+0x94>
    {
      tempCode &= ~(1UL << (31-bitIndex));  // write 0
 8000804:	4b21      	ldr	r3, [pc, #132]	@ (800088c <HAL_GPIO_EXTI_Callback+0xf8>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	001a      	movs	r2, r3
 800080a:	2380      	movs	r3, #128	@ 0x80
 800080c:	061b      	lsls	r3, r3, #24
 800080e:	40d3      	lsrs	r3, r2
 8000810:	43da      	mvns	r2, r3
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	401a      	ands	r2, r3
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <HAL_GPIO_EXTI_Callback+0xf4>)
 800081a:	601a      	str	r2, [r3, #0]
      bitIndex++;
 800081c:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <HAL_GPIO_EXTI_Callback+0xf8>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b19      	ldr	r3, [pc, #100]	@ (800088c <HAL_GPIO_EXTI_Callback+0xf8>)
 8000826:	701a      	strb	r2, [r3, #0]
    }
    if(bitIndex == 32)
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <HAL_GPIO_EXTI_Callback+0xf8>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b20      	cmp	r3, #32
 800082e:	d120      	bne.n	8000872 <HAL_GPIO_EXTI_Callback+0xde>
    {
      cmdli = ~tempCode; // Logical inverted last 8 bits
 8000830:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	43db      	mvns	r3, r3
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <HAL_GPIO_EXTI_Callback+0x100>)
 800083c:	701a      	strb	r2, [r3, #0]
      cmd = tempCode >> 8; // Second last 8 bits
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <HAL_GPIO_EXTI_Callback+0x104>)
 8000848:	701a      	strb	r2, [r3, #0]
      if(cmdli == cmd) // Check for errors
 800084a:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <HAL_GPIO_EXTI_Callback+0x100>)
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <HAL_GPIO_EXTI_Callback+0x104>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d10a      	bne.n	800086c <HAL_GPIO_EXTI_Callback+0xd8>
      {
        code = tempCode; // If no bit errors
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <HAL_GPIO_EXTI_Callback+0x108>)
 800085c:	601a      	str	r2, [r3, #0]
        // Do your main work HERE
        printf("Data: %X\r\n",code);
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <HAL_GPIO_EXTI_Callback+0x108>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f003 fabc 	bl	8003de4 <iprintf>
      }
      bitIndex = 0;
 800086c:	4b07      	ldr	r3, [pc, #28]	@ (800088c <HAL_GPIO_EXTI_Callback+0xf8>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
    }
    __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000872:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	20000084 	.word	0x20000084
 8000888:	200001e0 	.word	0x200001e0
 800088c:	200001e4 	.word	0x200001e4
 8000890:	000006a4 	.word	0x000006a4
 8000894:	200001e6 	.word	0x200001e6
 8000898:	200001e5 	.word	0x200001e5
 800089c:	200001e8 	.word	0x200001e8
 80008a0:	08004b38 	.word	0x08004b38

080008a4 <set_led_color>:


/* Neopixel LEDS */
// Helper to convert an RGB value into WS2812 format
void set_led_color(uint8_t led_num, uint8_t red, uint8_t green, uint8_t blue) {
 80008a4:	b5b0      	push	{r4, r5, r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	0005      	movs	r5, r0
 80008ac:	000c      	movs	r4, r1
 80008ae:	0010      	movs	r0, r2
 80008b0:	0019      	movs	r1, r3
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	1c2a      	adds	r2, r5, #0
 80008b6:	701a      	strb	r2, [r3, #0]
 80008b8:	1dbb      	adds	r3, r7, #6
 80008ba:	1c22      	adds	r2, r4, #0
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	1d7b      	adds	r3, r7, #5
 80008c0:	1c02      	adds	r2, r0, #0
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	1c0a      	adds	r2, r1, #0
 80008c8:	701a      	strb	r2, [r3, #0]
    if (led_num >= NUM_LEDS) return;
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d83b      	bhi.n	800094a <set_led_color+0xa6>
    uint32_t color = (green << 16) | (red << 8) | blue;
 80008d2:	1d7b      	adds	r3, r7, #5
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	041a      	lsls	r2, r3, #16
 80008d8:	1dbb      	adds	r3, r7, #6
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	021b      	lsls	r3, r3, #8
 80008de:	431a      	orrs	r2, r3
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 24; i++) {
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	e025      	b.n	800093a <set_led_color+0x96>
        if (color & (1 << (23 - i))) {
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2217      	movs	r2, #23
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	2201      	movs	r2, #1
 80008f6:	409a      	lsls	r2, r3
 80008f8:	0013      	movs	r3, r2
 80008fa:	001a      	movs	r2, r3
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4013      	ands	r3, r2
 8000900:	d00c      	beq.n	800091c <set_led_color+0x78>
            led_data[led_num * 24 + i] = 38;  // Logic 1
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	0013      	movs	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	189b      	adds	r3, r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	001a      	movs	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	18d3      	adds	r3, r2, r3
 8000914:	4a0f      	ldr	r2, [pc, #60]	@ (8000954 <set_led_color+0xb0>)
 8000916:	2126      	movs	r1, #38	@ 0x26
 8000918:	54d1      	strb	r1, [r2, r3]
 800091a:	e00b      	b.n	8000934 <set_led_color+0x90>
        } else {
            led_data[led_num * 24 + i] = 19;  // Logic 0
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	0013      	movs	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	189b      	adds	r3, r3, r2
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	001a      	movs	r2, r3
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	18d3      	adds	r3, r2, r3
 800092e:	4a09      	ldr	r2, [pc, #36]	@ (8000954 <set_led_color+0xb0>)
 8000930:	2113      	movs	r1, #19
 8000932:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < 24; i++) {
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3301      	adds	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b17      	cmp	r3, #23
 800093e:	ddd6      	ble.n	80008ee <set_led_color+0x4a>
        }
    }

    led_data[LED_DATA_SIZE]=0; //posledni 0 z nějakeho dovudo
 8000940:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <set_led_color+0xb0>)
 8000942:	2249      	movs	r2, #73	@ 0x49
 8000944:	2100      	movs	r1, #0
 8000946:	5499      	strb	r1, [r3, r2]
 8000948:	e000      	b.n	800094c <set_led_color+0xa8>
    if (led_num >= NUM_LEDS) return;
 800094a:	46c0      	nop			@ (mov r8, r8)
}
 800094c:	46bd      	mov	sp, r7
 800094e:	b004      	add	sp, #16
 8000950:	bdb0      	pop	{r4, r5, r7, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	200001ec 	.word	0x200001ec

08000958 <set_all_leds>:

// Initialize all LEDs to a color
void set_all_leds(uint8_t red, uint8_t green, uint8_t blue) {
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	0004      	movs	r4, r0
 8000960:	0008      	movs	r0, r1
 8000962:	0011      	movs	r1, r2
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	1c22      	adds	r2, r4, #0
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	1dbb      	adds	r3, r7, #6
 800096c:	1c02      	adds	r2, r0, #0
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	1d7b      	adds	r3, r7, #5
 8000972:	1c0a      	adds	r2, r1, #0
 8000974:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e00d      	b.n	8000998 <set_all_leds+0x40>
        set_led_color(i, red, green, blue);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	b2d8      	uxtb	r0, r3
 8000980:	1d7b      	adds	r3, r7, #5
 8000982:	781c      	ldrb	r4, [r3, #0]
 8000984:	1dbb      	adds	r3, r7, #6
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	7819      	ldrb	r1, [r3, #0]
 800098c:	0023      	movs	r3, r4
 800098e:	f7ff ff89 	bl	80008a4 <set_led_color>
    for (int i = 0; i < NUM_LEDS; i++) {
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3301      	adds	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b02      	cmp	r3, #2
 800099c:	ddee      	ble.n	800097c <set_all_leds+0x24>
    }
}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b005      	add	sp, #20
 80009a6:	bd90      	pop	{r4, r7, pc}

080009a8 <send_led_data>:

// Send LED data using DMA
void send_led_data() {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start_DMA(&htim15, TIM_CHANNEL_1, (uint32_t *)led_data, LED_DATA_SIZE);
 80009ac:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <send_led_data+0x18>)
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <send_led_data+0x1c>)
 80009b0:	2349      	movs	r3, #73	@ 0x49
 80009b2:	2100      	movs	r1, #0
 80009b4:	f001 fcc4 	bl	8002340 <HAL_TIM_PWM_Start_DMA>
    //HAL_Delay(1);  // Ensure data is latched
    //HAL_TIM_PWM_Stop_DMA(&htim15, TIM_CHANNEL_1);
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	200001ec 	.word	0x200001ec
 80009c4:	200000cc 	.word	0x200000cc

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <HAL_MspInit+0x44>)
 80009dc:	699a      	ldr	r2, [r3, #24]
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <HAL_MspInit+0x44>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	430a      	orrs	r2, r1
 80009e4:	619a      	str	r2, [r3, #24]
 80009e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <HAL_MspInit+0x44>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	2201      	movs	r2, #1
 80009ec:	4013      	ands	r3, r2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <HAL_MspInit+0x44>)
 80009f4:	69da      	ldr	r2, [r3, #28]
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <HAL_MspInit+0x44>)
 80009f8:	2180      	movs	r1, #128	@ 0x80
 80009fa:	0549      	lsls	r1, r1, #21
 80009fc:	430a      	orrs	r2, r1
 80009fe:	61da      	str	r2, [r3, #28]
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <HAL_MspInit+0x44>)
 8000a02:	69da      	ldr	r2, [r3, #28]
 8000a04:	2380      	movs	r3, #128	@ 0x80
 8000a06:	055b      	lsls	r3, r3, #21
 8000a08:	4013      	ands	r3, r2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b002      	add	sp, #8
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a30      	ldr	r2, [pc, #192]	@ (8000aec <HAL_TIM_Base_MspInit+0xd0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d10c      	bne.n	8000a48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a2e:	4b30      	ldr	r3, [pc, #192]	@ (8000af0 <HAL_TIM_Base_MspInit+0xd4>)
 8000a30:	69da      	ldr	r2, [r3, #28]
 8000a32:	4b2f      	ldr	r3, [pc, #188]	@ (8000af0 <HAL_TIM_Base_MspInit+0xd4>)
 8000a34:	2102      	movs	r1, #2
 8000a36:	430a      	orrs	r2, r1
 8000a38:	61da      	str	r2, [r3, #28]
 8000a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000af0 <HAL_TIM_Base_MspInit+0xd4>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	2202      	movs	r2, #2
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000a46:	e04c      	b.n	8000ae2 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM15)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a29      	ldr	r2, [pc, #164]	@ (8000af4 <HAL_TIM_Base_MspInit+0xd8>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d147      	bne.n	8000ae2 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000a52:	4b27      	ldr	r3, [pc, #156]	@ (8000af0 <HAL_TIM_Base_MspInit+0xd4>)
 8000a54:	699a      	ldr	r2, [r3, #24]
 8000a56:	4b26      	ldr	r3, [pc, #152]	@ (8000af0 <HAL_TIM_Base_MspInit+0xd4>)
 8000a58:	2180      	movs	r1, #128	@ 0x80
 8000a5a:	0249      	lsls	r1, r1, #9
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	619a      	str	r2, [r3, #24]
 8000a60:	4b23      	ldr	r3, [pc, #140]	@ (8000af0 <HAL_TIM_Base_MspInit+0xd4>)
 8000a62:	699a      	ldr	r2, [r3, #24]
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	025b      	lsls	r3, r3, #9
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8000a6e:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000a70:	4a22      	ldr	r2, [pc, #136]	@ (8000afc <HAL_TIM_Base_MspInit+0xe0>)
 8000a72:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a74:	4b20      	ldr	r3, [pc, #128]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000a76:	2210      	movs	r2, #16
 8000a78:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000a82:	2280      	movs	r2, #128	@ 0x80
 8000a84:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000a88:	2280      	movs	r2, #128	@ 0x80
 8000a8a:	0052      	lsls	r2, r2, #1
 8000a8c:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000a90:	2280      	movs	r2, #128	@ 0x80
 8000a92:	00d2      	lsls	r2, r2, #3
 8000a94:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_CIRCULAR;
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000a98:	2220      	movs	r2, #32
 8000a9a:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fad7 	bl	8001058 <HAL_DMA_Init>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_TIM_Base_MspInit+0x96>
      Error_Handler();
 8000aae:	f7ff ff8b 	bl	80009c8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a10      	ldr	r2, [pc, #64]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000ab6:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000ac2:	621a      	str	r2, [r3, #32]
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000ace:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a07      	ldr	r2, [pc, #28]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000ada:	635a      	str	r2, [r3, #52]	@ 0x34
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_TIM_Base_MspInit+0xdc>)
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b004      	add	sp, #16
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	40000400 	.word	0x40000400
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40014000 	.word	0x40014000
 8000af8:	20000114 	.word	0x20000114
 8000afc:	40020058 	.word	0x40020058

08000b00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b089      	sub	sp, #36	@ 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	240c      	movs	r4, #12
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2314      	movs	r3, #20
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f003 f9c2 	bl	8003e9c <memset>
  if(htim->Instance==TIM15)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a15      	ldr	r2, [pc, #84]	@ (8000b74 <HAL_TIM_MspPostInit+0x74>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d124      	bne.n	8000b6c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <HAL_TIM_MspPostInit+0x78>)
 8000b24:	695a      	ldr	r2, [r3, #20]
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <HAL_TIM_MspPostInit+0x78>)
 8000b28:	2180      	movs	r1, #128	@ 0x80
 8000b2a:	0289      	lsls	r1, r1, #10
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	615a      	str	r2, [r3, #20]
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <HAL_TIM_MspPostInit+0x78>)
 8000b32:	695a      	ldr	r2, [r3, #20]
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	029b      	lsls	r3, r3, #10
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b3e:	0021      	movs	r1, r4
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2204      	movs	r2, #4
 8000b44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2202      	movs	r2, #2
 8000b4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	187a      	adds	r2, r7, r1
 8000b60:	2390      	movs	r3, #144	@ 0x90
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 fc0e 	bl	8001388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b009      	add	sp, #36	@ 0x24
 8000b72:	bd90      	pop	{r4, r7, pc}
 8000b74:	40014000 	.word	0x40014000
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b08b      	sub	sp, #44	@ 0x2c
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	2414      	movs	r4, #20
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	0018      	movs	r0, r3
 8000b8a:	2314      	movs	r3, #20
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f003 f984 	bl	8003e9c <memset>
  if(huart->Instance==USART1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1d      	ldr	r2, [pc, #116]	@ (8000c10 <HAL_UART_MspInit+0x94>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d133      	bne.n	8000c06 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <HAL_UART_MspInit+0x98>)
 8000ba0:	699a      	ldr	r2, [r3, #24]
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <HAL_UART_MspInit+0x98>)
 8000ba4:	2180      	movs	r1, #128	@ 0x80
 8000ba6:	01c9      	lsls	r1, r1, #7
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	619a      	str	r2, [r3, #24]
 8000bac:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <HAL_UART_MspInit+0x98>)
 8000bae:	699a      	ldr	r2, [r3, #24]
 8000bb0:	2380      	movs	r3, #128	@ 0x80
 8000bb2:	01db      	lsls	r3, r3, #7
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <HAL_UART_MspInit+0x98>)
 8000bbc:	695a      	ldr	r2, [r3, #20]
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <HAL_UART_MspInit+0x98>)
 8000bc0:	2180      	movs	r1, #128	@ 0x80
 8000bc2:	0289      	lsls	r1, r1, #10
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	615a      	str	r2, [r3, #20]
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <HAL_UART_MspInit+0x98>)
 8000bca:	695a      	ldr	r2, [r3, #20]
 8000bcc:	2380      	movs	r3, #128	@ 0x80
 8000bce:	029b      	lsls	r3, r3, #10
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	22c0      	movs	r2, #192	@ 0xc0
 8000bda:	00d2      	lsls	r2, r2, #3
 8000bdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	0021      	movs	r1, r4
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2202      	movs	r2, #2
 8000be4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	187a      	adds	r2, r7, r1
 8000bfa:	2390      	movs	r3, #144	@ 0x90
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 fbc1 	bl	8001388 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b00b      	add	sp, #44	@ 0x2c
 8000c0c:	bd90      	pop	{r4, r7, pc}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	40013800 	.word	0x40013800
 8000c14:	40021000 	.word	0x40021000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	e7fd      	b.n	8000c1c <NMI_Handler+0x4>

08000c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	e7fd      	b.n	8000c24 <HardFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c2c:	46c0      	nop			@ (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f000 f910 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c4e:	2040      	movs	r0, #64	@ 0x40
 8000c50:	f000 fd42 	bl	80016d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c54:	46c0      	nop			@ (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f000 faa6 	bl	80011b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	20000114 	.word	0x20000114

08000c74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	e00a      	b.n	8000c9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c86:	e000      	b.n	8000c8a <_read+0x16>
 8000c88:	bf00      	nop
 8000c8a:	0001      	movs	r1, r0
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	60ba      	str	r2, [r7, #8]
 8000c92:	b2ca      	uxtb	r2, r1
 8000c94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf0      	blt.n	8000c86 <_read+0x12>
  }

  return len;
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b006      	add	sp, #24
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	425b      	negs	r3, r3
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	2280      	movs	r2, #128	@ 0x80
 8000cd0:	0192      	lsls	r2, r2, #6
 8000cd2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_isatty>:

int _isatty(int file)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b004      	add	sp, #16
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	@ (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	@ (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	18d3      	adds	r3, r2, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f003 f906 	bl	8003f48 <__errno>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	425b      	negs	r3, r3
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	18d2      	adds	r2, r2, r3
 8000d56:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <_sbrk+0x64>)
 8000d58:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b006      	add	sp, #24
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20002000 	.word	0x20002000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	20000238 	.word	0x20000238
 8000d70:	20000390 	.word	0x20000390

08000d74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d78:	46c0      	nop			@ (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d80:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d84:	f7ff fff6 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	@ (8000dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <LoopForever+0xe>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dcc <LoopForever+0x16>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dae:	f003 f8d1 	bl	8003f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db2:	f7ff fa3f 	bl	8000234 <main>

08000db6 <LoopForever>:

LoopForever:
    b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   r0, =_estack
 8000db8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dc4:	08004bb8 	.word	0x08004bb8
  ldr r2, =_sbss
 8000dc8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dcc:	2000038c 	.word	0x2000038c

08000dd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <HAL_Init+0x24>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_Init+0x24>)
 8000dde:	2110      	movs	r1, #16
 8000de0:	430a      	orrs	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f809 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dea:	f7ff fdf3 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <HAL_InitTick+0x5c>)
 8000e06:	681c      	ldr	r4, [r3, #0]
 8000e08:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <HAL_InitTick+0x60>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	0019      	movs	r1, r3
 8000e0e:	23fa      	movs	r3, #250	@ 0xfa
 8000e10:	0098      	lsls	r0, r3, #2
 8000e12:	f7ff f983 	bl	800011c <__udivsi3>
 8000e16:	0003      	movs	r3, r0
 8000e18:	0019      	movs	r1, r3
 8000e1a:	0020      	movs	r0, r4
 8000e1c:	f7ff f97e 	bl	800011c <__udivsi3>
 8000e20:	0003      	movs	r3, r0
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 f90b 	bl	800103e <HAL_SYSTICK_Config>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e00f      	b.n	8000e50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d80b      	bhi.n	8000e4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	425b      	negs	r3, r3
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 f8d8 	bl	8000ff4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_InitTick+0x64>)
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b003      	add	sp, #12
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000004 	.word	0x20000004

08000e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <HAL_IncTick+0x1c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <HAL_IncTick+0x20>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	18d2      	adds	r2, r2, r3
 8000e74:	4b03      	ldr	r3, [pc, #12]	@ (8000e84 <HAL_IncTick+0x20>)
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	46c0      	nop			@ (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	20000008 	.word	0x20000008
 8000e84:	2000023c 	.word	0x2000023c

08000e88 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b02      	ldr	r3, [pc, #8]	@ (8000e98 <HAL_GetTick+0x10>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	2000023c 	.word	0x2000023c

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eae:	d809      	bhi.n	8000ec4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	231f      	movs	r3, #31
 8000eb8:	401a      	ands	r2, r3
 8000eba:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <__NVIC_EnableIRQ+0x30>)
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	4091      	lsls	r1, r2
 8000ec0:	000a      	movs	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]
  }
}
 8000ec4:	46c0      	nop			@ (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b002      	add	sp, #8
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ee4:	d828      	bhi.n	8000f38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8000fa4 <__NVIC_SetPriority+0xd4>)
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	33c0      	adds	r3, #192	@ 0xc0
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	589b      	ldr	r3, [r3, r2]
 8000ef6:	1dfa      	adds	r2, r7, #7
 8000ef8:	7812      	ldrb	r2, [r2, #0]
 8000efa:	0011      	movs	r1, r2
 8000efc:	2203      	movs	r2, #3
 8000efe:	400a      	ands	r2, r1
 8000f00:	00d2      	lsls	r2, r2, #3
 8000f02:	21ff      	movs	r1, #255	@ 0xff
 8000f04:	4091      	lsls	r1, r2
 8000f06:	000a      	movs	r2, r1
 8000f08:	43d2      	mvns	r2, r2
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	019b      	lsls	r3, r3, #6
 8000f12:	22ff      	movs	r2, #255	@ 0xff
 8000f14:	401a      	ands	r2, r3
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	4003      	ands	r3, r0
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f24:	481f      	ldr	r0, [pc, #124]	@ (8000fa4 <__NVIC_SetPriority+0xd4>)
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	33c0      	adds	r3, #192	@ 0xc0
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f36:	e031      	b.n	8000f9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f38:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa8 <__NVIC_SetPriority+0xd8>)
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	0019      	movs	r1, r3
 8000f40:	230f      	movs	r3, #15
 8000f42:	400b      	ands	r3, r1
 8000f44:	3b08      	subs	r3, #8
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3306      	adds	r3, #6
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	3304      	adds	r3, #4
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	1dfa      	adds	r2, r7, #7
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	0011      	movs	r1, r2
 8000f58:	2203      	movs	r2, #3
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	00d2      	lsls	r2, r2, #3
 8000f5e:	21ff      	movs	r1, #255	@ 0xff
 8000f60:	4091      	lsls	r1, r2
 8000f62:	000a      	movs	r2, r1
 8000f64:	43d2      	mvns	r2, r2
 8000f66:	401a      	ands	r2, r3
 8000f68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	019b      	lsls	r3, r3, #6
 8000f6e:	22ff      	movs	r2, #255	@ 0xff
 8000f70:	401a      	ands	r2, r3
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	0018      	movs	r0, r3
 8000f78:	2303      	movs	r3, #3
 8000f7a:	4003      	ands	r3, r0
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f80:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <__NVIC_SetPriority+0xd8>)
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	001c      	movs	r4, r3
 8000f88:	230f      	movs	r3, #15
 8000f8a:	4023      	ands	r3, r4
 8000f8c:	3b08      	subs	r3, #8
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	430a      	orrs	r2, r1
 8000f92:	3306      	adds	r3, #6
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	18c3      	adds	r3, r0, r3
 8000f98:	3304      	adds	r3, #4
 8000f9a:	601a      	str	r2, [r3, #0]
}
 8000f9c:	46c0      	nop			@ (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b003      	add	sp, #12
 8000fa2:	bd90      	pop	{r4, r7, pc}
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	1e5a      	subs	r2, r3, #1
 8000fb8:	2380      	movs	r3, #128	@ 0x80
 8000fba:	045b      	lsls	r3, r3, #17
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d301      	bcc.n	8000fc4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e010      	b.n	8000fe6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <SysTick_Config+0x44>)
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	3a01      	subs	r2, #1
 8000fca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fcc:	2301      	movs	r3, #1
 8000fce:	425b      	negs	r3, r3
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff ff7c 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <SysTick_Config+0x44>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <SysTick_Config+0x44>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	210f      	movs	r1, #15
 8001000:	187b      	adds	r3, r7, r1
 8001002:	1c02      	adds	r2, r0, #0
 8001004:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	187b      	adds	r3, r7, r1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b25b      	sxtb	r3, r3
 800100e:	0011      	movs	r1, r2
 8001010:	0018      	movs	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b004      	add	sp, #16
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	0002      	movs	r2, r0
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b25b      	sxtb	r3, r3
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff ff33 	bl	8000e9c <__NVIC_EnableIRQ>
}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b002      	add	sp, #8
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff ffaf 	bl	8000fac <SysTick_Config>
 800104e:	0003      	movs	r3, r0
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	b002      	add	sp, #8
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e036      	b.n	80010dc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2221      	movs	r2, #33	@ 0x21
 8001072:	2102      	movs	r1, #2
 8001074:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4a18      	ldr	r2, [pc, #96]	@ (80010e4 <HAL_DMA_Init+0x8c>)
 8001082:	4013      	ands	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800108e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 f946 	bl	8001350 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2221      	movs	r2, #33	@ 0x21
 80010ce:	2101      	movs	r1, #1
 80010d0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2220      	movs	r2, #32
 80010d6:	2100      	movs	r1, #0
 80010d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b004      	add	sp, #16
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	ffffc00f 	.word	0xffffc00f

080010e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010f6:	2317      	movs	r3, #23
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2220      	movs	r2, #32
 8001102:	5c9b      	ldrb	r3, [r3, r2]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d101      	bne.n	800110c <HAL_DMA_Start_IT+0x24>
 8001108:	2302      	movs	r3, #2
 800110a:	e04f      	b.n	80011ac <HAL_DMA_Start_IT+0xc4>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2220      	movs	r2, #32
 8001110:	2101      	movs	r1, #1
 8001112:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2221      	movs	r2, #33	@ 0x21
 8001118:	5c9b      	ldrb	r3, [r3, r2]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b01      	cmp	r3, #1
 800111e:	d13a      	bne.n	8001196 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2221      	movs	r2, #33	@ 0x21
 8001124:	2102      	movs	r1, #2
 8001126:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2200      	movs	r2, #0
 800112c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	438a      	bics	r2, r1
 800113c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	68b9      	ldr	r1, [r7, #8]
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f000 f8d7 	bl	80012f8 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114e:	2b00      	cmp	r3, #0
 8001150:	d008      	beq.n	8001164 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	210e      	movs	r1, #14
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e00f      	b.n	8001184 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	210a      	movs	r1, #10
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2104      	movs	r1, #4
 8001180:	438a      	bics	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2101      	movs	r1, #1
 8001190:	430a      	orrs	r2, r1
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	e007      	b.n	80011a6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2220      	movs	r2, #32
 800119a:	2100      	movs	r1, #0
 800119c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800119e:	2317      	movs	r3, #23
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	2202      	movs	r2, #2
 80011a4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80011a6:	2317      	movs	r3, #23
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	781b      	ldrb	r3, [r3, #0]
}
 80011ac:	0018      	movs	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b006      	add	sp, #24
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	2204      	movs	r2, #4
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	4013      	ands	r3, r2
 80011da:	d024      	beq.n	8001226 <HAL_DMA_IRQHandler+0x72>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2204      	movs	r2, #4
 80011e0:	4013      	ands	r3, r2
 80011e2:	d020      	beq.n	8001226 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2220      	movs	r2, #32
 80011ec:	4013      	ands	r3, r2
 80011ee:	d107      	bne.n	8001200 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2104      	movs	r1, #4
 80011fc:	438a      	bics	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001208:	2104      	movs	r1, #4
 800120a:	4091      	lsls	r1, r2
 800120c:	000a      	movs	r2, r1
 800120e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001214:	2b00      	cmp	r3, #0
 8001216:	d100      	bne.n	800121a <HAL_DMA_IRQHandler+0x66>
 8001218:	e06a      	b.n	80012f0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	0010      	movs	r0, r2
 8001222:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001224:	e064      	b.n	80012f0 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	2202      	movs	r2, #2
 800122c:	409a      	lsls	r2, r3
 800122e:	0013      	movs	r3, r2
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	4013      	ands	r3, r2
 8001234:	d02b      	beq.n	800128e <HAL_DMA_IRQHandler+0xda>
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	2202      	movs	r2, #2
 800123a:	4013      	ands	r3, r2
 800123c:	d027      	beq.n	800128e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2220      	movs	r2, #32
 8001246:	4013      	ands	r3, r2
 8001248:	d10b      	bne.n	8001262 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	210a      	movs	r1, #10
 8001256:	438a      	bics	r2, r1
 8001258:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2221      	movs	r2, #33	@ 0x21
 800125e:	2101      	movs	r1, #1
 8001260:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800126a:	2102      	movs	r1, #2
 800126c:	4091      	lsls	r1, r2
 800126e:	000a      	movs	r2, r1
 8001270:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2220      	movs	r2, #32
 8001276:	2100      	movs	r1, #0
 8001278:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	2b00      	cmp	r3, #0
 8001280:	d036      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	0010      	movs	r0, r2
 800128a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800128c:	e030      	b.n	80012f0 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	2208      	movs	r2, #8
 8001294:	409a      	lsls	r2, r3
 8001296:	0013      	movs	r3, r2
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4013      	ands	r3, r2
 800129c:	d028      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x13c>
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	2208      	movs	r2, #8
 80012a2:	4013      	ands	r3, r2
 80012a4:	d024      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	210e      	movs	r1, #14
 80012b2:	438a      	bics	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012be:	2101      	movs	r1, #1
 80012c0:	4091      	lsls	r1, r2
 80012c2:	000a      	movs	r2, r1
 80012c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2221      	movs	r2, #33	@ 0x21
 80012d0:	2101      	movs	r1, #1
 80012d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2220      	movs	r2, #32
 80012d8:	2100      	movs	r1, #0
 80012da:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	0010      	movs	r0, r2
 80012ec:	4798      	blx	r3
    }
  }
}
 80012ee:	e7ff      	b.n	80012f0 <HAL_DMA_IRQHandler+0x13c>
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b004      	add	sp, #16
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800130e:	2101      	movs	r1, #1
 8001310:	4091      	lsls	r1, r2
 8001312:	000a      	movs	r2, r1
 8001314:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b10      	cmp	r3, #16
 8001324:	d108      	bne.n	8001338 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001336:	e007      	b.n	8001348 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	60da      	str	r2, [r3, #12]
}
 8001348:	46c0      	nop			@ (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b004      	add	sp, #16
 800134e:	bd80      	pop	{r7, pc}

08001350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a08      	ldr	r2, [pc, #32]	@ (8001380 <DMA_CalcBaseAndBitshift+0x30>)
 800135e:	4694      	mov	ip, r2
 8001360:	4463      	add	r3, ip
 8001362:	2114      	movs	r1, #20
 8001364:	0018      	movs	r0, r3
 8001366:	f7fe fed9 	bl	800011c <__udivsi3>
 800136a:	0003      	movs	r3, r0
 800136c:	009a      	lsls	r2, r3, #2
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a03      	ldr	r2, [pc, #12]	@ (8001384 <DMA_CalcBaseAndBitshift+0x34>)
 8001376:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001378:	46c0      	nop			@ (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}
 8001380:	bffdfff8 	.word	0xbffdfff8
 8001384:	40020000 	.word	0x40020000

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001396:	e14f      	b.n	8001638 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	4091      	lsls	r1, r2
 80013a2:	000a      	movs	r2, r1
 80013a4:	4013      	ands	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d100      	bne.n	80013b0 <HAL_GPIO_Init+0x28>
 80013ae:	e140      	b.n	8001632 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2203      	movs	r2, #3
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d005      	beq.n	80013c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2203      	movs	r2, #3
 80013c2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d130      	bne.n	800142a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	409a      	lsls	r2, r3
 80013d6:	0013      	movs	r3, r2
 80013d8:	43da      	mvns	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	409a      	lsls	r2, r3
 80013ea:	0013      	movs	r3, r2
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013fe:	2201      	movs	r2, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
 8001404:	0013      	movs	r3, r2
 8001406:	43da      	mvns	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	2201      	movs	r2, #1
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	409a      	lsls	r2, r3
 800141c:	0013      	movs	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	4013      	ands	r3, r2
 8001432:	2b03      	cmp	r3, #3
 8001434:	d017      	beq.n	8001466 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	409a      	lsls	r2, r3
 8001444:	0013      	movs	r3, r2
 8001446:	43da      	mvns	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2203      	movs	r2, #3
 800146c:	4013      	ands	r3, r2
 800146e:	2b02      	cmp	r3, #2
 8001470:	d123      	bne.n	80014ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	08da      	lsrs	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3208      	adds	r2, #8
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	58d3      	ldr	r3, [r2, r3]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2207      	movs	r2, #7
 8001484:	4013      	ands	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691a      	ldr	r2, [r3, #16]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2107      	movs	r1, #7
 800149e:	400b      	ands	r3, r1
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	409a      	lsls	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	08da      	lsrs	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3208      	adds	r2, #8
 80014b4:	0092      	lsls	r2, r2, #2
 80014b6:	6939      	ldr	r1, [r7, #16]
 80014b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	409a      	lsls	r2, r3
 80014c8:	0013      	movs	r3, r2
 80014ca:	43da      	mvns	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2203      	movs	r2, #3
 80014d8:	401a      	ands	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	23c0      	movs	r3, #192	@ 0xc0
 80014f4:	029b      	lsls	r3, r3, #10
 80014f6:	4013      	ands	r3, r2
 80014f8:	d100      	bne.n	80014fc <HAL_GPIO_Init+0x174>
 80014fa:	e09a      	b.n	8001632 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fc:	4b54      	ldr	r3, [pc, #336]	@ (8001650 <HAL_GPIO_Init+0x2c8>)
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	4b53      	ldr	r3, [pc, #332]	@ (8001650 <HAL_GPIO_Init+0x2c8>)
 8001502:	2101      	movs	r1, #1
 8001504:	430a      	orrs	r2, r1
 8001506:	619a      	str	r2, [r3, #24]
 8001508:	4b51      	ldr	r3, [pc, #324]	@ (8001650 <HAL_GPIO_Init+0x2c8>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2201      	movs	r2, #1
 800150e:	4013      	ands	r3, r2
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001514:	4a4f      	ldr	r2, [pc, #316]	@ (8001654 <HAL_GPIO_Init+0x2cc>)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	589b      	ldr	r3, [r3, r2]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2203      	movs	r2, #3
 8001526:	4013      	ands	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	409a      	lsls	r2, r3
 800152e:	0013      	movs	r3, r2
 8001530:	43da      	mvns	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	2390      	movs	r3, #144	@ 0x90
 800153c:	05db      	lsls	r3, r3, #23
 800153e:	429a      	cmp	r2, r3
 8001540:	d013      	beq.n	800156a <HAL_GPIO_Init+0x1e2>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a44      	ldr	r2, [pc, #272]	@ (8001658 <HAL_GPIO_Init+0x2d0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d00d      	beq.n	8001566 <HAL_GPIO_Init+0x1de>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a43      	ldr	r2, [pc, #268]	@ (800165c <HAL_GPIO_Init+0x2d4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d007      	beq.n	8001562 <HAL_GPIO_Init+0x1da>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a42      	ldr	r2, [pc, #264]	@ (8001660 <HAL_GPIO_Init+0x2d8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_GPIO_Init+0x1d6>
 800155a:	2303      	movs	r3, #3
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x1e4>
 800155e:	2305      	movs	r3, #5
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x1e4>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x1e4>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x1e4>
 800156a:	2300      	movs	r3, #0
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	2103      	movs	r1, #3
 8001570:	400a      	ands	r2, r1
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800157c:	4935      	ldr	r1, [pc, #212]	@ (8001654 <HAL_GPIO_Init+0x2cc>)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158a:	4b36      	ldr	r3, [pc, #216]	@ (8001664 <HAL_GPIO_Init+0x2dc>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	43da      	mvns	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	2380      	movs	r3, #128	@ 0x80
 80015a0:	035b      	lsls	r3, r3, #13
 80015a2:	4013      	ands	r3, r2
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001664 <HAL_GPIO_Init+0x2dc>)
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001664 <HAL_GPIO_Init+0x2dc>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43da      	mvns	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	039b      	lsls	r3, r3, #14
 80015cc:	4013      	ands	r3, r2
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015d8:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <HAL_GPIO_Init+0x2dc>)
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80015de:	4b21      	ldr	r3, [pc, #132]	@ (8001664 <HAL_GPIO_Init+0x2dc>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43da      	mvns	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	4013      	ands	r3, r2
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <HAL_GPIO_Init+0x2dc>)
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_GPIO_Init+0x2dc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	43da      	mvns	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	2380      	movs	r3, #128	@ 0x80
 800161e:	025b      	lsls	r3, r3, #9
 8001620:	4013      	ands	r3, r2
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <HAL_GPIO_Init+0x2dc>)
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	40da      	lsrs	r2, r3
 8001640:	1e13      	subs	r3, r2, #0
 8001642:	d000      	beq.n	8001646 <HAL_GPIO_Init+0x2be>
 8001644:	e6a8      	b.n	8001398 <HAL_GPIO_Init+0x10>
  } 
}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	46c0      	nop			@ (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b006      	add	sp, #24
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	40010000 	.word	0x40010000
 8001658:	48000400 	.word	0x48000400
 800165c:	48000800 	.word	0x48000800
 8001660:	48000c00 	.word	0x48000c00
 8001664:	40010400 	.word	0x40010400

08001668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	0008      	movs	r0, r1
 8001672:	0011      	movs	r1, r2
 8001674:	1cbb      	adds	r3, r7, #2
 8001676:	1c02      	adds	r2, r0, #0
 8001678:	801a      	strh	r2, [r3, #0]
 800167a:	1c7b      	adds	r3, r7, #1
 800167c:	1c0a      	adds	r2, r1, #0
 800167e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001680:	1c7b      	adds	r3, r7, #1
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001688:	1cbb      	adds	r3, r7, #2
 800168a:	881a      	ldrh	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001690:	e003      	b.n	800169a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001692:	1cbb      	adds	r3, r7, #2
 8001694:	881a      	ldrh	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	46bd      	mov	sp, r7
 800169e:	b002      	add	sp, #8
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	000a      	movs	r2, r1
 80016ac:	1cbb      	adds	r3, r7, #2
 80016ae:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016b6:	1cbb      	adds	r3, r7, #2
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4013      	ands	r3, r2
 80016be:	041a      	lsls	r2, r3, #16
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	1cb9      	adds	r1, r7, #2
 80016c6:	8809      	ldrh	r1, [r1, #0]
 80016c8:	400b      	ands	r3, r1
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
}
 80016d0:	46c0      	nop			@ (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b004      	add	sp, #16
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	0002      	movs	r2, r0
 80016e0:	1dbb      	adds	r3, r7, #6
 80016e2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	1dba      	adds	r2, r7, #6
 80016ea:	8812      	ldrh	r2, [r2, #0]
 80016ec:	4013      	ands	r3, r2
 80016ee:	d008      	beq.n	8001702 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016f2:	1dba      	adds	r2, r7, #6
 80016f4:	8812      	ldrh	r2, [r2, #0]
 80016f6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016f8:	1dbb      	adds	r3, r7, #6
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff f849 	bl	8000794 <HAL_GPIO_EXTI_Callback>
  }
}
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b002      	add	sp, #8
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e301      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2201      	movs	r2, #1
 8001728:	4013      	ands	r3, r2
 800172a:	d100      	bne.n	800172e <HAL_RCC_OscConfig+0x1e>
 800172c:	e08d      	b.n	800184a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800172e:	4bc3      	ldr	r3, [pc, #780]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	220c      	movs	r2, #12
 8001734:	4013      	ands	r3, r2
 8001736:	2b04      	cmp	r3, #4
 8001738:	d00e      	beq.n	8001758 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800173a:	4bc0      	ldr	r3, [pc, #768]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	220c      	movs	r2, #12
 8001740:	4013      	ands	r3, r2
 8001742:	2b08      	cmp	r3, #8
 8001744:	d116      	bne.n	8001774 <HAL_RCC_OscConfig+0x64>
 8001746:	4bbd      	ldr	r3, [pc, #756]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	025b      	lsls	r3, r3, #9
 800174e:	401a      	ands	r2, r3
 8001750:	2380      	movs	r3, #128	@ 0x80
 8001752:	025b      	lsls	r3, r3, #9
 8001754:	429a      	cmp	r2, r3
 8001756:	d10d      	bne.n	8001774 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	4bb8      	ldr	r3, [pc, #736]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	029b      	lsls	r3, r3, #10
 8001760:	4013      	ands	r3, r2
 8001762:	d100      	bne.n	8001766 <HAL_RCC_OscConfig+0x56>
 8001764:	e070      	b.n	8001848 <HAL_RCC_OscConfig+0x138>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d000      	beq.n	8001770 <HAL_RCC_OscConfig+0x60>
 800176e:	e06b      	b.n	8001848 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e2d8      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d107      	bne.n	800178c <HAL_RCC_OscConfig+0x7c>
 800177c:	4baf      	ldr	r3, [pc, #700]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4bae      	ldr	r3, [pc, #696]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001782:	2180      	movs	r1, #128	@ 0x80
 8001784:	0249      	lsls	r1, r1, #9
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e02f      	b.n	80017ec <HAL_RCC_OscConfig+0xdc>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10c      	bne.n	80017ae <HAL_RCC_OscConfig+0x9e>
 8001794:	4ba9      	ldr	r3, [pc, #676]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4ba8      	ldr	r3, [pc, #672]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800179a:	49a9      	ldr	r1, [pc, #676]	@ (8001a40 <HAL_RCC_OscConfig+0x330>)
 800179c:	400a      	ands	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	4ba6      	ldr	r3, [pc, #664]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4ba5      	ldr	r3, [pc, #660]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017a6:	49a7      	ldr	r1, [pc, #668]	@ (8001a44 <HAL_RCC_OscConfig+0x334>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e01e      	b.n	80017ec <HAL_RCC_OscConfig+0xdc>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b05      	cmp	r3, #5
 80017b4:	d10e      	bne.n	80017d4 <HAL_RCC_OscConfig+0xc4>
 80017b6:	4ba1      	ldr	r3, [pc, #644]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4ba0      	ldr	r3, [pc, #640]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017bc:	2180      	movs	r1, #128	@ 0x80
 80017be:	02c9      	lsls	r1, r1, #11
 80017c0:	430a      	orrs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	4b9d      	ldr	r3, [pc, #628]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b9c      	ldr	r3, [pc, #624]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017ca:	2180      	movs	r1, #128	@ 0x80
 80017cc:	0249      	lsls	r1, r1, #9
 80017ce:	430a      	orrs	r2, r1
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0xdc>
 80017d4:	4b99      	ldr	r3, [pc, #612]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b98      	ldr	r3, [pc, #608]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017da:	4999      	ldr	r1, [pc, #612]	@ (8001a40 <HAL_RCC_OscConfig+0x330>)
 80017dc:	400a      	ands	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	4b96      	ldr	r3, [pc, #600]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b95      	ldr	r3, [pc, #596]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017e6:	4997      	ldr	r1, [pc, #604]	@ (8001a44 <HAL_RCC_OscConfig+0x334>)
 80017e8:	400a      	ands	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d014      	beq.n	800181e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb48 	bl	8000e88 <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017fe:	f7ff fb43 	bl	8000e88 <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b64      	cmp	r3, #100	@ 0x64
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e28a      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001810:	4b8a      	ldr	r3, [pc, #552]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	@ 0x80
 8001816:	029b      	lsls	r3, r3, #10
 8001818:	4013      	ands	r3, r2
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0xee>
 800181c:	e015      	b.n	800184a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fb33 	bl	8000e88 <HAL_GetTick>
 8001822:	0003      	movs	r3, r0
 8001824:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fb2e 	bl	8000e88 <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	@ 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e275      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	4b80      	ldr	r3, [pc, #512]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	@ 0x80
 8001840:	029b      	lsls	r3, r3, #10
 8001842:	4013      	ands	r3, r2
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x118>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2202      	movs	r2, #2
 8001850:	4013      	ands	r3, r2
 8001852:	d100      	bne.n	8001856 <HAL_RCC_OscConfig+0x146>
 8001854:	e069      	b.n	800192a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001856:	4b79      	ldr	r3, [pc, #484]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	220c      	movs	r2, #12
 800185c:	4013      	ands	r3, r2
 800185e:	d00b      	beq.n	8001878 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001860:	4b76      	ldr	r3, [pc, #472]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	220c      	movs	r2, #12
 8001866:	4013      	ands	r3, r2
 8001868:	2b08      	cmp	r3, #8
 800186a:	d11c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x196>
 800186c:	4b73      	ldr	r3, [pc, #460]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	025b      	lsls	r3, r3, #9
 8001874:	4013      	ands	r3, r2
 8001876:	d116      	bne.n	80018a6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001878:	4b70      	ldr	r3, [pc, #448]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2202      	movs	r2, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d005      	beq.n	800188e <HAL_RCC_OscConfig+0x17e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d001      	beq.n	800188e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e24b      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188e:	4b6b      	ldr	r3, [pc, #428]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	22f8      	movs	r2, #248	@ 0xf8
 8001894:	4393      	bics	r3, r2
 8001896:	0019      	movs	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	00da      	lsls	r2, r3, #3
 800189e:	4b67      	ldr	r3, [pc, #412]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a4:	e041      	b.n	800192a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d024      	beq.n	80018f8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ae:	4b63      	ldr	r3, [pc, #396]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b62      	ldr	r3, [pc, #392]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ba:	f7ff fae5 	bl	8000e88 <HAL_GetTick>
 80018be:	0003      	movs	r3, r0
 80018c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c4:	f7ff fae0 	bl	8000e88 <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e227      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	4b59      	ldr	r3, [pc, #356]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2202      	movs	r2, #2
 80018dc:	4013      	ands	r3, r2
 80018de:	d0f1      	beq.n	80018c4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b56      	ldr	r3, [pc, #344]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	22f8      	movs	r2, #248	@ 0xf8
 80018e6:	4393      	bics	r3, r2
 80018e8:	0019      	movs	r1, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	00da      	lsls	r2, r3, #3
 80018f0:	4b52      	ldr	r3, [pc, #328]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e018      	b.n	800192a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f8:	4b50      	ldr	r3, [pc, #320]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b4f      	ldr	r3, [pc, #316]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80018fe:	2101      	movs	r1, #1
 8001900:	438a      	bics	r2, r1
 8001902:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fac0 	bl	8000e88 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190e:	f7ff fabb 	bl	8000e88 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e202      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001920:	4b46      	ldr	r3, [pc, #280]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2202      	movs	r2, #2
 8001926:	4013      	ands	r3, r2
 8001928:	d1f1      	bne.n	800190e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2208      	movs	r2, #8
 8001930:	4013      	ands	r3, r2
 8001932:	d036      	beq.n	80019a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d019      	beq.n	8001970 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800193e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001940:	4b3e      	ldr	r3, [pc, #248]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001942:	2101      	movs	r1, #1
 8001944:	430a      	orrs	r2, r1
 8001946:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001948:	f7ff fa9e 	bl	8000e88 <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001952:	f7ff fa99 	bl	8000e88 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1e0      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001964:	4b35      	ldr	r3, [pc, #212]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	2202      	movs	r2, #2
 800196a:	4013      	ands	r3, r2
 800196c:	d0f1      	beq.n	8001952 <HAL_RCC_OscConfig+0x242>
 800196e:	e018      	b.n	80019a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001970:	4b32      	ldr	r3, [pc, #200]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001972:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001974:	4b31      	ldr	r3, [pc, #196]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001976:	2101      	movs	r1, #1
 8001978:	438a      	bics	r2, r1
 800197a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197c:	f7ff fa84 	bl	8000e88 <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff fa7f 	bl	8000e88 <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e1c6      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	4b28      	ldr	r3, [pc, #160]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	2202      	movs	r2, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	d1f1      	bne.n	8001986 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2204      	movs	r2, #4
 80019a8:	4013      	ands	r3, r2
 80019aa:	d100      	bne.n	80019ae <HAL_RCC_OscConfig+0x29e>
 80019ac:	e0b4      	b.n	8001b18 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ae:	201f      	movs	r0, #31
 80019b0:	183b      	adds	r3, r7, r0
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	2380      	movs	r3, #128	@ 0x80
 80019bc:	055b      	lsls	r3, r3, #21
 80019be:	4013      	ands	r3, r2
 80019c0:	d110      	bne.n	80019e4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80019c4:	69da      	ldr	r2, [r3, #28]
 80019c6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80019c8:	2180      	movs	r1, #128	@ 0x80
 80019ca:	0549      	lsls	r1, r1, #21
 80019cc:	430a      	orrs	r2, r1
 80019ce:	61da      	str	r2, [r3, #28]
 80019d0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	055b      	lsls	r3, r3, #21
 80019d8:	4013      	ands	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019de:	183b      	adds	r3, r7, r0
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <HAL_RCC_OscConfig+0x338>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	d11a      	bne.n	8001a26 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <HAL_RCC_OscConfig+0x338>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <HAL_RCC_OscConfig+0x338>)
 80019f6:	2180      	movs	r1, #128	@ 0x80
 80019f8:	0049      	lsls	r1, r1, #1
 80019fa:	430a      	orrs	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fe:	f7ff fa43 	bl	8000e88 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a08:	f7ff fa3e 	bl	8000e88 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	@ 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e185      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <HAL_RCC_OscConfig+0x338>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	@ 0x80
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4013      	ands	r3, r2
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d10e      	bne.n	8001a4c <HAL_RCC_OscConfig+0x33c>
 8001a2e:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001a30:	6a1a      	ldr	r2, [r3, #32]
 8001a32:	4b02      	ldr	r3, [pc, #8]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001a34:	2101      	movs	r1, #1
 8001a36:	430a      	orrs	r2, r1
 8001a38:	621a      	str	r2, [r3, #32]
 8001a3a:	e035      	b.n	8001aa8 <HAL_RCC_OscConfig+0x398>
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	fffeffff 	.word	0xfffeffff
 8001a44:	fffbffff 	.word	0xfffbffff
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCC_OscConfig+0x35e>
 8001a54:	4bb6      	ldr	r3, [pc, #728]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001a56:	6a1a      	ldr	r2, [r3, #32]
 8001a58:	4bb5      	ldr	r3, [pc, #724]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	438a      	bics	r2, r1
 8001a5e:	621a      	str	r2, [r3, #32]
 8001a60:	4bb3      	ldr	r3, [pc, #716]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001a62:	6a1a      	ldr	r2, [r3, #32]
 8001a64:	4bb2      	ldr	r3, [pc, #712]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001a66:	2104      	movs	r1, #4
 8001a68:	438a      	bics	r2, r1
 8001a6a:	621a      	str	r2, [r3, #32]
 8001a6c:	e01c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x398>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x380>
 8001a76:	4bae      	ldr	r3, [pc, #696]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001a78:	6a1a      	ldr	r2, [r3, #32]
 8001a7a:	4bad      	ldr	r3, [pc, #692]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	621a      	str	r2, [r3, #32]
 8001a82:	4bab      	ldr	r3, [pc, #684]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001a84:	6a1a      	ldr	r2, [r3, #32]
 8001a86:	4baa      	ldr	r3, [pc, #680]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	621a      	str	r2, [r3, #32]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x398>
 8001a90:	4ba7      	ldr	r3, [pc, #668]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	4ba6      	ldr	r3, [pc, #664]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	438a      	bics	r2, r1
 8001a9a:	621a      	str	r2, [r3, #32]
 8001a9c:	4ba4      	ldr	r3, [pc, #656]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	4ba3      	ldr	r3, [pc, #652]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d014      	beq.n	8001ada <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff f9ea 	bl	8000e88 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab8:	e009      	b.n	8001ace <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7ff f9e5 	bl	8000e88 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a9b      	ldr	r2, [pc, #620]	@ (8001d34 <HAL_RCC_OscConfig+0x624>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e12b      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ace:	4b98      	ldr	r3, [pc, #608]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x3aa>
 8001ad8:	e013      	b.n	8001b02 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ada:	f7ff f9d5 	bl	8000e88 <HAL_GetTick>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae2:	e009      	b.n	8001af8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f9d0 	bl	8000e88 <HAL_GetTick>
 8001ae8:	0002      	movs	r2, r0
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4a91      	ldr	r2, [pc, #580]	@ (8001d34 <HAL_RCC_OscConfig+0x624>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e116      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af8:	4b8d      	ldr	r3, [pc, #564]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b02:	231f      	movs	r3, #31
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b0c:	4b88      	ldr	r3, [pc, #544]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b0e:	69da      	ldr	r2, [r3, #28]
 8001b10:	4b87      	ldr	r3, [pc, #540]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b12:	4989      	ldr	r1, [pc, #548]	@ (8001d38 <HAL_RCC_OscConfig+0x628>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d063      	beq.n	8001bea <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d12a      	bne.n	8001b80 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b2a:	4b81      	ldr	r3, [pc, #516]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b2e:	4b80      	ldr	r3, [pc, #512]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b30:	2104      	movs	r1, #4
 8001b32:	430a      	orrs	r2, r1
 8001b34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b36:	4b7e      	ldr	r3, [pc, #504]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b3a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7ff f9a1 	bl	8000e88 <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b4c:	f7ff f99c 	bl	8000e88 <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e0e3      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b5e:	4b74      	ldr	r3, [pc, #464]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b62:	2202      	movs	r2, #2
 8001b64:	4013      	ands	r3, r2
 8001b66:	d0f1      	beq.n	8001b4c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b68:	4b71      	ldr	r3, [pc, #452]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6c:	22f8      	movs	r2, #248	@ 0xf8
 8001b6e:	4393      	bics	r3, r2
 8001b70:	0019      	movs	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	00da      	lsls	r2, r3, #3
 8001b78:	4b6d      	ldr	r3, [pc, #436]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b7e:	e034      	b.n	8001bea <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	3305      	adds	r3, #5
 8001b86:	d111      	bne.n	8001bac <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b88:	4b69      	ldr	r3, [pc, #420]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b8c:	4b68      	ldr	r3, [pc, #416]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b8e:	2104      	movs	r1, #4
 8001b90:	438a      	bics	r2, r1
 8001b92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b94:	4b66      	ldr	r3, [pc, #408]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b98:	22f8      	movs	r2, #248	@ 0xf8
 8001b9a:	4393      	bics	r3, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	00da      	lsls	r2, r3, #3
 8001ba4:	4b62      	ldr	r3, [pc, #392]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001baa:	e01e      	b.n	8001bea <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bac:	4b60      	ldr	r3, [pc, #384]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001bae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bb0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bb8:	4b5d      	ldr	r3, [pc, #372]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	438a      	bics	r2, r1
 8001bc2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc4:	f7ff f960 	bl	8000e88 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bce:	f7ff f95b 	bl	8000e88 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0a2      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001be0:	4b53      	ldr	r3, [pc, #332]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001be4:	2202      	movs	r2, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d1f1      	bne.n	8001bce <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d100      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4e4>
 8001bf2:	e097      	b.n	8001d24 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf4:	4b4e      	ldr	r3, [pc, #312]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	220c      	movs	r2, #12
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCC_OscConfig+0x4f2>
 8001c00:	e06b      	b.n	8001cda <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d14c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b49      	ldr	r3, [pc, #292]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b48      	ldr	r3, [pc, #288]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001c10:	494a      	ldr	r1, [pc, #296]	@ (8001d3c <HAL_RCC_OscConfig+0x62c>)
 8001c12:	400a      	ands	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7ff f937 	bl	8000e88 <HAL_GetTick>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7ff f932 	bl	8000e88 <HAL_GetTick>
 8001c24:	0002      	movs	r2, r0
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e079      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c32:	4b3f      	ldr	r3, [pc, #252]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	2380      	movs	r3, #128	@ 0x80
 8001c38:	049b      	lsls	r3, r3, #18
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c42:	220f      	movs	r2, #15
 8001c44:	4393      	bics	r3, r2
 8001c46:	0019      	movs	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c4c:	4b38      	ldr	r3, [pc, #224]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c52:	4b37      	ldr	r3, [pc, #220]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	4a3a      	ldr	r2, [pc, #232]	@ (8001d40 <HAL_RCC_OscConfig+0x630>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c64:	431a      	orrs	r2, r3
 8001c66:	4b32      	ldr	r3, [pc, #200]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c6c:	4b30      	ldr	r3, [pc, #192]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b2f      	ldr	r3, [pc, #188]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001c72:	2180      	movs	r1, #128	@ 0x80
 8001c74:	0449      	lsls	r1, r1, #17
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7ff f905 	bl	8000e88 <HAL_GetTick>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff f900 	bl	8000e88 <HAL_GetTick>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e047      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c96:	4b26      	ldr	r3, [pc, #152]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	049b      	lsls	r3, r3, #18
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x574>
 8001ca2:	e03f      	b.n	8001d24 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca4:	4b22      	ldr	r3, [pc, #136]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001caa:	4924      	ldr	r1, [pc, #144]	@ (8001d3c <HAL_RCC_OscConfig+0x62c>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f8ea 	bl	8000e88 <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cba:	f7ff f8e5 	bl	8000e88 <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e02c      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ccc:	4b18      	ldr	r3, [pc, #96]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	049b      	lsls	r3, r3, #18
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d1f0      	bne.n	8001cba <HAL_RCC_OscConfig+0x5aa>
 8001cd8:	e024      	b.n	8001d24 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e01f      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ce6:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001cec:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	2380      	movs	r3, #128	@ 0x80
 8001cf6:	025b      	lsls	r3, r3, #9
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d10e      	bne.n	8001d20 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	220f      	movs	r2, #15
 8001d06:	401a      	ands	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	23f0      	movs	r3, #240	@ 0xf0
 8001d14:	039b      	lsls	r3, r3, #14
 8001d16:	401a      	ands	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b008      	add	sp, #32
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	40021000 	.word	0x40021000
 8001d34:	00001388 	.word	0x00001388
 8001d38:	efffffff 	.word	0xefffffff
 8001d3c:	feffffff 	.word	0xfeffffff
 8001d40:	ffc2ffff 	.word	0xffc2ffff

08001d44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0b3      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec8 <HAL_RCC_ClockConfig+0x184>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	4013      	ands	r3, r2
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d911      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b58      	ldr	r3, [pc, #352]	@ (8001ec8 <HAL_RCC_ClockConfig+0x184>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4393      	bics	r3, r2
 8001d6e:	0019      	movs	r1, r3
 8001d70:	4b55      	ldr	r3, [pc, #340]	@ (8001ec8 <HAL_RCC_ClockConfig+0x184>)
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d78:	4b53      	ldr	r3, [pc, #332]	@ (8001ec8 <HAL_RCC_ClockConfig+0x184>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e09a      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	4013      	ands	r3, r2
 8001d92:	d015      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d006      	beq.n	8001dac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8001ecc <HAL_RCC_ClockConfig+0x188>)
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ecc <HAL_RCC_ClockConfig+0x188>)
 8001da4:	21e0      	movs	r1, #224	@ 0xe0
 8001da6:	00c9      	lsls	r1, r1, #3
 8001da8:	430a      	orrs	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b47      	ldr	r3, [pc, #284]	@ (8001ecc <HAL_RCC_ClockConfig+0x188>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	22f0      	movs	r2, #240	@ 0xf0
 8001db2:	4393      	bics	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	4b44      	ldr	r3, [pc, #272]	@ (8001ecc <HAL_RCC_ClockConfig+0x188>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d040      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8001ecc <HAL_RCC_ClockConfig+0x188>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2380      	movs	r3, #128	@ 0x80
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d114      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e06e      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	4b38      	ldr	r3, [pc, #224]	@ (8001ecc <HAL_RCC_ClockConfig+0x188>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	2380      	movs	r3, #128	@ 0x80
 8001df0:	049b      	lsls	r3, r3, #18
 8001df2:	4013      	ands	r3, r2
 8001df4:	d108      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e062      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfa:	4b34      	ldr	r3, [pc, #208]	@ (8001ecc <HAL_RCC_ClockConfig+0x188>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e05b      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e08:	4b30      	ldr	r3, [pc, #192]	@ (8001ecc <HAL_RCC_ClockConfig+0x188>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	4393      	bics	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4b2d      	ldr	r3, [pc, #180]	@ (8001ecc <HAL_RCC_ClockConfig+0x188>)
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e1c:	f7ff f834 	bl	8000e88 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e24:	e009      	b.n	8001e3a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e26:	f7ff f82f 	bl	8000e88 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	4a27      	ldr	r2, [pc, #156]	@ (8001ed0 <HAL_RCC_ClockConfig+0x18c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e042      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	4b24      	ldr	r3, [pc, #144]	@ (8001ecc <HAL_RCC_ClockConfig+0x188>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	220c      	movs	r2, #12
 8001e40:	401a      	ands	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d1ec      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <HAL_RCC_ClockConfig+0x184>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2201      	movs	r2, #1
 8001e52:	4013      	ands	r3, r2
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d211      	bcs.n	8001e7e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <HAL_RCC_ClockConfig+0x184>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4393      	bics	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <HAL_RCC_ClockConfig+0x184>)
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <HAL_RCC_ClockConfig+0x184>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e020      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2204      	movs	r2, #4
 8001e84:	4013      	ands	r3, r2
 8001e86:	d009      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e88:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <HAL_RCC_ClockConfig+0x188>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a11      	ldr	r2, [pc, #68]	@ (8001ed4 <HAL_RCC_ClockConfig+0x190>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <HAL_RCC_ClockConfig+0x188>)
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e9c:	f000 f820 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001ea0:	0001      	movs	r1, r0
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <HAL_RCC_ClockConfig+0x188>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	4013      	ands	r3, r2
 8001eac:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <HAL_RCC_ClockConfig+0x194>)
 8001eae:	5cd3      	ldrb	r3, [r2, r3]
 8001eb0:	000a      	movs	r2, r1
 8001eb2:	40da      	lsrs	r2, r3
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_RCC_ClockConfig+0x198>)
 8001eb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eb8:	2003      	movs	r0, #3
 8001eba:	f7fe ff9f 	bl	8000dfc <HAL_InitTick>
  
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b004      	add	sp, #16
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	00001388 	.word	0x00001388
 8001ed4:	fffff8ff 	.word	0xfffff8ff
 8001ed8:	08004b44 	.word	0x08004b44
 8001edc:	20000000 	.word	0x20000000

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001efa:	4b20      	ldr	r3, [pc, #128]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	220c      	movs	r2, #12
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d002      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x30>
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_GetSysClockFreq+0x36>
 8001f0e:	e02c      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f12:	613b      	str	r3, [r7, #16]
      break;
 8001f14:	e02c      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	0c9b      	lsrs	r3, r3, #18
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	4a19      	ldr	r2, [pc, #100]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f24:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f28:	220f      	movs	r2, #15
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	4a16      	ldr	r2, [pc, #88]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	025b      	lsls	r3, r3, #9
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	4810      	ldr	r0, [pc, #64]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f40:	f7fe f8ec 	bl	800011c <__udivsi3>
 8001f44:	0003      	movs	r3, r0
 8001f46:	001a      	movs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4353      	muls	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e009      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	000a      	movs	r2, r1
 8001f54:	0152      	lsls	r2, r2, #5
 8001f56:	1a52      	subs	r2, r2, r1
 8001f58:	0193      	lsls	r3, r2, #6
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	185b      	adds	r3, r3, r1
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	613b      	str	r3, [r7, #16]
      break;
 8001f68:	e002      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f6a:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f6c:	613b      	str	r3, [r7, #16]
      break;
 8001f6e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f70:	693b      	ldr	r3, [r7, #16]
}
 8001f72:	0018      	movs	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	b006      	add	sp, #24
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			@ (mov r8, r8)
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	007a1200 	.word	0x007a1200
 8001f84:	08004b5c 	.word	0x08004b5c
 8001f88:	08004b6c 	.word	0x08004b6c

08001f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f90:	4b02      	ldr	r3, [pc, #8]	@ (8001f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	20000000 	.word	0x20000000

08001fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001fa4:	f7ff fff2 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fa8:	0001      	movs	r1, r0
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	40d9      	lsrs	r1, r3
 8001fba:	000b      	movs	r3, r1
}    
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	08004b54 	.word	0x08004b54

08001fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	025b      	lsls	r3, r3, #9
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d100      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001fe8:	e08e      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2017      	movs	r0, #23
 8001fec:	183b      	adds	r3, r7, r0
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff2:	4b57      	ldr	r3, [pc, #348]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ff4:	69da      	ldr	r2, [r3, #28]
 8001ff6:	2380      	movs	r3, #128	@ 0x80
 8001ff8:	055b      	lsls	r3, r3, #21
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d110      	bne.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b54      	ldr	r3, [pc, #336]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002000:	69da      	ldr	r2, [r3, #28]
 8002002:	4b53      	ldr	r3, [pc, #332]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002004:	2180      	movs	r1, #128	@ 0x80
 8002006:	0549      	lsls	r1, r1, #21
 8002008:	430a      	orrs	r2, r1
 800200a:	61da      	str	r2, [r3, #28]
 800200c:	4b50      	ldr	r3, [pc, #320]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800200e:	69da      	ldr	r2, [r3, #28]
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	055b      	lsls	r3, r3, #21
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201a:	183b      	adds	r3, r7, r0
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b4c      	ldr	r3, [pc, #304]	@ (8002154 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	@ 0x80
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4013      	ands	r3, r2
 800202a:	d11a      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202c:	4b49      	ldr	r3, [pc, #292]	@ (8002154 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b48      	ldr	r3, [pc, #288]	@ (8002154 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002032:	2180      	movs	r1, #128	@ 0x80
 8002034:	0049      	lsls	r1, r1, #1
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203a:	f7fe ff25 	bl	8000e88 <HAL_GetTick>
 800203e:	0003      	movs	r3, r0
 8002040:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002042:	e008      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002044:	f7fe ff20 	bl	8000e88 <HAL_GetTick>
 8002048:	0002      	movs	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	@ 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e077      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002056:	4b3f      	ldr	r3, [pc, #252]	@ (8002154 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	@ 0x80
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4013      	ands	r3, r2
 8002060:	d0f0      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002062:	4b3b      	ldr	r3, [pc, #236]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002064:	6a1a      	ldr	r2, [r3, #32]
 8002066:	23c0      	movs	r3, #192	@ 0xc0
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d034      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	23c0      	movs	r3, #192	@ 0xc0
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4013      	ands	r3, r2
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d02c      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002084:	4b32      	ldr	r3, [pc, #200]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a33      	ldr	r2, [pc, #204]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800208a:	4013      	ands	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800208e:	4b30      	ldr	r3, [pc, #192]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002090:	6a1a      	ldr	r2, [r3, #32]
 8002092:	4b2f      	ldr	r3, [pc, #188]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002094:	2180      	movs	r1, #128	@ 0x80
 8002096:	0249      	lsls	r1, r1, #9
 8002098:	430a      	orrs	r2, r1
 800209a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800209c:	4b2c      	ldr	r3, [pc, #176]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020a2:	492e      	ldr	r1, [pc, #184]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020a8:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	4013      	ands	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b6:	f7fe fee7 	bl	8000e88 <HAL_GetTick>
 80020ba:	0003      	movs	r3, r0
 80020bc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020be:	e009      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f7fe fee2 	bl	8000e88 <HAL_GetTick>
 80020c4:	0002      	movs	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	4a25      	ldr	r2, [pc, #148]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e038      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	2202      	movs	r2, #2
 80020da:	4013      	ands	r3, r2
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020de:	4b1c      	ldr	r3, [pc, #112]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020f2:	2317      	movs	r3, #23
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d105      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fc:	4b14      	ldr	r3, [pc, #80]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002102:	4918      	ldr	r1, [pc, #96]	@ (8002164 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002104:	400a      	ands	r2, r1
 8002106:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2201      	movs	r2, #1
 800210e:	4013      	ands	r3, r2
 8002110:	d009      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002112:	4b0f      	ldr	r3, [pc, #60]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	2203      	movs	r2, #3
 8002118:	4393      	bics	r3, r2
 800211a:	0019      	movs	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002122:	430a      	orrs	r2, r1
 8002124:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2220      	movs	r2, #32
 800212c:	4013      	ands	r3, r2
 800212e:	d009      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002130:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	2210      	movs	r2, #16
 8002136:	4393      	bics	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	4b04      	ldr	r3, [pc, #16]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002140:	430a      	orrs	r2, r1
 8002142:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b006      	add	sp, #24
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	40021000 	.word	0x40021000
 8002154:	40007000 	.word	0x40007000
 8002158:	fffffcff 	.word	0xfffffcff
 800215c:	fffeffff 	.word	0xfffeffff
 8002160:	00001388 	.word	0x00001388
 8002164:	efffffff 	.word	0xefffffff

08002168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e042      	b.n	8002200 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	223d      	movs	r2, #61	@ 0x3d
 800217e:	5c9b      	ldrb	r3, [r3, r2]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d107      	bne.n	8002196 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	223c      	movs	r2, #60	@ 0x3c
 800218a:	2100      	movs	r1, #0
 800218c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	0018      	movs	r0, r3
 8002192:	f7fe fc43 	bl	8000a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	223d      	movs	r2, #61	@ 0x3d
 800219a:	2102      	movs	r1, #2
 800219c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	0019      	movs	r1, r3
 80021a8:	0010      	movs	r0, r2
 80021aa:	f000 fcff 	bl	8002bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2246      	movs	r2, #70	@ 0x46
 80021b2:	2101      	movs	r1, #1
 80021b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	223e      	movs	r2, #62	@ 0x3e
 80021ba:	2101      	movs	r1, #1
 80021bc:	5499      	strb	r1, [r3, r2]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	223f      	movs	r2, #63	@ 0x3f
 80021c2:	2101      	movs	r1, #1
 80021c4:	5499      	strb	r1, [r3, r2]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2240      	movs	r2, #64	@ 0x40
 80021ca:	2101      	movs	r1, #1
 80021cc:	5499      	strb	r1, [r3, r2]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2241      	movs	r2, #65	@ 0x41
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2242      	movs	r2, #66	@ 0x42
 80021da:	2101      	movs	r1, #1
 80021dc:	5499      	strb	r1, [r3, r2]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2243      	movs	r2, #67	@ 0x43
 80021e2:	2101      	movs	r1, #1
 80021e4:	5499      	strb	r1, [r3, r2]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2244      	movs	r2, #68	@ 0x44
 80021ea:	2101      	movs	r1, #1
 80021ec:	5499      	strb	r1, [r3, r2]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2245      	movs	r2, #69	@ 0x45
 80021f2:	2101      	movs	r1, #1
 80021f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	223d      	movs	r2, #61	@ 0x3d
 80021fa:	2101      	movs	r1, #1
 80021fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	223d      	movs	r2, #61	@ 0x3d
 8002214:	5c9b      	ldrb	r3, [r3, r2]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d001      	beq.n	8002220 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e02d      	b.n	800227c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	223d      	movs	r2, #61	@ 0x3d
 8002224:	2102      	movs	r1, #2
 8002226:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a15      	ldr	r2, [pc, #84]	@ (8002284 <HAL_TIM_Base_Start+0x7c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_TIM_Base_Start+0x3e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a14      	ldr	r2, [pc, #80]	@ (8002288 <HAL_TIM_Base_Start+0x80>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d004      	beq.n	8002246 <HAL_TIM_Base_Start+0x3e>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a12      	ldr	r2, [pc, #72]	@ (800228c <HAL_TIM_Base_Start+0x84>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d111      	bne.n	800226a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2207      	movs	r2, #7
 800224e:	4013      	ands	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b06      	cmp	r3, #6
 8002256:	d010      	beq.n	800227a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2101      	movs	r1, #1
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002268:	e007      	b.n	800227a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2101      	movs	r1, #1
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b004      	add	sp, #16
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40012c00 	.word	0x40012c00
 8002288:	40000400 	.word	0x40000400
 800228c:	40014000 	.word	0x40014000

08002290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e042      	b.n	8002328 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	223d      	movs	r2, #61	@ 0x3d
 80022a6:	5c9b      	ldrb	r3, [r3, r2]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d107      	bne.n	80022be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	223c      	movs	r2, #60	@ 0x3c
 80022b2:	2100      	movs	r1, #0
 80022b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 f839 	bl	8002330 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	223d      	movs	r2, #61	@ 0x3d
 80022c2:	2102      	movs	r1, #2
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	0019      	movs	r1, r3
 80022d0:	0010      	movs	r0, r2
 80022d2:	f000 fc6b 	bl	8002bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2246      	movs	r2, #70	@ 0x46
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	223e      	movs	r2, #62	@ 0x3e
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	223f      	movs	r2, #63	@ 0x3f
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2240      	movs	r2, #64	@ 0x40
 80022f2:	2101      	movs	r1, #1
 80022f4:	5499      	strb	r1, [r3, r2]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2241      	movs	r2, #65	@ 0x41
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2242      	movs	r2, #66	@ 0x42
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2243      	movs	r2, #67	@ 0x43
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2244      	movs	r2, #68	@ 0x44
 8002312:	2101      	movs	r1, #1
 8002314:	5499      	strb	r1, [r3, r2]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2245      	movs	r2, #69	@ 0x45
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	223d      	movs	r2, #61	@ 0x3d
 8002322:	2101      	movs	r1, #1
 8002324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002338:	46c0      	nop			@ (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	001a      	movs	r2, r3
 800234e:	1cbb      	adds	r3, r7, #2
 8002350:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	2317      	movs	r3, #23
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d108      	bne.n	8002372 <HAL_TIM_PWM_Start_DMA+0x32>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	223e      	movs	r2, #62	@ 0x3e
 8002364:	5c9b      	ldrb	r3, [r3, r2]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	3b02      	subs	r3, #2
 800236a:	425a      	negs	r2, r3
 800236c:	4153      	adcs	r3, r2
 800236e:	b2db      	uxtb	r3, r3
 8002370:	e01f      	b.n	80023b2 <HAL_TIM_PWM_Start_DMA+0x72>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d108      	bne.n	800238a <HAL_TIM_PWM_Start_DMA+0x4a>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	223f      	movs	r2, #63	@ 0x3f
 800237c:	5c9b      	ldrb	r3, [r3, r2]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	3b02      	subs	r3, #2
 8002382:	425a      	negs	r2, r3
 8002384:	4153      	adcs	r3, r2
 8002386:	b2db      	uxtb	r3, r3
 8002388:	e013      	b.n	80023b2 <HAL_TIM_PWM_Start_DMA+0x72>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d108      	bne.n	80023a2 <HAL_TIM_PWM_Start_DMA+0x62>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2240      	movs	r2, #64	@ 0x40
 8002394:	5c9b      	ldrb	r3, [r3, r2]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	3b02      	subs	r3, #2
 800239a:	425a      	negs	r2, r3
 800239c:	4153      	adcs	r3, r2
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	e007      	b.n	80023b2 <HAL_TIM_PWM_Start_DMA+0x72>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2241      	movs	r2, #65	@ 0x41
 80023a6:	5c9b      	ldrb	r3, [r3, r2]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	3b02      	subs	r3, #2
 80023ac:	425a      	negs	r2, r3
 80023ae:	4153      	adcs	r3, r2
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80023b6:	2302      	movs	r3, #2
 80023b8:	e15e      	b.n	8002678 <HAL_TIM_PWM_Start_DMA+0x338>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d108      	bne.n	80023d2 <HAL_TIM_PWM_Start_DMA+0x92>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	223e      	movs	r2, #62	@ 0x3e
 80023c4:	5c9b      	ldrb	r3, [r3, r2]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	425a      	negs	r2, r3
 80023cc:	4153      	adcs	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	e01f      	b.n	8002412 <HAL_TIM_PWM_Start_DMA+0xd2>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d108      	bne.n	80023ea <HAL_TIM_PWM_Start_DMA+0xaa>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	223f      	movs	r2, #63	@ 0x3f
 80023dc:	5c9b      	ldrb	r3, [r3, r2]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	425a      	negs	r2, r3
 80023e4:	4153      	adcs	r3, r2
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	e013      	b.n	8002412 <HAL_TIM_PWM_Start_DMA+0xd2>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d108      	bne.n	8002402 <HAL_TIM_PWM_Start_DMA+0xc2>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2240      	movs	r2, #64	@ 0x40
 80023f4:	5c9b      	ldrb	r3, [r3, r2]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	425a      	negs	r2, r3
 80023fc:	4153      	adcs	r3, r2
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	e007      	b.n	8002412 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2241      	movs	r2, #65	@ 0x41
 8002406:	5c9b      	ldrb	r3, [r3, r2]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	425a      	negs	r2, r3
 800240e:	4153      	adcs	r3, r2
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d025      	beq.n	8002462 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_TIM_PWM_Start_DMA+0xe4>
 800241c:	1cbb      	adds	r3, r7, #2
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e127      	b.n	8002678 <HAL_TIM_PWM_Start_DMA+0x338>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d104      	bne.n	8002438 <HAL_TIM_PWM_Start_DMA+0xf8>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	223e      	movs	r2, #62	@ 0x3e
 8002432:	2102      	movs	r1, #2
 8002434:	5499      	strb	r1, [r3, r2]
 8002436:	e016      	b.n	8002466 <HAL_TIM_PWM_Start_DMA+0x126>
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d104      	bne.n	8002448 <HAL_TIM_PWM_Start_DMA+0x108>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	223f      	movs	r2, #63	@ 0x3f
 8002442:	2102      	movs	r1, #2
 8002444:	5499      	strb	r1, [r3, r2]
 8002446:	e00e      	b.n	8002466 <HAL_TIM_PWM_Start_DMA+0x126>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b08      	cmp	r3, #8
 800244c:	d104      	bne.n	8002458 <HAL_TIM_PWM_Start_DMA+0x118>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2240      	movs	r2, #64	@ 0x40
 8002452:	2102      	movs	r1, #2
 8002454:	5499      	strb	r1, [r3, r2]
 8002456:	e006      	b.n	8002466 <HAL_TIM_PWM_Start_DMA+0x126>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2241      	movs	r2, #65	@ 0x41
 800245c:	2102      	movs	r1, #2
 800245e:	5499      	strb	r1, [r3, r2]
 8002460:	e001      	b.n	8002466 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e108      	b.n	8002678 <HAL_TIM_PWM_Start_DMA+0x338>
  }

  switch (Channel)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b0c      	cmp	r3, #12
 800246a:	d100      	bne.n	800246e <HAL_TIM_PWM_Start_DMA+0x12e>
 800246c:	e080      	b.n	8002570 <HAL_TIM_PWM_Start_DMA+0x230>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b0c      	cmp	r3, #12
 8002472:	d900      	bls.n	8002476 <HAL_TIM_PWM_Start_DMA+0x136>
 8002474:	e0a1      	b.n	80025ba <HAL_TIM_PWM_Start_DMA+0x27a>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d054      	beq.n	8002526 <HAL_TIM_PWM_Start_DMA+0x1e6>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b08      	cmp	r3, #8
 8002480:	d900      	bls.n	8002484 <HAL_TIM_PWM_Start_DMA+0x144>
 8002482:	e09a      	b.n	80025ba <HAL_TIM_PWM_Start_DMA+0x27a>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_PWM_Start_DMA+0x152>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b04      	cmp	r3, #4
 800248e:	d025      	beq.n	80024dc <HAL_TIM_PWM_Start_DMA+0x19c>
 8002490:	e093      	b.n	80025ba <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	4a7a      	ldr	r2, [pc, #488]	@ (8002680 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002498:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	4a79      	ldr	r2, [pc, #484]	@ (8002684 <HAL_TIM_PWM_Start_DMA+0x344>)
 80024a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	4a78      	ldr	r2, [pc, #480]	@ (8002688 <HAL_TIM_PWM_Start_DMA+0x348>)
 80024a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3334      	adds	r3, #52	@ 0x34
 80024b6:	001a      	movs	r2, r3
 80024b8:	1cbb      	adds	r3, r7, #2
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	f7fe fe14 	bl	80010e8 <HAL_DMA_Start_IT>
 80024c0:	1e03      	subs	r3, r0, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0d7      	b.n	8002678 <HAL_TIM_PWM_Start_DMA+0x338>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2180      	movs	r1, #128	@ 0x80
 80024d4:	0089      	lsls	r1, r1, #2
 80024d6:	430a      	orrs	r2, r1
 80024d8:	60da      	str	r2, [r3, #12]
      break;
 80024da:	e073      	b.n	80025c4 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e0:	4a67      	ldr	r2, [pc, #412]	@ (8002680 <HAL_TIM_PWM_Start_DMA+0x340>)
 80024e2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e8:	4a66      	ldr	r2, [pc, #408]	@ (8002684 <HAL_TIM_PWM_Start_DMA+0x344>)
 80024ea:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	4a65      	ldr	r2, [pc, #404]	@ (8002688 <HAL_TIM_PWM_Start_DMA+0x348>)
 80024f2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3338      	adds	r3, #56	@ 0x38
 8002500:	001a      	movs	r2, r3
 8002502:	1cbb      	adds	r3, r7, #2
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	f7fe fdef 	bl	80010e8 <HAL_DMA_Start_IT>
 800250a:	1e03      	subs	r3, r0, #0
 800250c:	d001      	beq.n	8002512 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0b2      	b.n	8002678 <HAL_TIM_PWM_Start_DMA+0x338>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2180      	movs	r1, #128	@ 0x80
 800251e:	00c9      	lsls	r1, r1, #3
 8002520:	430a      	orrs	r2, r1
 8002522:	60da      	str	r2, [r3, #12]
      break;
 8002524:	e04e      	b.n	80025c4 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252a:	4a55      	ldr	r2, [pc, #340]	@ (8002680 <HAL_TIM_PWM_Start_DMA+0x340>)
 800252c:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002532:	4a54      	ldr	r2, [pc, #336]	@ (8002684 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002534:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	4a53      	ldr	r2, [pc, #332]	@ (8002688 <HAL_TIM_PWM_Start_DMA+0x348>)
 800253c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	333c      	adds	r3, #60	@ 0x3c
 800254a:	001a      	movs	r2, r3
 800254c:	1cbb      	adds	r3, r7, #2
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	f7fe fdca 	bl	80010e8 <HAL_DMA_Start_IT>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d001      	beq.n	800255c <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e08d      	b.n	8002678 <HAL_TIM_PWM_Start_DMA+0x338>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2180      	movs	r1, #128	@ 0x80
 8002568:	0109      	lsls	r1, r1, #4
 800256a:	430a      	orrs	r2, r1
 800256c:	60da      	str	r2, [r3, #12]
      break;
 800256e:	e029      	b.n	80025c4 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002574:	4a42      	ldr	r2, [pc, #264]	@ (8002680 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002576:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	4a41      	ldr	r2, [pc, #260]	@ (8002684 <HAL_TIM_PWM_Start_DMA+0x344>)
 800257e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002584:	4a40      	ldr	r2, [pc, #256]	@ (8002688 <HAL_TIM_PWM_Start_DMA+0x348>)
 8002586:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3340      	adds	r3, #64	@ 0x40
 8002594:	001a      	movs	r2, r3
 8002596:	1cbb      	adds	r3, r7, #2
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	f7fe fda5 	bl	80010e8 <HAL_DMA_Start_IT>
 800259e:	1e03      	subs	r3, r0, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e068      	b.n	8002678 <HAL_TIM_PWM_Start_DMA+0x338>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2180      	movs	r1, #128	@ 0x80
 80025b2:	0149      	lsls	r1, r1, #5
 80025b4:	430a      	orrs	r2, r1
 80025b6:	60da      	str	r2, [r3, #12]
      break;
 80025b8:	e004      	b.n	80025c4 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 80025ba:	2317      	movs	r3, #23
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
      break;
 80025c2:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80025c4:	2317      	movs	r3, #23
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d151      	bne.n	8002672 <HAL_TIM_PWM_Start_DMA+0x332>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	2201      	movs	r2, #1
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 fe02 	bl	80031e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a2a      	ldr	r2, [pc, #168]	@ (800268c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a29      	ldr	r2, [pc, #164]	@ (8002690 <HAL_TIM_PWM_Start_DMA+0x350>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a27      	ldr	r2, [pc, #156]	@ (8002694 <HAL_TIM_PWM_Start_DMA+0x354>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a26      	ldr	r2, [pc, #152]	@ (8002698 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d101      	bne.n	8002608 <HAL_TIM_PWM_Start_DMA+0x2c8>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_TIM_PWM_Start_DMA+0x2ca>
 8002608:	2300      	movs	r3, #0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2180      	movs	r1, #128	@ 0x80
 800261a:	0209      	lsls	r1, r1, #8
 800261c:	430a      	orrs	r2, r1
 800261e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a19      	ldr	r2, [pc, #100]	@ (800268c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d009      	beq.n	800263e <HAL_TIM_PWM_Start_DMA+0x2fe>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1b      	ldr	r2, [pc, #108]	@ (800269c <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d004      	beq.n	800263e <HAL_TIM_PWM_Start_DMA+0x2fe>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a15      	ldr	r2, [pc, #84]	@ (8002690 <HAL_TIM_PWM_Start_DMA+0x350>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d111      	bne.n	8002662 <HAL_TIM_PWM_Start_DMA+0x322>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2207      	movs	r2, #7
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b06      	cmp	r3, #6
 800264e:	d010      	beq.n	8002672 <HAL_TIM_PWM_Start_DMA+0x332>
      {
        __HAL_TIM_ENABLE(htim);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2101      	movs	r1, #1
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002660:	e007      	b.n	8002672 <HAL_TIM_PWM_Start_DMA+0x332>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002672:	2317      	movs	r3, #23
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	781b      	ldrb	r3, [r3, #0]
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b006      	add	sp, #24
 800267e:	bd80      	pop	{r7, pc}
 8002680:	08002a99 	.word	0x08002a99
 8002684:	08002b43 	.word	0x08002b43
 8002688:	08002a05 	.word	0x08002a05
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40014000 	.word	0x40014000
 8002694:	40014400 	.word	0x40014400
 8002698:	40014800 	.word	0x40014800
 800269c:	40000400 	.word	0x40000400

080026a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ac:	2317      	movs	r3, #23
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	223c      	movs	r2, #60	@ 0x3c
 80026b8:	5c9b      	ldrb	r3, [r3, r2]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80026be:	2302      	movs	r3, #2
 80026c0:	e0ad      	b.n	800281e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	223c      	movs	r2, #60	@ 0x3c
 80026c6:	2101      	movs	r1, #1
 80026c8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	d100      	bne.n	80026d2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80026d0:	e076      	b.n	80027c0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b0c      	cmp	r3, #12
 80026d6:	d900      	bls.n	80026da <HAL_TIM_PWM_ConfigChannel+0x3a>
 80026d8:	e095      	b.n	8002806 <HAL_TIM_PWM_ConfigChannel+0x166>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d04e      	beq.n	800277e <HAL_TIM_PWM_ConfigChannel+0xde>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d900      	bls.n	80026e8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80026e6:	e08e      	b.n	8002806 <HAL_TIM_PWM_ConfigChannel+0x166>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d021      	beq.n	8002738 <HAL_TIM_PWM_ConfigChannel+0x98>
 80026f4:	e087      	b.n	8002806 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	0011      	movs	r1, r2
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 fad8 	bl	8002cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2108      	movs	r1, #8
 8002710:	430a      	orrs	r2, r1
 8002712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2104      	movs	r1, #4
 8002720:	438a      	bics	r2, r1
 8002722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6999      	ldr	r1, [r3, #24]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	619a      	str	r2, [r3, #24]
      break;
 8002736:	e06b      	b.n	8002810 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	0011      	movs	r1, r2
 8002740:	0018      	movs	r0, r3
 8002742:	f000 fb3f 	bl	8002dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2180      	movs	r1, #128	@ 0x80
 8002752:	0109      	lsls	r1, r1, #4
 8002754:	430a      	orrs	r2, r1
 8002756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4931      	ldr	r1, [pc, #196]	@ (8002828 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002764:	400a      	ands	r2, r1
 8002766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6999      	ldr	r1, [r3, #24]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	021a      	lsls	r2, r3, #8
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	619a      	str	r2, [r3, #24]
      break;
 800277c:	e048      	b.n	8002810 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f000 fba0 	bl	8002ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2108      	movs	r1, #8
 8002798:	430a      	orrs	r2, r1
 800279a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2104      	movs	r1, #4
 80027a8:	438a      	bics	r2, r1
 80027aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69d9      	ldr	r1, [r3, #28]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	61da      	str	r2, [r3, #28]
      break;
 80027be:	e027      	b.n	8002810 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	0011      	movs	r1, r2
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 fc05 	bl	8002fd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	69da      	ldr	r2, [r3, #28]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2180      	movs	r1, #128	@ 0x80
 80027da:	0109      	lsls	r1, r1, #4
 80027dc:	430a      	orrs	r2, r1
 80027de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	490f      	ldr	r1, [pc, #60]	@ (8002828 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80027ec:	400a      	ands	r2, r1
 80027ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69d9      	ldr	r1, [r3, #28]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	021a      	lsls	r2, r3, #8
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	61da      	str	r2, [r3, #28]
      break;
 8002804:	e004      	b.n	8002810 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002806:	2317      	movs	r3, #23
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
      break;
 800280e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	223c      	movs	r2, #60	@ 0x3c
 8002814:	2100      	movs	r1, #0
 8002816:	5499      	strb	r1, [r3, r2]

  return status;
 8002818:	2317      	movs	r3, #23
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	781b      	ldrb	r3, [r3, #0]
}
 800281e:	0018      	movs	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	b006      	add	sp, #24
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	fffffbff 	.word	0xfffffbff

0800282c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	230f      	movs	r3, #15
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	223c      	movs	r2, #60	@ 0x3c
 8002842:	5c9b      	ldrb	r3, [r3, r2]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_TIM_ConfigClockSource+0x20>
 8002848:	2302      	movs	r3, #2
 800284a:	e0bc      	b.n	80029c6 <HAL_TIM_ConfigClockSource+0x19a>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	223c      	movs	r2, #60	@ 0x3c
 8002850:	2101      	movs	r1, #1
 8002852:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	223d      	movs	r2, #61	@ 0x3d
 8002858:	2102      	movs	r1, #2
 800285a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2277      	movs	r2, #119	@ 0x77
 8002868:	4393      	bics	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4a58      	ldr	r2, [pc, #352]	@ (80029d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2280      	movs	r2, #128	@ 0x80
 8002882:	0192      	lsls	r2, r2, #6
 8002884:	4293      	cmp	r3, r2
 8002886:	d040      	beq.n	800290a <HAL_TIM_ConfigClockSource+0xde>
 8002888:	2280      	movs	r2, #128	@ 0x80
 800288a:	0192      	lsls	r2, r2, #6
 800288c:	4293      	cmp	r3, r2
 800288e:	d900      	bls.n	8002892 <HAL_TIM_ConfigClockSource+0x66>
 8002890:	e088      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x178>
 8002892:	2280      	movs	r2, #128	@ 0x80
 8002894:	0152      	lsls	r2, r2, #5
 8002896:	4293      	cmp	r3, r2
 8002898:	d100      	bne.n	800289c <HAL_TIM_ConfigClockSource+0x70>
 800289a:	e088      	b.n	80029ae <HAL_TIM_ConfigClockSource+0x182>
 800289c:	2280      	movs	r2, #128	@ 0x80
 800289e:	0152      	lsls	r2, r2, #5
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d900      	bls.n	80028a6 <HAL_TIM_ConfigClockSource+0x7a>
 80028a4:	e07e      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x178>
 80028a6:	2b70      	cmp	r3, #112	@ 0x70
 80028a8:	d018      	beq.n	80028dc <HAL_TIM_ConfigClockSource+0xb0>
 80028aa:	d900      	bls.n	80028ae <HAL_TIM_ConfigClockSource+0x82>
 80028ac:	e07a      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x178>
 80028ae:	2b60      	cmp	r3, #96	@ 0x60
 80028b0:	d04f      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x126>
 80028b2:	d900      	bls.n	80028b6 <HAL_TIM_ConfigClockSource+0x8a>
 80028b4:	e076      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x178>
 80028b6:	2b50      	cmp	r3, #80	@ 0x50
 80028b8:	d03b      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0x106>
 80028ba:	d900      	bls.n	80028be <HAL_TIM_ConfigClockSource+0x92>
 80028bc:	e072      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x178>
 80028be:	2b40      	cmp	r3, #64	@ 0x40
 80028c0:	d057      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x146>
 80028c2:	d900      	bls.n	80028c6 <HAL_TIM_ConfigClockSource+0x9a>
 80028c4:	e06e      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x178>
 80028c6:	2b30      	cmp	r3, #48	@ 0x30
 80028c8:	d063      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x166>
 80028ca:	d86b      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x178>
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d060      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x166>
 80028d0:	d868      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x178>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d05d      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x166>
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d05b      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x166>
 80028da:	e063      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028ec:	f000 fc58 	bl	80031a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2277      	movs	r2, #119	@ 0x77
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	609a      	str	r2, [r3, #8]
      break;
 8002908:	e052      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800291a:	f000 fc41 	bl	80031a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2180      	movs	r1, #128	@ 0x80
 800292a:	01c9      	lsls	r1, r1, #7
 800292c:	430a      	orrs	r2, r1
 800292e:	609a      	str	r2, [r3, #8]
      break;
 8002930:	e03e      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800293e:	001a      	movs	r2, r3
 8002940:	f000 fbb4 	bl	80030ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2150      	movs	r1, #80	@ 0x50
 800294a:	0018      	movs	r0, r3
 800294c:	f000 fc0e 	bl	800316c <TIM_ITRx_SetConfig>
      break;
 8002950:	e02e      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800295e:	001a      	movs	r2, r3
 8002960:	f000 fbd2 	bl	8003108 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2160      	movs	r1, #96	@ 0x60
 800296a:	0018      	movs	r0, r3
 800296c:	f000 fbfe 	bl	800316c <TIM_ITRx_SetConfig>
      break;
 8002970:	e01e      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800297e:	001a      	movs	r2, r3
 8002980:	f000 fb94 	bl	80030ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2140      	movs	r1, #64	@ 0x40
 800298a:	0018      	movs	r0, r3
 800298c:	f000 fbee 	bl	800316c <TIM_ITRx_SetConfig>
      break;
 8002990:	e00e      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	0019      	movs	r1, r3
 800299c:	0010      	movs	r0, r2
 800299e:	f000 fbe5 	bl	800316c <TIM_ITRx_SetConfig>
      break;
 80029a2:	e005      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80029a4:	230f      	movs	r3, #15
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]
      break;
 80029ac:	e000      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80029ae:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	223d      	movs	r2, #61	@ 0x3d
 80029b4:	2101      	movs	r1, #1
 80029b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	223c      	movs	r2, #60	@ 0x3c
 80029bc:	2100      	movs	r1, #0
 80029be:	5499      	strb	r1, [r3, r2]

  return status;
 80029c0:	230f      	movs	r3, #15
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	781b      	ldrb	r3, [r3, #0]
}
 80029c6:	0018      	movs	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b004      	add	sp, #16
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	ffff00ff 	.word	0xffff00ff

080029d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029dc:	46c0      	nop			@ (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80029ec:	46c0      	nop			@ (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b002      	add	sp, #8
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80029fc:	46c0      	nop			@ (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b002      	add	sp, #8
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d107      	bne.n	8002a2c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	223e      	movs	r2, #62	@ 0x3e
 8002a26:	2101      	movs	r1, #1
 8002a28:	5499      	strb	r1, [r3, r2]
 8002a2a:	e02a      	b.n	8002a82 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d107      	bne.n	8002a46 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	223f      	movs	r2, #63	@ 0x3f
 8002a40:	2101      	movs	r1, #1
 8002a42:	5499      	strb	r1, [r3, r2]
 8002a44:	e01d      	b.n	8002a82 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d107      	bne.n	8002a60 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2204      	movs	r2, #4
 8002a54:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2240      	movs	r2, #64	@ 0x40
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]
 8002a5e:	e010      	b.n	8002a82 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d107      	bne.n	8002a7a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2241      	movs	r2, #65	@ 0x41
 8002a74:	2101      	movs	r1, #1
 8002a76:	5499      	strb	r1, [r3, r2]
 8002a78:	e003      	b.n	8002a82 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	223d      	movs	r2, #61	@ 0x3d
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f7ff ffb5 	bl	80029f4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
}
 8002a90:	46c0      	nop			@ (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b004      	add	sp, #16
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d10b      	bne.n	8002ac8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d136      	bne.n	8002b2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	223e      	movs	r2, #62	@ 0x3e
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]
 8002ac6:	e031      	b.n	8002b2c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d10b      	bne.n	8002aea <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d125      	bne.n	8002b2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	223f      	movs	r2, #63	@ 0x3f
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	5499      	strb	r1, [r3, r2]
 8002ae8:	e020      	b.n	8002b2c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d10b      	bne.n	8002b0c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2204      	movs	r2, #4
 8002af8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d114      	bne.n	8002b2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2240      	movs	r2, #64	@ 0x40
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
 8002b0a:	e00f      	b.n	8002b2c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d10a      	bne.n	8002b2c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d103      	bne.n	8002b2c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2241      	movs	r2, #65	@ 0x41
 8002b28:	2101      	movs	r1, #1
 8002b2a:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7ff ff50 	bl	80029d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	771a      	strb	r2, [r3, #28]
}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d103      	bne.n	8002b62 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	771a      	strb	r2, [r3, #28]
 8002b60:	e019      	b.n	8002b96 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d103      	bne.n	8002b74 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	771a      	strb	r2, [r3, #28]
 8002b72:	e010      	b.n	8002b96 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d103      	bne.n	8002b86 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2204      	movs	r2, #4
 8002b82:	771a      	strb	r2, [r3, #28]
 8002b84:	e007      	b.n	8002b96 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d102      	bne.n	8002b96 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2208      	movs	r2, #8
 8002b94:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7ff ff23 	bl	80029e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	771a      	strb	r2, [r3, #28]
}
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b004      	add	sp, #16
 8002baa:	bd80      	pop	{r7, pc}

08002bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a36      	ldr	r2, [pc, #216]	@ (8002c98 <TIM_Base_SetConfig+0xec>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_Base_SetConfig+0x20>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a35      	ldr	r2, [pc, #212]	@ (8002c9c <TIM_Base_SetConfig+0xf0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d108      	bne.n	8002bde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2270      	movs	r2, #112	@ 0x70
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a2d      	ldr	r2, [pc, #180]	@ (8002c98 <TIM_Base_SetConfig+0xec>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <TIM_Base_SetConfig+0x62>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c9c <TIM_Base_SetConfig+0xf0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00f      	beq.n	8002c0e <TIM_Base_SetConfig+0x62>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca0 <TIM_Base_SetConfig+0xf4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00b      	beq.n	8002c0e <TIM_Base_SetConfig+0x62>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca4 <TIM_Base_SetConfig+0xf8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d007      	beq.n	8002c0e <TIM_Base_SetConfig+0x62>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a29      	ldr	r2, [pc, #164]	@ (8002ca8 <TIM_Base_SetConfig+0xfc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d003      	beq.n	8002c0e <TIM_Base_SetConfig+0x62>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a28      	ldr	r2, [pc, #160]	@ (8002cac <TIM_Base_SetConfig+0x100>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d108      	bne.n	8002c20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a27      	ldr	r2, [pc, #156]	@ (8002cb0 <TIM_Base_SetConfig+0x104>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2280      	movs	r2, #128	@ 0x80
 8002c24:	4393      	bics	r3, r2
 8002c26:	001a      	movs	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a13      	ldr	r2, [pc, #76]	@ (8002c98 <TIM_Base_SetConfig+0xec>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00b      	beq.n	8002c66 <TIM_Base_SetConfig+0xba>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a14      	ldr	r2, [pc, #80]	@ (8002ca4 <TIM_Base_SetConfig+0xf8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <TIM_Base_SetConfig+0xba>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a13      	ldr	r2, [pc, #76]	@ (8002ca8 <TIM_Base_SetConfig+0xfc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d003      	beq.n	8002c66 <TIM_Base_SetConfig+0xba>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a12      	ldr	r2, [pc, #72]	@ (8002cac <TIM_Base_SetConfig+0x100>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d103      	bne.n	8002c6e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d106      	bne.n	8002c8e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2201      	movs	r2, #1
 8002c86:	4393      	bics	r3, r2
 8002c88:	001a      	movs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	611a      	str	r2, [r3, #16]
  }
}
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b004      	add	sp, #16
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40002000 	.word	0x40002000
 8002ca4:	40014000 	.word	0x40014000
 8002ca8:	40014400 	.word	0x40014400
 8002cac:	40014800 	.word	0x40014800
 8002cb0:	fffffcff 	.word	0xfffffcff

08002cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4393      	bics	r3, r2
 8002ccc:	001a      	movs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2270      	movs	r2, #112	@ 0x70
 8002ce2:	4393      	bics	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	4393      	bics	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	4393      	bics	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a27      	ldr	r2, [pc, #156]	@ (8002dac <TIM_OC1_SetConfig+0xf8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00b      	beq.n	8002d2a <TIM_OC1_SetConfig+0x76>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a26      	ldr	r2, [pc, #152]	@ (8002db0 <TIM_OC1_SetConfig+0xfc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d007      	beq.n	8002d2a <TIM_OC1_SetConfig+0x76>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a25      	ldr	r2, [pc, #148]	@ (8002db4 <TIM_OC1_SetConfig+0x100>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d003      	beq.n	8002d2a <TIM_OC1_SetConfig+0x76>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a24      	ldr	r2, [pc, #144]	@ (8002db8 <TIM_OC1_SetConfig+0x104>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d10c      	bne.n	8002d44 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	4393      	bics	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2204      	movs	r2, #4
 8002d40:	4393      	bics	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a19      	ldr	r2, [pc, #100]	@ (8002dac <TIM_OC1_SetConfig+0xf8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00b      	beq.n	8002d64 <TIM_OC1_SetConfig+0xb0>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a18      	ldr	r2, [pc, #96]	@ (8002db0 <TIM_OC1_SetConfig+0xfc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d007      	beq.n	8002d64 <TIM_OC1_SetConfig+0xb0>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a17      	ldr	r2, [pc, #92]	@ (8002db4 <TIM_OC1_SetConfig+0x100>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d003      	beq.n	8002d64 <TIM_OC1_SetConfig+0xb0>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a16      	ldr	r2, [pc, #88]	@ (8002db8 <TIM_OC1_SetConfig+0x104>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d111      	bne.n	8002d88 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4a15      	ldr	r2, [pc, #84]	@ (8002dbc <TIM_OC1_SetConfig+0x108>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4a14      	ldr	r2, [pc, #80]	@ (8002dc0 <TIM_OC1_SetConfig+0x10c>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	621a      	str	r2, [r3, #32]
}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b006      	add	sp, #24
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40014000 	.word	0x40014000
 8002db4:	40014400 	.word	0x40014400
 8002db8:	40014800 	.word	0x40014800
 8002dbc:	fffffeff 	.word	0xfffffeff
 8002dc0:	fffffdff 	.word	0xfffffdff

08002dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	2210      	movs	r2, #16
 8002dda:	4393      	bics	r3, r2
 8002ddc:	001a      	movs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4a2e      	ldr	r2, [pc, #184]	@ (8002eac <TIM_OC2_SetConfig+0xe8>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb0 <TIM_OC2_SetConfig+0xec>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	4393      	bics	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a24      	ldr	r2, [pc, #144]	@ (8002eb4 <TIM_OC2_SetConfig+0xf0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d10d      	bne.n	8002e42 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2280      	movs	r2, #128	@ 0x80
 8002e2a:	4393      	bics	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2240      	movs	r2, #64	@ 0x40
 8002e3e:	4393      	bics	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb4 <TIM_OC2_SetConfig+0xf0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00b      	beq.n	8002e62 <TIM_OC2_SetConfig+0x9e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002eb8 <TIM_OC2_SetConfig+0xf4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <TIM_OC2_SetConfig+0x9e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a19      	ldr	r2, [pc, #100]	@ (8002ebc <TIM_OC2_SetConfig+0xf8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d003      	beq.n	8002e62 <TIM_OC2_SetConfig+0x9e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	@ (8002ec0 <TIM_OC2_SetConfig+0xfc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d113      	bne.n	8002e8a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4a17      	ldr	r2, [pc, #92]	@ (8002ec4 <TIM_OC2_SetConfig+0x100>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4a16      	ldr	r2, [pc, #88]	@ (8002ec8 <TIM_OC2_SetConfig+0x104>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	621a      	str	r2, [r3, #32]
}
 8002ea4:	46c0      	nop			@ (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b006      	add	sp, #24
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	ffff8fff 	.word	0xffff8fff
 8002eb0:	fffffcff 	.word	0xfffffcff
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40014000 	.word	0x40014000
 8002ebc:	40014400 	.word	0x40014400
 8002ec0:	40014800 	.word	0x40014800
 8002ec4:	fffffbff 	.word	0xfffffbff
 8002ec8:	fffff7ff 	.word	0xfffff7ff

08002ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4a33      	ldr	r2, [pc, #204]	@ (8002fb0 <TIM_OC3_SetConfig+0xe4>)
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2270      	movs	r2, #112	@ 0x70
 8002ef8:	4393      	bics	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2203      	movs	r2, #3
 8002f00:	4393      	bics	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	4a28      	ldr	r2, [pc, #160]	@ (8002fb4 <TIM_OC3_SetConfig+0xe8>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a24      	ldr	r2, [pc, #144]	@ (8002fb8 <TIM_OC3_SetConfig+0xec>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d10d      	bne.n	8002f46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	4a23      	ldr	r2, [pc, #140]	@ (8002fbc <TIM_OC3_SetConfig+0xf0>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc0 <TIM_OC3_SetConfig+0xf4>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb8 <TIM_OC3_SetConfig+0xec>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00b      	beq.n	8002f66 <TIM_OC3_SetConfig+0x9a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc4 <TIM_OC3_SetConfig+0xf8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <TIM_OC3_SetConfig+0x9a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc8 <TIM_OC3_SetConfig+0xfc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d003      	beq.n	8002f66 <TIM_OC3_SetConfig+0x9a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1a      	ldr	r2, [pc, #104]	@ (8002fcc <TIM_OC3_SetConfig+0x100>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d113      	bne.n	8002f8e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4a19      	ldr	r2, [pc, #100]	@ (8002fd0 <TIM_OC3_SetConfig+0x104>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4a18      	ldr	r2, [pc, #96]	@ (8002fd4 <TIM_OC3_SetConfig+0x108>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	621a      	str	r2, [r3, #32]
}
 8002fa8:	46c0      	nop			@ (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b006      	add	sp, #24
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	fffffeff 	.word	0xfffffeff
 8002fb4:	fffffdff 	.word	0xfffffdff
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	fffff7ff 	.word	0xfffff7ff
 8002fc0:	fffffbff 	.word	0xfffffbff
 8002fc4:	40014000 	.word	0x40014000
 8002fc8:	40014400 	.word	0x40014400
 8002fcc:	40014800 	.word	0x40014800
 8002fd0:	ffffefff 	.word	0xffffefff
 8002fd4:	ffffdfff 	.word	0xffffdfff

08002fd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4a26      	ldr	r2, [pc, #152]	@ (8003088 <TIM_OC4_SetConfig+0xb0>)
 8002fee:	401a      	ands	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4a22      	ldr	r2, [pc, #136]	@ (800308c <TIM_OC4_SetConfig+0xb4>)
 8003004:	4013      	ands	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4a21      	ldr	r2, [pc, #132]	@ (8003090 <TIM_OC4_SetConfig+0xb8>)
 800300c:	4013      	ands	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4a1d      	ldr	r2, [pc, #116]	@ (8003094 <TIM_OC4_SetConfig+0xbc>)
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	031b      	lsls	r3, r3, #12
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a19      	ldr	r2, [pc, #100]	@ (8003098 <TIM_OC4_SetConfig+0xc0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00b      	beq.n	8003050 <TIM_OC4_SetConfig+0x78>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a18      	ldr	r2, [pc, #96]	@ (800309c <TIM_OC4_SetConfig+0xc4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <TIM_OC4_SetConfig+0x78>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a17      	ldr	r2, [pc, #92]	@ (80030a0 <TIM_OC4_SetConfig+0xc8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_OC4_SetConfig+0x78>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a16      	ldr	r2, [pc, #88]	@ (80030a4 <TIM_OC4_SetConfig+0xcc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d109      	bne.n	8003064 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	4a15      	ldr	r2, [pc, #84]	@ (80030a8 <TIM_OC4_SetConfig+0xd0>)
 8003054:	4013      	ands	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	019b      	lsls	r3, r3, #6
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	621a      	str	r2, [r3, #32]
}
 800307e:	46c0      	nop			@ (mov r8, r8)
 8003080:	46bd      	mov	sp, r7
 8003082:	b006      	add	sp, #24
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	ffffefff 	.word	0xffffefff
 800308c:	ffff8fff 	.word	0xffff8fff
 8003090:	fffffcff 	.word	0xfffffcff
 8003094:	ffffdfff 	.word	0xffffdfff
 8003098:	40012c00 	.word	0x40012c00
 800309c:	40014000 	.word	0x40014000
 80030a0:	40014400 	.word	0x40014400
 80030a4:	40014800 	.word	0x40014800
 80030a8:	ffffbfff 	.word	0xffffbfff

080030ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	2201      	movs	r2, #1
 80030c4:	4393      	bics	r3, r2
 80030c6:	001a      	movs	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	22f0      	movs	r2, #240	@ 0xf0
 80030d6:	4393      	bics	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	220a      	movs	r2, #10
 80030e8:	4393      	bics	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	621a      	str	r2, [r3, #32]
}
 8003100:	46c0      	nop			@ (mov r8, r8)
 8003102:	46bd      	mov	sp, r7
 8003104:	b006      	add	sp, #24
 8003106:	bd80      	pop	{r7, pc}

08003108 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	2210      	movs	r2, #16
 8003120:	4393      	bics	r3, r2
 8003122:	001a      	movs	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4a0d      	ldr	r2, [pc, #52]	@ (8003168 <TIM_TI2_ConfigInputStage+0x60>)
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	031b      	lsls	r3, r3, #12
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	22a0      	movs	r2, #160	@ 0xa0
 8003144:	4393      	bics	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	621a      	str	r2, [r3, #32]
}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	b006      	add	sp, #24
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	ffff0fff 	.word	0xffff0fff

0800316c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2270      	movs	r2, #112	@ 0x70
 8003180:	4393      	bics	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	2207      	movs	r2, #7
 800318c:	4313      	orrs	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	609a      	str	r2, [r3, #8]
}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b004      	add	sp, #16
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	4a09      	ldr	r2, [pc, #36]	@ (80031dc <TIM_ETR_SetConfig+0x3c>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	021a      	lsls	r2, r3, #8
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	609a      	str	r2, [r3, #8]
}
 80031d4:	46c0      	nop			@ (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b006      	add	sp, #24
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	ffff00ff 	.word	0xffff00ff

080031e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	221f      	movs	r2, #31
 80031f0:	4013      	ands	r3, r2
 80031f2:	2201      	movs	r2, #1
 80031f4:	409a      	lsls	r2, r3
 80031f6:	0013      	movs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	43d2      	mvns	r2, r2
 8003202:	401a      	ands	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a1a      	ldr	r2, [r3, #32]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	211f      	movs	r1, #31
 8003210:	400b      	ands	r3, r1
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4099      	lsls	r1, r3
 8003216:	000b      	movs	r3, r1
 8003218:	431a      	orrs	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	621a      	str	r2, [r3, #32]
}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b006      	add	sp, #24
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	223c      	movs	r2, #60	@ 0x3c
 8003236:	5c9b      	ldrb	r3, [r3, r2]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800323c:	2302      	movs	r3, #2
 800323e:	e041      	b.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	223c      	movs	r2, #60	@ 0x3c
 8003244:	2101      	movs	r1, #1
 8003246:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	223d      	movs	r2, #61	@ 0x3d
 800324c:	2102      	movs	r1, #2
 800324e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2270      	movs	r2, #112	@ 0x70
 8003264:	4393      	bics	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a13      	ldr	r2, [pc, #76]	@ (80032cc <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a11      	ldr	r2, [pc, #68]	@ (80032d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a10      	ldr	r2, [pc, #64]	@ (80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d10c      	bne.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2280      	movs	r2, #128	@ 0x80
 800329c:	4393      	bics	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	223d      	movs	r2, #61	@ 0x3d
 80032b6:	2101      	movs	r1, #1
 80032b8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	223c      	movs	r2, #60	@ 0x3c
 80032be:	2100      	movs	r1, #0
 80032c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b004      	add	sp, #16
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	40000400 	.word	0x40000400
 80032d4:	40014000 	.word	0x40014000

080032d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	223c      	movs	r2, #60	@ 0x3c
 80032ea:	5c9b      	ldrb	r3, [r3, r2]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e03e      	b.n	8003372 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	223c      	movs	r2, #60	@ 0x3c
 80032f8:	2101      	movs	r1, #1
 80032fa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	22ff      	movs	r2, #255	@ 0xff
 8003300:	4393      	bics	r3, r2
 8003302:	001a      	movs	r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a1b      	ldr	r2, [pc, #108]	@ (800337c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003310:	401a      	ands	r2, r3
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4a18      	ldr	r2, [pc, #96]	@ (8003380 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800331e:	401a      	ands	r2, r3
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a16      	ldr	r2, [pc, #88]	@ (8003384 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800332c:	401a      	ands	r2, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a13      	ldr	r2, [pc, #76]	@ (8003388 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800333a:	401a      	ands	r2, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a11      	ldr	r2, [pc, #68]	@ (800338c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003348:	401a      	ands	r2, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a0e      	ldr	r2, [pc, #56]	@ (8003390 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003356:	401a      	ands	r2, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	223c      	movs	r2, #60	@ 0x3c
 800336c:	2100      	movs	r1, #0
 800336e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b004      	add	sp, #16
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			@ (mov r8, r8)
 800337c:	fffffcff 	.word	0xfffffcff
 8003380:	fffffbff 	.word	0xfffffbff
 8003384:	fffff7ff 	.word	0xfffff7ff
 8003388:	ffffefff 	.word	0xffffefff
 800338c:	ffffdfff 	.word	0xffffdfff
 8003390:	ffffbfff 	.word	0xffffbfff

08003394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e044      	b.n	8003430 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d107      	bne.n	80033be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2278      	movs	r2, #120	@ 0x78
 80033b2:	2100      	movs	r1, #0
 80033b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7fd fbdf 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2224      	movs	r2, #36	@ 0x24
 80033c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	438a      	bics	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	0018      	movs	r0, r3
 80033e0:	f000 fa0c 	bl	80037fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 f8c8 	bl	800357c <UART_SetConfig>
 80033ec:	0003      	movs	r3, r0
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e01c      	b.n	8003430 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	490d      	ldr	r1, [pc, #52]	@ (8003438 <HAL_UART_Init+0xa4>)
 8003402:	400a      	ands	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2108      	movs	r1, #8
 8003412:	438a      	bics	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2101      	movs	r1, #1
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 fa9b 	bl	8003964 <UART_CheckIdleState>
 800342e:	0003      	movs	r3, r0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}
 8003438:	fffff7ff 	.word	0xfffff7ff

0800343c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	@ 0x28
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	1dbb      	adds	r3, r7, #6
 800344a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003450:	2b20      	cmp	r3, #32
 8003452:	d000      	beq.n	8003456 <HAL_UART_Transmit+0x1a>
 8003454:	e08c      	b.n	8003570 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_UART_Transmit+0x28>
 800345c:	1dbb      	adds	r3, r7, #6
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e084      	b.n	8003572 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	2380      	movs	r3, #128	@ 0x80
 800346e:	015b      	lsls	r3, r3, #5
 8003470:	429a      	cmp	r2, r3
 8003472:	d109      	bne.n	8003488 <HAL_UART_Transmit+0x4c>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2201      	movs	r2, #1
 8003480:	4013      	ands	r3, r2
 8003482:	d001      	beq.n	8003488 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e074      	b.n	8003572 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2284      	movs	r2, #132	@ 0x84
 800348c:	2100      	movs	r1, #0
 800348e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2221      	movs	r2, #33	@ 0x21
 8003494:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003496:	f7fd fcf7 	bl	8000e88 <HAL_GetTick>
 800349a:	0003      	movs	r3, r0
 800349c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1dba      	adds	r2, r7, #6
 80034a2:	2150      	movs	r1, #80	@ 0x50
 80034a4:	8812      	ldrh	r2, [r2, #0]
 80034a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1dba      	adds	r2, r7, #6
 80034ac:	2152      	movs	r1, #82	@ 0x52
 80034ae:	8812      	ldrh	r2, [r2, #0]
 80034b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	2380      	movs	r3, #128	@ 0x80
 80034b8:	015b      	lsls	r3, r3, #5
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d108      	bne.n	80034d0 <HAL_UART_Transmit+0x94>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d104      	bne.n	80034d0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	e003      	b.n	80034d8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034d8:	e02f      	b.n	800353a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	0013      	movs	r3, r2
 80034e4:	2200      	movs	r2, #0
 80034e6:	2180      	movs	r1, #128	@ 0x80
 80034e8:	f000 fae4 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d004      	beq.n	80034fa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e03b      	b.n	8003572 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	881a      	ldrh	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	05d2      	lsls	r2, r2, #23
 800350a:	0dd2      	lsrs	r2, r2, #23
 800350c:	b292      	uxth	r2, r2
 800350e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	3302      	adds	r3, #2
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	e007      	b.n	8003528 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	781a      	ldrb	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3301      	adds	r3, #1
 8003526:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2252      	movs	r2, #82	@ 0x52
 800352c:	5a9b      	ldrh	r3, [r3, r2]
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b299      	uxth	r1, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2252      	movs	r2, #82	@ 0x52
 8003538:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2252      	movs	r2, #82	@ 0x52
 800353e:	5a9b      	ldrh	r3, [r3, r2]
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1c9      	bne.n	80034da <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	0013      	movs	r3, r2
 8003550:	2200      	movs	r2, #0
 8003552:	2140      	movs	r1, #64	@ 0x40
 8003554:	f000 faae 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8003558:	1e03      	subs	r3, r0, #0
 800355a:	d004      	beq.n	8003566 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e005      	b.n	8003572 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	0018      	movs	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	b008      	add	sp, #32
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003584:	231e      	movs	r3, #30
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	2200      	movs	r2, #0
 800358a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a8d      	ldr	r2, [pc, #564]	@ (80037e0 <UART_SetConfig+0x264>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	0019      	movs	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4a88      	ldr	r2, [pc, #544]	@ (80037e4 <UART_SetConfig+0x268>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	0019      	movs	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a7f      	ldr	r2, [pc, #508]	@ (80037e8 <UART_SetConfig+0x26c>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a7b      	ldr	r2, [pc, #492]	@ (80037ec <UART_SetConfig+0x270>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d127      	bne.n	8003652 <UART_SetConfig+0xd6>
 8003602:	4b7b      	ldr	r3, [pc, #492]	@ (80037f0 <UART_SetConfig+0x274>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	2203      	movs	r2, #3
 8003608:	4013      	ands	r3, r2
 800360a:	2b03      	cmp	r3, #3
 800360c:	d00d      	beq.n	800362a <UART_SetConfig+0xae>
 800360e:	d81b      	bhi.n	8003648 <UART_SetConfig+0xcc>
 8003610:	2b02      	cmp	r3, #2
 8003612:	d014      	beq.n	800363e <UART_SetConfig+0xc2>
 8003614:	d818      	bhi.n	8003648 <UART_SetConfig+0xcc>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <UART_SetConfig+0xa4>
 800361a:	2b01      	cmp	r3, #1
 800361c:	d00a      	beq.n	8003634 <UART_SetConfig+0xb8>
 800361e:	e013      	b.n	8003648 <UART_SetConfig+0xcc>
 8003620:	231f      	movs	r3, #31
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e021      	b.n	800366e <UART_SetConfig+0xf2>
 800362a:	231f      	movs	r3, #31
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	2202      	movs	r2, #2
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e01c      	b.n	800366e <UART_SetConfig+0xf2>
 8003634:	231f      	movs	r3, #31
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	2204      	movs	r2, #4
 800363a:	701a      	strb	r2, [r3, #0]
 800363c:	e017      	b.n	800366e <UART_SetConfig+0xf2>
 800363e:	231f      	movs	r3, #31
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	2208      	movs	r2, #8
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e012      	b.n	800366e <UART_SetConfig+0xf2>
 8003648:	231f      	movs	r3, #31
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	2210      	movs	r2, #16
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e00d      	b.n	800366e <UART_SetConfig+0xf2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a67      	ldr	r2, [pc, #412]	@ (80037f4 <UART_SetConfig+0x278>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d104      	bne.n	8003666 <UART_SetConfig+0xea>
 800365c:	231f      	movs	r3, #31
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	e003      	b.n	800366e <UART_SetConfig+0xf2>
 8003666:	231f      	movs	r3, #31
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	2210      	movs	r2, #16
 800366c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	2380      	movs	r3, #128	@ 0x80
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	429a      	cmp	r2, r3
 8003678:	d15c      	bne.n	8003734 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800367a:	231f      	movs	r3, #31
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d015      	beq.n	80036b0 <UART_SetConfig+0x134>
 8003684:	dc18      	bgt.n	80036b8 <UART_SetConfig+0x13c>
 8003686:	2b04      	cmp	r3, #4
 8003688:	d00d      	beq.n	80036a6 <UART_SetConfig+0x12a>
 800368a:	dc15      	bgt.n	80036b8 <UART_SetConfig+0x13c>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <UART_SetConfig+0x11a>
 8003690:	2b02      	cmp	r3, #2
 8003692:	d005      	beq.n	80036a0 <UART_SetConfig+0x124>
 8003694:	e010      	b.n	80036b8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003696:	f7fe fc83 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 800369a:	0003      	movs	r3, r0
 800369c:	61bb      	str	r3, [r7, #24]
        break;
 800369e:	e012      	b.n	80036c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a0:	4b55      	ldr	r3, [pc, #340]	@ (80037f8 <UART_SetConfig+0x27c>)
 80036a2:	61bb      	str	r3, [r7, #24]
        break;
 80036a4:	e00f      	b.n	80036c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a6:	f7fe fc1b 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 80036aa:	0003      	movs	r3, r0
 80036ac:	61bb      	str	r3, [r7, #24]
        break;
 80036ae:	e00a      	b.n	80036c6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036b0:	2380      	movs	r3, #128	@ 0x80
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	61bb      	str	r3, [r7, #24]
        break;
 80036b6:	e006      	b.n	80036c6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036bc:	231e      	movs	r3, #30
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
        break;
 80036c4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d100      	bne.n	80036ce <UART_SetConfig+0x152>
 80036cc:	e07a      	b.n	80037c4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	005a      	lsls	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	18d2      	adds	r2, r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	0019      	movs	r1, r3
 80036e0:	0010      	movs	r0, r2
 80036e2:	f7fc fd1b 	bl	800011c <__udivsi3>
 80036e6:	0003      	movs	r3, r0
 80036e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b0f      	cmp	r3, #15
 80036ee:	d91c      	bls.n	800372a <UART_SetConfig+0x1ae>
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	2380      	movs	r3, #128	@ 0x80
 80036f4:	025b      	lsls	r3, r3, #9
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d217      	bcs.n	800372a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	200e      	movs	r0, #14
 8003700:	183b      	adds	r3, r7, r0
 8003702:	210f      	movs	r1, #15
 8003704:	438a      	bics	r2, r1
 8003706:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	b29b      	uxth	r3, r3
 800370e:	2207      	movs	r2, #7
 8003710:	4013      	ands	r3, r2
 8003712:	b299      	uxth	r1, r3
 8003714:	183b      	adds	r3, r7, r0
 8003716:	183a      	adds	r2, r7, r0
 8003718:	8812      	ldrh	r2, [r2, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	183a      	adds	r2, r7, r0
 8003724:	8812      	ldrh	r2, [r2, #0]
 8003726:	60da      	str	r2, [r3, #12]
 8003728:	e04c      	b.n	80037c4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800372a:	231e      	movs	r3, #30
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e047      	b.n	80037c4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003734:	231f      	movs	r3, #31
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b08      	cmp	r3, #8
 800373c:	d015      	beq.n	800376a <UART_SetConfig+0x1ee>
 800373e:	dc18      	bgt.n	8003772 <UART_SetConfig+0x1f6>
 8003740:	2b04      	cmp	r3, #4
 8003742:	d00d      	beq.n	8003760 <UART_SetConfig+0x1e4>
 8003744:	dc15      	bgt.n	8003772 <UART_SetConfig+0x1f6>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <UART_SetConfig+0x1d4>
 800374a:	2b02      	cmp	r3, #2
 800374c:	d005      	beq.n	800375a <UART_SetConfig+0x1de>
 800374e:	e010      	b.n	8003772 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003750:	f7fe fc26 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8003754:	0003      	movs	r3, r0
 8003756:	61bb      	str	r3, [r7, #24]
        break;
 8003758:	e012      	b.n	8003780 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800375a:	4b27      	ldr	r3, [pc, #156]	@ (80037f8 <UART_SetConfig+0x27c>)
 800375c:	61bb      	str	r3, [r7, #24]
        break;
 800375e:	e00f      	b.n	8003780 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003760:	f7fe fbbe 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8003764:	0003      	movs	r3, r0
 8003766:	61bb      	str	r3, [r7, #24]
        break;
 8003768:	e00a      	b.n	8003780 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	61bb      	str	r3, [r7, #24]
        break;
 8003770:	e006      	b.n	8003780 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003776:	231e      	movs	r3, #30
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
        break;
 800377e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01e      	beq.n	80037c4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	085a      	lsrs	r2, r3, #1
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	18d2      	adds	r2, r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0019      	movs	r1, r3
 8003796:	0010      	movs	r0, r2
 8003798:	f7fc fcc0 	bl	800011c <__udivsi3>
 800379c:	0003      	movs	r3, r0
 800379e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b0f      	cmp	r3, #15
 80037a4:	d90a      	bls.n	80037bc <UART_SetConfig+0x240>
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	2380      	movs	r3, #128	@ 0x80
 80037aa:	025b      	lsls	r3, r3, #9
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d205      	bcs.n	80037bc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	e003      	b.n	80037c4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80037bc:	231e      	movs	r3, #30
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	2201      	movs	r2, #1
 80037c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80037d0:	231e      	movs	r3, #30
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	781b      	ldrb	r3, [r3, #0]
}
 80037d6:	0018      	movs	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	b008      	add	sp, #32
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			@ (mov r8, r8)
 80037e0:	ffff69f3 	.word	0xffff69f3
 80037e4:	ffffcfff 	.word	0xffffcfff
 80037e8:	fffff4ff 	.word	0xfffff4ff
 80037ec:	40013800 	.word	0x40013800
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40004400 	.word	0x40004400
 80037f8:	007a1200 	.word	0x007a1200

080037fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	2208      	movs	r2, #8
 800380a:	4013      	ands	r3, r2
 800380c:	d00b      	beq.n	8003826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a4a      	ldr	r2, [pc, #296]	@ (8003940 <UART_AdvFeatureConfig+0x144>)
 8003816:	4013      	ands	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	2201      	movs	r2, #1
 800382c:	4013      	ands	r3, r2
 800382e:	d00b      	beq.n	8003848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4a43      	ldr	r2, [pc, #268]	@ (8003944 <UART_AdvFeatureConfig+0x148>)
 8003838:	4013      	ands	r3, r2
 800383a:	0019      	movs	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	2202      	movs	r2, #2
 800384e:	4013      	ands	r3, r2
 8003850:	d00b      	beq.n	800386a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a3b      	ldr	r2, [pc, #236]	@ (8003948 <UART_AdvFeatureConfig+0x14c>)
 800385a:	4013      	ands	r3, r2
 800385c:	0019      	movs	r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	2204      	movs	r2, #4
 8003870:	4013      	ands	r3, r2
 8003872:	d00b      	beq.n	800388c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4a34      	ldr	r2, [pc, #208]	@ (800394c <UART_AdvFeatureConfig+0x150>)
 800387c:	4013      	ands	r3, r2
 800387e:	0019      	movs	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	2210      	movs	r2, #16
 8003892:	4013      	ands	r3, r2
 8003894:	d00b      	beq.n	80038ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4a2c      	ldr	r2, [pc, #176]	@ (8003950 <UART_AdvFeatureConfig+0x154>)
 800389e:	4013      	ands	r3, r2
 80038a0:	0019      	movs	r1, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	2220      	movs	r2, #32
 80038b4:	4013      	ands	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	4a25      	ldr	r2, [pc, #148]	@ (8003954 <UART_AdvFeatureConfig+0x158>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	0019      	movs	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	2240      	movs	r2, #64	@ 0x40
 80038d6:	4013      	ands	r3, r2
 80038d8:	d01d      	beq.n	8003916 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003958 <UART_AdvFeatureConfig+0x15c>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038f6:	2380      	movs	r3, #128	@ 0x80
 80038f8:	035b      	lsls	r3, r3, #13
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d10b      	bne.n	8003916 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4a15      	ldr	r2, [pc, #84]	@ (800395c <UART_AdvFeatureConfig+0x160>)
 8003906:	4013      	ands	r3, r2
 8003908:	0019      	movs	r1, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	2280      	movs	r2, #128	@ 0x80
 800391c:	4013      	ands	r3, r2
 800391e:	d00b      	beq.n	8003938 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4a0e      	ldr	r2, [pc, #56]	@ (8003960 <UART_AdvFeatureConfig+0x164>)
 8003928:	4013      	ands	r3, r2
 800392a:	0019      	movs	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]
  }
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	ffff7fff 	.word	0xffff7fff
 8003944:	fffdffff 	.word	0xfffdffff
 8003948:	fffeffff 	.word	0xfffeffff
 800394c:	fffbffff 	.word	0xfffbffff
 8003950:	ffffefff 	.word	0xffffefff
 8003954:	ffffdfff 	.word	0xffffdfff
 8003958:	ffefffff 	.word	0xffefffff
 800395c:	ff9fffff 	.word	0xff9fffff
 8003960:	fff7ffff 	.word	0xfff7ffff

08003964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b092      	sub	sp, #72	@ 0x48
 8003968:	af02      	add	r7, sp, #8
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2284      	movs	r2, #132	@ 0x84
 8003970:	2100      	movs	r1, #0
 8003972:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003974:	f7fd fa88 	bl	8000e88 <HAL_GetTick>
 8003978:	0003      	movs	r3, r0
 800397a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2208      	movs	r2, #8
 8003984:	4013      	ands	r3, r2
 8003986:	2b08      	cmp	r3, #8
 8003988:	d12c      	bne.n	80039e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800398a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398c:	2280      	movs	r2, #128	@ 0x80
 800398e:	0391      	lsls	r1, r2, #14
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4a46      	ldr	r2, [pc, #280]	@ (8003aac <UART_CheckIdleState+0x148>)
 8003994:	9200      	str	r2, [sp, #0]
 8003996:	2200      	movs	r2, #0
 8003998:	f000 f88c 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 800399c:	1e03      	subs	r3, r0, #0
 800399e:	d021      	beq.n	80039e4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a0:	f3ef 8310 	mrs	r3, PRIMASK
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039aa:	2301      	movs	r3, #1
 80039ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b0:	f383 8810 	msr	PRIMASK, r3
}
 80039b4:	46c0      	nop			@ (mov r8, r8)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2180      	movs	r1, #128	@ 0x80
 80039c2:	438a      	bics	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039cc:	f383 8810 	msr	PRIMASK, r3
}
 80039d0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2278      	movs	r2, #120	@ 0x78
 80039dc:	2100      	movs	r1, #0
 80039de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e05f      	b.n	8003aa4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2204      	movs	r2, #4
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d146      	bne.n	8003a80 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f4:	2280      	movs	r2, #128	@ 0x80
 80039f6:	03d1      	lsls	r1, r2, #15
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4a2c      	ldr	r2, [pc, #176]	@ (8003aac <UART_CheckIdleState+0x148>)
 80039fc:	9200      	str	r2, [sp, #0]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f000 f858 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8003a04:	1e03      	subs	r3, r0, #0
 8003a06:	d03b      	beq.n	8003a80 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a08:	f3ef 8310 	mrs	r3, PRIMASK
 8003a0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a12:	2301      	movs	r3, #1
 8003a14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f383 8810 	msr	PRIMASK, r3
}
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4921      	ldr	r1, [pc, #132]	@ (8003ab0 <UART_CheckIdleState+0x14c>)
 8003a2a:	400a      	ands	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f383 8810 	msr	PRIMASK, r3
}
 8003a38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a40:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a42:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a44:	2301      	movs	r3, #1
 8003a46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f383 8810 	msr	PRIMASK, r3
}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	438a      	bics	r2, r1
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	f383 8810 	msr	PRIMASK, r3
}
 8003a6a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2280      	movs	r2, #128	@ 0x80
 8003a70:	2120      	movs	r1, #32
 8003a72:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2278      	movs	r2, #120	@ 0x78
 8003a78:	2100      	movs	r1, #0
 8003a7a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e011      	b.n	8003aa4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2280      	movs	r2, #128	@ 0x80
 8003a8a:	2120      	movs	r1, #32
 8003a8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2278      	movs	r2, #120	@ 0x78
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b010      	add	sp, #64	@ 0x40
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	01ffffff 	.word	0x01ffffff
 8003ab0:	fffffedf 	.word	0xfffffedf

08003ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	1dfb      	adds	r3, r7, #7
 8003ac2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac4:	e051      	b.n	8003b6a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	d04e      	beq.n	8003b6a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003acc:	f7fd f9dc 	bl	8000e88 <HAL_GetTick>
 8003ad0:	0002      	movs	r2, r0
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d302      	bcc.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e051      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2204      	movs	r2, #4
 8003aee:	4013      	ands	r3, r2
 8003af0:	d03b      	beq.n	8003b6a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b80      	cmp	r3, #128	@ 0x80
 8003af6:	d038      	beq.n	8003b6a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b40      	cmp	r3, #64	@ 0x40
 8003afc:	d035      	beq.n	8003b6a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	2208      	movs	r2, #8
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d111      	bne.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2208      	movs	r2, #8
 8003b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 f83c 	bl	8003b94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2284      	movs	r2, #132	@ 0x84
 8003b20:	2108      	movs	r1, #8
 8003b22:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2278      	movs	r2, #120	@ 0x78
 8003b28:	2100      	movs	r1, #0
 8003b2a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e02c      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69da      	ldr	r2, [r3, #28]
 8003b36:	2380      	movs	r3, #128	@ 0x80
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	2380      	movs	r3, #128	@ 0x80
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d112      	bne.n	8003b6a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2280      	movs	r2, #128	@ 0x80
 8003b4a:	0112      	lsls	r2, r2, #4
 8003b4c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f000 f81f 	bl	8003b94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2284      	movs	r2, #132	@ 0x84
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2278      	movs	r2, #120	@ 0x78
 8003b62:	2100      	movs	r1, #0
 8003b64:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e00f      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	425a      	negs	r2, r3
 8003b7a:	4153      	adcs	r3, r2
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	001a      	movs	r2, r3
 8003b80:	1dfb      	adds	r3, r7, #7
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d09e      	beq.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b004      	add	sp, #16
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08e      	sub	sp, #56	@ 0x38
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ba2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	f383 8810 	msr	PRIMASK, r3
}
 8003bb0:	46c0      	nop			@ (mov r8, r8)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4926      	ldr	r1, [pc, #152]	@ (8003c58 <UART_EndRxTransfer+0xc4>)
 8003bbe:	400a      	ands	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f383 8810 	msr	PRIMASK, r3
}
 8003bcc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bce:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd2:	623b      	str	r3, [r7, #32]
  return(result);
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bd8:	2301      	movs	r3, #1
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	f383 8810 	msr	PRIMASK, r3
}
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2101      	movs	r1, #1
 8003bf0:	438a      	bics	r2, r1
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfa:	f383 8810 	msr	PRIMASK, r3
}
 8003bfe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d118      	bne.n	8003c3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c08:	f3ef 8310 	mrs	r3, PRIMASK
 8003c0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c12:	2301      	movs	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f383 8810 	msr	PRIMASK, r3
}
 8003c1c:	46c0      	nop			@ (mov r8, r8)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2110      	movs	r1, #16
 8003c2a:	438a      	bics	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f383 8810 	msr	PRIMASK, r3
}
 8003c38:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2280      	movs	r2, #128	@ 0x80
 8003c3e:	2120      	movs	r1, #32
 8003c40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c4e:	46c0      	nop			@ (mov r8, r8)
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b00e      	add	sp, #56	@ 0x38
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	fffffedf 	.word	0xfffffedf

08003c5c <std>:
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	b510      	push	{r4, lr}
 8003c60:	0004      	movs	r4, r0
 8003c62:	6003      	str	r3, [r0, #0]
 8003c64:	6043      	str	r3, [r0, #4]
 8003c66:	6083      	str	r3, [r0, #8]
 8003c68:	8181      	strh	r1, [r0, #12]
 8003c6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c6c:	81c2      	strh	r2, [r0, #14]
 8003c6e:	6103      	str	r3, [r0, #16]
 8003c70:	6143      	str	r3, [r0, #20]
 8003c72:	6183      	str	r3, [r0, #24]
 8003c74:	0019      	movs	r1, r3
 8003c76:	2208      	movs	r2, #8
 8003c78:	305c      	adds	r0, #92	@ 0x5c
 8003c7a:	f000 f90f 	bl	8003e9c <memset>
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <std+0x50>)
 8003c80:	6224      	str	r4, [r4, #32]
 8003c82:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c84:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb0 <std+0x54>)
 8003c86:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c88:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <std+0x58>)
 8003c8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb8 <std+0x5c>)
 8003c8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c90:	4b0a      	ldr	r3, [pc, #40]	@ (8003cbc <std+0x60>)
 8003c92:	429c      	cmp	r4, r3
 8003c94:	d005      	beq.n	8003ca2 <std+0x46>
 8003c96:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc0 <std+0x64>)
 8003c98:	429c      	cmp	r4, r3
 8003c9a:	d002      	beq.n	8003ca2 <std+0x46>
 8003c9c:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <std+0x68>)
 8003c9e:	429c      	cmp	r4, r3
 8003ca0:	d103      	bne.n	8003caa <std+0x4e>
 8003ca2:	0020      	movs	r0, r4
 8003ca4:	3058      	adds	r0, #88	@ 0x58
 8003ca6:	f000 f979 	bl	8003f9c <__retarget_lock_init_recursive>
 8003caa:	bd10      	pop	{r4, pc}
 8003cac:	08003e05 	.word	0x08003e05
 8003cb0:	08003e2d 	.word	0x08003e2d
 8003cb4:	08003e65 	.word	0x08003e65
 8003cb8:	08003e91 	.word	0x08003e91
 8003cbc:	20000240 	.word	0x20000240
 8003cc0:	200002a8 	.word	0x200002a8
 8003cc4:	20000310 	.word	0x20000310

08003cc8 <stdio_exit_handler>:
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	4a03      	ldr	r2, [pc, #12]	@ (8003cd8 <stdio_exit_handler+0x10>)
 8003ccc:	4903      	ldr	r1, [pc, #12]	@ (8003cdc <stdio_exit_handler+0x14>)
 8003cce:	4804      	ldr	r0, [pc, #16]	@ (8003ce0 <stdio_exit_handler+0x18>)
 8003cd0:	f000 f86c 	bl	8003dac <_fwalk_sglue>
 8003cd4:	bd10      	pop	{r4, pc}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	2000000c 	.word	0x2000000c
 8003cdc:	0800482d 	.word	0x0800482d
 8003ce0:	2000001c 	.word	0x2000001c

08003ce4 <cleanup_stdio>:
 8003ce4:	6841      	ldr	r1, [r0, #4]
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <cleanup_stdio+0x30>)
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	0004      	movs	r4, r0
 8003cec:	4299      	cmp	r1, r3
 8003cee:	d001      	beq.n	8003cf4 <cleanup_stdio+0x10>
 8003cf0:	f000 fd9c 	bl	800482c <_fflush_r>
 8003cf4:	68a1      	ldr	r1, [r4, #8]
 8003cf6:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <cleanup_stdio+0x34>)
 8003cf8:	4299      	cmp	r1, r3
 8003cfa:	d002      	beq.n	8003d02 <cleanup_stdio+0x1e>
 8003cfc:	0020      	movs	r0, r4
 8003cfe:	f000 fd95 	bl	800482c <_fflush_r>
 8003d02:	68e1      	ldr	r1, [r4, #12]
 8003d04:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <cleanup_stdio+0x38>)
 8003d06:	4299      	cmp	r1, r3
 8003d08:	d002      	beq.n	8003d10 <cleanup_stdio+0x2c>
 8003d0a:	0020      	movs	r0, r4
 8003d0c:	f000 fd8e 	bl	800482c <_fflush_r>
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	20000240 	.word	0x20000240
 8003d18:	200002a8 	.word	0x200002a8
 8003d1c:	20000310 	.word	0x20000310

08003d20 <global_stdio_init.part.0>:
 8003d20:	b510      	push	{r4, lr}
 8003d22:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <global_stdio_init.part.0+0x28>)
 8003d24:	4a09      	ldr	r2, [pc, #36]	@ (8003d4c <global_stdio_init.part.0+0x2c>)
 8003d26:	2104      	movs	r1, #4
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	4809      	ldr	r0, [pc, #36]	@ (8003d50 <global_stdio_init.part.0+0x30>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f7ff ff95 	bl	8003c5c <std>
 8003d32:	2201      	movs	r2, #1
 8003d34:	2109      	movs	r1, #9
 8003d36:	4807      	ldr	r0, [pc, #28]	@ (8003d54 <global_stdio_init.part.0+0x34>)
 8003d38:	f7ff ff90 	bl	8003c5c <std>
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	2112      	movs	r1, #18
 8003d40:	4805      	ldr	r0, [pc, #20]	@ (8003d58 <global_stdio_init.part.0+0x38>)
 8003d42:	f7ff ff8b 	bl	8003c5c <std>
 8003d46:	bd10      	pop	{r4, pc}
 8003d48:	20000378 	.word	0x20000378
 8003d4c:	08003cc9 	.word	0x08003cc9
 8003d50:	20000240 	.word	0x20000240
 8003d54:	200002a8 	.word	0x200002a8
 8003d58:	20000310 	.word	0x20000310

08003d5c <__sfp_lock_acquire>:
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	4802      	ldr	r0, [pc, #8]	@ (8003d68 <__sfp_lock_acquire+0xc>)
 8003d60:	f000 f91d 	bl	8003f9e <__retarget_lock_acquire_recursive>
 8003d64:	bd10      	pop	{r4, pc}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	20000381 	.word	0x20000381

08003d6c <__sfp_lock_release>:
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	4802      	ldr	r0, [pc, #8]	@ (8003d78 <__sfp_lock_release+0xc>)
 8003d70:	f000 f916 	bl	8003fa0 <__retarget_lock_release_recursive>
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	20000381 	.word	0x20000381

08003d7c <__sinit>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	0004      	movs	r4, r0
 8003d80:	f7ff ffec 	bl	8003d5c <__sfp_lock_acquire>
 8003d84:	6a23      	ldr	r3, [r4, #32]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <__sinit+0x14>
 8003d8a:	f7ff ffef 	bl	8003d6c <__sfp_lock_release>
 8003d8e:	bd10      	pop	{r4, pc}
 8003d90:	4b04      	ldr	r3, [pc, #16]	@ (8003da4 <__sinit+0x28>)
 8003d92:	6223      	str	r3, [r4, #32]
 8003d94:	4b04      	ldr	r3, [pc, #16]	@ (8003da8 <__sinit+0x2c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f6      	bne.n	8003d8a <__sinit+0xe>
 8003d9c:	f7ff ffc0 	bl	8003d20 <global_stdio_init.part.0>
 8003da0:	e7f3      	b.n	8003d8a <__sinit+0xe>
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	08003ce5 	.word	0x08003ce5
 8003da8:	20000378 	.word	0x20000378

08003dac <_fwalk_sglue>:
 8003dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dae:	0014      	movs	r4, r2
 8003db0:	2600      	movs	r6, #0
 8003db2:	9000      	str	r0, [sp, #0]
 8003db4:	9101      	str	r1, [sp, #4]
 8003db6:	68a5      	ldr	r5, [r4, #8]
 8003db8:	6867      	ldr	r7, [r4, #4]
 8003dba:	3f01      	subs	r7, #1
 8003dbc:	d504      	bpl.n	8003dc8 <_fwalk_sglue+0x1c>
 8003dbe:	6824      	ldr	r4, [r4, #0]
 8003dc0:	2c00      	cmp	r4, #0
 8003dc2:	d1f8      	bne.n	8003db6 <_fwalk_sglue+0xa>
 8003dc4:	0030      	movs	r0, r6
 8003dc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dc8:	89ab      	ldrh	r3, [r5, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d908      	bls.n	8003de0 <_fwalk_sglue+0x34>
 8003dce:	220e      	movs	r2, #14
 8003dd0:	5eab      	ldrsh	r3, [r5, r2]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	d004      	beq.n	8003de0 <_fwalk_sglue+0x34>
 8003dd6:	0029      	movs	r1, r5
 8003dd8:	9800      	ldr	r0, [sp, #0]
 8003dda:	9b01      	ldr	r3, [sp, #4]
 8003ddc:	4798      	blx	r3
 8003dde:	4306      	orrs	r6, r0
 8003de0:	3568      	adds	r5, #104	@ 0x68
 8003de2:	e7ea      	b.n	8003dba <_fwalk_sglue+0xe>

08003de4 <iprintf>:
 8003de4:	b40f      	push	{r0, r1, r2, r3}
 8003de6:	b507      	push	{r0, r1, r2, lr}
 8003de8:	4905      	ldr	r1, [pc, #20]	@ (8003e00 <iprintf+0x1c>)
 8003dea:	ab04      	add	r3, sp, #16
 8003dec:	6808      	ldr	r0, [r1, #0]
 8003dee:	cb04      	ldmia	r3!, {r2}
 8003df0:	6881      	ldr	r1, [r0, #8]
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	f000 f9fa 	bl	80041ec <_vfiprintf_r>
 8003df8:	b003      	add	sp, #12
 8003dfa:	bc08      	pop	{r3}
 8003dfc:	b004      	add	sp, #16
 8003dfe:	4718      	bx	r3
 8003e00:	20000018 	.word	0x20000018

08003e04 <__sread>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	000c      	movs	r4, r1
 8003e08:	250e      	movs	r5, #14
 8003e0a:	5f49      	ldrsh	r1, [r1, r5]
 8003e0c:	f000 f874 	bl	8003ef8 <_read_r>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	db03      	blt.n	8003e1c <__sread+0x18>
 8003e14:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e16:	181b      	adds	r3, r3, r0
 8003e18:	6563      	str	r3, [r4, #84]	@ 0x54
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	4a02      	ldr	r2, [pc, #8]	@ (8003e28 <__sread+0x24>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	81a3      	strh	r3, [r4, #12]
 8003e24:	e7f9      	b.n	8003e1a <__sread+0x16>
 8003e26:	46c0      	nop			@ (mov r8, r8)
 8003e28:	ffffefff 	.word	0xffffefff

08003e2c <__swrite>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	001f      	movs	r7, r3
 8003e30:	898b      	ldrh	r3, [r1, #12]
 8003e32:	0005      	movs	r5, r0
 8003e34:	000c      	movs	r4, r1
 8003e36:	0016      	movs	r6, r2
 8003e38:	05db      	lsls	r3, r3, #23
 8003e3a:	d505      	bpl.n	8003e48 <__swrite+0x1c>
 8003e3c:	230e      	movs	r3, #14
 8003e3e:	5ec9      	ldrsh	r1, [r1, r3]
 8003e40:	2200      	movs	r2, #0
 8003e42:	2302      	movs	r3, #2
 8003e44:	f000 f844 	bl	8003ed0 <_lseek_r>
 8003e48:	89a3      	ldrh	r3, [r4, #12]
 8003e4a:	4a05      	ldr	r2, [pc, #20]	@ (8003e60 <__swrite+0x34>)
 8003e4c:	0028      	movs	r0, r5
 8003e4e:	4013      	ands	r3, r2
 8003e50:	81a3      	strh	r3, [r4, #12]
 8003e52:	0032      	movs	r2, r6
 8003e54:	230e      	movs	r3, #14
 8003e56:	5ee1      	ldrsh	r1, [r4, r3]
 8003e58:	003b      	movs	r3, r7
 8003e5a:	f000 f861 	bl	8003f20 <_write_r>
 8003e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e60:	ffffefff 	.word	0xffffefff

08003e64 <__sseek>:
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	000c      	movs	r4, r1
 8003e68:	250e      	movs	r5, #14
 8003e6a:	5f49      	ldrsh	r1, [r1, r5]
 8003e6c:	f000 f830 	bl	8003ed0 <_lseek_r>
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	1c42      	adds	r2, r0, #1
 8003e74:	d103      	bne.n	8003e7e <__sseek+0x1a>
 8003e76:	4a05      	ldr	r2, [pc, #20]	@ (8003e8c <__sseek+0x28>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	81a3      	strh	r3, [r4, #12]
 8003e7c:	bd70      	pop	{r4, r5, r6, pc}
 8003e7e:	2280      	movs	r2, #128	@ 0x80
 8003e80:	0152      	lsls	r2, r2, #5
 8003e82:	4313      	orrs	r3, r2
 8003e84:	81a3      	strh	r3, [r4, #12]
 8003e86:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e88:	e7f8      	b.n	8003e7c <__sseek+0x18>
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	ffffefff 	.word	0xffffefff

08003e90 <__sclose>:
 8003e90:	b510      	push	{r4, lr}
 8003e92:	230e      	movs	r3, #14
 8003e94:	5ec9      	ldrsh	r1, [r1, r3]
 8003e96:	f000 f809 	bl	8003eac <_close_r>
 8003e9a:	bd10      	pop	{r4, pc}

08003e9c <memset>:
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	1882      	adds	r2, r0, r2
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d100      	bne.n	8003ea6 <memset+0xa>
 8003ea4:	4770      	bx	lr
 8003ea6:	7019      	strb	r1, [r3, #0]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	e7f9      	b.n	8003ea0 <memset+0x4>

08003eac <_close_r>:
 8003eac:	2300      	movs	r3, #0
 8003eae:	b570      	push	{r4, r5, r6, lr}
 8003eb0:	4d06      	ldr	r5, [pc, #24]	@ (8003ecc <_close_r+0x20>)
 8003eb2:	0004      	movs	r4, r0
 8003eb4:	0008      	movs	r0, r1
 8003eb6:	602b      	str	r3, [r5, #0]
 8003eb8:	f7fc fef9 	bl	8000cae <_close>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d103      	bne.n	8003ec8 <_close_r+0x1c>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d000      	beq.n	8003ec8 <_close_r+0x1c>
 8003ec6:	6023      	str	r3, [r4, #0]
 8003ec8:	bd70      	pop	{r4, r5, r6, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	2000037c 	.word	0x2000037c

08003ed0 <_lseek_r>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	0004      	movs	r4, r0
 8003ed4:	0008      	movs	r0, r1
 8003ed6:	0011      	movs	r1, r2
 8003ed8:	001a      	movs	r2, r3
 8003eda:	2300      	movs	r3, #0
 8003edc:	4d05      	ldr	r5, [pc, #20]	@ (8003ef4 <_lseek_r+0x24>)
 8003ede:	602b      	str	r3, [r5, #0]
 8003ee0:	f7fc ff06 	bl	8000cf0 <_lseek>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d103      	bne.n	8003ef0 <_lseek_r+0x20>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d000      	beq.n	8003ef0 <_lseek_r+0x20>
 8003eee:	6023      	str	r3, [r4, #0]
 8003ef0:	bd70      	pop	{r4, r5, r6, pc}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	2000037c 	.word	0x2000037c

08003ef8 <_read_r>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	0004      	movs	r4, r0
 8003efc:	0008      	movs	r0, r1
 8003efe:	0011      	movs	r1, r2
 8003f00:	001a      	movs	r2, r3
 8003f02:	2300      	movs	r3, #0
 8003f04:	4d05      	ldr	r5, [pc, #20]	@ (8003f1c <_read_r+0x24>)
 8003f06:	602b      	str	r3, [r5, #0]
 8003f08:	f7fc feb4 	bl	8000c74 <_read>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	d103      	bne.n	8003f18 <_read_r+0x20>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d000      	beq.n	8003f18 <_read_r+0x20>
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	bd70      	pop	{r4, r5, r6, pc}
 8003f1a:	46c0      	nop			@ (mov r8, r8)
 8003f1c:	2000037c 	.word	0x2000037c

08003f20 <_write_r>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	0004      	movs	r4, r0
 8003f24:	0008      	movs	r0, r1
 8003f26:	0011      	movs	r1, r2
 8003f28:	001a      	movs	r2, r3
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	4d05      	ldr	r5, [pc, #20]	@ (8003f44 <_write_r+0x24>)
 8003f2e:	602b      	str	r3, [r5, #0]
 8003f30:	f7fc fc1a 	bl	8000768 <_write>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d103      	bne.n	8003f40 <_write_r+0x20>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d000      	beq.n	8003f40 <_write_r+0x20>
 8003f3e:	6023      	str	r3, [r4, #0]
 8003f40:	bd70      	pop	{r4, r5, r6, pc}
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	2000037c 	.word	0x2000037c

08003f48 <__errno>:
 8003f48:	4b01      	ldr	r3, [pc, #4]	@ (8003f50 <__errno+0x8>)
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	4770      	bx	lr
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	20000018 	.word	0x20000018

08003f54 <__libc_init_array>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	2600      	movs	r6, #0
 8003f58:	4c0c      	ldr	r4, [pc, #48]	@ (8003f8c <__libc_init_array+0x38>)
 8003f5a:	4d0d      	ldr	r5, [pc, #52]	@ (8003f90 <__libc_init_array+0x3c>)
 8003f5c:	1b64      	subs	r4, r4, r5
 8003f5e:	10a4      	asrs	r4, r4, #2
 8003f60:	42a6      	cmp	r6, r4
 8003f62:	d109      	bne.n	8003f78 <__libc_init_array+0x24>
 8003f64:	2600      	movs	r6, #0
 8003f66:	f000 fddb 	bl	8004b20 <_init>
 8003f6a:	4c0a      	ldr	r4, [pc, #40]	@ (8003f94 <__libc_init_array+0x40>)
 8003f6c:	4d0a      	ldr	r5, [pc, #40]	@ (8003f98 <__libc_init_array+0x44>)
 8003f6e:	1b64      	subs	r4, r4, r5
 8003f70:	10a4      	asrs	r4, r4, #2
 8003f72:	42a6      	cmp	r6, r4
 8003f74:	d105      	bne.n	8003f82 <__libc_init_array+0x2e>
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	00b3      	lsls	r3, r6, #2
 8003f7a:	58eb      	ldr	r3, [r5, r3]
 8003f7c:	4798      	blx	r3
 8003f7e:	3601      	adds	r6, #1
 8003f80:	e7ee      	b.n	8003f60 <__libc_init_array+0xc>
 8003f82:	00b3      	lsls	r3, r6, #2
 8003f84:	58eb      	ldr	r3, [r5, r3]
 8003f86:	4798      	blx	r3
 8003f88:	3601      	adds	r6, #1
 8003f8a:	e7f2      	b.n	8003f72 <__libc_init_array+0x1e>
 8003f8c:	08004bb0 	.word	0x08004bb0
 8003f90:	08004bb0 	.word	0x08004bb0
 8003f94:	08004bb4 	.word	0x08004bb4
 8003f98:	08004bb0 	.word	0x08004bb0

08003f9c <__retarget_lock_init_recursive>:
 8003f9c:	4770      	bx	lr

08003f9e <__retarget_lock_acquire_recursive>:
 8003f9e:	4770      	bx	lr

08003fa0 <__retarget_lock_release_recursive>:
 8003fa0:	4770      	bx	lr
	...

08003fa4 <_free_r>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	0005      	movs	r5, r0
 8003fa8:	1e0c      	subs	r4, r1, #0
 8003faa:	d010      	beq.n	8003fce <_free_r+0x2a>
 8003fac:	3c04      	subs	r4, #4
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	da00      	bge.n	8003fb6 <_free_r+0x12>
 8003fb4:	18e4      	adds	r4, r4, r3
 8003fb6:	0028      	movs	r0, r5
 8003fb8:	f000 f8e0 	bl	800417c <__malloc_lock>
 8003fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8004034 <_free_r+0x90>)
 8003fbe:	6813      	ldr	r3, [r2, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d105      	bne.n	8003fd0 <_free_r+0x2c>
 8003fc4:	6063      	str	r3, [r4, #4]
 8003fc6:	6014      	str	r4, [r2, #0]
 8003fc8:	0028      	movs	r0, r5
 8003fca:	f000 f8df 	bl	800418c <__malloc_unlock>
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
 8003fd0:	42a3      	cmp	r3, r4
 8003fd2:	d908      	bls.n	8003fe6 <_free_r+0x42>
 8003fd4:	6820      	ldr	r0, [r4, #0]
 8003fd6:	1821      	adds	r1, r4, r0
 8003fd8:	428b      	cmp	r3, r1
 8003fda:	d1f3      	bne.n	8003fc4 <_free_r+0x20>
 8003fdc:	6819      	ldr	r1, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	1809      	adds	r1, r1, r0
 8003fe2:	6021      	str	r1, [r4, #0]
 8003fe4:	e7ee      	b.n	8003fc4 <_free_r+0x20>
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <_free_r+0x4e>
 8003fee:	42a3      	cmp	r3, r4
 8003ff0:	d9f9      	bls.n	8003fe6 <_free_r+0x42>
 8003ff2:	6811      	ldr	r1, [r2, #0]
 8003ff4:	1850      	adds	r0, r2, r1
 8003ff6:	42a0      	cmp	r0, r4
 8003ff8:	d10b      	bne.n	8004012 <_free_r+0x6e>
 8003ffa:	6820      	ldr	r0, [r4, #0]
 8003ffc:	1809      	adds	r1, r1, r0
 8003ffe:	1850      	adds	r0, r2, r1
 8004000:	6011      	str	r1, [r2, #0]
 8004002:	4283      	cmp	r3, r0
 8004004:	d1e0      	bne.n	8003fc8 <_free_r+0x24>
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	1841      	adds	r1, r0, r1
 800400c:	6011      	str	r1, [r2, #0]
 800400e:	6053      	str	r3, [r2, #4]
 8004010:	e7da      	b.n	8003fc8 <_free_r+0x24>
 8004012:	42a0      	cmp	r0, r4
 8004014:	d902      	bls.n	800401c <_free_r+0x78>
 8004016:	230c      	movs	r3, #12
 8004018:	602b      	str	r3, [r5, #0]
 800401a:	e7d5      	b.n	8003fc8 <_free_r+0x24>
 800401c:	6820      	ldr	r0, [r4, #0]
 800401e:	1821      	adds	r1, r4, r0
 8004020:	428b      	cmp	r3, r1
 8004022:	d103      	bne.n	800402c <_free_r+0x88>
 8004024:	6819      	ldr	r1, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	1809      	adds	r1, r1, r0
 800402a:	6021      	str	r1, [r4, #0]
 800402c:	6063      	str	r3, [r4, #4]
 800402e:	6054      	str	r4, [r2, #4]
 8004030:	e7ca      	b.n	8003fc8 <_free_r+0x24>
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	20000388 	.word	0x20000388

08004038 <sbrk_aligned>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	4e0f      	ldr	r6, [pc, #60]	@ (8004078 <sbrk_aligned+0x40>)
 800403c:	000d      	movs	r5, r1
 800403e:	6831      	ldr	r1, [r6, #0]
 8004040:	0004      	movs	r4, r0
 8004042:	2900      	cmp	r1, #0
 8004044:	d102      	bne.n	800404c <sbrk_aligned+0x14>
 8004046:	f000 fcbd 	bl	80049c4 <_sbrk_r>
 800404a:	6030      	str	r0, [r6, #0]
 800404c:	0029      	movs	r1, r5
 800404e:	0020      	movs	r0, r4
 8004050:	f000 fcb8 	bl	80049c4 <_sbrk_r>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d103      	bne.n	8004060 <sbrk_aligned+0x28>
 8004058:	2501      	movs	r5, #1
 800405a:	426d      	negs	r5, r5
 800405c:	0028      	movs	r0, r5
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	2303      	movs	r3, #3
 8004062:	1cc5      	adds	r5, r0, #3
 8004064:	439d      	bics	r5, r3
 8004066:	42a8      	cmp	r0, r5
 8004068:	d0f8      	beq.n	800405c <sbrk_aligned+0x24>
 800406a:	1a29      	subs	r1, r5, r0
 800406c:	0020      	movs	r0, r4
 800406e:	f000 fca9 	bl	80049c4 <_sbrk_r>
 8004072:	3001      	adds	r0, #1
 8004074:	d1f2      	bne.n	800405c <sbrk_aligned+0x24>
 8004076:	e7ef      	b.n	8004058 <sbrk_aligned+0x20>
 8004078:	20000384 	.word	0x20000384

0800407c <_malloc_r>:
 800407c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800407e:	2203      	movs	r2, #3
 8004080:	1ccb      	adds	r3, r1, #3
 8004082:	4393      	bics	r3, r2
 8004084:	3308      	adds	r3, #8
 8004086:	0005      	movs	r5, r0
 8004088:	001f      	movs	r7, r3
 800408a:	2b0c      	cmp	r3, #12
 800408c:	d234      	bcs.n	80040f8 <_malloc_r+0x7c>
 800408e:	270c      	movs	r7, #12
 8004090:	42b9      	cmp	r1, r7
 8004092:	d833      	bhi.n	80040fc <_malloc_r+0x80>
 8004094:	0028      	movs	r0, r5
 8004096:	f000 f871 	bl	800417c <__malloc_lock>
 800409a:	4e37      	ldr	r6, [pc, #220]	@ (8004178 <_malloc_r+0xfc>)
 800409c:	6833      	ldr	r3, [r6, #0]
 800409e:	001c      	movs	r4, r3
 80040a0:	2c00      	cmp	r4, #0
 80040a2:	d12f      	bne.n	8004104 <_malloc_r+0x88>
 80040a4:	0039      	movs	r1, r7
 80040a6:	0028      	movs	r0, r5
 80040a8:	f7ff ffc6 	bl	8004038 <sbrk_aligned>
 80040ac:	0004      	movs	r4, r0
 80040ae:	1c43      	adds	r3, r0, #1
 80040b0:	d15f      	bne.n	8004172 <_malloc_r+0xf6>
 80040b2:	6834      	ldr	r4, [r6, #0]
 80040b4:	9400      	str	r4, [sp, #0]
 80040b6:	9b00      	ldr	r3, [sp, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d14a      	bne.n	8004152 <_malloc_r+0xd6>
 80040bc:	2c00      	cmp	r4, #0
 80040be:	d052      	beq.n	8004166 <_malloc_r+0xea>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	0028      	movs	r0, r5
 80040c4:	18e3      	adds	r3, r4, r3
 80040c6:	9900      	ldr	r1, [sp, #0]
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	f000 fc7b 	bl	80049c4 <_sbrk_r>
 80040ce:	9b01      	ldr	r3, [sp, #4]
 80040d0:	4283      	cmp	r3, r0
 80040d2:	d148      	bne.n	8004166 <_malloc_r+0xea>
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	0028      	movs	r0, r5
 80040d8:	1aff      	subs	r7, r7, r3
 80040da:	0039      	movs	r1, r7
 80040dc:	f7ff ffac 	bl	8004038 <sbrk_aligned>
 80040e0:	3001      	adds	r0, #1
 80040e2:	d040      	beq.n	8004166 <_malloc_r+0xea>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	19db      	adds	r3, r3, r7
 80040e8:	6023      	str	r3, [r4, #0]
 80040ea:	6833      	ldr	r3, [r6, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	d133      	bne.n	800415a <_malloc_r+0xde>
 80040f2:	9b00      	ldr	r3, [sp, #0]
 80040f4:	6033      	str	r3, [r6, #0]
 80040f6:	e019      	b.n	800412c <_malloc_r+0xb0>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dac9      	bge.n	8004090 <_malloc_r+0x14>
 80040fc:	230c      	movs	r3, #12
 80040fe:	602b      	str	r3, [r5, #0]
 8004100:	2000      	movs	r0, #0
 8004102:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004104:	6821      	ldr	r1, [r4, #0]
 8004106:	1bc9      	subs	r1, r1, r7
 8004108:	d420      	bmi.n	800414c <_malloc_r+0xd0>
 800410a:	290b      	cmp	r1, #11
 800410c:	d90a      	bls.n	8004124 <_malloc_r+0xa8>
 800410e:	19e2      	adds	r2, r4, r7
 8004110:	6027      	str	r7, [r4, #0]
 8004112:	42a3      	cmp	r3, r4
 8004114:	d104      	bne.n	8004120 <_malloc_r+0xa4>
 8004116:	6032      	str	r2, [r6, #0]
 8004118:	6863      	ldr	r3, [r4, #4]
 800411a:	6011      	str	r1, [r2, #0]
 800411c:	6053      	str	r3, [r2, #4]
 800411e:	e005      	b.n	800412c <_malloc_r+0xb0>
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	e7f9      	b.n	8004118 <_malloc_r+0x9c>
 8004124:	6862      	ldr	r2, [r4, #4]
 8004126:	42a3      	cmp	r3, r4
 8004128:	d10e      	bne.n	8004148 <_malloc_r+0xcc>
 800412a:	6032      	str	r2, [r6, #0]
 800412c:	0028      	movs	r0, r5
 800412e:	f000 f82d 	bl	800418c <__malloc_unlock>
 8004132:	0020      	movs	r0, r4
 8004134:	2207      	movs	r2, #7
 8004136:	300b      	adds	r0, #11
 8004138:	1d23      	adds	r3, r4, #4
 800413a:	4390      	bics	r0, r2
 800413c:	1ac2      	subs	r2, r0, r3
 800413e:	4298      	cmp	r0, r3
 8004140:	d0df      	beq.n	8004102 <_malloc_r+0x86>
 8004142:	1a1b      	subs	r3, r3, r0
 8004144:	50a3      	str	r3, [r4, r2]
 8004146:	e7dc      	b.n	8004102 <_malloc_r+0x86>
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	e7ef      	b.n	800412c <_malloc_r+0xb0>
 800414c:	0023      	movs	r3, r4
 800414e:	6864      	ldr	r4, [r4, #4]
 8004150:	e7a6      	b.n	80040a0 <_malloc_r+0x24>
 8004152:	9c00      	ldr	r4, [sp, #0]
 8004154:	6863      	ldr	r3, [r4, #4]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	e7ad      	b.n	80040b6 <_malloc_r+0x3a>
 800415a:	001a      	movs	r2, r3
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	42a3      	cmp	r3, r4
 8004160:	d1fb      	bne.n	800415a <_malloc_r+0xde>
 8004162:	2300      	movs	r3, #0
 8004164:	e7da      	b.n	800411c <_malloc_r+0xa0>
 8004166:	230c      	movs	r3, #12
 8004168:	0028      	movs	r0, r5
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	f000 f80e 	bl	800418c <__malloc_unlock>
 8004170:	e7c6      	b.n	8004100 <_malloc_r+0x84>
 8004172:	6007      	str	r7, [r0, #0]
 8004174:	e7da      	b.n	800412c <_malloc_r+0xb0>
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	20000388 	.word	0x20000388

0800417c <__malloc_lock>:
 800417c:	b510      	push	{r4, lr}
 800417e:	4802      	ldr	r0, [pc, #8]	@ (8004188 <__malloc_lock+0xc>)
 8004180:	f7ff ff0d 	bl	8003f9e <__retarget_lock_acquire_recursive>
 8004184:	bd10      	pop	{r4, pc}
 8004186:	46c0      	nop			@ (mov r8, r8)
 8004188:	20000380 	.word	0x20000380

0800418c <__malloc_unlock>:
 800418c:	b510      	push	{r4, lr}
 800418e:	4802      	ldr	r0, [pc, #8]	@ (8004198 <__malloc_unlock+0xc>)
 8004190:	f7ff ff06 	bl	8003fa0 <__retarget_lock_release_recursive>
 8004194:	bd10      	pop	{r4, pc}
 8004196:	46c0      	nop			@ (mov r8, r8)
 8004198:	20000380 	.word	0x20000380

0800419c <__sfputc_r>:
 800419c:	6893      	ldr	r3, [r2, #8]
 800419e:	b510      	push	{r4, lr}
 80041a0:	3b01      	subs	r3, #1
 80041a2:	6093      	str	r3, [r2, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	da04      	bge.n	80041b2 <__sfputc_r+0x16>
 80041a8:	6994      	ldr	r4, [r2, #24]
 80041aa:	42a3      	cmp	r3, r4
 80041ac:	db07      	blt.n	80041be <__sfputc_r+0x22>
 80041ae:	290a      	cmp	r1, #10
 80041b0:	d005      	beq.n	80041be <__sfputc_r+0x22>
 80041b2:	6813      	ldr	r3, [r2, #0]
 80041b4:	1c58      	adds	r0, r3, #1
 80041b6:	6010      	str	r0, [r2, #0]
 80041b8:	7019      	strb	r1, [r3, #0]
 80041ba:	0008      	movs	r0, r1
 80041bc:	bd10      	pop	{r4, pc}
 80041be:	f000 fb60 	bl	8004882 <__swbuf_r>
 80041c2:	0001      	movs	r1, r0
 80041c4:	e7f9      	b.n	80041ba <__sfputc_r+0x1e>

080041c6 <__sfputs_r>:
 80041c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c8:	0006      	movs	r6, r0
 80041ca:	000f      	movs	r7, r1
 80041cc:	0014      	movs	r4, r2
 80041ce:	18d5      	adds	r5, r2, r3
 80041d0:	42ac      	cmp	r4, r5
 80041d2:	d101      	bne.n	80041d8 <__sfputs_r+0x12>
 80041d4:	2000      	movs	r0, #0
 80041d6:	e007      	b.n	80041e8 <__sfputs_r+0x22>
 80041d8:	7821      	ldrb	r1, [r4, #0]
 80041da:	003a      	movs	r2, r7
 80041dc:	0030      	movs	r0, r6
 80041de:	f7ff ffdd 	bl	800419c <__sfputc_r>
 80041e2:	3401      	adds	r4, #1
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d1f3      	bne.n	80041d0 <__sfputs_r+0xa>
 80041e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041ec <_vfiprintf_r>:
 80041ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ee:	b0a1      	sub	sp, #132	@ 0x84
 80041f0:	000f      	movs	r7, r1
 80041f2:	0015      	movs	r5, r2
 80041f4:	001e      	movs	r6, r3
 80041f6:	9003      	str	r0, [sp, #12]
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d004      	beq.n	8004206 <_vfiprintf_r+0x1a>
 80041fc:	6a03      	ldr	r3, [r0, #32]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <_vfiprintf_r+0x1a>
 8004202:	f7ff fdbb 	bl	8003d7c <__sinit>
 8004206:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004208:	07db      	lsls	r3, r3, #31
 800420a:	d405      	bmi.n	8004218 <_vfiprintf_r+0x2c>
 800420c:	89bb      	ldrh	r3, [r7, #12]
 800420e:	059b      	lsls	r3, r3, #22
 8004210:	d402      	bmi.n	8004218 <_vfiprintf_r+0x2c>
 8004212:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004214:	f7ff fec3 	bl	8003f9e <__retarget_lock_acquire_recursive>
 8004218:	89bb      	ldrh	r3, [r7, #12]
 800421a:	071b      	lsls	r3, r3, #28
 800421c:	d502      	bpl.n	8004224 <_vfiprintf_r+0x38>
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d113      	bne.n	800424c <_vfiprintf_r+0x60>
 8004224:	0039      	movs	r1, r7
 8004226:	9803      	ldr	r0, [sp, #12]
 8004228:	f000 fb6e 	bl	8004908 <__swsetup_r>
 800422c:	2800      	cmp	r0, #0
 800422e:	d00d      	beq.n	800424c <_vfiprintf_r+0x60>
 8004230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004232:	07db      	lsls	r3, r3, #31
 8004234:	d503      	bpl.n	800423e <_vfiprintf_r+0x52>
 8004236:	2001      	movs	r0, #1
 8004238:	4240      	negs	r0, r0
 800423a:	b021      	add	sp, #132	@ 0x84
 800423c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423e:	89bb      	ldrh	r3, [r7, #12]
 8004240:	059b      	lsls	r3, r3, #22
 8004242:	d4f8      	bmi.n	8004236 <_vfiprintf_r+0x4a>
 8004244:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004246:	f7ff feab 	bl	8003fa0 <__retarget_lock_release_recursive>
 800424a:	e7f4      	b.n	8004236 <_vfiprintf_r+0x4a>
 800424c:	2300      	movs	r3, #0
 800424e:	ac08      	add	r4, sp, #32
 8004250:	6163      	str	r3, [r4, #20]
 8004252:	3320      	adds	r3, #32
 8004254:	7663      	strb	r3, [r4, #25]
 8004256:	3310      	adds	r3, #16
 8004258:	76a3      	strb	r3, [r4, #26]
 800425a:	9607      	str	r6, [sp, #28]
 800425c:	002e      	movs	r6, r5
 800425e:	7833      	ldrb	r3, [r6, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <_vfiprintf_r+0x7c>
 8004264:	2b25      	cmp	r3, #37	@ 0x25
 8004266:	d148      	bne.n	80042fa <_vfiprintf_r+0x10e>
 8004268:	1b73      	subs	r3, r6, r5
 800426a:	9305      	str	r3, [sp, #20]
 800426c:	42ae      	cmp	r6, r5
 800426e:	d00b      	beq.n	8004288 <_vfiprintf_r+0x9c>
 8004270:	002a      	movs	r2, r5
 8004272:	0039      	movs	r1, r7
 8004274:	9803      	ldr	r0, [sp, #12]
 8004276:	f7ff ffa6 	bl	80041c6 <__sfputs_r>
 800427a:	3001      	adds	r0, #1
 800427c:	d100      	bne.n	8004280 <_vfiprintf_r+0x94>
 800427e:	e0ae      	b.n	80043de <_vfiprintf_r+0x1f2>
 8004280:	6963      	ldr	r3, [r4, #20]
 8004282:	9a05      	ldr	r2, [sp, #20]
 8004284:	189b      	adds	r3, r3, r2
 8004286:	6163      	str	r3, [r4, #20]
 8004288:	7833      	ldrb	r3, [r6, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d100      	bne.n	8004290 <_vfiprintf_r+0xa4>
 800428e:	e0a6      	b.n	80043de <_vfiprintf_r+0x1f2>
 8004290:	2201      	movs	r2, #1
 8004292:	2300      	movs	r3, #0
 8004294:	4252      	negs	r2, r2
 8004296:	6062      	str	r2, [r4, #4]
 8004298:	a904      	add	r1, sp, #16
 800429a:	3254      	adds	r2, #84	@ 0x54
 800429c:	1852      	adds	r2, r2, r1
 800429e:	1c75      	adds	r5, r6, #1
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	60e3      	str	r3, [r4, #12]
 80042a4:	60a3      	str	r3, [r4, #8]
 80042a6:	7013      	strb	r3, [r2, #0]
 80042a8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80042aa:	4b59      	ldr	r3, [pc, #356]	@ (8004410 <_vfiprintf_r+0x224>)
 80042ac:	2205      	movs	r2, #5
 80042ae:	0018      	movs	r0, r3
 80042b0:	7829      	ldrb	r1, [r5, #0]
 80042b2:	9305      	str	r3, [sp, #20]
 80042b4:	f000 fb98 	bl	80049e8 <memchr>
 80042b8:	1c6e      	adds	r6, r5, #1
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d11f      	bne.n	80042fe <_vfiprintf_r+0x112>
 80042be:	6822      	ldr	r2, [r4, #0]
 80042c0:	06d3      	lsls	r3, r2, #27
 80042c2:	d504      	bpl.n	80042ce <_vfiprintf_r+0xe2>
 80042c4:	2353      	movs	r3, #83	@ 0x53
 80042c6:	a904      	add	r1, sp, #16
 80042c8:	185b      	adds	r3, r3, r1
 80042ca:	2120      	movs	r1, #32
 80042cc:	7019      	strb	r1, [r3, #0]
 80042ce:	0713      	lsls	r3, r2, #28
 80042d0:	d504      	bpl.n	80042dc <_vfiprintf_r+0xf0>
 80042d2:	2353      	movs	r3, #83	@ 0x53
 80042d4:	a904      	add	r1, sp, #16
 80042d6:	185b      	adds	r3, r3, r1
 80042d8:	212b      	movs	r1, #43	@ 0x2b
 80042da:	7019      	strb	r1, [r3, #0]
 80042dc:	782b      	ldrb	r3, [r5, #0]
 80042de:	2b2a      	cmp	r3, #42	@ 0x2a
 80042e0:	d016      	beq.n	8004310 <_vfiprintf_r+0x124>
 80042e2:	002e      	movs	r6, r5
 80042e4:	2100      	movs	r1, #0
 80042e6:	200a      	movs	r0, #10
 80042e8:	68e3      	ldr	r3, [r4, #12]
 80042ea:	7832      	ldrb	r2, [r6, #0]
 80042ec:	1c75      	adds	r5, r6, #1
 80042ee:	3a30      	subs	r2, #48	@ 0x30
 80042f0:	2a09      	cmp	r2, #9
 80042f2:	d950      	bls.n	8004396 <_vfiprintf_r+0x1aa>
 80042f4:	2900      	cmp	r1, #0
 80042f6:	d111      	bne.n	800431c <_vfiprintf_r+0x130>
 80042f8:	e017      	b.n	800432a <_vfiprintf_r+0x13e>
 80042fa:	3601      	adds	r6, #1
 80042fc:	e7af      	b.n	800425e <_vfiprintf_r+0x72>
 80042fe:	9b05      	ldr	r3, [sp, #20]
 8004300:	6822      	ldr	r2, [r4, #0]
 8004302:	1ac0      	subs	r0, r0, r3
 8004304:	2301      	movs	r3, #1
 8004306:	4083      	lsls	r3, r0
 8004308:	4313      	orrs	r3, r2
 800430a:	0035      	movs	r5, r6
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	e7cc      	b.n	80042aa <_vfiprintf_r+0xbe>
 8004310:	9b07      	ldr	r3, [sp, #28]
 8004312:	1d19      	adds	r1, r3, #4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	9107      	str	r1, [sp, #28]
 8004318:	2b00      	cmp	r3, #0
 800431a:	db01      	blt.n	8004320 <_vfiprintf_r+0x134>
 800431c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800431e:	e004      	b.n	800432a <_vfiprintf_r+0x13e>
 8004320:	425b      	negs	r3, r3
 8004322:	60e3      	str	r3, [r4, #12]
 8004324:	2302      	movs	r3, #2
 8004326:	4313      	orrs	r3, r2
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	7833      	ldrb	r3, [r6, #0]
 800432c:	2b2e      	cmp	r3, #46	@ 0x2e
 800432e:	d10c      	bne.n	800434a <_vfiprintf_r+0x15e>
 8004330:	7873      	ldrb	r3, [r6, #1]
 8004332:	2b2a      	cmp	r3, #42	@ 0x2a
 8004334:	d134      	bne.n	80043a0 <_vfiprintf_r+0x1b4>
 8004336:	9b07      	ldr	r3, [sp, #28]
 8004338:	3602      	adds	r6, #2
 800433a:	1d1a      	adds	r2, r3, #4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	9207      	str	r2, [sp, #28]
 8004340:	2b00      	cmp	r3, #0
 8004342:	da01      	bge.n	8004348 <_vfiprintf_r+0x15c>
 8004344:	2301      	movs	r3, #1
 8004346:	425b      	negs	r3, r3
 8004348:	9309      	str	r3, [sp, #36]	@ 0x24
 800434a:	4d32      	ldr	r5, [pc, #200]	@ (8004414 <_vfiprintf_r+0x228>)
 800434c:	2203      	movs	r2, #3
 800434e:	0028      	movs	r0, r5
 8004350:	7831      	ldrb	r1, [r6, #0]
 8004352:	f000 fb49 	bl	80049e8 <memchr>
 8004356:	2800      	cmp	r0, #0
 8004358:	d006      	beq.n	8004368 <_vfiprintf_r+0x17c>
 800435a:	2340      	movs	r3, #64	@ 0x40
 800435c:	1b40      	subs	r0, r0, r5
 800435e:	4083      	lsls	r3, r0
 8004360:	6822      	ldr	r2, [r4, #0]
 8004362:	3601      	adds	r6, #1
 8004364:	4313      	orrs	r3, r2
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	7831      	ldrb	r1, [r6, #0]
 800436a:	2206      	movs	r2, #6
 800436c:	482a      	ldr	r0, [pc, #168]	@ (8004418 <_vfiprintf_r+0x22c>)
 800436e:	1c75      	adds	r5, r6, #1
 8004370:	7621      	strb	r1, [r4, #24]
 8004372:	f000 fb39 	bl	80049e8 <memchr>
 8004376:	2800      	cmp	r0, #0
 8004378:	d040      	beq.n	80043fc <_vfiprintf_r+0x210>
 800437a:	4b28      	ldr	r3, [pc, #160]	@ (800441c <_vfiprintf_r+0x230>)
 800437c:	2b00      	cmp	r3, #0
 800437e:	d122      	bne.n	80043c6 <_vfiprintf_r+0x1da>
 8004380:	2207      	movs	r2, #7
 8004382:	9b07      	ldr	r3, [sp, #28]
 8004384:	3307      	adds	r3, #7
 8004386:	4393      	bics	r3, r2
 8004388:	3308      	adds	r3, #8
 800438a:	9307      	str	r3, [sp, #28]
 800438c:	6963      	ldr	r3, [r4, #20]
 800438e:	9a04      	ldr	r2, [sp, #16]
 8004390:	189b      	adds	r3, r3, r2
 8004392:	6163      	str	r3, [r4, #20]
 8004394:	e762      	b.n	800425c <_vfiprintf_r+0x70>
 8004396:	4343      	muls	r3, r0
 8004398:	002e      	movs	r6, r5
 800439a:	2101      	movs	r1, #1
 800439c:	189b      	adds	r3, r3, r2
 800439e:	e7a4      	b.n	80042ea <_vfiprintf_r+0xfe>
 80043a0:	2300      	movs	r3, #0
 80043a2:	200a      	movs	r0, #10
 80043a4:	0019      	movs	r1, r3
 80043a6:	3601      	adds	r6, #1
 80043a8:	6063      	str	r3, [r4, #4]
 80043aa:	7832      	ldrb	r2, [r6, #0]
 80043ac:	1c75      	adds	r5, r6, #1
 80043ae:	3a30      	subs	r2, #48	@ 0x30
 80043b0:	2a09      	cmp	r2, #9
 80043b2:	d903      	bls.n	80043bc <_vfiprintf_r+0x1d0>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0c8      	beq.n	800434a <_vfiprintf_r+0x15e>
 80043b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80043ba:	e7c6      	b.n	800434a <_vfiprintf_r+0x15e>
 80043bc:	4341      	muls	r1, r0
 80043be:	002e      	movs	r6, r5
 80043c0:	2301      	movs	r3, #1
 80043c2:	1889      	adds	r1, r1, r2
 80043c4:	e7f1      	b.n	80043aa <_vfiprintf_r+0x1be>
 80043c6:	aa07      	add	r2, sp, #28
 80043c8:	9200      	str	r2, [sp, #0]
 80043ca:	0021      	movs	r1, r4
 80043cc:	003a      	movs	r2, r7
 80043ce:	4b14      	ldr	r3, [pc, #80]	@ (8004420 <_vfiprintf_r+0x234>)
 80043d0:	9803      	ldr	r0, [sp, #12]
 80043d2:	e000      	b.n	80043d6 <_vfiprintf_r+0x1ea>
 80043d4:	bf00      	nop
 80043d6:	9004      	str	r0, [sp, #16]
 80043d8:	9b04      	ldr	r3, [sp, #16]
 80043da:	3301      	adds	r3, #1
 80043dc:	d1d6      	bne.n	800438c <_vfiprintf_r+0x1a0>
 80043de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043e0:	07db      	lsls	r3, r3, #31
 80043e2:	d405      	bmi.n	80043f0 <_vfiprintf_r+0x204>
 80043e4:	89bb      	ldrh	r3, [r7, #12]
 80043e6:	059b      	lsls	r3, r3, #22
 80043e8:	d402      	bmi.n	80043f0 <_vfiprintf_r+0x204>
 80043ea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80043ec:	f7ff fdd8 	bl	8003fa0 <__retarget_lock_release_recursive>
 80043f0:	89bb      	ldrh	r3, [r7, #12]
 80043f2:	065b      	lsls	r3, r3, #25
 80043f4:	d500      	bpl.n	80043f8 <_vfiprintf_r+0x20c>
 80043f6:	e71e      	b.n	8004236 <_vfiprintf_r+0x4a>
 80043f8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80043fa:	e71e      	b.n	800423a <_vfiprintf_r+0x4e>
 80043fc:	aa07      	add	r2, sp, #28
 80043fe:	9200      	str	r2, [sp, #0]
 8004400:	0021      	movs	r1, r4
 8004402:	003a      	movs	r2, r7
 8004404:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <_vfiprintf_r+0x234>)
 8004406:	9803      	ldr	r0, [sp, #12]
 8004408:	f000 f87c 	bl	8004504 <_printf_i>
 800440c:	e7e3      	b.n	80043d6 <_vfiprintf_r+0x1ea>
 800440e:	46c0      	nop			@ (mov r8, r8)
 8004410:	08004b7c 	.word	0x08004b7c
 8004414:	08004b82 	.word	0x08004b82
 8004418:	08004b86 	.word	0x08004b86
 800441c:	00000000 	.word	0x00000000
 8004420:	080041c7 	.word	0x080041c7

08004424 <_printf_common>:
 8004424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004426:	0016      	movs	r6, r2
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	688a      	ldr	r2, [r1, #8]
 800442c:	690b      	ldr	r3, [r1, #16]
 800442e:	000c      	movs	r4, r1
 8004430:	9000      	str	r0, [sp, #0]
 8004432:	4293      	cmp	r3, r2
 8004434:	da00      	bge.n	8004438 <_printf_common+0x14>
 8004436:	0013      	movs	r3, r2
 8004438:	0022      	movs	r2, r4
 800443a:	6033      	str	r3, [r6, #0]
 800443c:	3243      	adds	r2, #67	@ 0x43
 800443e:	7812      	ldrb	r2, [r2, #0]
 8004440:	2a00      	cmp	r2, #0
 8004442:	d001      	beq.n	8004448 <_printf_common+0x24>
 8004444:	3301      	adds	r3, #1
 8004446:	6033      	str	r3, [r6, #0]
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	069b      	lsls	r3, r3, #26
 800444c:	d502      	bpl.n	8004454 <_printf_common+0x30>
 800444e:	6833      	ldr	r3, [r6, #0]
 8004450:	3302      	adds	r3, #2
 8004452:	6033      	str	r3, [r6, #0]
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	2306      	movs	r3, #6
 8004458:	0015      	movs	r5, r2
 800445a:	401d      	ands	r5, r3
 800445c:	421a      	tst	r2, r3
 800445e:	d027      	beq.n	80044b0 <_printf_common+0x8c>
 8004460:	0023      	movs	r3, r4
 8004462:	3343      	adds	r3, #67	@ 0x43
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	1e5a      	subs	r2, r3, #1
 8004468:	4193      	sbcs	r3, r2
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	0692      	lsls	r2, r2, #26
 800446e:	d430      	bmi.n	80044d2 <_printf_common+0xae>
 8004470:	0022      	movs	r2, r4
 8004472:	9901      	ldr	r1, [sp, #4]
 8004474:	9800      	ldr	r0, [sp, #0]
 8004476:	9d08      	ldr	r5, [sp, #32]
 8004478:	3243      	adds	r2, #67	@ 0x43
 800447a:	47a8      	blx	r5
 800447c:	3001      	adds	r0, #1
 800447e:	d025      	beq.n	80044cc <_printf_common+0xa8>
 8004480:	2206      	movs	r2, #6
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	2500      	movs	r5, #0
 8004486:	4013      	ands	r3, r2
 8004488:	2b04      	cmp	r3, #4
 800448a:	d105      	bne.n	8004498 <_printf_common+0x74>
 800448c:	6833      	ldr	r3, [r6, #0]
 800448e:	68e5      	ldr	r5, [r4, #12]
 8004490:	1aed      	subs	r5, r5, r3
 8004492:	43eb      	mvns	r3, r5
 8004494:	17db      	asrs	r3, r3, #31
 8004496:	401d      	ands	r5, r3
 8004498:	68a3      	ldr	r3, [r4, #8]
 800449a:	6922      	ldr	r2, [r4, #16]
 800449c:	4293      	cmp	r3, r2
 800449e:	dd01      	ble.n	80044a4 <_printf_common+0x80>
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	18ed      	adds	r5, r5, r3
 80044a4:	2600      	movs	r6, #0
 80044a6:	42b5      	cmp	r5, r6
 80044a8:	d120      	bne.n	80044ec <_printf_common+0xc8>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e010      	b.n	80044d0 <_printf_common+0xac>
 80044ae:	3501      	adds	r5, #1
 80044b0:	68e3      	ldr	r3, [r4, #12]
 80044b2:	6832      	ldr	r2, [r6, #0]
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	42ab      	cmp	r3, r5
 80044b8:	ddd2      	ble.n	8004460 <_printf_common+0x3c>
 80044ba:	0022      	movs	r2, r4
 80044bc:	2301      	movs	r3, #1
 80044be:	9901      	ldr	r1, [sp, #4]
 80044c0:	9800      	ldr	r0, [sp, #0]
 80044c2:	9f08      	ldr	r7, [sp, #32]
 80044c4:	3219      	adds	r2, #25
 80044c6:	47b8      	blx	r7
 80044c8:	3001      	adds	r0, #1
 80044ca:	d1f0      	bne.n	80044ae <_printf_common+0x8a>
 80044cc:	2001      	movs	r0, #1
 80044ce:	4240      	negs	r0, r0
 80044d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044d2:	2030      	movs	r0, #48	@ 0x30
 80044d4:	18e1      	adds	r1, r4, r3
 80044d6:	3143      	adds	r1, #67	@ 0x43
 80044d8:	7008      	strb	r0, [r1, #0]
 80044da:	0021      	movs	r1, r4
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	3145      	adds	r1, #69	@ 0x45
 80044e0:	7809      	ldrb	r1, [r1, #0]
 80044e2:	18a2      	adds	r2, r4, r2
 80044e4:	3243      	adds	r2, #67	@ 0x43
 80044e6:	3302      	adds	r3, #2
 80044e8:	7011      	strb	r1, [r2, #0]
 80044ea:	e7c1      	b.n	8004470 <_printf_common+0x4c>
 80044ec:	0022      	movs	r2, r4
 80044ee:	2301      	movs	r3, #1
 80044f0:	9901      	ldr	r1, [sp, #4]
 80044f2:	9800      	ldr	r0, [sp, #0]
 80044f4:	9f08      	ldr	r7, [sp, #32]
 80044f6:	321a      	adds	r2, #26
 80044f8:	47b8      	blx	r7
 80044fa:	3001      	adds	r0, #1
 80044fc:	d0e6      	beq.n	80044cc <_printf_common+0xa8>
 80044fe:	3601      	adds	r6, #1
 8004500:	e7d1      	b.n	80044a6 <_printf_common+0x82>
	...

08004504 <_printf_i>:
 8004504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004506:	b08b      	sub	sp, #44	@ 0x2c
 8004508:	9206      	str	r2, [sp, #24]
 800450a:	000a      	movs	r2, r1
 800450c:	3243      	adds	r2, #67	@ 0x43
 800450e:	9307      	str	r3, [sp, #28]
 8004510:	9005      	str	r0, [sp, #20]
 8004512:	9203      	str	r2, [sp, #12]
 8004514:	7e0a      	ldrb	r2, [r1, #24]
 8004516:	000c      	movs	r4, r1
 8004518:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800451a:	2a78      	cmp	r2, #120	@ 0x78
 800451c:	d809      	bhi.n	8004532 <_printf_i+0x2e>
 800451e:	2a62      	cmp	r2, #98	@ 0x62
 8004520:	d80b      	bhi.n	800453a <_printf_i+0x36>
 8004522:	2a00      	cmp	r2, #0
 8004524:	d100      	bne.n	8004528 <_printf_i+0x24>
 8004526:	e0bc      	b.n	80046a2 <_printf_i+0x19e>
 8004528:	497b      	ldr	r1, [pc, #492]	@ (8004718 <_printf_i+0x214>)
 800452a:	9104      	str	r1, [sp, #16]
 800452c:	2a58      	cmp	r2, #88	@ 0x58
 800452e:	d100      	bne.n	8004532 <_printf_i+0x2e>
 8004530:	e090      	b.n	8004654 <_printf_i+0x150>
 8004532:	0025      	movs	r5, r4
 8004534:	3542      	adds	r5, #66	@ 0x42
 8004536:	702a      	strb	r2, [r5, #0]
 8004538:	e022      	b.n	8004580 <_printf_i+0x7c>
 800453a:	0010      	movs	r0, r2
 800453c:	3863      	subs	r0, #99	@ 0x63
 800453e:	2815      	cmp	r0, #21
 8004540:	d8f7      	bhi.n	8004532 <_printf_i+0x2e>
 8004542:	f7fb fde1 	bl	8000108 <__gnu_thumb1_case_shi>
 8004546:	0016      	.short	0x0016
 8004548:	fff6001f 	.word	0xfff6001f
 800454c:	fff6fff6 	.word	0xfff6fff6
 8004550:	001ffff6 	.word	0x001ffff6
 8004554:	fff6fff6 	.word	0xfff6fff6
 8004558:	fff6fff6 	.word	0xfff6fff6
 800455c:	003600a1 	.word	0x003600a1
 8004560:	fff60080 	.word	0xfff60080
 8004564:	00b2fff6 	.word	0x00b2fff6
 8004568:	0036fff6 	.word	0x0036fff6
 800456c:	fff6fff6 	.word	0xfff6fff6
 8004570:	0084      	.short	0x0084
 8004572:	0025      	movs	r5, r4
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	3542      	adds	r5, #66	@ 0x42
 8004578:	1d11      	adds	r1, r2, #4
 800457a:	6019      	str	r1, [r3, #0]
 800457c:	6813      	ldr	r3, [r2, #0]
 800457e:	702b      	strb	r3, [r5, #0]
 8004580:	2301      	movs	r3, #1
 8004582:	e0a0      	b.n	80046c6 <_printf_i+0x1c2>
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	6809      	ldr	r1, [r1, #0]
 8004588:	1d02      	adds	r2, r0, #4
 800458a:	060d      	lsls	r5, r1, #24
 800458c:	d50b      	bpl.n	80045a6 <_printf_i+0xa2>
 800458e:	6806      	ldr	r6, [r0, #0]
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	2e00      	cmp	r6, #0
 8004594:	da03      	bge.n	800459e <_printf_i+0x9a>
 8004596:	232d      	movs	r3, #45	@ 0x2d
 8004598:	9a03      	ldr	r2, [sp, #12]
 800459a:	4276      	negs	r6, r6
 800459c:	7013      	strb	r3, [r2, #0]
 800459e:	4b5e      	ldr	r3, [pc, #376]	@ (8004718 <_printf_i+0x214>)
 80045a0:	270a      	movs	r7, #10
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	e018      	b.n	80045d8 <_printf_i+0xd4>
 80045a6:	6806      	ldr	r6, [r0, #0]
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	0649      	lsls	r1, r1, #25
 80045ac:	d5f1      	bpl.n	8004592 <_printf_i+0x8e>
 80045ae:	b236      	sxth	r6, r6
 80045b0:	e7ef      	b.n	8004592 <_printf_i+0x8e>
 80045b2:	6808      	ldr	r0, [r1, #0]
 80045b4:	6819      	ldr	r1, [r3, #0]
 80045b6:	c940      	ldmia	r1!, {r6}
 80045b8:	0605      	lsls	r5, r0, #24
 80045ba:	d402      	bmi.n	80045c2 <_printf_i+0xbe>
 80045bc:	0640      	lsls	r0, r0, #25
 80045be:	d500      	bpl.n	80045c2 <_printf_i+0xbe>
 80045c0:	b2b6      	uxth	r6, r6
 80045c2:	6019      	str	r1, [r3, #0]
 80045c4:	4b54      	ldr	r3, [pc, #336]	@ (8004718 <_printf_i+0x214>)
 80045c6:	270a      	movs	r7, #10
 80045c8:	9304      	str	r3, [sp, #16]
 80045ca:	2a6f      	cmp	r2, #111	@ 0x6f
 80045cc:	d100      	bne.n	80045d0 <_printf_i+0xcc>
 80045ce:	3f02      	subs	r7, #2
 80045d0:	0023      	movs	r3, r4
 80045d2:	2200      	movs	r2, #0
 80045d4:	3343      	adds	r3, #67	@ 0x43
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	6863      	ldr	r3, [r4, #4]
 80045da:	60a3      	str	r3, [r4, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	db03      	blt.n	80045e8 <_printf_i+0xe4>
 80045e0:	2104      	movs	r1, #4
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	438a      	bics	r2, r1
 80045e6:	6022      	str	r2, [r4, #0]
 80045e8:	2e00      	cmp	r6, #0
 80045ea:	d102      	bne.n	80045f2 <_printf_i+0xee>
 80045ec:	9d03      	ldr	r5, [sp, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00c      	beq.n	800460c <_printf_i+0x108>
 80045f2:	9d03      	ldr	r5, [sp, #12]
 80045f4:	0030      	movs	r0, r6
 80045f6:	0039      	movs	r1, r7
 80045f8:	f7fb fe16 	bl	8000228 <__aeabi_uidivmod>
 80045fc:	9b04      	ldr	r3, [sp, #16]
 80045fe:	3d01      	subs	r5, #1
 8004600:	5c5b      	ldrb	r3, [r3, r1]
 8004602:	702b      	strb	r3, [r5, #0]
 8004604:	0033      	movs	r3, r6
 8004606:	0006      	movs	r6, r0
 8004608:	429f      	cmp	r7, r3
 800460a:	d9f3      	bls.n	80045f4 <_printf_i+0xf0>
 800460c:	2f08      	cmp	r7, #8
 800460e:	d109      	bne.n	8004624 <_printf_i+0x120>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	07db      	lsls	r3, r3, #31
 8004614:	d506      	bpl.n	8004624 <_printf_i+0x120>
 8004616:	6862      	ldr	r2, [r4, #4]
 8004618:	6923      	ldr	r3, [r4, #16]
 800461a:	429a      	cmp	r2, r3
 800461c:	dc02      	bgt.n	8004624 <_printf_i+0x120>
 800461e:	2330      	movs	r3, #48	@ 0x30
 8004620:	3d01      	subs	r5, #1
 8004622:	702b      	strb	r3, [r5, #0]
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	1b5b      	subs	r3, r3, r5
 8004628:	6123      	str	r3, [r4, #16]
 800462a:	9b07      	ldr	r3, [sp, #28]
 800462c:	0021      	movs	r1, r4
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	9805      	ldr	r0, [sp, #20]
 8004632:	9b06      	ldr	r3, [sp, #24]
 8004634:	aa09      	add	r2, sp, #36	@ 0x24
 8004636:	f7ff fef5 	bl	8004424 <_printf_common>
 800463a:	3001      	adds	r0, #1
 800463c:	d148      	bne.n	80046d0 <_printf_i+0x1cc>
 800463e:	2001      	movs	r0, #1
 8004640:	4240      	negs	r0, r0
 8004642:	b00b      	add	sp, #44	@ 0x2c
 8004644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004646:	2220      	movs	r2, #32
 8004648:	6809      	ldr	r1, [r1, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	6022      	str	r2, [r4, #0]
 800464e:	2278      	movs	r2, #120	@ 0x78
 8004650:	4932      	ldr	r1, [pc, #200]	@ (800471c <_printf_i+0x218>)
 8004652:	9104      	str	r1, [sp, #16]
 8004654:	0021      	movs	r1, r4
 8004656:	3145      	adds	r1, #69	@ 0x45
 8004658:	700a      	strb	r2, [r1, #0]
 800465a:	6819      	ldr	r1, [r3, #0]
 800465c:	6822      	ldr	r2, [r4, #0]
 800465e:	c940      	ldmia	r1!, {r6}
 8004660:	0610      	lsls	r0, r2, #24
 8004662:	d402      	bmi.n	800466a <_printf_i+0x166>
 8004664:	0650      	lsls	r0, r2, #25
 8004666:	d500      	bpl.n	800466a <_printf_i+0x166>
 8004668:	b2b6      	uxth	r6, r6
 800466a:	6019      	str	r1, [r3, #0]
 800466c:	07d3      	lsls	r3, r2, #31
 800466e:	d502      	bpl.n	8004676 <_printf_i+0x172>
 8004670:	2320      	movs	r3, #32
 8004672:	4313      	orrs	r3, r2
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	2e00      	cmp	r6, #0
 8004678:	d001      	beq.n	800467e <_printf_i+0x17a>
 800467a:	2710      	movs	r7, #16
 800467c:	e7a8      	b.n	80045d0 <_printf_i+0xcc>
 800467e:	2220      	movs	r2, #32
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	4393      	bics	r3, r2
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	e7f8      	b.n	800467a <_printf_i+0x176>
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	680d      	ldr	r5, [r1, #0]
 800468c:	1d10      	adds	r0, r2, #4
 800468e:	6949      	ldr	r1, [r1, #20]
 8004690:	6018      	str	r0, [r3, #0]
 8004692:	6813      	ldr	r3, [r2, #0]
 8004694:	062e      	lsls	r6, r5, #24
 8004696:	d501      	bpl.n	800469c <_printf_i+0x198>
 8004698:	6019      	str	r1, [r3, #0]
 800469a:	e002      	b.n	80046a2 <_printf_i+0x19e>
 800469c:	066d      	lsls	r5, r5, #25
 800469e:	d5fb      	bpl.n	8004698 <_printf_i+0x194>
 80046a0:	8019      	strh	r1, [r3, #0]
 80046a2:	2300      	movs	r3, #0
 80046a4:	9d03      	ldr	r5, [sp, #12]
 80046a6:	6123      	str	r3, [r4, #16]
 80046a8:	e7bf      	b.n	800462a <_printf_i+0x126>
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	1d11      	adds	r1, r2, #4
 80046ae:	6019      	str	r1, [r3, #0]
 80046b0:	6815      	ldr	r5, [r2, #0]
 80046b2:	2100      	movs	r1, #0
 80046b4:	0028      	movs	r0, r5
 80046b6:	6862      	ldr	r2, [r4, #4]
 80046b8:	f000 f996 	bl	80049e8 <memchr>
 80046bc:	2800      	cmp	r0, #0
 80046be:	d001      	beq.n	80046c4 <_printf_i+0x1c0>
 80046c0:	1b40      	subs	r0, r0, r5
 80046c2:	6060      	str	r0, [r4, #4]
 80046c4:	6863      	ldr	r3, [r4, #4]
 80046c6:	6123      	str	r3, [r4, #16]
 80046c8:	2300      	movs	r3, #0
 80046ca:	9a03      	ldr	r2, [sp, #12]
 80046cc:	7013      	strb	r3, [r2, #0]
 80046ce:	e7ac      	b.n	800462a <_printf_i+0x126>
 80046d0:	002a      	movs	r2, r5
 80046d2:	6923      	ldr	r3, [r4, #16]
 80046d4:	9906      	ldr	r1, [sp, #24]
 80046d6:	9805      	ldr	r0, [sp, #20]
 80046d8:	9d07      	ldr	r5, [sp, #28]
 80046da:	47a8      	blx	r5
 80046dc:	3001      	adds	r0, #1
 80046de:	d0ae      	beq.n	800463e <_printf_i+0x13a>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	079b      	lsls	r3, r3, #30
 80046e4:	d415      	bmi.n	8004712 <_printf_i+0x20e>
 80046e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046e8:	68e0      	ldr	r0, [r4, #12]
 80046ea:	4298      	cmp	r0, r3
 80046ec:	daa9      	bge.n	8004642 <_printf_i+0x13e>
 80046ee:	0018      	movs	r0, r3
 80046f0:	e7a7      	b.n	8004642 <_printf_i+0x13e>
 80046f2:	0022      	movs	r2, r4
 80046f4:	2301      	movs	r3, #1
 80046f6:	9906      	ldr	r1, [sp, #24]
 80046f8:	9805      	ldr	r0, [sp, #20]
 80046fa:	9e07      	ldr	r6, [sp, #28]
 80046fc:	3219      	adds	r2, #25
 80046fe:	47b0      	blx	r6
 8004700:	3001      	adds	r0, #1
 8004702:	d09c      	beq.n	800463e <_printf_i+0x13a>
 8004704:	3501      	adds	r5, #1
 8004706:	68e3      	ldr	r3, [r4, #12]
 8004708:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	42ab      	cmp	r3, r5
 800470e:	dcf0      	bgt.n	80046f2 <_printf_i+0x1ee>
 8004710:	e7e9      	b.n	80046e6 <_printf_i+0x1e2>
 8004712:	2500      	movs	r5, #0
 8004714:	e7f7      	b.n	8004706 <_printf_i+0x202>
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	08004b8d 	.word	0x08004b8d
 800471c:	08004b9e 	.word	0x08004b9e

08004720 <__sflush_r>:
 8004720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004722:	220c      	movs	r2, #12
 8004724:	5e8b      	ldrsh	r3, [r1, r2]
 8004726:	0005      	movs	r5, r0
 8004728:	000c      	movs	r4, r1
 800472a:	071a      	lsls	r2, r3, #28
 800472c:	d456      	bmi.n	80047dc <__sflush_r+0xbc>
 800472e:	684a      	ldr	r2, [r1, #4]
 8004730:	2a00      	cmp	r2, #0
 8004732:	dc02      	bgt.n	800473a <__sflush_r+0x1a>
 8004734:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004736:	2a00      	cmp	r2, #0
 8004738:	dd4e      	ble.n	80047d8 <__sflush_r+0xb8>
 800473a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800473c:	2f00      	cmp	r7, #0
 800473e:	d04b      	beq.n	80047d8 <__sflush_r+0xb8>
 8004740:	2200      	movs	r2, #0
 8004742:	2080      	movs	r0, #128	@ 0x80
 8004744:	682e      	ldr	r6, [r5, #0]
 8004746:	602a      	str	r2, [r5, #0]
 8004748:	001a      	movs	r2, r3
 800474a:	0140      	lsls	r0, r0, #5
 800474c:	6a21      	ldr	r1, [r4, #32]
 800474e:	4002      	ands	r2, r0
 8004750:	4203      	tst	r3, r0
 8004752:	d033      	beq.n	80047bc <__sflush_r+0x9c>
 8004754:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	075b      	lsls	r3, r3, #29
 800475a:	d506      	bpl.n	800476a <__sflush_r+0x4a>
 800475c:	6863      	ldr	r3, [r4, #4]
 800475e:	1ad2      	subs	r2, r2, r3
 8004760:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <__sflush_r+0x4a>
 8004766:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004768:	1ad2      	subs	r2, r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	0028      	movs	r0, r5
 800476e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004770:	6a21      	ldr	r1, [r4, #32]
 8004772:	47b8      	blx	r7
 8004774:	89a2      	ldrh	r2, [r4, #12]
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	d106      	bne.n	8004788 <__sflush_r+0x68>
 800477a:	6829      	ldr	r1, [r5, #0]
 800477c:	291d      	cmp	r1, #29
 800477e:	d846      	bhi.n	800480e <__sflush_r+0xee>
 8004780:	4b29      	ldr	r3, [pc, #164]	@ (8004828 <__sflush_r+0x108>)
 8004782:	410b      	asrs	r3, r1
 8004784:	07db      	lsls	r3, r3, #31
 8004786:	d442      	bmi.n	800480e <__sflush_r+0xee>
 8004788:	2300      	movs	r3, #0
 800478a:	6063      	str	r3, [r4, #4]
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	6023      	str	r3, [r4, #0]
 8004790:	04d2      	lsls	r2, r2, #19
 8004792:	d505      	bpl.n	80047a0 <__sflush_r+0x80>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <__sflush_r+0x7e>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d100      	bne.n	80047a0 <__sflush_r+0x80>
 800479e:	6560      	str	r0, [r4, #84]	@ 0x54
 80047a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047a2:	602e      	str	r6, [r5, #0]
 80047a4:	2900      	cmp	r1, #0
 80047a6:	d017      	beq.n	80047d8 <__sflush_r+0xb8>
 80047a8:	0023      	movs	r3, r4
 80047aa:	3344      	adds	r3, #68	@ 0x44
 80047ac:	4299      	cmp	r1, r3
 80047ae:	d002      	beq.n	80047b6 <__sflush_r+0x96>
 80047b0:	0028      	movs	r0, r5
 80047b2:	f7ff fbf7 	bl	8003fa4 <_free_r>
 80047b6:	2300      	movs	r3, #0
 80047b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80047ba:	e00d      	b.n	80047d8 <__sflush_r+0xb8>
 80047bc:	2301      	movs	r3, #1
 80047be:	0028      	movs	r0, r5
 80047c0:	47b8      	blx	r7
 80047c2:	0002      	movs	r2, r0
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d1c6      	bne.n	8004756 <__sflush_r+0x36>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0c3      	beq.n	8004756 <__sflush_r+0x36>
 80047ce:	2b1d      	cmp	r3, #29
 80047d0:	d001      	beq.n	80047d6 <__sflush_r+0xb6>
 80047d2:	2b16      	cmp	r3, #22
 80047d4:	d11a      	bne.n	800480c <__sflush_r+0xec>
 80047d6:	602e      	str	r6, [r5, #0]
 80047d8:	2000      	movs	r0, #0
 80047da:	e01e      	b.n	800481a <__sflush_r+0xfa>
 80047dc:	690e      	ldr	r6, [r1, #16]
 80047de:	2e00      	cmp	r6, #0
 80047e0:	d0fa      	beq.n	80047d8 <__sflush_r+0xb8>
 80047e2:	680f      	ldr	r7, [r1, #0]
 80047e4:	600e      	str	r6, [r1, #0]
 80047e6:	1bba      	subs	r2, r7, r6
 80047e8:	9201      	str	r2, [sp, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	079b      	lsls	r3, r3, #30
 80047ee:	d100      	bne.n	80047f2 <__sflush_r+0xd2>
 80047f0:	694a      	ldr	r2, [r1, #20]
 80047f2:	60a2      	str	r2, [r4, #8]
 80047f4:	9b01      	ldr	r3, [sp, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	ddee      	ble.n	80047d8 <__sflush_r+0xb8>
 80047fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80047fc:	0032      	movs	r2, r6
 80047fe:	001f      	movs	r7, r3
 8004800:	0028      	movs	r0, r5
 8004802:	9b01      	ldr	r3, [sp, #4]
 8004804:	6a21      	ldr	r1, [r4, #32]
 8004806:	47b8      	blx	r7
 8004808:	2800      	cmp	r0, #0
 800480a:	dc07      	bgt.n	800481c <__sflush_r+0xfc>
 800480c:	89a2      	ldrh	r2, [r4, #12]
 800480e:	2340      	movs	r3, #64	@ 0x40
 8004810:	2001      	movs	r0, #1
 8004812:	4313      	orrs	r3, r2
 8004814:	b21b      	sxth	r3, r3
 8004816:	81a3      	strh	r3, [r4, #12]
 8004818:	4240      	negs	r0, r0
 800481a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800481c:	9b01      	ldr	r3, [sp, #4]
 800481e:	1836      	adds	r6, r6, r0
 8004820:	1a1b      	subs	r3, r3, r0
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	e7e6      	b.n	80047f4 <__sflush_r+0xd4>
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	dfbffffe 	.word	0xdfbffffe

0800482c <_fflush_r>:
 800482c:	690b      	ldr	r3, [r1, #16]
 800482e:	b570      	push	{r4, r5, r6, lr}
 8004830:	0005      	movs	r5, r0
 8004832:	000c      	movs	r4, r1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d102      	bne.n	800483e <_fflush_r+0x12>
 8004838:	2500      	movs	r5, #0
 800483a:	0028      	movs	r0, r5
 800483c:	bd70      	pop	{r4, r5, r6, pc}
 800483e:	2800      	cmp	r0, #0
 8004840:	d004      	beq.n	800484c <_fflush_r+0x20>
 8004842:	6a03      	ldr	r3, [r0, #32]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <_fflush_r+0x20>
 8004848:	f7ff fa98 	bl	8003d7c <__sinit>
 800484c:	220c      	movs	r2, #12
 800484e:	5ea3      	ldrsh	r3, [r4, r2]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f1      	beq.n	8004838 <_fflush_r+0xc>
 8004854:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004856:	07d2      	lsls	r2, r2, #31
 8004858:	d404      	bmi.n	8004864 <_fflush_r+0x38>
 800485a:	059b      	lsls	r3, r3, #22
 800485c:	d402      	bmi.n	8004864 <_fflush_r+0x38>
 800485e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004860:	f7ff fb9d 	bl	8003f9e <__retarget_lock_acquire_recursive>
 8004864:	0028      	movs	r0, r5
 8004866:	0021      	movs	r1, r4
 8004868:	f7ff ff5a 	bl	8004720 <__sflush_r>
 800486c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800486e:	0005      	movs	r5, r0
 8004870:	07db      	lsls	r3, r3, #31
 8004872:	d4e2      	bmi.n	800483a <_fflush_r+0xe>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	059b      	lsls	r3, r3, #22
 8004878:	d4df      	bmi.n	800483a <_fflush_r+0xe>
 800487a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800487c:	f7ff fb90 	bl	8003fa0 <__retarget_lock_release_recursive>
 8004880:	e7db      	b.n	800483a <_fflush_r+0xe>

08004882 <__swbuf_r>:
 8004882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004884:	0006      	movs	r6, r0
 8004886:	000d      	movs	r5, r1
 8004888:	0014      	movs	r4, r2
 800488a:	2800      	cmp	r0, #0
 800488c:	d004      	beq.n	8004898 <__swbuf_r+0x16>
 800488e:	6a03      	ldr	r3, [r0, #32]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <__swbuf_r+0x16>
 8004894:	f7ff fa72 	bl	8003d7c <__sinit>
 8004898:	69a3      	ldr	r3, [r4, #24]
 800489a:	60a3      	str	r3, [r4, #8]
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	071b      	lsls	r3, r3, #28
 80048a0:	d502      	bpl.n	80048a8 <__swbuf_r+0x26>
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <__swbuf_r+0x3a>
 80048a8:	0021      	movs	r1, r4
 80048aa:	0030      	movs	r0, r6
 80048ac:	f000 f82c 	bl	8004908 <__swsetup_r>
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d003      	beq.n	80048bc <__swbuf_r+0x3a>
 80048b4:	2501      	movs	r5, #1
 80048b6:	426d      	negs	r5, r5
 80048b8:	0028      	movs	r0, r5
 80048ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	b2ef      	uxtb	r7, r5
 80048c2:	1ac0      	subs	r0, r0, r3
 80048c4:	6963      	ldr	r3, [r4, #20]
 80048c6:	b2ed      	uxtb	r5, r5
 80048c8:	4283      	cmp	r3, r0
 80048ca:	dc05      	bgt.n	80048d8 <__swbuf_r+0x56>
 80048cc:	0021      	movs	r1, r4
 80048ce:	0030      	movs	r0, r6
 80048d0:	f7ff ffac 	bl	800482c <_fflush_r>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d1ed      	bne.n	80048b4 <__swbuf_r+0x32>
 80048d8:	68a3      	ldr	r3, [r4, #8]
 80048da:	3001      	adds	r0, #1
 80048dc:	3b01      	subs	r3, #1
 80048de:	60a3      	str	r3, [r4, #8]
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	6022      	str	r2, [r4, #0]
 80048e6:	701f      	strb	r7, [r3, #0]
 80048e8:	6963      	ldr	r3, [r4, #20]
 80048ea:	4283      	cmp	r3, r0
 80048ec:	d004      	beq.n	80048f8 <__swbuf_r+0x76>
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	07db      	lsls	r3, r3, #31
 80048f2:	d5e1      	bpl.n	80048b8 <__swbuf_r+0x36>
 80048f4:	2d0a      	cmp	r5, #10
 80048f6:	d1df      	bne.n	80048b8 <__swbuf_r+0x36>
 80048f8:	0021      	movs	r1, r4
 80048fa:	0030      	movs	r0, r6
 80048fc:	f7ff ff96 	bl	800482c <_fflush_r>
 8004900:	2800      	cmp	r0, #0
 8004902:	d0d9      	beq.n	80048b8 <__swbuf_r+0x36>
 8004904:	e7d6      	b.n	80048b4 <__swbuf_r+0x32>
	...

08004908 <__swsetup_r>:
 8004908:	4b2d      	ldr	r3, [pc, #180]	@ (80049c0 <__swsetup_r+0xb8>)
 800490a:	b570      	push	{r4, r5, r6, lr}
 800490c:	0005      	movs	r5, r0
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	000c      	movs	r4, r1
 8004912:	2800      	cmp	r0, #0
 8004914:	d004      	beq.n	8004920 <__swsetup_r+0x18>
 8004916:	6a03      	ldr	r3, [r0, #32]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <__swsetup_r+0x18>
 800491c:	f7ff fa2e 	bl	8003d7c <__sinit>
 8004920:	230c      	movs	r3, #12
 8004922:	5ee2      	ldrsh	r2, [r4, r3]
 8004924:	0713      	lsls	r3, r2, #28
 8004926:	d423      	bmi.n	8004970 <__swsetup_r+0x68>
 8004928:	06d3      	lsls	r3, r2, #27
 800492a:	d407      	bmi.n	800493c <__swsetup_r+0x34>
 800492c:	2309      	movs	r3, #9
 800492e:	602b      	str	r3, [r5, #0]
 8004930:	2340      	movs	r3, #64	@ 0x40
 8004932:	2001      	movs	r0, #1
 8004934:	4313      	orrs	r3, r2
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	4240      	negs	r0, r0
 800493a:	e03a      	b.n	80049b2 <__swsetup_r+0xaa>
 800493c:	0752      	lsls	r2, r2, #29
 800493e:	d513      	bpl.n	8004968 <__swsetup_r+0x60>
 8004940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004942:	2900      	cmp	r1, #0
 8004944:	d008      	beq.n	8004958 <__swsetup_r+0x50>
 8004946:	0023      	movs	r3, r4
 8004948:	3344      	adds	r3, #68	@ 0x44
 800494a:	4299      	cmp	r1, r3
 800494c:	d002      	beq.n	8004954 <__swsetup_r+0x4c>
 800494e:	0028      	movs	r0, r5
 8004950:	f7ff fb28 	bl	8003fa4 <_free_r>
 8004954:	2300      	movs	r3, #0
 8004956:	6363      	str	r3, [r4, #52]	@ 0x34
 8004958:	2224      	movs	r2, #36	@ 0x24
 800495a:	89a3      	ldrh	r3, [r4, #12]
 800495c:	4393      	bics	r3, r2
 800495e:	81a3      	strh	r3, [r4, #12]
 8004960:	2300      	movs	r3, #0
 8004962:	6063      	str	r3, [r4, #4]
 8004964:	6923      	ldr	r3, [r4, #16]
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	2308      	movs	r3, #8
 800496a:	89a2      	ldrh	r2, [r4, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	81a3      	strh	r3, [r4, #12]
 8004970:	6923      	ldr	r3, [r4, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <__swsetup_r+0x86>
 8004976:	21a0      	movs	r1, #160	@ 0xa0
 8004978:	2280      	movs	r2, #128	@ 0x80
 800497a:	89a3      	ldrh	r3, [r4, #12]
 800497c:	0089      	lsls	r1, r1, #2
 800497e:	0092      	lsls	r2, r2, #2
 8004980:	400b      	ands	r3, r1
 8004982:	4293      	cmp	r3, r2
 8004984:	d003      	beq.n	800498e <__swsetup_r+0x86>
 8004986:	0021      	movs	r1, r4
 8004988:	0028      	movs	r0, r5
 800498a:	f000 f863 	bl	8004a54 <__smakebuf_r>
 800498e:	230c      	movs	r3, #12
 8004990:	5ee2      	ldrsh	r2, [r4, r3]
 8004992:	2101      	movs	r1, #1
 8004994:	0013      	movs	r3, r2
 8004996:	400b      	ands	r3, r1
 8004998:	420a      	tst	r2, r1
 800499a:	d00b      	beq.n	80049b4 <__swsetup_r+0xac>
 800499c:	2300      	movs	r3, #0
 800499e:	60a3      	str	r3, [r4, #8]
 80049a0:	6963      	ldr	r3, [r4, #20]
 80049a2:	425b      	negs	r3, r3
 80049a4:	61a3      	str	r3, [r4, #24]
 80049a6:	2000      	movs	r0, #0
 80049a8:	6923      	ldr	r3, [r4, #16]
 80049aa:	4283      	cmp	r3, r0
 80049ac:	d101      	bne.n	80049b2 <__swsetup_r+0xaa>
 80049ae:	0613      	lsls	r3, r2, #24
 80049b0:	d4be      	bmi.n	8004930 <__swsetup_r+0x28>
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	0791      	lsls	r1, r2, #30
 80049b6:	d400      	bmi.n	80049ba <__swsetup_r+0xb2>
 80049b8:	6963      	ldr	r3, [r4, #20]
 80049ba:	60a3      	str	r3, [r4, #8]
 80049bc:	e7f3      	b.n	80049a6 <__swsetup_r+0x9e>
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	20000018 	.word	0x20000018

080049c4 <_sbrk_r>:
 80049c4:	2300      	movs	r3, #0
 80049c6:	b570      	push	{r4, r5, r6, lr}
 80049c8:	4d06      	ldr	r5, [pc, #24]	@ (80049e4 <_sbrk_r+0x20>)
 80049ca:	0004      	movs	r4, r0
 80049cc:	0008      	movs	r0, r1
 80049ce:	602b      	str	r3, [r5, #0]
 80049d0:	f7fc f99a 	bl	8000d08 <_sbrk>
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	d103      	bne.n	80049e0 <_sbrk_r+0x1c>
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d000      	beq.n	80049e0 <_sbrk_r+0x1c>
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	bd70      	pop	{r4, r5, r6, pc}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	2000037c 	.word	0x2000037c

080049e8 <memchr>:
 80049e8:	b2c9      	uxtb	r1, r1
 80049ea:	1882      	adds	r2, r0, r2
 80049ec:	4290      	cmp	r0, r2
 80049ee:	d101      	bne.n	80049f4 <memchr+0xc>
 80049f0:	2000      	movs	r0, #0
 80049f2:	4770      	bx	lr
 80049f4:	7803      	ldrb	r3, [r0, #0]
 80049f6:	428b      	cmp	r3, r1
 80049f8:	d0fb      	beq.n	80049f2 <memchr+0xa>
 80049fa:	3001      	adds	r0, #1
 80049fc:	e7f6      	b.n	80049ec <memchr+0x4>
	...

08004a00 <__swhatbuf_r>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	000e      	movs	r6, r1
 8004a04:	001d      	movs	r5, r3
 8004a06:	230e      	movs	r3, #14
 8004a08:	5ec9      	ldrsh	r1, [r1, r3]
 8004a0a:	0014      	movs	r4, r2
 8004a0c:	b096      	sub	sp, #88	@ 0x58
 8004a0e:	2900      	cmp	r1, #0
 8004a10:	da0c      	bge.n	8004a2c <__swhatbuf_r+0x2c>
 8004a12:	89b2      	ldrh	r2, [r6, #12]
 8004a14:	2380      	movs	r3, #128	@ 0x80
 8004a16:	0011      	movs	r1, r2
 8004a18:	4019      	ands	r1, r3
 8004a1a:	421a      	tst	r2, r3
 8004a1c:	d114      	bne.n	8004a48 <__swhatbuf_r+0x48>
 8004a1e:	2380      	movs	r3, #128	@ 0x80
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	2000      	movs	r0, #0
 8004a24:	6029      	str	r1, [r5, #0]
 8004a26:	6023      	str	r3, [r4, #0]
 8004a28:	b016      	add	sp, #88	@ 0x58
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	466a      	mov	r2, sp
 8004a2e:	f000 f853 	bl	8004ad8 <_fstat_r>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	dbed      	blt.n	8004a12 <__swhatbuf_r+0x12>
 8004a36:	23f0      	movs	r3, #240	@ 0xf0
 8004a38:	9901      	ldr	r1, [sp, #4]
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	4019      	ands	r1, r3
 8004a3e:	4b04      	ldr	r3, [pc, #16]	@ (8004a50 <__swhatbuf_r+0x50>)
 8004a40:	18c9      	adds	r1, r1, r3
 8004a42:	424b      	negs	r3, r1
 8004a44:	4159      	adcs	r1, r3
 8004a46:	e7ea      	b.n	8004a1e <__swhatbuf_r+0x1e>
 8004a48:	2100      	movs	r1, #0
 8004a4a:	2340      	movs	r3, #64	@ 0x40
 8004a4c:	e7e9      	b.n	8004a22 <__swhatbuf_r+0x22>
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	ffffe000 	.word	0xffffe000

08004a54 <__smakebuf_r>:
 8004a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a56:	2602      	movs	r6, #2
 8004a58:	898b      	ldrh	r3, [r1, #12]
 8004a5a:	0005      	movs	r5, r0
 8004a5c:	000c      	movs	r4, r1
 8004a5e:	b085      	sub	sp, #20
 8004a60:	4233      	tst	r3, r6
 8004a62:	d007      	beq.n	8004a74 <__smakebuf_r+0x20>
 8004a64:	0023      	movs	r3, r4
 8004a66:	3347      	adds	r3, #71	@ 0x47
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	6123      	str	r3, [r4, #16]
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	6163      	str	r3, [r4, #20]
 8004a70:	b005      	add	sp, #20
 8004a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a74:	ab03      	add	r3, sp, #12
 8004a76:	aa02      	add	r2, sp, #8
 8004a78:	f7ff ffc2 	bl	8004a00 <__swhatbuf_r>
 8004a7c:	9f02      	ldr	r7, [sp, #8]
 8004a7e:	9001      	str	r0, [sp, #4]
 8004a80:	0039      	movs	r1, r7
 8004a82:	0028      	movs	r0, r5
 8004a84:	f7ff fafa 	bl	800407c <_malloc_r>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	d108      	bne.n	8004a9e <__smakebuf_r+0x4a>
 8004a8c:	220c      	movs	r2, #12
 8004a8e:	5ea3      	ldrsh	r3, [r4, r2]
 8004a90:	059a      	lsls	r2, r3, #22
 8004a92:	d4ed      	bmi.n	8004a70 <__smakebuf_r+0x1c>
 8004a94:	2203      	movs	r2, #3
 8004a96:	4393      	bics	r3, r2
 8004a98:	431e      	orrs	r6, r3
 8004a9a:	81a6      	strh	r6, [r4, #12]
 8004a9c:	e7e2      	b.n	8004a64 <__smakebuf_r+0x10>
 8004a9e:	2380      	movs	r3, #128	@ 0x80
 8004aa0:	89a2      	ldrh	r2, [r4, #12]
 8004aa2:	6020      	str	r0, [r4, #0]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	81a3      	strh	r3, [r4, #12]
 8004aa8:	9b03      	ldr	r3, [sp, #12]
 8004aaa:	6120      	str	r0, [r4, #16]
 8004aac:	6167      	str	r7, [r4, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00c      	beq.n	8004acc <__smakebuf_r+0x78>
 8004ab2:	0028      	movs	r0, r5
 8004ab4:	230e      	movs	r3, #14
 8004ab6:	5ee1      	ldrsh	r1, [r4, r3]
 8004ab8:	f000 f820 	bl	8004afc <_isatty_r>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d005      	beq.n	8004acc <__smakebuf_r+0x78>
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	89a2      	ldrh	r2, [r4, #12]
 8004ac4:	439a      	bics	r2, r3
 8004ac6:	3b02      	subs	r3, #2
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	81a3      	strh	r3, [r4, #12]
 8004acc:	89a3      	ldrh	r3, [r4, #12]
 8004ace:	9a01      	ldr	r2, [sp, #4]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	81a3      	strh	r3, [r4, #12]
 8004ad4:	e7cc      	b.n	8004a70 <__smakebuf_r+0x1c>
	...

08004ad8 <_fstat_r>:
 8004ad8:	2300      	movs	r3, #0
 8004ada:	b570      	push	{r4, r5, r6, lr}
 8004adc:	4d06      	ldr	r5, [pc, #24]	@ (8004af8 <_fstat_r+0x20>)
 8004ade:	0004      	movs	r4, r0
 8004ae0:	0008      	movs	r0, r1
 8004ae2:	0011      	movs	r1, r2
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	f7fc f8ec 	bl	8000cc2 <_fstat>
 8004aea:	1c43      	adds	r3, r0, #1
 8004aec:	d103      	bne.n	8004af6 <_fstat_r+0x1e>
 8004aee:	682b      	ldr	r3, [r5, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d000      	beq.n	8004af6 <_fstat_r+0x1e>
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	2000037c 	.word	0x2000037c

08004afc <_isatty_r>:
 8004afc:	2300      	movs	r3, #0
 8004afe:	b570      	push	{r4, r5, r6, lr}
 8004b00:	4d06      	ldr	r5, [pc, #24]	@ (8004b1c <_isatty_r+0x20>)
 8004b02:	0004      	movs	r4, r0
 8004b04:	0008      	movs	r0, r1
 8004b06:	602b      	str	r3, [r5, #0]
 8004b08:	f7fc f8e9 	bl	8000cde <_isatty>
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d103      	bne.n	8004b18 <_isatty_r+0x1c>
 8004b10:	682b      	ldr	r3, [r5, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d000      	beq.n	8004b18 <_isatty_r+0x1c>
 8004b16:	6023      	str	r3, [r4, #0]
 8004b18:	bd70      	pop	{r4, r5, r6, pc}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	2000037c 	.word	0x2000037c

08004b20 <_init>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr

08004b2c <_fini>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	46c0      	nop			@ (mov r8, r8)
 8004b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b32:	bc08      	pop	{r3}
 8004b34:	469e      	mov	lr, r3
 8004b36:	4770      	bx	lr
