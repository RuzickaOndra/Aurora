
MermaidControlUnit_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080055d0  080055d0  000065d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057e8  080057e8  00007078  2**0
                  CONTENTS
  4 .ARM          00000000  080057e8  080057e8  00007078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057e8  080057e8  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057e8  080057e8  000067e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057ec  080057ec  000067ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080057f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000880  20000078  08005868  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f8  08005868  000078f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e18e  00000000  00000000  000070a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002415  00000000  00000000  0001522f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00017648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b63  00000000  00000000  000184d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019598  00000000  00000000  0001903b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e58  00000000  00000000  000325d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e98  00000000  00000000  0004342b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d52c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004710  00000000  00000000  000d5308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d9a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080055b8 	.word	0x080055b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080055b8 	.word	0x080055b8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800064e:	f001 f953 	bl	80018f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000652:	f000 f94b 	bl	80008ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000656:	f000 fc23 	bl	8000ea0 <MX_GPIO_Init>
	MX_ADC1_Init();
 800065a:	f000 f9a3 	bl	80009a4 <MX_ADC1_Init>
	MX_TIM2_Init();
 800065e:	f000 fa2f 	bl	8000ac0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000662:	f000 fac3 	bl	8000bec <MX_TIM3_Init>
	MX_TIM4_Init();
 8000666:	f000 fb59 	bl	8000d1c <MX_TIM4_Init>
	MX_USART1_UART_Init();
 800066a:	f000 fbef 	bl	8000e4c <MX_USART1_UART_Init>
	MX_TIM1_Init();
 800066e:	f000 f9d7 	bl	8000a20 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(powerOn_GPIO_Port, powerOn_Pin, SET); // Power LDO Enable
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000678:	488e      	ldr	r0, [pc, #568]	@ (80008b4 <main+0x26c>)
 800067a:	f001 fec9 	bl	8002410 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start(&htim1); // IR Receiver timer start
 800067e:	488e      	ldr	r0, [pc, #568]	@ (80008b8 <main+0x270>)
 8000680:	f002 fc0e 	bl	8002ea0 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim1, 0); // IR Receiver timer cnt set
 8000684:	4b8c      	ldr	r3, [pc, #560]	@ (80008b8 <main+0x270>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	@ 0x24

	WS28XX_Init(&ws, &htim2, 72, TIM_CHANNEL_4, 3);
 800068c:	2303      	movs	r3, #3
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	230c      	movs	r3, #12
 8000692:	2248      	movs	r2, #72	@ 0x48
 8000694:	4989      	ldr	r1, [pc, #548]	@ (80008bc <main+0x274>)
 8000696:	488a      	ldr	r0, [pc, #552]	@ (80008c0 <main+0x278>)
 8000698:	f003 fe18 	bl	80042cc <WS28XX_Init>

	uint32_t tmheartbeat = 0, tm = 0; // Timestamp variable
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
	bool heartbeat = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1); //heartbeat pin
 80006a8:	2201      	movs	r2, #1
 80006aa:	2110      	movs	r1, #16
 80006ac:	4881      	ldr	r0, [pc, #516]	@ (80008b4 <main+0x26c>)
 80006ae:	f001 feaf 	bl	8002410 <HAL_GPIO_WritePin>

	uint8_t ledsON = 0; //Some LED should be on - enable boost
 80006b2:	2300      	movs	r3, #0
 80006b4:	73bb      	strb	r3, [r7, #14]
	uint32_t tmboostON = 0; //timestamp for boost enabling
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
	bool boostONswitch = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	71fb      	strb	r3, [r7, #7]

	WS28XX_SetPixel_RGBW_565(&ws, 0, COLOR_RGB565_BLUE, 50); //default init values
 80006be:	2332      	movs	r3, #50	@ 0x32
 80006c0:	221f      	movs	r2, #31
 80006c2:	2100      	movs	r1, #0
 80006c4:	487e      	ldr	r0, [pc, #504]	@ (80008c0 <main+0x278>)
 80006c6:	f003 fe97 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB565_CRIMSON, 50);
 80006ca:	2332      	movs	r3, #50	@ 0x32
 80006cc:	f64d 02a7 	movw	r2, #55463	@ 0xd8a7
 80006d0:	2101      	movs	r1, #1
 80006d2:	487b      	ldr	r0, [pc, #492]	@ (80008c0 <main+0x278>)
 80006d4:	f003 fe90 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 2, COLOR_RGB565_ORANGE, 50);
 80006d8:	2332      	movs	r3, #50	@ 0x32
 80006da:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 80006de:	2102      	movs	r1, #2
 80006e0:	4877      	ldr	r0, [pc, #476]	@ (80008c0 <main+0x278>)
 80006e2:	f003 fe89 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_Update(&ws);
 80006e6:	4876      	ldr	r0, [pc, #472]	@ (80008c0 <main+0x278>)
 80006e8:	f003 fefa 	bl	80044e0 <WS28XX_Update>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (tmheartbeat < HAL_GetTick()) { //heartbeat LED
 80006ec:	f001 f95c 	bl	80019a8 <HAL_GetTick>
 80006f0:	4602      	mov	r2, r0
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d220      	bcs.n	800073a <main+0xf2>
			if (heartbeat)
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d006      	beq.n	800070c <main+0xc4>
				tmheartbeat = HAL_GetTick() + 950;
 80006fe:	f001 f953 	bl	80019a8 <HAL_GetTick>
 8000702:	4603      	mov	r3, r0
 8000704:	f203 33b6 	addw	r3, r3, #950	@ 0x3b6
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	e004      	b.n	8000716 <main+0xce>
			else
				tmheartbeat = HAL_GetTick() + 50;
 800070c:	f001 f94c 	bl	80019a8 <HAL_GetTick>
 8000710:	4603      	mov	r3, r0
 8000712:	3332      	adds	r3, #50	@ 0x32
 8000714:	617b      	str	r3, [r7, #20]

			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); //heartbeat LED
 8000716:	2110      	movs	r1, #16
 8000718:	4866      	ldr	r0, [pc, #408]	@ (80008b4 <main+0x26c>)
 800071a:	f001 fe91 	bl	8002440 <HAL_GPIO_TogglePin>

			heartbeat = !heartbeat;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	2b00      	cmp	r3, #0
 8000722:	bf14      	ite	ne
 8000724:	2301      	movne	r3, #1
 8000726:	2300      	moveq	r3, #0
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f083 0301 	eor.w	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	73fb      	strb	r3, [r7, #15]
		}

		if (processIR == 1) { //Command received from IR decoding
 800073a:	4b62      	ldr	r3, [pc, #392]	@ (80008c4 <main+0x27c>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	d04e      	beq.n	80007e2 <main+0x19a>
			processIR = 0; //reset flag
 8000744:	4b5f      	ldr	r3, [pc, #380]	@ (80008c4 <main+0x27c>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]

			printf("Data: %X\r\n", code); //debug terminal text
 800074a:	4b5f      	ldr	r3, [pc, #380]	@ (80008c8 <main+0x280>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4619      	mov	r1, r3
 8000750:	485e      	ldr	r0, [pc, #376]	@ (80008cc <main+0x284>)
 8000752:	f004 f837 	bl	80047c4 <iprintf>

			switch (code) {
 8000756:	4b5c      	ldr	r3, [pc, #368]	@ (80008c8 <main+0x280>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a5d      	ldr	r2, [pc, #372]	@ (80008d0 <main+0x288>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d027      	beq.n	80007b0 <main+0x168>
 8000760:	4a5b      	ldr	r2, [pc, #364]	@ (80008d0 <main+0x288>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d83c      	bhi.n	80007e0 <main+0x198>
 8000766:	4a5b      	ldr	r2, [pc, #364]	@ (80008d4 <main+0x28c>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d02d      	beq.n	80007c8 <main+0x180>
 800076c:	4a59      	ldr	r2, [pc, #356]	@ (80008d4 <main+0x28c>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d836      	bhi.n	80007e0 <main+0x198>
 8000772:	4a59      	ldr	r2, [pc, #356]	@ (80008d8 <main+0x290>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d00f      	beq.n	8000798 <main+0x150>
 8000778:	4a57      	ldr	r2, [pc, #348]	@ (80008d8 <main+0x290>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d830      	bhi.n	80007e0 <main+0x198>
 800077e:	4a57      	ldr	r2, [pc, #348]	@ (80008dc <main+0x294>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d027      	beq.n	80007d4 <main+0x18c>
 8000784:	4a55      	ldr	r2, [pc, #340]	@ (80008dc <main+0x294>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d82a      	bhi.n	80007e0 <main+0x198>
 800078a:	4a55      	ldr	r2, [pc, #340]	@ (80008e0 <main+0x298>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d015      	beq.n	80007bc <main+0x174>
 8000790:	4a54      	ldr	r2, [pc, #336]	@ (80008e4 <main+0x29c>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d006      	beq.n	80007a4 <main+0x15c>
			case 0xFF58A7: // "0"
				animationCode = 0;
				ledsON = 0;
				break;
			default:
				break;
 8000796:	e023      	b.n	80007e0 <main+0x198>
				animationCode = 1;
 8000798:	4b53      	ldr	r3, [pc, #332]	@ (80008e8 <main+0x2a0>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 800079e:	2301      	movs	r3, #1
 80007a0:	73bb      	strb	r3, [r7, #14]
				break;
 80007a2:	e01e      	b.n	80007e2 <main+0x19a>
				animationCode = 2;
 80007a4:	4b50      	ldr	r3, [pc, #320]	@ (80008e8 <main+0x2a0>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	73bb      	strb	r3, [r7, #14]
				break;
 80007ae:	e018      	b.n	80007e2 <main+0x19a>
				animationCode = 3;
 80007b0:	4b4d      	ldr	r3, [pc, #308]	@ (80008e8 <main+0x2a0>)
 80007b2:	2203      	movs	r2, #3
 80007b4:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	73bb      	strb	r3, [r7, #14]
				break;
 80007ba:	e012      	b.n	80007e2 <main+0x19a>
				animationCode = 4;
 80007bc:	4b4a      	ldr	r3, [pc, #296]	@ (80008e8 <main+0x2a0>)
 80007be:	2204      	movs	r2, #4
 80007c0:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	73bb      	strb	r3, [r7, #14]
				break;
 80007c6:	e00c      	b.n	80007e2 <main+0x19a>
				animationCode = 5;
 80007c8:	4b47      	ldr	r3, [pc, #284]	@ (80008e8 <main+0x2a0>)
 80007ca:	2205      	movs	r2, #5
 80007cc:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	73bb      	strb	r3, [r7, #14]
				break;
 80007d2:	e006      	b.n	80007e2 <main+0x19a>
				animationCode = 0;
 80007d4:	4b44      	ldr	r3, [pc, #272]	@ (80008e8 <main+0x2a0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
				ledsON = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	73bb      	strb	r3, [r7, #14]
				break;
 80007de:	e000      	b.n	80007e2 <main+0x19a>
				break;
 80007e0:	bf00      	nop
			}
		}

		if (tm < HAL_GetTick()) { //routine for effects
 80007e2:	f001 f8e1 	bl	80019a8 <HAL_GetTick>
 80007e6:	4602      	mov	r2, r0
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d22b      	bcs.n	8000846 <main+0x1fe>
			tm = HAL_GetTick() + 10;
 80007ee:	f001 f8db 	bl	80019a8 <HAL_GetTick>
 80007f2:	4603      	mov	r3, r0
 80007f4:	330a      	adds	r3, #10
 80007f6:	613b      	str	r3, [r7, #16]

			switch (animationCode) {
 80007f8:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <main+0x2a0>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b05      	cmp	r3, #5
 80007fe:	d821      	bhi.n	8000844 <main+0x1fc>
 8000800:	a201      	add	r2, pc, #4	@ (adr r2, 8000808 <main+0x1c0>)
 8000802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000806:	bf00      	nop
 8000808:	08000821 	.word	0x08000821
 800080c:	08000827 	.word	0x08000827
 8000810:	0800082d 	.word	0x0800082d
 8000814:	08000833 	.word	0x08000833
 8000818:	08000839 	.word	0x08000839
 800081c:	0800083f 	.word	0x0800083f
			case 0: // "0"
				turnAllOff();
 8000820:	f000 fbfe 	bl	8001020 <turnAllOff>
				break;
 8000824:	e00f      	b.n	8000846 <main+0x1fe>
			case 1: // "1"
				setAllBlue();
 8000826:	f000 fbdd 	bl	8000fe4 <setAllBlue>
				break;
 800082a:	e00c      	b.n	8000846 <main+0x1fe>
			case 2: // "2"
				GlitteringWavesEffect();
 800082c:	f000 fc14 	bl	8001058 <GlitteringWavesEffect>
				break;
 8000830:	e009      	b.n	8000846 <main+0x1fe>
			case 3: // "3"
				EnchantedRippleEffect();
 8000832:	f000 fc6f 	bl	8001114 <EnchantedRippleEffect>
				break;
 8000836:	e006      	b.n	8000846 <main+0x1fe>
			case 4: // "4"
				TwinklingGlowEffect();
 8000838:	f000 fcc2 	bl	80011c0 <TwinklingGlowEffect>
				break;
 800083c:	e003      	b.n	8000846 <main+0x1fe>
			case 5: // "5"
				CarTurnSignalEffect();
 800083e:	f000 fd3b 	bl	80012b8 <CarTurnSignalEffect>
				break;
 8000842:	e000      	b.n	8000846 <main+0x1fe>
			default:
				break;
 8000844:	bf00      	nop

			}
		}

		if (tmboostON < HAL_GetTick() && ledsON == 1) { //routine for waking up boost
 8000846:	f001 f8af 	bl	80019a8 <HAL_GetTick>
 800084a:	4602      	mov	r2, r0
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4293      	cmp	r3, r2
 8000850:	f4bf af4c 	bcs.w	80006ec <main+0xa4>
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	2b01      	cmp	r3, #1
 8000858:	f47f af48 	bne.w	80006ec <main+0xa4>

			if (boostONswitch) { //100ms low pulse every 20s, if LEDs are running
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00b      	beq.n	800087a <main+0x232>
				tmboostON = HAL_GetTick() + 100;
 8000862:	f001 f8a1 	bl	80019a8 <HAL_GetTick>
 8000866:	4603      	mov	r3, r0
 8000868:	3364      	adds	r3, #100	@ 0x64
 800086a:	60bb      	str	r3, [r7, #8]
				HAL_GPIO_WritePin(boostWkUp_GPIO_Port, boostWkUp_Pin,
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000872:	4810      	ldr	r0, [pc, #64]	@ (80008b4 <main+0x26c>)
 8000874:	f001 fdcc 	bl	8002410 <HAL_GPIO_WritePin>
 8000878:	e00c      	b.n	8000894 <main+0x24c>
						GPIO_PIN_RESET);
			} else {
				tmboostON = HAL_GetTick() + 20000;
 800087a:	f001 f895 	bl	80019a8 <HAL_GetTick>
 800087e:	4603      	mov	r3, r0
 8000880:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8000884:	3320      	adds	r3, #32
 8000886:	60bb      	str	r3, [r7, #8]
				HAL_GPIO_WritePin(boostWkUp_GPIO_Port, boostWkUp_Pin,
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800088e:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <main+0x26c>)
 8000890:	f001 fdbe 	bl	8002410 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
			}
			boostONswitch = !boostONswitch;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	bf14      	ite	ne
 800089a:	2301      	movne	r3, #1
 800089c:	2300      	moveq	r3, #0
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	f083 0301 	eor.w	r3, r3, #1
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	71fb      	strb	r3, [r7, #7]
		if (tmheartbeat < HAL_GetTick()) { //heartbeat LED
 80008b0:	e71c      	b.n	80006ec <main+0xa4>
 80008b2:	bf00      	nop
 80008b4:	40010c00 	.word	0x40010c00
 80008b8:	200000c4 	.word	0x200000c4
 80008bc:	2000010c 	.word	0x2000010c
 80008c0:	20000234 	.word	0x20000234
 80008c4:	20000230 	.word	0x20000230
 80008c8:	2000022c 	.word	0x2000022c
 80008cc:	080055d0 	.word	0x080055d0
 80008d0:	00ffc837 	.word	0x00ffc837
 80008d4:	00ffa857 	.word	0x00ffa857
 80008d8:	00ff8877 	.word	0x00ff8877
 80008dc:	00ff58a7 	.word	0x00ff58a7
 80008e0:	00ff28d7 	.word	0x00ff28d7
 80008e4:	00ff48b7 	.word	0x00ff48b7
 80008e8:	20000231 	.word	0x20000231

080008ec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	@ 0x50
 80008f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008f6:	2228      	movs	r2, #40	@ 0x28
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 ffb7 	bl	800486e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000920:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092a:	2301      	movs	r3, #1
 800092c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000936:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000938:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800093c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800093e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000942:	4618      	mov	r0, r3
 8000944:	f001 fd96 	bl	8002474 <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x66>
		Error_Handler();
 800094e:	f000 fd05 	bl	800135c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000952:	230f      	movs	r3, #15
 8000954:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000962:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2102      	movs	r1, #2
 800096e:	4618      	mov	r0, r3
 8000970:	f002 f802 	bl	8002978 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x92>
		Error_Handler();
 800097a:	f000 fcef 	bl	800135c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800097e:	2302      	movs	r3, #2
 8000980:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000986:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f002 f982 	bl	8002c94 <HAL_RCCEx_PeriphCLKConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xae>
		Error_Handler();
 8000996:	f000 fce1 	bl	800135c <Error_Handler>
	}
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	@ 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80009b4:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <MX_ADC1_Init+0x74>)
 80009b6:	4a19      	ldr	r2, [pc, #100]	@ (8000a1c <MX_ADC1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ba:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <MX_ADC1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <MX_ADC1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_ADC1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <MX_ADC1_Init+0x74>)
 80009ce:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80009d2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d4:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <MX_ADC1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_ADC1_Init+0x74>)
 80009dc:	2201      	movs	r2, #1
 80009de:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80009e0:	480d      	ldr	r0, [pc, #52]	@ (8000a18 <MX_ADC1_Init+0x74>)
 80009e2:	f001 f80f 	bl	8001a04 <HAL_ADC_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80009ec:	f000 fcb6 	bl	800135c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80009f0:	2304      	movs	r3, #4
 80009f2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_ADC1_Init+0x74>)
 8000a02:	f001 f8d7 	bl	8001bb4 <HAL_ADC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000a0c:	f000 fca6 	bl	800135c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000094 	.word	0x20000094
 8000a1c:	40012400 	.word	0x40012400

08000a20 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a34:	463b      	mov	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <MX_TIM1_Init+0x98>)
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000abc <MX_TIM1_Init+0x9c>)
 8000a40:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_TIM1_Init+0x98>)
 8000a44:	2248      	movs	r2, #72	@ 0x48
 8000a46:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_TIM1_Init+0x98>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <MX_TIM1_Init+0x98>)
 8000a50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a54:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_TIM1_Init+0x98>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_TIM1_Init+0x98>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <MX_TIM1_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000a68:	4813      	ldr	r0, [pc, #76]	@ (8000ab8 <MX_TIM1_Init+0x98>)
 8000a6a:	f002 f9c9 	bl	8002e00 <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x58>
		Error_Handler();
 8000a74:	f000 fc72 	bl	800135c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_TIM1_Init+0x98>)
 8000a86:	f002 fd11 	bl	80034ac <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM1_Init+0x74>
		Error_Handler();
 8000a90:	f000 fc64 	bl	800135c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_TIM1_Init+0x98>)
 8000aa2:	f003 f967 	bl	8003d74 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000aac:	f000 fc56 	bl	800135c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200000c4 	.word	0x200000c4
 8000abc:	40012c00 	.word	0x40012c00

08000ac0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	@ 0x38
 8000ac4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ac6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ad4:	f107 0320 	add.w	r3, r7, #32
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
 8000aec:	615a      	str	r2, [r3, #20]
 8000aee:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000af0:	4b3d      	ldr	r3, [pc, #244]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000af2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000af6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000af8:	4b3b      	ldr	r3, [pc, #236]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b3a      	ldr	r3, [pc, #232]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000b04:	4b38      	ldr	r3, [pc, #224]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b36      	ldr	r3, [pc, #216]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b35      	ldr	r3, [pc, #212]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000b18:	4833      	ldr	r0, [pc, #204]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000b1a:	f002 f971 	bl	8002e00 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0x68>
		Error_Handler();
 8000b24:	f000 fc1a 	bl	800135c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b32:	4619      	mov	r1, r3
 8000b34:	482c      	ldr	r0, [pc, #176]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000b36:	f002 fcb9 	bl	80034ac <HAL_TIM_ConfigClockSource>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x84>
		Error_Handler();
 8000b40:	f000 fc0c 	bl	800135c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000b44:	4828      	ldr	r0, [pc, #160]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000b46:	f002 f9f5 	bl	8002f34 <HAL_TIM_PWM_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x94>
		Error_Handler();
 8000b50:	f000 fc04 	bl	800135c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000b5c:	f107 0320 	add.w	r3, r7, #32
 8000b60:	4619      	mov	r1, r3
 8000b62:	4821      	ldr	r0, [pc, #132]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000b64:	f003 f906 	bl	8003d74 <HAL_TIMEx_MasterConfigSynchronization>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8000b6e:	f000 fbf5 	bl	800135c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b72:	2360      	movs	r3, #96	@ 0x60
 8000b74:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	4619      	mov	r1, r3
 8000b88:	4817      	ldr	r0, [pc, #92]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000b8a:	f002 fbcd 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000b94:	f000 fbe2 	bl	800135c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4812      	ldr	r0, [pc, #72]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000ba0:	f002 fbc2 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8000baa:	f000 fbd7 	bl	800135c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000bb6:	f002 fbb7 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM2_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8000bc0:	f000 fbcc 	bl	800135c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4807      	ldr	r0, [pc, #28]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000bcc:	f002 fbac 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x11a>
			!= HAL_OK) {
		Error_Handler();
 8000bd6:	f000 fbc1 	bl	800135c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000bda:	4803      	ldr	r0, [pc, #12]	@ (8000be8 <MX_TIM2_Init+0x128>)
 8000bdc:	f000 fc8a 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 8000be0:	bf00      	nop
 8000be2:	3738      	adds	r7, #56	@ 0x38
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000010c 	.word	0x2000010c

08000bec <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08e      	sub	sp, #56	@ 0x38
 8000bf0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000bf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	615a      	str	r2, [r3, #20]
 8000c1a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000c1c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d18 <MX_TIM3_Init+0x12c>)
 8000c20:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000c22:	4b3c      	ldr	r3, [pc, #240]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b3a      	ldr	r3, [pc, #232]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000c2e:	4b39      	ldr	r3, [pc, #228]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000c30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c34:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c36:	4b37      	ldr	r3, [pc, #220]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3c:	4b35      	ldr	r3, [pc, #212]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000c42:	4834      	ldr	r0, [pc, #208]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000c44:	f002 f8dc 	bl	8002e00 <HAL_TIM_Base_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM3_Init+0x66>
		Error_Handler();
 8000c4e:	f000 fb85 	bl	800135c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000c58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	482d      	ldr	r0, [pc, #180]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000c60:	f002 fc24 	bl	80034ac <HAL_TIM_ConfigClockSource>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM3_Init+0x82>
		Error_Handler();
 8000c6a:	f000 fb77 	bl	800135c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000c6e:	4829      	ldr	r0, [pc, #164]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000c70:	f002 f960 	bl	8002f34 <HAL_TIM_PWM_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM3_Init+0x92>
		Error_Handler();
 8000c7a:	f000 fb6f 	bl	800135c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000c86:	f107 0320 	add.w	r3, r7, #32
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4821      	ldr	r0, [pc, #132]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000c8e:	f003 f871 	bl	8003d74 <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000c98:	f000 fb60 	bl	800135c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c9c:	2360      	movs	r3, #96	@ 0x60
 8000c9e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4818      	ldr	r0, [pc, #96]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000cb4:	f002 fb38 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000cbe:	f000 fb4d 	bl	800135c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4812      	ldr	r0, [pc, #72]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000cca:	f002 fb2d 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8000cd4:	f000 fb42 	bl	800135c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2208      	movs	r2, #8
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000ce0:	f002 fb22 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM3_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 8000cea:	f000 fb37 	bl	800135c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	220c      	movs	r2, #12
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4807      	ldr	r0, [pc, #28]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000cf6:	f002 fb17 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM3_Init+0x118>
			!= HAL_OK) {
		Error_Handler();
 8000d00:	f000 fb2c 	bl	800135c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000d04:	4803      	ldr	r0, [pc, #12]	@ (8000d14 <MX_TIM3_Init+0x128>)
 8000d06:	f000 fbf5 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 8000d0a:	bf00      	nop
 8000d0c:	3738      	adds	r7, #56	@ 0x38
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000154 	.word	0x20000154
 8000d18:	40000400 	.word	0x40000400

08000d1c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	@ 0x38
 8000d20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d30:	f107 0320 	add.w	r3, r7, #32
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000d4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e48 <MX_TIM4_Init+0x12c>)
 8000d50:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000d52:	4b3c      	ldr	r3, [pc, #240]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b3a      	ldr	r3, [pc, #232]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8000d5e:	4b39      	ldr	r3, [pc, #228]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000d60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d64:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d66:	4b37      	ldr	r3, [pc, #220]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6c:	4b35      	ldr	r3, [pc, #212]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000d72:	4834      	ldr	r0, [pc, #208]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000d74:	f002 f844 	bl	8002e00 <HAL_TIM_Base_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM4_Init+0x66>
		Error_Handler();
 8000d7e:	f000 faed 	bl	800135c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d86:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000d88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	482d      	ldr	r0, [pc, #180]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000d90:	f002 fb8c 	bl	80034ac <HAL_TIM_ConfigClockSource>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM4_Init+0x82>
		Error_Handler();
 8000d9a:	f000 fadf 	bl	800135c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000d9e:	4829      	ldr	r0, [pc, #164]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000da0:	f002 f8c8 	bl	8002f34 <HAL_TIM_PWM_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM4_Init+0x92>
		Error_Handler();
 8000daa:	f000 fad7 	bl	800135c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4821      	ldr	r0, [pc, #132]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000dbe:	f002 ffd9 	bl	8003d74 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000dc8:	f000 fac8 	bl	800135c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dcc:	2360      	movs	r3, #96	@ 0x60
 8000dce:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	4619      	mov	r1, r3
 8000de2:	4818      	ldr	r0, [pc, #96]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000de4:	f002 faa0 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000dee:	f000 fab5 	bl	800135c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2204      	movs	r2, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	4812      	ldr	r0, [pc, #72]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000dfa:	f002 fa95 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM4_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8000e04:	f000 faaa 	bl	800135c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480d      	ldr	r0, [pc, #52]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000e10:	f002 fa8a 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM4_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 8000e1a:	f000 fa9f 	bl	800135c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	220c      	movs	r2, #12
 8000e22:	4619      	mov	r1, r3
 8000e24:	4807      	ldr	r0, [pc, #28]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000e26:	f002 fa7f 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM4_Init+0x118>
			!= HAL_OK) {
		Error_Handler();
 8000e30:	f000 fa94 	bl	800135c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000e34:	4803      	ldr	r0, [pc, #12]	@ (8000e44 <MX_TIM4_Init+0x128>)
 8000e36:	f000 fb5d 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 8000e3a:	bf00      	nop
 8000e3c:	3738      	adds	r7, #56	@ 0x38
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000019c 	.word	0x2000019c
 8000e48:	40000800 	.word	0x40000800

08000e4c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	@ (8000e9c <MX_USART1_UART_Init+0x50>)
 8000e54:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000e56:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e5c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000e82:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e84:	f002 ffd4 	bl	8003e30 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000e8e:	f000 fa65 	bl	800135c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200001e4 	.word	0x200001e4
 8000e9c:	40013800 	.word	0x40013800

08000ea0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa4 <MX_GPIO_Init+0x104>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a3a      	ldr	r2, [pc, #232]	@ (8000fa4 <MX_GPIO_Init+0x104>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b38      	ldr	r3, [pc, #224]	@ (8000fa4 <MX_GPIO_Init+0x104>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ecc:	4b35      	ldr	r3, [pc, #212]	@ (8000fa4 <MX_GPIO_Init+0x104>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a34      	ldr	r2, [pc, #208]	@ (8000fa4 <MX_GPIO_Init+0x104>)
 8000ed2:	f043 0320 	orr.w	r3, r3, #32
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b32      	ldr	r3, [pc, #200]	@ (8000fa4 <MX_GPIO_Init+0x104>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0320 	and.w	r3, r3, #32
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa4 <MX_GPIO_Init+0x104>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a2e      	ldr	r2, [pc, #184]	@ (8000fa4 <MX_GPIO_Init+0x104>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <MX_GPIO_Init+0x104>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000efc:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <MX_GPIO_Init+0x104>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a28      	ldr	r2, [pc, #160]	@ (8000fa4 <MX_GPIO_Init+0x104>)
 8000f02:	f043 0308 	orr.w	r3, r3, #8
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b26      	ldr	r3, [pc, #152]	@ (8000fa4 <MX_GPIO_Init+0x104>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0308 	and.w	r3, r3, #8
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f1a:	4823      	ldr	r0, [pc, #140]	@ (8000fa8 <MX_GPIO_Init+0x108>)
 8000f1c:	f001 fa78 	bl	8002410 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, boostWkUp_Pin | powerOn_Pin | LED2_Pin | EN_5V_Pin,
 8000f20:	2200      	movs	r2, #0
 8000f22:	f243 0130 	movw	r1, #12336	@ 0x3030
 8000f26:	4821      	ldr	r0, [pc, #132]	@ (8000fac <MX_GPIO_Init+0x10c>)
 8000f28:	f001 fa72 	bl	8002410 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000f2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f30:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4619      	mov	r1, r3
 8000f44:	4818      	ldr	r0, [pc, #96]	@ (8000fa8 <MX_GPIO_Init+0x108>)
 8000f46:	f001 f8df 	bl	8002108 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <MX_GPIO_Init+0x110>)
 8000f50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4815      	ldr	r0, [pc, #84]	@ (8000fb4 <MX_GPIO_Init+0x114>)
 8000f5e:	f001 f8d3 	bl	8002108 <HAL_GPIO_Init>

	/*Configure GPIO pins : IRQ_Boost_Pin SCL_Boost_Pin SDA_Boost_Pin */
	GPIO_InitStruct.Pin = IRQ_Boost_Pin | SCL_Boost_Pin | SDA_Boost_Pin;
 8000f62:	f640 4304 	movw	r3, #3076	@ 0xc04
 8000f66:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	480d      	ldr	r0, [pc, #52]	@ (8000fac <MX_GPIO_Init+0x10c>)
 8000f78:	f001 f8c6 	bl	8002108 <HAL_GPIO_Init>

	/*Configure GPIO pins : boostWkUp_Pin powerOn_Pin LED2_Pin EN_5V_Pin */
	GPIO_InitStruct.Pin = boostWkUp_Pin | powerOn_Pin | LED2_Pin | EN_5V_Pin;
 8000f7c:	f243 0330 	movw	r3, #12336	@ 0x3030
 8000f80:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_GPIO_Init+0x10c>)
 8000f96:	f001 f8b7 	bl	8002108 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40010c00 	.word	0x40010c00
 8000fb0:	10110000 	.word	0x10110000
 8000fb4:	40010800 	.word	0x40010800

08000fb8 <_write>:

/* USER CODE BEGIN 4 */
/* UART PRINTF MAP */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <_write+0x28>)
 8000fd0:	f002 ff7e 	bl	8003ed0 <HAL_UART_Transmit>
	return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200001e4 	.word	0x200001e4

08000fe4 <setAllBlue>:
	}
}

/* LED EFFECTS */

void setAllBlue(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	WS28XX_SetPixel_RGBW_565(&ws, 0, COLOR_RGB565_CYAN, 100);
 8000fe8:	2364      	movs	r3, #100	@ 0x64
 8000fea:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000fee:	2100      	movs	r1, #0
 8000ff0:	480a      	ldr	r0, [pc, #40]	@ (800101c <setAllBlue+0x38>)
 8000ff2:	f003 fa01 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB565_CYAN, 100);
 8000ff6:	2364      	movs	r3, #100	@ 0x64
 8000ff8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4807      	ldr	r0, [pc, #28]	@ (800101c <setAllBlue+0x38>)
 8001000:	f003 f9fa 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 2, COLOR_RGB565_CYAN, 100);
 8001004:	2364      	movs	r3, #100	@ 0x64
 8001006:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800100a:	2102      	movs	r1, #2
 800100c:	4803      	ldr	r0, [pc, #12]	@ (800101c <setAllBlue+0x38>)
 800100e:	f003 f9f3 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_Update(&ws);
 8001012:	4802      	ldr	r0, [pc, #8]	@ (800101c <setAllBlue+0x38>)
 8001014:	f003 fa64 	bl	80044e0 <WS28XX_Update>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000234 	.word	0x20000234

08001020 <turnAllOff>:

void turnAllOff(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	WS28XX_SetPixel_RGBW_565(&ws, 0, COLOR_RGB888_BLACK, 0);
 8001024:	2300      	movs	r3, #0
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	480a      	ldr	r0, [pc, #40]	@ (8001054 <turnAllOff+0x34>)
 800102c:	f003 f9e4 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB888_BLACK, 0);
 8001030:	2300      	movs	r3, #0
 8001032:	2200      	movs	r2, #0
 8001034:	2101      	movs	r1, #1
 8001036:	4807      	ldr	r0, [pc, #28]	@ (8001054 <turnAllOff+0x34>)
 8001038:	f003 f9de 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 2, COLOR_RGB888_BLACK, 0);
 800103c:	2300      	movs	r3, #0
 800103e:	2200      	movs	r2, #0
 8001040:	2102      	movs	r1, #2
 8001042:	4804      	ldr	r0, [pc, #16]	@ (8001054 <turnAllOff+0x34>)
 8001044:	f003 f9d8 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_Update(&ws);
 8001048:	4802      	ldr	r0, [pc, #8]	@ (8001054 <turnAllOff+0x34>)
 800104a:	f003 fa49 	bl	80044e0 <WS28XX_Update>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000234 	.word	0x20000234

08001058 <GlitteringWavesEffect>:

void GlitteringWavesEffect(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	static uint32_t next_update = 0;
	static uint8_t brightness[3] = { 100, 120, 140 }; // Initial brightness for each LED
	static int8_t delta[3] = { 10, -15, 20 }; // Change in brightness for each LED

	if (HAL_GetTick() >= next_update) {
 800105e:	f000 fca3 	bl	80019a8 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <GlitteringWavesEffect+0xac>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d347      	bcc.n	80010fc <GlitteringWavesEffect+0xa4>
		next_update = HAL_GetTick() + 5; // 5ms periodic update
 800106c:	f000 fc9c 	bl	80019a8 <HAL_GetTick>
 8001070:	4603      	mov	r3, r0
 8001072:	3305      	adds	r3, #5
 8001074:	4a23      	ldr	r2, [pc, #140]	@ (8001104 <GlitteringWavesEffect+0xac>)
 8001076:	6013      	str	r3, [r2, #0]

		for (int i = 0; i < 3; i++) {
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	e038      	b.n	80010f0 <GlitteringWavesEffect+0x98>
			brightness[i] += delta[i];
 800107e:	4a22      	ldr	r2, [pc, #136]	@ (8001108 <GlitteringWavesEffect+0xb0>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	4921      	ldr	r1, [pc, #132]	@ (800110c <GlitteringWavesEffect+0xb4>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	440b      	add	r3, r1
 800108c:	f993 3000 	ldrsb.w	r3, [r3]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4413      	add	r3, r2
 8001094:	b2d9      	uxtb	r1, r3
 8001096:	4a1c      	ldr	r2, [pc, #112]	@ (8001108 <GlitteringWavesEffect+0xb0>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	460a      	mov	r2, r1
 800109e:	701a      	strb	r2, [r3, #0]
			if (brightness[i] >= 255 || brightness[i] <= 100) {
 80010a0:	4a19      	ldr	r2, [pc, #100]	@ (8001108 <GlitteringWavesEffect+0xb0>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2bff      	cmp	r3, #255	@ 0xff
 80010aa:	d005      	beq.n	80010b8 <GlitteringWavesEffect+0x60>
 80010ac:	4a16      	ldr	r2, [pc, #88]	@ (8001108 <GlitteringWavesEffect+0xb0>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b64      	cmp	r3, #100	@ 0x64
 80010b6:	d80d      	bhi.n	80010d4 <GlitteringWavesEffect+0x7c>
				delta[i] = -delta[i]; // Reverse direction at boundaries
 80010b8:	4a14      	ldr	r2, [pc, #80]	@ (800110c <GlitteringWavesEffect+0xb4>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	f993 3000 	ldrsb.w	r3, [r3]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	425b      	negs	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	b259      	sxtb	r1, r3
 80010ca:	4a10      	ldr	r2, [pc, #64]	@ (800110c <GlitteringWavesEffect+0xb4>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	460a      	mov	r2, r1
 80010d2:	701a      	strb	r2, [r3, #0]
			}
			WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_CYAN, brightness[i]);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b299      	uxth	r1, r3
 80010d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <GlitteringWavesEffect+0xb0>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80010e4:	480a      	ldr	r0, [pc, #40]	@ (8001110 <GlitteringWavesEffect+0xb8>)
 80010e6:	f003 f987 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
		for (int i = 0; i < 3; i++) {
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3301      	adds	r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	ddc3      	ble.n	800107e <GlitteringWavesEffect+0x26>
		}
		WS28XX_Update(&ws);
 80010f6:	4806      	ldr	r0, [pc, #24]	@ (8001110 <GlitteringWavesEffect+0xb8>)
 80010f8:	f003 f9f2 	bl	80044e0 <WS28XX_Update>
	}
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2000078c 	.word	0x2000078c
 8001108:	20000000 	.word	0x20000000
 800110c:	20000004 	.word	0x20000004
 8001110:	20000234 	.word	0x20000234

08001114 <EnchantedRippleEffect>:
void EnchantedRippleEffect(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	static uint32_t next_update = 0;
	static uint8_t brightness = 0;
	static int8_t direction = 1; // 1 for increasing, -1 for decreasing

	if (HAL_GetTick() >= next_update) {
 8001118:	f000 fc46 	bl	80019a8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <EnchantedRippleEffect+0x9c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d342      	bcc.n	80011ac <EnchantedRippleEffect+0x98>
		next_update = HAL_GetTick() + 5; // 5ms periodic update
 8001126:	f000 fc3f 	bl	80019a8 <HAL_GetTick>
 800112a:	4603      	mov	r3, r0
 800112c:	3305      	adds	r3, #5
 800112e:	4a20      	ldr	r2, [pc, #128]	@ (80011b0 <EnchantedRippleEffect+0x9c>)
 8001130:	6013      	str	r3, [r2, #0]

		brightness += 5 * direction;
 8001132:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <EnchantedRippleEffect+0xa0>)
 8001134:	f993 3000 	ldrsb.w	r3, [r3]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4413      	add	r3, r2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <EnchantedRippleEffect+0xa4>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <EnchantedRippleEffect+0xa4>)
 800114c:	701a      	strb	r2, [r3, #0]
		if (brightness >= 255 || brightness <= 0) {
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <EnchantedRippleEffect+0xa4>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2bff      	cmp	r3, #255	@ 0xff
 8001154:	d003      	beq.n	800115e <EnchantedRippleEffect+0x4a>
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <EnchantedRippleEffect+0xa4>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d108      	bne.n	8001170 <EnchantedRippleEffect+0x5c>
			direction = -direction; // Reverse at boundaries
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <EnchantedRippleEffect+0xa0>)
 8001160:	f993 3000 	ldrsb.w	r3, [r3]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	425b      	negs	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	b25a      	sxtb	r2, r3
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <EnchantedRippleEffect+0xa0>)
 800116e:	701a      	strb	r2, [r3, #0]
		}

		WS28XX_SetPixel_RGBW_565(&ws, 0, COLOR_RGB565_BLUE, brightness);
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <EnchantedRippleEffect+0xa4>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	221f      	movs	r2, #31
 8001176:	2100      	movs	r1, #0
 8001178:	4810      	ldr	r0, [pc, #64]	@ (80011bc <EnchantedRippleEffect+0xa8>)
 800117a:	f003 f93d 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
		WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB565_GREEN, brightness / 2);
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <EnchantedRippleEffect+0xa4>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	085b      	lsrs	r3, r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800118a:	2101      	movs	r1, #1
 800118c:	480b      	ldr	r0, [pc, #44]	@ (80011bc <EnchantedRippleEffect+0xa8>)
 800118e:	f003 f933 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
		WS28XX_SetPixel_RGBW_565(&ws, 2, COLOR_RGB565_PURPLE, 255 - brightness);
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <EnchantedRippleEffect+0xa4>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	43db      	mvns	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f647 020f 	movw	r2, #30735	@ 0x780f
 800119e:	2102      	movs	r1, #2
 80011a0:	4806      	ldr	r0, [pc, #24]	@ (80011bc <EnchantedRippleEffect+0xa8>)
 80011a2:	f003 f929 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
		WS28XX_Update(&ws);
 80011a6:	4805      	ldr	r0, [pc, #20]	@ (80011bc <EnchantedRippleEffect+0xa8>)
 80011a8:	f003 f99a 	bl	80044e0 <WS28XX_Update>

	}
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000790 	.word	0x20000790
 80011b4:	20000007 	.word	0x20000007
 80011b8:	20000794 	.word	0x20000794
 80011bc:	20000234 	.word	0x20000234

080011c0 <TwinklingGlowEffect>:
void TwinklingGlowEffect(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
	static uint32_t next_update = 0;
	static uint8_t brightness[3] = { 50, 100, 150 }; // Initial brightness for each LED
	static int8_t delta[3] = { 5, -3, 4 }; // Change rate for each LED

	if (HAL_GetTick() >= next_update) {
 80011c6:	f000 fbef 	bl	80019a8 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	4b35      	ldr	r3, [pc, #212]	@ (80012a4 <TwinklingGlowEffect+0xe4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d363      	bcc.n	800129c <TwinklingGlowEffect+0xdc>
		next_update = HAL_GetTick() + 5; // 5ms periodic update
 80011d4:	f000 fbe8 	bl	80019a8 <HAL_GetTick>
 80011d8:	4603      	mov	r3, r0
 80011da:	3305      	adds	r3, #5
 80011dc:	4a31      	ldr	r2, [pc, #196]	@ (80012a4 <TwinklingGlowEffect+0xe4>)
 80011de:	6013      	str	r3, [r2, #0]

		for (int i = 0; i < 3; i++) {
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	e054      	b.n	8001290 <TwinklingGlowEffect+0xd0>
			brightness[i] += delta[i];
 80011e6:	4a30      	ldr	r2, [pc, #192]	@ (80012a8 <TwinklingGlowEffect+0xe8>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	781a      	ldrb	r2, [r3, #0]
 80011ee:	492f      	ldr	r1, [pc, #188]	@ (80012ac <TwinklingGlowEffect+0xec>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	440b      	add	r3, r1
 80011f4:	f993 3000 	ldrsb.w	r3, [r3]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	b2d9      	uxtb	r1, r3
 80011fe:	4a2a      	ldr	r2, [pc, #168]	@ (80012a8 <TwinklingGlowEffect+0xe8>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	460a      	mov	r2, r1
 8001206:	701a      	strb	r2, [r3, #0]
			if (brightness[i] >= 255 || brightness[i] <= 50) {
 8001208:	4a27      	ldr	r2, [pc, #156]	@ (80012a8 <TwinklingGlowEffect+0xe8>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2bff      	cmp	r3, #255	@ 0xff
 8001212:	d005      	beq.n	8001220 <TwinklingGlowEffect+0x60>
 8001214:	4a24      	ldr	r2, [pc, #144]	@ (80012a8 <TwinklingGlowEffect+0xe8>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b32      	cmp	r3, #50	@ 0x32
 800121e:	d829      	bhi.n	8001274 <TwinklingGlowEffect+0xb4>
				delta[i] = -delta[i]; // Reverse direction at boundaries
 8001220:	4a22      	ldr	r2, [pc, #136]	@ (80012ac <TwinklingGlowEffect+0xec>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	f993 3000 	ldrsb.w	r3, [r3]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	425b      	negs	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	b259      	sxtb	r1, r3
 8001232:	4a1e      	ldr	r2, [pc, #120]	@ (80012ac <TwinklingGlowEffect+0xec>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	460a      	mov	r2, r1
 800123a:	701a      	strb	r2, [r3, #0]
				// Add randomness for a twinkle effect
				if (brightness[i] <= 50) {
 800123c:	4a1a      	ldr	r2, [pc, #104]	@ (80012a8 <TwinklingGlowEffect+0xe8>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b32      	cmp	r3, #50	@ 0x32
 8001246:	d815      	bhi.n	8001274 <TwinklingGlowEffect+0xb4>
					delta[i] = (rand() % 5) + 3; // Randomize twinkle speed
 8001248:	f003 f9bc 	bl	80045c4 <rand>
 800124c:	4602      	mov	r2, r0
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <TwinklingGlowEffect+0xf0>)
 8001250:	fb83 1302 	smull	r1, r3, r3, r2
 8001254:	1059      	asrs	r1, r3, #1
 8001256:	17d3      	asrs	r3, r2, #31
 8001258:	1ac9      	subs	r1, r1, r3
 800125a:	460b      	mov	r3, r1
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	1ad1      	subs	r1, r2, r3
 8001262:	b2cb      	uxtb	r3, r1
 8001264:	3303      	adds	r3, #3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	b259      	sxtb	r1, r3
 800126a:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <TwinklingGlowEffect+0xec>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	460a      	mov	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
				}
			}
			WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_AQUA, brightness[i]);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	b299      	uxth	r1, r3
 8001278:	4a0b      	ldr	r2, [pc, #44]	@ (80012a8 <TwinklingGlowEffect+0xe8>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	f645 521c 	movw	r2, #23836	@ 0x5d1c
 8001284:	480b      	ldr	r0, [pc, #44]	@ (80012b4 <TwinklingGlowEffect+0xf4>)
 8001286:	f003 f8b7 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
		for (int i = 0; i < 3; i++) {
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3301      	adds	r3, #1
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b02      	cmp	r3, #2
 8001294:	dda7      	ble.n	80011e6 <TwinklingGlowEffect+0x26>
		}
		WS28XX_Update(&ws);
 8001296:	4807      	ldr	r0, [pc, #28]	@ (80012b4 <TwinklingGlowEffect+0xf4>)
 8001298:	f003 f922 	bl	80044e0 <WS28XX_Update>
	}
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000798 	.word	0x20000798
 80012a8:	20000008 	.word	0x20000008
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	66666667 	.word	0x66666667
 80012b4:	20000234 	.word	0x20000234

080012b8 <CarTurnSignalEffect>:

void CarTurnSignalEffect(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
	static uint32_t next_update = 0;
	static bool leds_on = false; // State to track whether the LEDs are on or off

	if (HAL_GetTick() >= next_update) {
 80012be:	f000 fb73 	bl	80019a8 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <CarTurnSignalEffect+0x98>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d33d      	bcc.n	8001348 <CarTurnSignalEffect+0x90>
		next_update = HAL_GetTick() + (leds_on ? 300 : 700); // 300ms ON, 700ms OFF for classic timing
 80012cc:	f000 fb6c 	bl	80019a8 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <CarTurnSignalEffect+0x9c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <CarTurnSignalEffect+0x28>
 80012da:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80012de:	e001      	b.n	80012e4 <CarTurnSignalEffect+0x2c>
 80012e0:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80012e4:	4413      	add	r3, r2
 80012e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001350 <CarTurnSignalEffect+0x98>)
 80012e8:	6013      	str	r3, [r2, #0]

		if (leds_on) {
 80012ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <CarTurnSignalEffect+0x9c>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d013      	beq.n	800131a <CarTurnSignalEffect+0x62>
			// Turn off all LEDs
			for (int i = 0; i < 3; i++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	e009      	b.n	800130c <CarTurnSignalEffect+0x54>
				WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_BLACK, 0);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	b299      	uxth	r1, r3
 80012fc:	2300      	movs	r3, #0
 80012fe:	2200      	movs	r2, #0
 8001300:	4815      	ldr	r0, [pc, #84]	@ (8001358 <CarTurnSignalEffect+0xa0>)
 8001302:	f003 f879 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
			for (int i = 0; i < 3; i++) {
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3301      	adds	r3, #1
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	ddf2      	ble.n	80012f8 <CarTurnSignalEffect+0x40>
			}
			leds_on = false;
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <CarTurnSignalEffect+0x9c>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	e013      	b.n	8001342 <CarTurnSignalEffect+0x8a>
		} else {
			// Turn on all LEDs with Amber
			for (int i = 0; i < 3; i++) {
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	e00a      	b.n	8001336 <CarTurnSignalEffect+0x7e>
				WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_ORANGE, 255);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b299      	uxth	r1, r3
 8001324:	23ff      	movs	r3, #255	@ 0xff
 8001326:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 800132a:	480b      	ldr	r0, [pc, #44]	@ (8001358 <CarTurnSignalEffect+0xa0>)
 800132c:	f003 f864 	bl	80043f8 <WS28XX_SetPixel_RGBW_565>
			for (int i = 0; i < 3; i++) {
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	2b02      	cmp	r3, #2
 800133a:	ddf1      	ble.n	8001320 <CarTurnSignalEffect+0x68>
			}
			leds_on = true;
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <CarTurnSignalEffect+0x9c>)
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
		}
		WS28XX_Update(&ws);
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <CarTurnSignalEffect+0xa0>)
 8001344:	f003 f8cc 	bl	80044e0 <WS28XX_Update>
	}
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000079c 	.word	0x2000079c
 8001354:	200007a0 	.word	0x200007a0
 8001358:	20000234 	.word	0x20000234

0800135c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <Error_Handler+0x8>

08001368 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_MspInit+0x5c>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a14      	ldr	r2, [pc, #80]	@ (80013c4 <HAL_MspInit+0x5c>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <HAL_MspInit+0x5c>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <HAL_MspInit+0x5c>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a0e      	ldr	r2, [pc, #56]	@ (80013c4 <HAL_MspInit+0x5c>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <HAL_MspInit+0x5c>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <HAL_MspInit+0x60>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <HAL_MspInit+0x60>)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000

080013cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <HAL_ADC_MspInit+0x6c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d121      	bne.n	8001430 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <HAL_ADC_MspInit+0x70>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a12      	ldr	r2, [pc, #72]	@ (800143c <HAL_ADC_MspInit+0x70>)
 80013f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b10      	ldr	r3, [pc, #64]	@ (800143c <HAL_ADC_MspInit+0x70>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <HAL_ADC_MspInit+0x70>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a0c      	ldr	r2, [pc, #48]	@ (800143c <HAL_ADC_MspInit+0x70>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <HAL_ADC_MspInit+0x70>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800141c:	2330      	movs	r3, #48	@ 0x30
 800141e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001420:	2303      	movs	r3, #3
 8001422:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	4619      	mov	r1, r3
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <HAL_ADC_MspInit+0x74>)
 800142c:	f000 fe6c 	bl	8002108 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001430:	bf00      	nop
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40012400 	.word	0x40012400
 800143c:	40021000 	.word	0x40021000
 8001440:	40010800 	.word	0x40010800

08001444 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a24      	ldr	r2, [pc, #144]	@ (80014e4 <HAL_TIM_Base_MspInit+0xa0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d10c      	bne.n	8001470 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001456:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <HAL_TIM_Base_MspInit+0xa4>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	4a23      	ldr	r2, [pc, #140]	@ (80014e8 <HAL_TIM_Base_MspInit+0xa4>)
 800145c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001460:	6193      	str	r3, [r2, #24]
 8001462:	4b21      	ldr	r3, [pc, #132]	@ (80014e8 <HAL_TIM_Base_MspInit+0xa4>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800146e:	e034      	b.n	80014da <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001478:	d10c      	bne.n	8001494 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147a:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <HAL_TIM_Base_MspInit+0xa4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a1a      	ldr	r2, [pc, #104]	@ (80014e8 <HAL_TIM_Base_MspInit+0xa4>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	61d3      	str	r3, [r2, #28]
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <HAL_TIM_Base_MspInit+0xa4>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
}
 8001492:	e022      	b.n	80014da <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a14      	ldr	r2, [pc, #80]	@ (80014ec <HAL_TIM_Base_MspInit+0xa8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d10c      	bne.n	80014b8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <HAL_TIM_Base_MspInit+0xa4>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <HAL_TIM_Base_MspInit+0xa4>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <HAL_TIM_Base_MspInit+0xa4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
}
 80014b6:	e010      	b.n	80014da <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0c      	ldr	r2, [pc, #48]	@ (80014f0 <HAL_TIM_Base_MspInit+0xac>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10b      	bne.n	80014da <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <HAL_TIM_Base_MspInit+0xa4>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <HAL_TIM_Base_MspInit+0xa4>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	61d3      	str	r3, [r2, #28]
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_TIM_Base_MspInit+0xa4>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
}
 80014da:	bf00      	nop
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	40012c00 	.word	0x40012c00
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40000400 	.word	0x40000400
 80014f0:	40000800 	.word	0x40000800

080014f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	@ 0x30
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001512:	d143      	bne.n	800159c <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b4d      	ldr	r3, [pc, #308]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a4c      	ldr	r2, [pc, #304]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b4a      	ldr	r3, [pc, #296]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	4b47      	ldr	r3, [pc, #284]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a46      	ldr	r2, [pc, #280]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b44      	ldr	r3, [pc, #272]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8001544:	f248 030c 	movw	r3, #32780	@ 0x800c
 8001548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2302      	movs	r3, #2
 8001550:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	483d      	ldr	r0, [pc, #244]	@ (8001650 <HAL_TIM_MspPostInit+0x15c>)
 800155a:	f000 fdd5 	bl	8002108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800155e:	2308      	movs	r3, #8
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2302      	movs	r3, #2
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4838      	ldr	r0, [pc, #224]	@ (8001654 <HAL_TIM_MspPostInit+0x160>)
 8001572:	f000 fdc9 	bl	8002108 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001576:	4b38      	ldr	r3, [pc, #224]	@ (8001658 <HAL_TIM_MspPostInit+0x164>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800157c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001586:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800158c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800158e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001594:	4a30      	ldr	r2, [pc, #192]	@ (8001658 <HAL_TIM_MspPostInit+0x164>)
 8001596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001598:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800159a:	e053      	b.n	8001644 <HAL_TIM_MspPostInit+0x150>
  else if(htim->Instance==TIM3)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a2e      	ldr	r2, [pc, #184]	@ (800165c <HAL_TIM_MspPostInit+0x168>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d130      	bne.n	8001608 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b29      	ldr	r3, [pc, #164]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	4a28      	ldr	r2, [pc, #160]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6193      	str	r3, [r2, #24]
 80015b2:	4b26      	ldr	r3, [pc, #152]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b23      	ldr	r3, [pc, #140]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	4a22      	ldr	r2, [pc, #136]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	6193      	str	r3, [r2, #24]
 80015ca:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015d6:	23c0      	movs	r3, #192	@ 0xc0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2302      	movs	r3, #2
 80015e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4819      	ldr	r0, [pc, #100]	@ (8001650 <HAL_TIM_MspPostInit+0x15c>)
 80015ea:	f000 fd8d 	bl	8002108 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ee:	2303      	movs	r3, #3
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2302      	movs	r3, #2
 80015f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4814      	ldr	r0, [pc, #80]	@ (8001654 <HAL_TIM_MspPostInit+0x160>)
 8001602:	f000 fd81 	bl	8002108 <HAL_GPIO_Init>
}
 8001606:	e01d      	b.n	8001644 <HAL_TIM_MspPostInit+0x150>
  else if(htim->Instance==TIM4)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <HAL_TIM_MspPostInit+0x16c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d118      	bne.n	8001644 <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	4a0d      	ldr	r2, [pc, #52]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	6193      	str	r3, [r2, #24]
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_TIM_MspPostInit+0x158>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800162a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2302      	movs	r3, #2
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <HAL_TIM_MspPostInit+0x160>)
 8001640:	f000 fd62 	bl	8002108 <HAL_GPIO_Init>
}
 8001644:	bf00      	nop
 8001646:	3730      	adds	r7, #48	@ 0x30
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	40010800 	.word	0x40010800
 8001654:	40010c00 	.word	0x40010c00
 8001658:	40010000 	.word	0x40010000
 800165c:	40000400 	.word	0x40000400
 8001660:	40000800 	.word	0x40000800

08001664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a1c      	ldr	r2, [pc, #112]	@ (80016f0 <HAL_UART_MspInit+0x8c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d131      	bne.n	80016e8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_UART_MspInit+0x90>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a1a      	ldr	r2, [pc, #104]	@ (80016f4 <HAL_UART_MspInit+0x90>)
 800168a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_UART_MspInit+0x90>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_UART_MspInit+0x90>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a14      	ldr	r2, [pc, #80]	@ (80016f4 <HAL_UART_MspInit+0x90>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_UART_MspInit+0x90>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0310 	add.w	r3, r7, #16
 80016c6:	4619      	mov	r1, r3
 80016c8:	480b      	ldr	r0, [pc, #44]	@ (80016f8 <HAL_UART_MspInit+0x94>)
 80016ca:	f000 fd1d 	bl	8002108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <HAL_UART_MspInit+0x94>)
 80016e4:	f000 fd10 	bl	8002108 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40013800 	.word	0x40013800
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010800 	.word	0x40010800

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <NMI_Handler+0x4>

08001704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <MemManage_Handler+0x4>

08001714 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <UsageFault_Handler+0x4>

08001724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 f91a 	bl	8001984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return 1;
 8001758:	2301      	movs	r3, #1
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <_kill>:

int _kill(int pid, int sig)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800176c:	f003 f8ce 	bl	800490c <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	2216      	movs	r2, #22
 8001774:	601a      	str	r2, [r3, #0]
  return -1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_exit>:

void _exit (int status)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800178a:	f04f 31ff 	mov.w	r1, #4294967295
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffe7 	bl	8001762 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <_exit+0x12>

08001798 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e00a      	b.n	80017c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017aa:	f3af 8000 	nop.w
 80017ae:	4601      	mov	r1, r0
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	b2ca      	uxtb	r2, r1
 80017b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbf0      	blt.n	80017aa <_read+0x12>
  }

  return len;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017f8:	605a      	str	r2, [r3, #4]
  return 0;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <_isatty>:

int _isatty(int file)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800181a:	b480      	push	{r7}
 800181c:	b085      	sub	sp, #20
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
	...

08001834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800183c:	4a14      	ldr	r2, [pc, #80]	@ (8001890 <_sbrk+0x5c>)
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <_sbrk+0x60>)
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001848:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <_sbrk+0x64>)
 8001852:	4a12      	ldr	r2, [pc, #72]	@ (800189c <_sbrk+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	429a      	cmp	r2, r3
 8001862:	d207      	bcs.n	8001874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001864:	f003 f852 	bl	800490c <__errno>
 8001868:	4603      	mov	r3, r0
 800186a:	220c      	movs	r2, #12
 800186c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	e009      	b.n	8001888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187a:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	4a05      	ldr	r2, [pc, #20]	@ (8001898 <_sbrk+0x64>)
 8001884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20005000 	.word	0x20005000
 8001894:	00000400 	.word	0x00000400
 8001898:	200007a4 	.word	0x200007a4
 800189c:	200008f8 	.word	0x200008f8

080018a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018ac:	f7ff fff8 	bl	80018a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b0:	480b      	ldr	r0, [pc, #44]	@ (80018e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018b2:	490c      	ldr	r1, [pc, #48]	@ (80018e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018b4:	4a0c      	ldr	r2, [pc, #48]	@ (80018e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a09      	ldr	r2, [pc, #36]	@ (80018ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018c8:	4c09      	ldr	r4, [pc, #36]	@ (80018f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d6:	f003 f81f 	bl	8004918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018da:	f7fe feb5 	bl	8000648 <main>
  bx lr
 80018de:	4770      	bx	lr
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80018e8:	080057f0 	.word	0x080057f0
  ldr r2, =_sbss
 80018ec:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80018f0:	200008f8 	.word	0x200008f8

080018f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC1_2_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <HAL_Init+0x28>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a07      	ldr	r2, [pc, #28]	@ (8001920 <HAL_Init+0x28>)
 8001902:	f043 0310 	orr.w	r3, r3, #16
 8001906:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001908:	2003      	movs	r0, #3
 800190a:	f000 fb3d 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190e:	200f      	movs	r0, #15
 8001910:	f000 f808 	bl	8001924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001914:	f7ff fd28 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40022000 	.word	0x40022000

08001924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_InitTick+0x54>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_InitTick+0x58>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193a:	fbb3 f3f1 	udiv	r3, r3, r1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fb47 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00e      	b.n	8001970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d80a      	bhi.n	800196e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f000 fb1d 	bl	8001f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001964:	4a06      	ldr	r2, [pc, #24]	@ (8001980 <HAL_InitTick+0x5c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000010 	.word	0x20000010
 800197c:	20000018 	.word	0x20000018
 8001980:	20000014 	.word	0x20000014

08001984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_IncTick+0x1c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_IncTick+0x20>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a03      	ldr	r2, [pc, #12]	@ (80019a4 <HAL_IncTick+0x20>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	20000018 	.word	0x20000018
 80019a4:	200007a8 	.word	0x200007a8

080019a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b02      	ldr	r3, [pc, #8]	@ (80019b8 <HAL_GetTick+0x10>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	200007a8 	.word	0x200007a8

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff fff0 	bl	80019a8 <HAL_GetTick>
 80019c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d4:	d005      	beq.n	80019e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_Delay+0x44>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019e2:	bf00      	nop
 80019e4:	f7ff ffe0 	bl	80019a8 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f7      	bhi.n	80019e4 <HAL_Delay+0x28>
  {
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000018 	.word	0x20000018

08001a04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0be      	b.n	8001ba4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fcc2 	bl	80013cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f9ab 	bl	8001da4 <ADC_ConversionStop_Disable>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 8099 	bne.w	8001b92 <HAL_ADC_Init+0x18e>
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f040 8095 	bne.w	8001b92 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a70:	f023 0302 	bic.w	r3, r3, #2
 8001a74:	f043 0202 	orr.w	r2, r3, #2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a84:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7b1b      	ldrb	r3, [r3, #12]
 8001a8a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a8c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a9c:	d003      	beq.n	8001aa6 <HAL_ADC_Init+0xa2>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d102      	bne.n	8001aac <HAL_ADC_Init+0xa8>
 8001aa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aaa:	e000      	b.n	8001aae <HAL_ADC_Init+0xaa>
 8001aac:	2300      	movs	r3, #0
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7d1b      	ldrb	r3, [r3, #20]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d119      	bne.n	8001af0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7b1b      	ldrb	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	035a      	lsls	r2, r3, #13
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	e00b      	b.n	8001af0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001adc:	f043 0220 	orr.w	r2, r3, #32
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	4b28      	ldr	r3, [pc, #160]	@ (8001bac <HAL_ADC_Init+0x1a8>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b20:	d003      	beq.n	8001b2a <HAL_ADC_Init+0x126>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d104      	bne.n	8001b34 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	051b      	lsls	r3, r3, #20
 8001b32:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <HAL_ADC_Init+0x1ac>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d10b      	bne.n	8001b70 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b6e:	e018      	b.n	8001ba2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b74:	f023 0312 	bic.w	r3, r3, #18
 8001b78:	f043 0210 	orr.w	r2, r3, #16
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b90:	e007      	b.n	8001ba2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b96:	f043 0210 	orr.w	r2, r3, #16
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	ffe1f7fd 	.word	0xffe1f7fd
 8001bb0:	ff1f0efe 	.word	0xff1f0efe

08001bb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x20>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e0dc      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1da>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b06      	cmp	r3, #6
 8001be2:	d81c      	bhi.n	8001c1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b05      	subs	r3, #5
 8001bf6:	221f      	movs	r2, #31
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4019      	ands	r1, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b05      	subs	r3, #5
 8001c10:	fa00 f203 	lsl.w	r2, r0, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c1c:	e03c      	b.n	8001c98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d81c      	bhi.n	8001c60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3b23      	subs	r3, #35	@ 0x23
 8001c38:	221f      	movs	r2, #31
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	4019      	ands	r1, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b23      	subs	r3, #35	@ 0x23
 8001c52:	fa00 f203 	lsl.w	r2, r0, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c5e:	e01b      	b.n	8001c98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b41      	subs	r3, #65	@ 0x41
 8001c72:	221f      	movs	r2, #31
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	4019      	ands	r1, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b41      	subs	r3, #65	@ 0x41
 8001c8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	d91c      	bls.n	8001cda <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68d9      	ldr	r1, [r3, #12]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b1e      	subs	r3, #30
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4019      	ands	r1, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6898      	ldr	r0, [r3, #8]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b1e      	subs	r3, #30
 8001ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	e019      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6919      	ldr	r1, [r3, #16]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	2207      	movs	r2, #7
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	4019      	ands	r1, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6898      	ldr	r0, [r3, #8]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	fa00 f203 	lsl.w	r2, r0, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	d003      	beq.n	8001d1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d1a:	2b11      	cmp	r3, #17
 8001d1c:	d132      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1d      	ldr	r2, [pc, #116]	@ (8001d98 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d125      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d126      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001d44:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d11a      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4e:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <HAL_ADC_ConfigChannel+0x1e8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a13      	ldr	r2, [pc, #76]	@ (8001da0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	0c9a      	lsrs	r2, r3, #18
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f9      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x1b2>
 8001d72:	e007      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d78:	f043 0220 	orr.w	r2, r3, #32
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40012400 	.word	0x40012400
 8001d9c:	20000010 	.word	0x20000010
 8001da0:	431bde83 	.word	0x431bde83

08001da4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d12e      	bne.n	8001e1c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dce:	f7ff fdeb 	bl	80019a8 <HAL_GetTick>
 8001dd2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dd4:	e01b      	b.n	8001e0e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dd6:	f7ff fde7 	bl	80019a8 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d914      	bls.n	8001e0e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d10d      	bne.n	8001e0e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df6:	f043 0210 	orr.w	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e007      	b.n	8001e1e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d0dc      	beq.n	8001dd6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	@ (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	@ (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
         );
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	@ 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f54:	d301      	bcc.n	8001f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00f      	b.n	8001f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <SysTick_Config+0x40>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f62:	210f      	movs	r1, #15
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f7ff ff90 	bl	8001e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <SysTick_Config+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f72:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <SysTick_Config+0x40>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	e000e010 	.word	0xe000e010

08001f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff49 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb0:	f7ff ff5e 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	6978      	ldr	r0, [r7, #20]
 8001fbc:	f7ff ff90 	bl	8001ee0 <NVIC_EncodePriority>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff5f 	bl	8001e8c <__NVIC_SetPriority>
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffb0 	bl	8001f44 <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_DMA_Start_IT+0x20>
 800200a:	2302      	movs	r3, #2
 800200c:	e04b      	b.n	80020a6 <HAL_DMA_Start_IT+0xb8>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d13a      	bne.n	8002098 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f831 	bl	80020ae <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 020e 	orr.w	r2, r2, #14
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e00f      	b.n	8002086 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0204 	bic.w	r2, r2, #4
 8002074:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 020a 	orr.w	r2, r2, #10
 8002084:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f042 0201 	orr.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	e005      	b.n	80020a4 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020a0:	2302      	movs	r3, #2
 80020a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b10      	cmp	r3, #16
 80020da:	d108      	bne.n	80020ee <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020ec:	e007      	b.n	80020fe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	60da      	str	r2, [r3, #12]
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002108:	b480      	push	{r7}
 800210a:	b08b      	sub	sp, #44	@ 0x2c
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211a:	e169      	b.n	80023f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800211c:	2201      	movs	r2, #1
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	429a      	cmp	r2, r3
 8002136:	f040 8158 	bne.w	80023ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4a9a      	ldr	r2, [pc, #616]	@ (80023a8 <HAL_GPIO_Init+0x2a0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d05e      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002144:	4a98      	ldr	r2, [pc, #608]	@ (80023a8 <HAL_GPIO_Init+0x2a0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d875      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 800214a:	4a98      	ldr	r2, [pc, #608]	@ (80023ac <HAL_GPIO_Init+0x2a4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d058      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002150:	4a96      	ldr	r2, [pc, #600]	@ (80023ac <HAL_GPIO_Init+0x2a4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d86f      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 8002156:	4a96      	ldr	r2, [pc, #600]	@ (80023b0 <HAL_GPIO_Init+0x2a8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d052      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 800215c:	4a94      	ldr	r2, [pc, #592]	@ (80023b0 <HAL_GPIO_Init+0x2a8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d869      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 8002162:	4a94      	ldr	r2, [pc, #592]	@ (80023b4 <HAL_GPIO_Init+0x2ac>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d04c      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002168:	4a92      	ldr	r2, [pc, #584]	@ (80023b4 <HAL_GPIO_Init+0x2ac>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d863      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 800216e:	4a92      	ldr	r2, [pc, #584]	@ (80023b8 <HAL_GPIO_Init+0x2b0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d046      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
 8002174:	4a90      	ldr	r2, [pc, #576]	@ (80023b8 <HAL_GPIO_Init+0x2b0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d85d      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 800217a:	2b12      	cmp	r3, #18
 800217c:	d82a      	bhi.n	80021d4 <HAL_GPIO_Init+0xcc>
 800217e:	2b12      	cmp	r3, #18
 8002180:	d859      	bhi.n	8002236 <HAL_GPIO_Init+0x12e>
 8002182:	a201      	add	r2, pc, #4	@ (adr r2, 8002188 <HAL_GPIO_Init+0x80>)
 8002184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002188:	08002203 	.word	0x08002203
 800218c:	080021dd 	.word	0x080021dd
 8002190:	080021ef 	.word	0x080021ef
 8002194:	08002231 	.word	0x08002231
 8002198:	08002237 	.word	0x08002237
 800219c:	08002237 	.word	0x08002237
 80021a0:	08002237 	.word	0x08002237
 80021a4:	08002237 	.word	0x08002237
 80021a8:	08002237 	.word	0x08002237
 80021ac:	08002237 	.word	0x08002237
 80021b0:	08002237 	.word	0x08002237
 80021b4:	08002237 	.word	0x08002237
 80021b8:	08002237 	.word	0x08002237
 80021bc:	08002237 	.word	0x08002237
 80021c0:	08002237 	.word	0x08002237
 80021c4:	08002237 	.word	0x08002237
 80021c8:	08002237 	.word	0x08002237
 80021cc:	080021e5 	.word	0x080021e5
 80021d0:	080021f9 	.word	0x080021f9
 80021d4:	4a79      	ldr	r2, [pc, #484]	@ (80023bc <HAL_GPIO_Init+0x2b4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d013      	beq.n	8002202 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021da:	e02c      	b.n	8002236 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	623b      	str	r3, [r7, #32]
          break;
 80021e2:	e029      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	3304      	adds	r3, #4
 80021ea:	623b      	str	r3, [r7, #32]
          break;
 80021ec:	e024      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	3308      	adds	r3, #8
 80021f4:	623b      	str	r3, [r7, #32]
          break;
 80021f6:	e01f      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	330c      	adds	r3, #12
 80021fe:	623b      	str	r3, [r7, #32]
          break;
 8002200:	e01a      	b.n	8002238 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800220a:	2304      	movs	r3, #4
 800220c:	623b      	str	r3, [r7, #32]
          break;
 800220e:	e013      	b.n	8002238 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002218:	2308      	movs	r3, #8
 800221a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	611a      	str	r2, [r3, #16]
          break;
 8002222:	e009      	b.n	8002238 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002224:	2308      	movs	r3, #8
 8002226:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	615a      	str	r2, [r3, #20]
          break;
 800222e:	e003      	b.n	8002238 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
          break;
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x130>
          break;
 8002236:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2bff      	cmp	r3, #255	@ 0xff
 800223c:	d801      	bhi.n	8002242 <HAL_GPIO_Init+0x13a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	e001      	b.n	8002246 <HAL_GPIO_Init+0x13e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
 8002246:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2bff      	cmp	r3, #255	@ 0xff
 800224c:	d802      	bhi.n	8002254 <HAL_GPIO_Init+0x14c>
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	e002      	b.n	800225a <HAL_GPIO_Init+0x152>
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	3b08      	subs	r3, #8
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	210f      	movs	r1, #15
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	401a      	ands	r2, r3
 800226c:	6a39      	ldr	r1, [r7, #32]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	431a      	orrs	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80b1 	beq.w	80023ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002288:	4b4d      	ldr	r3, [pc, #308]	@ (80023c0 <HAL_GPIO_Init+0x2b8>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	4a4c      	ldr	r2, [pc, #304]	@ (80023c0 <HAL_GPIO_Init+0x2b8>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6193      	str	r3, [r2, #24]
 8002294:	4b4a      	ldr	r3, [pc, #296]	@ (80023c0 <HAL_GPIO_Init+0x2b8>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022a0:	4a48      	ldr	r2, [pc, #288]	@ (80023c4 <HAL_GPIO_Init+0x2bc>)
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	3302      	adds	r3, #2
 80022a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	220f      	movs	r2, #15
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a40      	ldr	r2, [pc, #256]	@ (80023c8 <HAL_GPIO_Init+0x2c0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <HAL_GPIO_Init+0x1ec>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a3f      	ldr	r2, [pc, #252]	@ (80023cc <HAL_GPIO_Init+0x2c4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00d      	beq.n	80022f0 <HAL_GPIO_Init+0x1e8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a3e      	ldr	r2, [pc, #248]	@ (80023d0 <HAL_GPIO_Init+0x2c8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d007      	beq.n	80022ec <HAL_GPIO_Init+0x1e4>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a3d      	ldr	r2, [pc, #244]	@ (80023d4 <HAL_GPIO_Init+0x2cc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_GPIO_Init+0x1e0>
 80022e4:	2303      	movs	r3, #3
 80022e6:	e006      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022e8:	2304      	movs	r3, #4
 80022ea:	e004      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_GPIO_Init+0x1ee>
 80022f4:	2300      	movs	r3, #0
 80022f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f8:	f002 0203 	and.w	r2, r2, #3
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	4093      	lsls	r3, r2
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002306:	492f      	ldr	r1, [pc, #188]	@ (80023c4 <HAL_GPIO_Init+0x2bc>)
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002320:	4b2d      	ldr	r3, [pc, #180]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	492c      	ldr	r1, [pc, #176]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800232e:	4b2a      	ldr	r3, [pc, #168]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	43db      	mvns	r3, r3
 8002336:	4928      	ldr	r1, [pc, #160]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002338:	4013      	ands	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002348:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4922      	ldr	r1, [pc, #136]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	60cb      	str	r3, [r1, #12]
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002356:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	43db      	mvns	r3, r3
 800235e:	491e      	ldr	r1, [pc, #120]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002360:	4013      	ands	r3, r2
 8002362:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002370:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4918      	ldr	r1, [pc, #96]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800237e:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	43db      	mvns	r3, r3
 8002386:	4914      	ldr	r1, [pc, #80]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002388:	4013      	ands	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d021      	beq.n	80023dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002398:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	490e      	ldr	r1, [pc, #56]	@ (80023d8 <HAL_GPIO_Init+0x2d0>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	e021      	b.n	80023ea <HAL_GPIO_Init+0x2e2>
 80023a6:	bf00      	nop
 80023a8:	10320000 	.word	0x10320000
 80023ac:	10310000 	.word	0x10310000
 80023b0:	10220000 	.word	0x10220000
 80023b4:	10210000 	.word	0x10210000
 80023b8:	10120000 	.word	0x10120000
 80023bc:	10110000 	.word	0x10110000
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40010800 	.word	0x40010800
 80023cc:	40010c00 	.word	0x40010c00
 80023d0:	40011000 	.word	0x40011000
 80023d4:	40011400 	.word	0x40011400
 80023d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	@ (800240c <HAL_GPIO_Init+0x304>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4909      	ldr	r1, [pc, #36]	@ (800240c <HAL_GPIO_Init+0x304>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	3301      	adds	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f47f ae8e 	bne.w	800211c <HAL_GPIO_Init+0x14>
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	372c      	adds	r7, #44	@ 0x2c
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
 800241c:	4613      	mov	r3, r2
 800241e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800242c:	e003      	b.n	8002436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800242e:	887b      	ldrh	r3, [r7, #2]
 8002430:	041a      	lsls	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	611a      	str	r2, [r3, #16]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4013      	ands	r3, r2
 8002458:	041a      	lsls	r2, r3, #16
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	43d9      	mvns	r1, r3
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	400b      	ands	r3, r1
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	611a      	str	r2, [r3, #16]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
	...

08002474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e272      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8087 	beq.w	80025a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002494:	4b92      	ldr	r3, [pc, #584]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b04      	cmp	r3, #4
 800249e:	d00c      	beq.n	80024ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024a0:	4b8f      	ldr	r3, [pc, #572]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d112      	bne.n	80024d2 <HAL_RCC_OscConfig+0x5e>
 80024ac:	4b8c      	ldr	r3, [pc, #560]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b8:	d10b      	bne.n	80024d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ba:	4b89      	ldr	r3, [pc, #548]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d06c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x12c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d168      	bne.n	80025a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e24c      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x76>
 80024dc:	4b80      	ldr	r3, [pc, #512]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a7f      	ldr	r2, [pc, #508]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	e02e      	b.n	8002548 <HAL_RCC_OscConfig+0xd4>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x98>
 80024f2:	4b7b      	ldr	r3, [pc, #492]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7a      	ldr	r2, [pc, #488]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b78      	ldr	r3, [pc, #480]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a77      	ldr	r2, [pc, #476]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002504:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e01d      	b.n	8002548 <HAL_RCC_OscConfig+0xd4>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0xbc>
 8002516:	4b72      	ldr	r3, [pc, #456]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a71      	ldr	r2, [pc, #452]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b6f      	ldr	r3, [pc, #444]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6e      	ldr	r2, [pc, #440]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0xd4>
 8002530:	4b6b      	ldr	r3, [pc, #428]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a6a      	ldr	r2, [pc, #424]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b68      	ldr	r3, [pc, #416]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a67      	ldr	r2, [pc, #412]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002546:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d013      	beq.n	8002578 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff fa2a 	bl	80019a8 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002558:	f7ff fa26 	bl	80019a8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	@ 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e200      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b5d      	ldr	r3, [pc, #372]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0xe4>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fa16 	bl	80019a8 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002580:	f7ff fa12 	bl	80019a8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	@ 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1ec      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	4b53      	ldr	r3, [pc, #332]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x10c>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d063      	beq.n	8002676 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ae:	4b4c      	ldr	r3, [pc, #304]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ba:	4b49      	ldr	r3, [pc, #292]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d11c      	bne.n	8002600 <HAL_RCC_OscConfig+0x18c>
 80025c6:	4b46      	ldr	r3, [pc, #280]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d116      	bne.n	8002600 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	4b43      	ldr	r3, [pc, #268]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x176>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e1c0      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ea:	4b3d      	ldr	r3, [pc, #244]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4939      	ldr	r1, [pc, #228]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	e03a      	b.n	8002676 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002608:	4b36      	ldr	r3, [pc, #216]	@ (80026e4 <HAL_RCC_OscConfig+0x270>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff f9cb 	bl	80019a8 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002616:	f7ff f9c7 	bl	80019a8 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1a1      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	4b2d      	ldr	r3, [pc, #180]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b2a      	ldr	r3, [pc, #168]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4927      	ldr	r1, [pc, #156]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b26      	ldr	r3, [pc, #152]	@ (80026e4 <HAL_RCC_OscConfig+0x270>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7ff f9aa 	bl	80019a8 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002658:	f7ff f9a6 	bl	80019a8 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e180      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	4b1d      	ldr	r3, [pc, #116]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d03a      	beq.n	80026f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d019      	beq.n	80026be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	4b17      	ldr	r3, [pc, #92]	@ (80026e8 <HAL_RCC_OscConfig+0x274>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7ff f98a 	bl	80019a8 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002698:	f7ff f986 	bl	80019a8 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e160      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f000 face 	bl	8002c58 <RCC_Delay>
 80026bc:	e01c      	b.n	80026f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026be:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <HAL_RCC_OscConfig+0x274>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c4:	f7ff f970 	bl	80019a8 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ca:	e00f      	b.n	80026ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026cc:	f7ff f96c 	bl	80019a8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d908      	bls.n	80026ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e146      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	42420000 	.word	0x42420000
 80026e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	4b92      	ldr	r3, [pc, #584]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e9      	bne.n	80026cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80a6 	beq.w	8002852 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270a:	4b8b      	ldr	r3, [pc, #556]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10d      	bne.n	8002732 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	4b88      	ldr	r3, [pc, #544]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	4a87      	ldr	r2, [pc, #540]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002720:	61d3      	str	r3, [r2, #28]
 8002722:	4b85      	ldr	r3, [pc, #532]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b82      	ldr	r3, [pc, #520]	@ (800293c <HAL_RCC_OscConfig+0x4c8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d118      	bne.n	8002770 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b7f      	ldr	r3, [pc, #508]	@ (800293c <HAL_RCC_OscConfig+0x4c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a7e      	ldr	r2, [pc, #504]	@ (800293c <HAL_RCC_OscConfig+0x4c8>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7ff f92d 	bl	80019a8 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7ff f929 	bl	80019a8 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b64      	cmp	r3, #100	@ 0x64
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e103      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002764:	4b75      	ldr	r3, [pc, #468]	@ (800293c <HAL_RCC_OscConfig+0x4c8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x312>
 8002778:	4b6f      	ldr	r3, [pc, #444]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4a6e      	ldr	r2, [pc, #440]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6213      	str	r3, [r2, #32]
 8002784:	e02d      	b.n	80027e2 <HAL_RCC_OscConfig+0x36e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x334>
 800278e:	4b6a      	ldr	r3, [pc, #424]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a69      	ldr	r2, [pc, #420]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6213      	str	r3, [r2, #32]
 800279a:	4b67      	ldr	r3, [pc, #412]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4a66      	ldr	r2, [pc, #408]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	f023 0304 	bic.w	r3, r3, #4
 80027a4:	6213      	str	r3, [r2, #32]
 80027a6:	e01c      	b.n	80027e2 <HAL_RCC_OscConfig+0x36e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d10c      	bne.n	80027ca <HAL_RCC_OscConfig+0x356>
 80027b0:	4b61      	ldr	r3, [pc, #388]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4a60      	ldr	r2, [pc, #384]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027b6:	f043 0304 	orr.w	r3, r3, #4
 80027ba:	6213      	str	r3, [r2, #32]
 80027bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6213      	str	r3, [r2, #32]
 80027c8:	e00b      	b.n	80027e2 <HAL_RCC_OscConfig+0x36e>
 80027ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6213      	str	r3, [r2, #32]
 80027d6:	4b58      	ldr	r3, [pc, #352]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4a57      	ldr	r2, [pc, #348]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d015      	beq.n	8002816 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7ff f8dd 	bl	80019a8 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7ff f8d9 	bl	80019a8 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e0b1      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002808:	4b4b      	ldr	r3, [pc, #300]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ee      	beq.n	80027f2 <HAL_RCC_OscConfig+0x37e>
 8002814:	e014      	b.n	8002840 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002816:	f7ff f8c7 	bl	80019a8 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7ff f8c3 	bl	80019a8 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e09b      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	4b40      	ldr	r3, [pc, #256]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ee      	bne.n	800281e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002840:	7dfb      	ldrb	r3, [r7, #23]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002846:	4b3c      	ldr	r3, [pc, #240]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4a3b      	ldr	r2, [pc, #236]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002850:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8087 	beq.w	800296a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800285c:	4b36      	ldr	r3, [pc, #216]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d061      	beq.n	800292c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d146      	bne.n	80028fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002870:	4b33      	ldr	r3, [pc, #204]	@ (8002940 <HAL_RCC_OscConfig+0x4cc>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7ff f897 	bl	80019a8 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287e:	f7ff f893 	bl	80019a8 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e06d      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002890:	4b29      	ldr	r3, [pc, #164]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a4:	d108      	bne.n	80028b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028a6:	4b24      	ldr	r3, [pc, #144]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4921      	ldr	r1, [pc, #132]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a19      	ldr	r1, [r3, #32]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	430b      	orrs	r3, r1
 80028ca:	491b      	ldr	r1, [pc, #108]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <HAL_RCC_OscConfig+0x4cc>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7ff f867 	bl	80019a8 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028de:	f7ff f863 	bl	80019a8 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e03d      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f0:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x46a>
 80028fc:	e035      	b.n	800296a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <HAL_RCC_OscConfig+0x4cc>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7ff f850 	bl	80019a8 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7ff f84c 	bl	80019a8 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e026      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291e:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x498>
 800292a:	e01e      	b.n	800296a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e019      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
 8002938:	40021000 	.word	0x40021000
 800293c:	40007000 	.word	0x40007000
 8002940:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_RCC_OscConfig+0x500>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	429a      	cmp	r2, r3
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d001      	beq.n	800296a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000

08002978 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0d0      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800298c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d910      	bls.n	80029bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299a:	4b67      	ldr	r3, [pc, #412]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 0207 	bic.w	r2, r3, #7
 80029a2:	4965      	ldr	r1, [pc, #404]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b63      	ldr	r3, [pc, #396]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0b8      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d4:	4b59      	ldr	r3, [pc, #356]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4a58      	ldr	r2, [pc, #352]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ec:	4b53      	ldr	r3, [pc, #332]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a52      	ldr	r2, [pc, #328]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b50      	ldr	r3, [pc, #320]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	494d      	ldr	r1, [pc, #308]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d040      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b47      	ldr	r3, [pc, #284]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d115      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e07f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a36:	4b41      	ldr	r3, [pc, #260]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e073      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a46:	4b3d      	ldr	r3, [pc, #244]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e06b      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a56:	4b39      	ldr	r3, [pc, #228]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f023 0203 	bic.w	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4936      	ldr	r1, [pc, #216]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a68:	f7fe ff9e 	bl	80019a8 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a70:	f7fe ff9a 	bl	80019a8 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e053      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	4b2d      	ldr	r3, [pc, #180]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 020c 	and.w	r2, r3, #12
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d1eb      	bne.n	8002a70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a98:	4b27      	ldr	r3, [pc, #156]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d210      	bcs.n	8002ac8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b24      	ldr	r3, [pc, #144]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 0207 	bic.w	r2, r3, #7
 8002aae:	4922      	ldr	r1, [pc, #136]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e032      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad4:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4916      	ldr	r1, [pc, #88]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002af2:	4b12      	ldr	r3, [pc, #72]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	490e      	ldr	r1, [pc, #56]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b06:	f000 f821 	bl	8002b4c <HAL_RCC_GetSysClockFreq>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	490a      	ldr	r1, [pc, #40]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	5ccb      	ldrb	r3, [r1, r3]
 8002b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1e:	4a09      	ldr	r2, [pc, #36]	@ (8002b44 <HAL_RCC_ClockConfig+0x1cc>)
 8002b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_RCC_ClockConfig+0x1d0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe fefc 	bl	8001924 <HAL_InitTick>

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40022000 	.word	0x40022000
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	080055dc 	.word	0x080055dc
 8002b44:	20000010 	.word	0x20000010
 8002b48:	20000014 	.word	0x20000014

08002b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b66:	4b1e      	ldr	r3, [pc, #120]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d002      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x30>
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d003      	beq.n	8002b82 <HAL_RCC_GetSysClockFreq+0x36>
 8002b7a:	e027      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b7c:	4b19      	ldr	r3, [pc, #100]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b7e:	613b      	str	r3, [r7, #16]
      break;
 8002b80:	e027      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	0c9b      	lsrs	r3, r3, #18
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	4a17      	ldr	r2, [pc, #92]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d010      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b9a:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	0c5b      	lsrs	r3, r3, #17
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	4a11      	ldr	r2, [pc, #68]	@ (8002bec <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ba6:	5cd3      	ldrb	r3, [r2, r3]
 8002ba8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a0d      	ldr	r2, [pc, #52]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bae:	fb03 f202 	mul.w	r2, r3, r2
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	e004      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bc0:	fb02 f303 	mul.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	613b      	str	r3, [r7, #16]
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bce:	613b      	str	r3, [r7, #16]
      break;
 8002bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd2:	693b      	ldr	r3, [r7, #16]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000
 8002be4:	007a1200 	.word	0x007a1200
 8002be8:	080055f4 	.word	0x080055f4
 8002bec:	08005604 	.word	0x08005604
 8002bf0:	003d0900 	.word	0x003d0900

08002bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf8:	4b02      	ldr	r3, [pc, #8]	@ (8002c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	20000010 	.word	0x20000010

08002c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c0c:	f7ff fff2 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	4903      	ldr	r1, [pc, #12]	@ (8002c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	080055ec 	.word	0x080055ec

08002c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c34:	f7ff ffde 	bl	8002bf4 <HAL_RCC_GetHCLKFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	0adb      	lsrs	r3, r3, #11
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	4903      	ldr	r1, [pc, #12]	@ (8002c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	080055ec 	.word	0x080055ec

08002c58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c60:	4b0a      	ldr	r3, [pc, #40]	@ (8002c8c <RCC_Delay+0x34>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <RCC_Delay+0x38>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0a5b      	lsrs	r3, r3, #9
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c74:	bf00      	nop
  }
  while (Delay --);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1e5a      	subs	r2, r3, #1
 8002c7a:	60fa      	str	r2, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f9      	bne.n	8002c74 <RCC_Delay+0x1c>
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	20000010 	.word	0x20000010
 8002c90:	10624dd3 	.word	0x10624dd3

08002c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d07d      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10d      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc0:	4b4c      	ldr	r3, [pc, #304]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cca:	61d3      	str	r3, [r2, #28]
 8002ccc:	4b49      	ldr	r3, [pc, #292]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	4b46      	ldr	r3, [pc, #280]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d118      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce8:	4b43      	ldr	r3, [pc, #268]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a42      	ldr	r2, [pc, #264]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf4:	f7fe fe58 	bl	80019a8 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfa:	e008      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfc:	f7fe fe54 	bl	80019a8 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	@ 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e06d      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d1a:	4b36      	ldr	r3, [pc, #216]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d02e      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d027      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d38:	4b2e      	ldr	r3, [pc, #184]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d42:	4b2e      	ldr	r3, [pc, #184]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d48:	4b2c      	ldr	r3, [pc, #176]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d4e:	4a29      	ldr	r2, [pc, #164]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d014      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fe23 	bl	80019a8 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fe fe1f 	bl	80019a8 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e036      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ee      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d88:	4b1a      	ldr	r3, [pc, #104]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4917      	ldr	r1, [pc, #92]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d105      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da0:	4b14      	ldr	r3, [pc, #80]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	4a13      	ldr	r2, [pc, #76]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002daa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002db8:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	490b      	ldr	r1, [pc, #44]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dd6:	4b07      	ldr	r3, [pc, #28]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	4904      	ldr	r1, [pc, #16]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	42420440 	.word	0x42420440

08002e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e041      	b.n	8002e96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe fb0c 	bl	8001444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f000 fce8 	bl	8003814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d001      	beq.n	8002eb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e032      	b.n	8002f1e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a18      	ldr	r2, [pc, #96]	@ (8002f28 <HAL_TIM_Base_Start+0x88>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00e      	beq.n	8002ee8 <HAL_TIM_Base_Start+0x48>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed2:	d009      	beq.n	8002ee8 <HAL_TIM_Base_Start+0x48>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a14      	ldr	r2, [pc, #80]	@ (8002f2c <HAL_TIM_Base_Start+0x8c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_TIM_Base_Start+0x48>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a13      	ldr	r2, [pc, #76]	@ (8002f30 <HAL_TIM_Base_Start+0x90>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d111      	bne.n	8002f0c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d010      	beq.n	8002f1c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0a:	e007      	b.n	8002f1c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800

08002f34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e041      	b.n	8002fca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f839 	bl	8002fd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3304      	adds	r3, #4
 8002f70:	4619      	mov	r1, r3
 8002f72:	4610      	mov	r0, r2
 8002f74:	f000 fc4e 	bl	8003814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e022      	b.n	8003056 <HAL_TIM_PWM_Start_DMA+0x72>
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b04      	cmp	r3, #4
 8003014:	d109      	bne.n	800302a <HAL_TIM_PWM_Start_DMA+0x46>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	e015      	b.n	8003056 <HAL_TIM_PWM_Start_DMA+0x72>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d109      	bne.n	8003044 <HAL_TIM_PWM_Start_DMA+0x60>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e008      	b.n	8003056 <HAL_TIM_PWM_Start_DMA+0x72>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800305a:	2302      	movs	r3, #2
 800305c:	e153      	b.n	8003306 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_TIM_PWM_Start_DMA+0x94>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e022      	b.n	80030be <HAL_TIM_PWM_Start_DMA+0xda>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d109      	bne.n	8003092 <HAL_TIM_PWM_Start_DMA+0xae>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b01      	cmp	r3, #1
 8003088:	bf0c      	ite	eq
 800308a:	2301      	moveq	r3, #1
 800308c:	2300      	movne	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	e015      	b.n	80030be <HAL_TIM_PWM_Start_DMA+0xda>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d109      	bne.n	80030ac <HAL_TIM_PWM_Start_DMA+0xc8>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e008      	b.n	80030be <HAL_TIM_PWM_Start_DMA+0xda>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d024      	beq.n	800310c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_TIM_PWM_Start_DMA+0xea>
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e119      	b.n	8003306 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <HAL_TIM_PWM_Start_DMA+0xfe>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030e0:	e016      	b.n	8003110 <HAL_TIM_PWM_Start_DMA+0x12c>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d104      	bne.n	80030f2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030f0:	e00e      	b.n	8003110 <HAL_TIM_PWM_Start_DMA+0x12c>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d104      	bne.n	8003102 <HAL_TIM_PWM_Start_DMA+0x11e>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003100:	e006      	b.n	8003110 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2202      	movs	r2, #2
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800310a:	e001      	b.n	8003110 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0fa      	b.n	8003306 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b0c      	cmp	r3, #12
 8003114:	f200 80ae 	bhi.w	8003274 <HAL_TIM_PWM_Start_DMA+0x290>
 8003118:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003155 	.word	0x08003155
 8003124:	08003275 	.word	0x08003275
 8003128:	08003275 	.word	0x08003275
 800312c:	08003275 	.word	0x08003275
 8003130:	0800319d 	.word	0x0800319d
 8003134:	08003275 	.word	0x08003275
 8003138:	08003275 	.word	0x08003275
 800313c:	08003275 	.word	0x08003275
 8003140:	080031e5 	.word	0x080031e5
 8003144:	08003275 	.word	0x08003275
 8003148:	08003275 	.word	0x08003275
 800314c:	08003275 	.word	0x08003275
 8003150:	0800322d 	.word	0x0800322d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	4a6d      	ldr	r2, [pc, #436]	@ (8003310 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800315a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	4a6c      	ldr	r2, [pc, #432]	@ (8003314 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003162:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	4a6b      	ldr	r2, [pc, #428]	@ (8003318 <HAL_TIM_PWM_Start_DMA+0x334>)
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3334      	adds	r3, #52	@ 0x34
 8003178:	461a      	mov	r2, r3
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	f7fe ff37 	bl	8001fee <HAL_DMA_Start_IT>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0bd      	b.n	8003306 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003198:	60da      	str	r2, [r3, #12]
      break;
 800319a:	e06e      	b.n	800327a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a0:	4a5b      	ldr	r2, [pc, #364]	@ (8003310 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003314 <HAL_TIM_PWM_Start_DMA+0x330>)
 80031aa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b0:	4a59      	ldr	r2, [pc, #356]	@ (8003318 <HAL_TIM_PWM_Start_DMA+0x334>)
 80031b2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3338      	adds	r3, #56	@ 0x38
 80031c0:	461a      	mov	r2, r3
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	f7fe ff13 	bl	8001fee <HAL_DMA_Start_IT>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e099      	b.n	8003306 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031e0:	60da      	str	r2, [r3, #12]
      break;
 80031e2:	e04a      	b.n	800327a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	4a49      	ldr	r2, [pc, #292]	@ (8003310 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80031ea:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f0:	4a48      	ldr	r2, [pc, #288]	@ (8003314 <HAL_TIM_PWM_Start_DMA+0x330>)
 80031f2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	4a47      	ldr	r2, [pc, #284]	@ (8003318 <HAL_TIM_PWM_Start_DMA+0x334>)
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	333c      	adds	r3, #60	@ 0x3c
 8003208:	461a      	mov	r2, r3
 800320a:	887b      	ldrh	r3, [r7, #2]
 800320c:	f7fe feef 	bl	8001fee <HAL_DMA_Start_IT>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e075      	b.n	8003306 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003228:	60da      	str	r2, [r3, #12]
      break;
 800322a:	e026      	b.n	800327a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003230:	4a37      	ldr	r2, [pc, #220]	@ (8003310 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	4a36      	ldr	r2, [pc, #216]	@ (8003314 <HAL_TIM_PWM_Start_DMA+0x330>)
 800323a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003240:	4a35      	ldr	r2, [pc, #212]	@ (8003318 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3340      	adds	r3, #64	@ 0x40
 8003250:	461a      	mov	r2, r3
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	f7fe fecb 	bl	8001fee <HAL_DMA_Start_IT>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e051      	b.n	8003306 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003270:	60da      	str	r2, [r3, #12]
      break;
 8003272:	e002      	b.n	800327a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	75fb      	strb	r3, [r7, #23]
      break;
 8003278:	bf00      	nop
  }

  if (status == HAL_OK)
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d141      	bne.n	8003304 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2201      	movs	r2, #1
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fd4f 	bl	8003d2c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a22      	ldr	r2, [pc, #136]	@ (800331c <HAL_TIM_PWM_Start_DMA+0x338>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d107      	bne.n	80032a8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1b      	ldr	r2, [pc, #108]	@ (800331c <HAL_TIM_PWM_Start_DMA+0x338>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00e      	beq.n	80032d0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ba:	d009      	beq.n	80032d0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a17      	ldr	r2, [pc, #92]	@ (8003320 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a16      	ldr	r2, [pc, #88]	@ (8003324 <HAL_TIM_PWM_Start_DMA+0x340>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d111      	bne.n	80032f4 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d010      	beq.n	8003304 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f2:	e007      	b.n	8003304 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003304:	7dfb      	ldrb	r3, [r7, #23]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	08003703 	.word	0x08003703
 8003314:	080037ab 	.word	0x080037ab
 8003318:	08003671 	.word	0x08003671
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800

08003328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003342:	2302      	movs	r3, #2
 8003344:	e0ae      	b.n	80034a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	f200 809f 	bhi.w	8003494 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003356:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003391 	.word	0x08003391
 8003360:	08003495 	.word	0x08003495
 8003364:	08003495 	.word	0x08003495
 8003368:	08003495 	.word	0x08003495
 800336c:	080033d1 	.word	0x080033d1
 8003370:	08003495 	.word	0x08003495
 8003374:	08003495 	.word	0x08003495
 8003378:	08003495 	.word	0x08003495
 800337c:	08003413 	.word	0x08003413
 8003380:	08003495 	.word	0x08003495
 8003384:	08003495 	.word	0x08003495
 8003388:	08003495 	.word	0x08003495
 800338c:	08003453 	.word	0x08003453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 faaa 	bl	80038f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0208 	orr.w	r2, r2, #8
 80033aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0204 	bic.w	r2, r2, #4
 80033ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6999      	ldr	r1, [r3, #24]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	619a      	str	r2, [r3, #24]
      break;
 80033ce:	e064      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 faf0 	bl	80039bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6999      	ldr	r1, [r3, #24]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	021a      	lsls	r2, r3, #8
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	619a      	str	r2, [r3, #24]
      break;
 8003410:	e043      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fb39 	bl	8003a90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0208 	orr.w	r2, r2, #8
 800342c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0204 	bic.w	r2, r2, #4
 800343c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69d9      	ldr	r1, [r3, #28]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	61da      	str	r2, [r3, #28]
      break;
 8003450:	e023      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fb83 	bl	8003b64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800346c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800347c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69d9      	ldr	r1, [r3, #28]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	021a      	lsls	r2, r3, #8
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	61da      	str	r2, [r3, #28]
      break;
 8003492:	e002      	b.n	800349a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	75fb      	strb	r3, [r7, #23]
      break;
 8003498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_TIM_ConfigClockSource+0x1c>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e0b4      	b.n	8003632 <HAL_TIM_ConfigClockSource+0x186>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003500:	d03e      	beq.n	8003580 <HAL_TIM_ConfigClockSource+0xd4>
 8003502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003506:	f200 8087 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 800350a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800350e:	f000 8086 	beq.w	800361e <HAL_TIM_ConfigClockSource+0x172>
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003516:	d87f      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003518:	2b70      	cmp	r3, #112	@ 0x70
 800351a:	d01a      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0xa6>
 800351c:	2b70      	cmp	r3, #112	@ 0x70
 800351e:	d87b      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003520:	2b60      	cmp	r3, #96	@ 0x60
 8003522:	d050      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003524:	2b60      	cmp	r3, #96	@ 0x60
 8003526:	d877      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b50      	cmp	r3, #80	@ 0x50
 800352a:	d03c      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0xfa>
 800352c:	2b50      	cmp	r3, #80	@ 0x50
 800352e:	d873      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b40      	cmp	r3, #64	@ 0x40
 8003532:	d058      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003534:	2b40      	cmp	r3, #64	@ 0x40
 8003536:	d86f      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b30      	cmp	r3, #48	@ 0x30
 800353a:	d064      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15a>
 800353c:	2b30      	cmp	r3, #48	@ 0x30
 800353e:	d86b      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b20      	cmp	r3, #32
 8003542:	d060      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15a>
 8003544:	2b20      	cmp	r3, #32
 8003546:	d867      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d05c      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15a>
 800354c:	2b10      	cmp	r3, #16
 800354e:	d05a      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15a>
 8003550:	e062      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003562:	f000 fbc4 	bl	8003cee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	609a      	str	r2, [r3, #8]
      break;
 800357e:	e04f      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003590:	f000 fbad 	bl	8003cee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035a2:	609a      	str	r2, [r3, #8]
      break;
 80035a4:	e03c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b2:	461a      	mov	r2, r3
 80035b4:	f000 fb24 	bl	8003c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2150      	movs	r1, #80	@ 0x50
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fb7b 	bl	8003cba <TIM_ITRx_SetConfig>
      break;
 80035c4:	e02c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035d2:	461a      	mov	r2, r3
 80035d4:	f000 fb42 	bl	8003c5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2160      	movs	r1, #96	@ 0x60
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fb6b 	bl	8003cba <TIM_ITRx_SetConfig>
      break;
 80035e4:	e01c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f2:	461a      	mov	r2, r3
 80035f4:	f000 fb04 	bl	8003c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2140      	movs	r1, #64	@ 0x40
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fb5b 	bl	8003cba <TIM_ITRx_SetConfig>
      break;
 8003604:	e00c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f000 fb52 	bl	8003cba <TIM_ITRx_SetConfig>
      break;
 8003616:	e003      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e000      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800361e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	429a      	cmp	r2, r3
 8003686:	d107      	bne.n	8003698 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003696:	e02a      	b.n	80036ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d107      	bne.n	80036b2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2202      	movs	r2, #2
 80036a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036b0:	e01d      	b.n	80036ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d107      	bne.n	80036cc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2204      	movs	r2, #4
 80036c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036ca:	e010      	b.n	80036ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d107      	bne.n	80036e6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2208      	movs	r2, #8
 80036da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036e4:	e003      	b.n	80036ee <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f7ff ffb5 	bl	800365e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	771a      	strb	r2, [r3, #28]
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	429a      	cmp	r2, r3
 8003718:	d10b      	bne.n	8003732 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d136      	bne.n	8003796 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003730:	e031      	b.n	8003796 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d10b      	bne.n	8003754 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2202      	movs	r2, #2
 8003740:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d125      	bne.n	8003796 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003752:	e020      	b.n	8003796 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	429a      	cmp	r2, r3
 800375c:	d10b      	bne.n	8003776 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2204      	movs	r2, #4
 8003762:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d114      	bne.n	8003796 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003774:	e00f      	b.n	8003796 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	429a      	cmp	r2, r3
 800377e:	d10a      	bne.n	8003796 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2208      	movs	r2, #8
 8003784:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f7ff ff4f 	bl	800363a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	771a      	strb	r2, [r3, #28]
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d103      	bne.n	80037ca <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	771a      	strb	r2, [r3, #28]
 80037c8:	e019      	b.n	80037fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d103      	bne.n	80037dc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2202      	movs	r2, #2
 80037d8:	771a      	strb	r2, [r3, #28]
 80037da:	e010      	b.n	80037fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d103      	bne.n	80037ee <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2204      	movs	r2, #4
 80037ea:	771a      	strb	r2, [r3, #28]
 80037ec:	e007      	b.n	80037fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d102      	bne.n	80037fe <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2208      	movs	r2, #8
 80037fc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f7ff ff24 	bl	800364c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	771a      	strb	r2, [r3, #28]
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a2f      	ldr	r2, [pc, #188]	@ (80038e4 <TIM_Base_SetConfig+0xd0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00b      	beq.n	8003844 <TIM_Base_SetConfig+0x30>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003832:	d007      	beq.n	8003844 <TIM_Base_SetConfig+0x30>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a2c      	ldr	r2, [pc, #176]	@ (80038e8 <TIM_Base_SetConfig+0xd4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_Base_SetConfig+0x30>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a2b      	ldr	r2, [pc, #172]	@ (80038ec <TIM_Base_SetConfig+0xd8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800384a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a22      	ldr	r2, [pc, #136]	@ (80038e4 <TIM_Base_SetConfig+0xd0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00b      	beq.n	8003876 <TIM_Base_SetConfig+0x62>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003864:	d007      	beq.n	8003876 <TIM_Base_SetConfig+0x62>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a1f      	ldr	r2, [pc, #124]	@ (80038e8 <TIM_Base_SetConfig+0xd4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d003      	beq.n	8003876 <TIM_Base_SetConfig+0x62>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a1e      	ldr	r2, [pc, #120]	@ (80038ec <TIM_Base_SetConfig+0xd8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d108      	bne.n	8003888 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800387c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0d      	ldr	r2, [pc, #52]	@ (80038e4 <TIM_Base_SetConfig+0xd0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d103      	bne.n	80038bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f023 0201 	bic.w	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	611a      	str	r2, [r3, #16]
  }
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	40012c00 	.word	0x40012c00
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000800 	.word	0x40000800

080038f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f023 0201 	bic.w	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f023 0302 	bic.w	r3, r3, #2
 8003938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a1c      	ldr	r2, [pc, #112]	@ (80039b8 <TIM_OC1_SetConfig+0xc8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d10c      	bne.n	8003966 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f023 0308 	bic.w	r3, r3, #8
 8003952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f023 0304 	bic.w	r3, r3, #4
 8003964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a13      	ldr	r2, [pc, #76]	@ (80039b8 <TIM_OC1_SetConfig+0xc8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d111      	bne.n	8003992 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800397c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	621a      	str	r2, [r3, #32]
}
 80039ac:	bf00      	nop
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40012c00 	.word	0x40012c00

080039bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	f023 0210 	bic.w	r2, r3, #16
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f023 0320 	bic.w	r3, r3, #32
 8003a06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a1d      	ldr	r2, [pc, #116]	@ (8003a8c <TIM_OC2_SetConfig+0xd0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d10d      	bne.n	8003a38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a14      	ldr	r2, [pc, #80]	@ (8003a8c <TIM_OC2_SetConfig+0xd0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d113      	bne.n	8003a68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	40012c00 	.word	0x40012c00

08003a90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b60 <TIM_OC3_SetConfig+0xd0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10d      	bne.n	8003b0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003af4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a14      	ldr	r2, [pc, #80]	@ (8003b60 <TIM_OC3_SetConfig+0xd0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d113      	bne.n	8003b3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	621a      	str	r2, [r3, #32]
}
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40012c00 	.word	0x40012c00

08003b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	031b      	lsls	r3, r3, #12
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8003bfc <TIM_OC4_SetConfig+0x98>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d109      	bne.n	8003bd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	019b      	lsls	r3, r3, #6
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	40012c00 	.word	0x40012c00

08003c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f023 0201 	bic.w	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f023 030a 	bic.w	r3, r3, #10
 8003c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	621a      	str	r2, [r3, #32]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f023 0210 	bic.w	r2, r3, #16
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	031b      	lsls	r3, r3, #12
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	621a      	str	r2, [r3, #32]
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f043 0307 	orr.w	r3, r3, #7
 8003cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	609a      	str	r2, [r3, #8]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b087      	sub	sp, #28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	021a      	lsls	r2, r3, #8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	609a      	str	r2, [r3, #8]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2201      	movs	r2, #1
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1a      	ldr	r2, [r3, #32]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	401a      	ands	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1a      	ldr	r2, [r3, #32]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	431a      	orrs	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	621a      	str	r2, [r3, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e046      	b.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a16      	ldr	r2, [pc, #88]	@ (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd8:	d009      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a12      	ldr	r2, [pc, #72]	@ (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a10      	ldr	r2, [pc, #64]	@ (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d10c      	bne.n	8003e08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40000400 	.word	0x40000400
 8003e2c:	40000800 	.word	0x40000800

08003e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e042      	b.n	8003ec8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd fc04 	bl	8001664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	@ 0x24
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f971 	bl	800415c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	@ 0x28
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d175      	bne.n	8003fdc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_UART_Transmit+0x2c>
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e06e      	b.n	8003fde <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2221      	movs	r2, #33	@ 0x21
 8003f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f0e:	f7fd fd4b 	bl	80019a8 <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	88fa      	ldrh	r2, [r7, #6]
 8003f18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	88fa      	ldrh	r2, [r7, #6]
 8003f1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f28:	d108      	bne.n	8003f3c <HAL_UART_Transmit+0x6c>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e003      	b.n	8003f44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f44:	e02e      	b.n	8003fa4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2180      	movs	r1, #128	@ 0x80
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f848 	bl	8003fe6 <UART_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e03a      	b.n	8003fde <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10b      	bne.n	8003f86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	3302      	adds	r3, #2
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	e007      	b.n	8003f96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	781a      	ldrb	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	3301      	adds	r3, #1
 8003f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1cb      	bne.n	8003f46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2140      	movs	r1, #64	@ 0x40
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f814 	bl	8003fe6 <UART_WaitOnFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e006      	b.n	8003fde <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e000      	b.n	8003fde <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fdc:	2302      	movs	r3, #2
  }
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3720      	adds	r7, #32
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b086      	sub	sp, #24
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff6:	e03b      	b.n	8004070 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d037      	beq.n	8004070 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004000:	f7fd fcd2 	bl	80019a8 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	6a3a      	ldr	r2, [r7, #32]
 800400c:	429a      	cmp	r2, r3
 800400e:	d302      	bcc.n	8004016 <UART_WaitOnFlagUntilTimeout+0x30>
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e03a      	b.n	8004090 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d023      	beq.n	8004070 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b80      	cmp	r3, #128	@ 0x80
 800402c:	d020      	beq.n	8004070 <UART_WaitOnFlagUntilTimeout+0x8a>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b40      	cmp	r3, #64	@ 0x40
 8004032:	d01d      	beq.n	8004070 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b08      	cmp	r3, #8
 8004040:	d116      	bne.n	8004070 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f81d 	bl	8004098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2208      	movs	r2, #8
 8004062:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e00f      	b.n	8004090 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	429a      	cmp	r2, r3
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	429a      	cmp	r2, r3
 800408c:	d0b4      	beq.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b095      	sub	sp, #84	@ 0x54
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	330c      	adds	r3, #12
 80040a6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80040c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3314      	adds	r3, #20
 80040da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e5      	bne.n	80040d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410c:	2b01      	cmp	r3, #1
 800410e:	d119      	bne.n	8004144 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f023 0310 	bic.w	r3, r3, #16
 8004126:	647b      	str	r3, [r7, #68]	@ 0x44
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004130:	61ba      	str	r2, [r7, #24]
 8004132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6979      	ldr	r1, [r7, #20]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	613b      	str	r3, [r7, #16]
   return(result);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e5      	bne.n	8004110 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004152:	bf00      	nop
 8004154:	3754      	adds	r7, #84	@ 0x54
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004196:	f023 030c 	bic.w	r3, r3, #12
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	430b      	orrs	r3, r1
 80041a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a2c      	ldr	r2, [pc, #176]	@ (8004270 <UART_SetConfig+0x114>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d103      	bne.n	80041cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041c4:	f7fe fd34 	bl	8002c30 <HAL_RCC_GetPCLK2Freq>
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	e002      	b.n	80041d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041cc:	f7fe fd1c 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
 80041d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009a      	lsls	r2, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	4a22      	ldr	r2, [pc, #136]	@ (8004274 <UART_SetConfig+0x118>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	0119      	lsls	r1, r3, #4
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009a      	lsls	r2, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	fbb2 f2f3 	udiv	r2, r2, r3
 8004208:	4b1a      	ldr	r3, [pc, #104]	@ (8004274 <UART_SetConfig+0x118>)
 800420a:	fba3 0302 	umull	r0, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2064      	movs	r0, #100	@ 0x64
 8004212:	fb00 f303 	mul.w	r3, r0, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	3332      	adds	r3, #50	@ 0x32
 800421c:	4a15      	ldr	r2, [pc, #84]	@ (8004274 <UART_SetConfig+0x118>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004228:	4419      	add	r1, r3
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	009a      	lsls	r2, r3, #2
 8004234:	441a      	add	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004240:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <UART_SetConfig+0x118>)
 8004242:	fba3 0302 	umull	r0, r3, r3, r2
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	2064      	movs	r0, #100	@ 0x64
 800424a:	fb00 f303 	mul.w	r3, r0, r3
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	3332      	adds	r3, #50	@ 0x32
 8004254:	4a07      	ldr	r2, [pc, #28]	@ (8004274 <UART_SetConfig+0x118>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	f003 020f 	and.w	r2, r3, #15
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	440a      	add	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40013800 	.word	0x40013800
 8004274:	51eb851f 	.word	0x51eb851f

08004278 <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fd fb9b 	bl	80019bc <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *hLed)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  while (hLed->Lock)
 8004296:	e002      	b.n	800429e <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 8004298:	2001      	movs	r0, #1
 800429a:	f7ff ffed 	bl	8004278 <WS28XX_Delay>
  while (hLed->Lock)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	795b      	ldrb	r3, [r3, #5]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f8      	bne.n	8004298 <WS28XX_Lock+0xa>
  }
  hLed->Lock = 1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	715a      	strb	r2, [r3, #5]
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  hLed->Lock = 0;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	715a      	strb	r2, [r3, #5]
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *hLed, TIM_HandleTypeDef *hTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	4611      	mov	r1, r2
 80042d8:	461a      	mov	r2, r3
 80042da:	460b      	mov	r3, r1
 80042dc:	80fb      	strh	r3, [r7, #6]
 80042de:	4613      	mov	r3, r2
 80042e0:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 80042e2:	2300      	movs	r3, #0
 80042e4:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (hLed == NULL || hTim == NULL)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d079      	beq.n	80043e0 <WS28XX_Init+0x114>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d076      	beq.n	80043e0 <WS28XX_Init+0x114>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 80042f2:	8c3b      	ldrh	r3, [r7, #32]
 80042f4:	2b32      	cmp	r3, #50	@ 0x32
 80042f6:	d872      	bhi.n	80043de <WS28XX_Init+0x112>
    {
      break;
    }
    hLed->Channel = Channel;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	797a      	ldrb	r2, [r7, #5]
 80042fc:	711a      	strb	r2, [r3, #4]
    hLed->MaxPixel = Pixel;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8c3a      	ldrh	r2, [r7, #32]
 8004302:	815a      	strh	r2, [r3, #10]
    hLed->hTim = hTim;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	4618      	mov	r0, r3
 800430e:	f7fb ffd7 	bl	80002c0 <__aeabi_i2f>
 8004312:	4603      	mov	r3, r0
 8004314:	4935      	ldr	r1, [pc, #212]	@ (80043ec <WS28XX_Init+0x120>)
 8004316:	4618      	mov	r0, r3
 8004318:	f7fc f8da 	bl	80004d0 <__aeabi_fdiv>
 800431c:	4603      	mov	r3, r0
 800431e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004322:	4618      	mov	r0, r3
 8004324:	f7fb ff16 	bl	8000154 <__aeabi_fsub>
 8004328:	4603      	mov	r3, r0
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc f96c 	bl	8000608 <__aeabi_f2uiz>
 8004330:	4603      	mov	r3, r0
 8004332:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(hLed->hTim ,aar_value);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(hLed->hTim, 0);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2200      	movs	r2, #0
 800434e:	629a      	str	r2, [r3, #40]	@ 0x28
    hLed->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8004350:	6938      	ldr	r0, [r7, #16]
 8004352:	f7fb ffb1 	bl	80002b8 <__aeabi_ui2f>
 8004356:	4603      	mov	r3, r0
 8004358:	4925      	ldr	r1, [pc, #148]	@ (80043f0 <WS28XX_Init+0x124>)
 800435a:	4618      	mov	r0, r3
 800435c:	f7fc f804 	bl	8000368 <__aeabi_fmul>
 8004360:	4603      	mov	r3, r0
 8004362:	4924      	ldr	r1, [pc, #144]	@ (80043f4 <WS28XX_Init+0x128>)
 8004364:	4618      	mov	r0, r3
 8004366:	f7fc f8b3 	bl	80004d0 <__aeabi_fdiv>
 800436a:	4603      	mov	r3, r0
 800436c:	4618      	mov	r0, r3
 800436e:	f7fc f94b 	bl	8000608 <__aeabi_f2uiz>
 8004372:	4603      	mov	r3, r0
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	80da      	strh	r2, [r3, #6]
    hLed->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 800437a:	6938      	ldr	r0, [r7, #16]
 800437c:	f7fb ff9c 	bl	80002b8 <__aeabi_ui2f>
 8004380:	4603      	mov	r3, r0
 8004382:	491a      	ldr	r1, [pc, #104]	@ (80043ec <WS28XX_Init+0x120>)
 8004384:	4618      	mov	r0, r3
 8004386:	f7fb ffef 	bl	8000368 <__aeabi_fmul>
 800438a:	4603      	mov	r3, r0
 800438c:	4919      	ldr	r1, [pc, #100]	@ (80043f4 <WS28XX_Init+0x128>)
 800438e:	4618      	mov	r0, r3
 8004390:	f7fc f89e 	bl	80004d0 <__aeabi_fdiv>
 8004394:	4603      	mov	r3, r0
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc f936 	bl	8000608 <__aeabi_f2uiz>
 800439c:	4603      	mov	r3, r0
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	811a      	strh	r2, [r3, #8]
    memset(hLed->Pixel, 0, sizeof(hLed->Pixel));
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	330c      	adds	r3, #12
 80043a8:	2296      	movs	r2, #150	@ 0x96
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fa5e 	bl	800486e <memset>
    memset(hLed->Buffer, 0, sizeof(hLed->Buffer));
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	33a2      	adds	r3, #162	@ 0xa2
 80043b6:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 80043ba:	2100      	movs	r1, #0
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fa56 	bl	800486e <memset>
    HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, Pixel);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	791b      	ldrb	r3, [r3, #4]
 80043ca:	4619      	mov	r1, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f103 02a2 	add.w	r2, r3, #162	@ 0xa2
 80043d2:	8c3b      	ldrh	r3, [r7, #32]
 80043d4:	f7fe fe06 	bl	8002fe4 <HAL_TIM_PWM_Start_DMA>
    answer = true;
 80043d8:	2301      	movs	r3, #1
 80043da:	75fb      	strb	r3, [r7, #23]
 80043dc:	e000      	b.n	80043e0 <WS28XX_Init+0x114>
      break;
 80043de:	bf00      	nop
  }
  while (0);

  return answer;
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	3f4ccccd 	.word	0x3f4ccccd
 80043f0:	3ecccccd 	.word	0x3ecccccd
 80043f4:	3fa00000 	.word	0x3fa00000

080043f8 <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *hLed, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	4608      	mov	r0, r1
 8004402:	4611      	mov	r1, r2
 8004404:	461a      	mov	r2, r3
 8004406:	4603      	mov	r3, r0
 8004408:	817b      	strh	r3, [r7, #10]
 800440a:	460b      	mov	r3, r1
 800440c:	813b      	strh	r3, [r7, #8]
 800440e:	4613      	mov	r3, r2
 8004410:	71fb      	strb	r3, [r7, #7]
  bool answer = true;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= hLed->MaxPixel)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	895b      	ldrh	r3, [r3, #10]
 800441a:	897a      	ldrh	r2, [r7, #10]
 800441c:	429a      	cmp	r2, r3
 800441e:	d302      	bcc.n	8004426 <WS28XX_SetPixel_RGBW_565+0x2e>
    {
      answer = false;
 8004420:	2300      	movs	r3, #0
 8004422:	75fb      	strb	r3, [r7, #23]
      break;
 8004424:	e051      	b.n	80044ca <WS28XX_SetPixel_RGBW_565+0xd2>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 8004426:	893b      	ldrh	r3, [r7, #8]
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	b29b      	uxth	r3, r3
 800442c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8004430:	79fa      	ldrb	r2, [r7, #7]
 8004432:	fb02 f303 	mul.w	r3, r2, r3
 8004436:	4a28      	ldr	r2, [pc, #160]	@ (80044d8 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8004438:	fb82 1203 	smull	r1, r2, r2, r3
 800443c:	441a      	add	r2, r3
 800443e:	11d2      	asrs	r2, r2, #7
 8004440:	17db      	asrs	r3, r3, #31
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	75bb      	strb	r3, [r7, #22]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 8004446:	893b      	ldrh	r3, [r7, #8]
 8004448:	08db      	lsrs	r3, r3, #3
 800444a:	b29b      	uxth	r3, r3
 800444c:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8004450:	79fa      	ldrb	r2, [r7, #7]
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	4a20      	ldr	r2, [pc, #128]	@ (80044d8 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8004458:	fb82 1203 	smull	r1, r2, r2, r3
 800445c:	441a      	add	r2, r3
 800445e:	11d2      	asrs	r2, r2, #7
 8004460:	17db      	asrs	r3, r3, #31
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	757b      	strb	r3, [r7, #21]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 8004466:	893b      	ldrh	r3, [r7, #8]
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	b2db      	uxtb	r3, r3
 800446c:	79fa      	ldrb	r2, [r7, #7]
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	4a19      	ldr	r2, [pc, #100]	@ (80044d8 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8004474:	fb82 1203 	smull	r1, r2, r2, r3
 8004478:	441a      	add	r2, r3
 800447a:	11d2      	asrs	r2, r2, #7
 800447c:	17db      	asrs	r3, r3, #31
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8004482:	7d7b      	ldrb	r3, [r7, #21]
 8004484:	897a      	ldrh	r2, [r7, #10]
 8004486:	4915      	ldr	r1, [pc, #84]	@ (80044dc <WS28XX_SetPixel_RGBW_565+0xe4>)
 8004488:	5cc8      	ldrb	r0, [r1, r3]
 800448a:	68f9      	ldr	r1, [r7, #12]
 800448c:	4613      	mov	r3, r2
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	4413      	add	r3, r2
 8004492:	440b      	add	r3, r1
 8004494:	330c      	adds	r3, #12
 8004496:	4602      	mov	r2, r0
 8004498:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 800449a:	7dbb      	ldrb	r3, [r7, #22]
 800449c:	897a      	ldrh	r2, [r7, #10]
 800449e:	490f      	ldr	r1, [pc, #60]	@ (80044dc <WS28XX_SetPixel_RGBW_565+0xe4>)
 80044a0:	5cc8      	ldrb	r0, [r1, r3]
 80044a2:	68f9      	ldr	r1, [r7, #12]
 80044a4:	4613      	mov	r3, r2
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	4413      	add	r3, r2
 80044aa:	440b      	add	r3, r1
 80044ac:	330d      	adds	r3, #13
 80044ae:	4602      	mov	r2, r0
 80044b0:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 80044b2:	7d3b      	ldrb	r3, [r7, #20]
 80044b4:	897a      	ldrh	r2, [r7, #10]
 80044b6:	4909      	ldr	r1, [pc, #36]	@ (80044dc <WS28XX_SetPixel_RGBW_565+0xe4>)
 80044b8:	5cc8      	ldrb	r0, [r1, r3]
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	4613      	mov	r3, r2
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	4413      	add	r3, r2
 80044c2:	440b      	add	r3, r1
 80044c4:	330e      	adds	r3, #14
 80044c6:	4602      	mov	r2, r0
 80044c8:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	80808081 	.word	0x80808081
 80044dc:	08005608 	.word	0x08005608

080044e0 <WS28XX_Update>:
  * @param  *hLed: Pointer to WS28XX_hLedTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *hLed)
{
 80044e0:	b590      	push	{r4, r7, lr}
 80044e2:	b089      	sub	sp, #36	@ 0x24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  bool answer = true;
 80044e8:	2301      	movs	r3, #1
 80044ea:	77fb      	strb	r3, [r7, #31]
  uint32_t i = 2;
 80044ec:	2302      	movs	r3, #2
 80044ee:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(hLed);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff fecc 	bl	800428e <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	82fb      	strh	r3, [r7, #22]
 80044fa:	e03c      	b.n	8004576 <WS28XX_Update+0x96>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	e033      	b.n	800456a <WS28XX_Update+0x8a>
    {
      for (int b = 7; b >= 0 ; b--)
 8004502:	2307      	movs	r3, #7
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e02a      	b.n	800455e <WS28XX_Update+0x7e>
      {
        if ((hLed->Pixel[pixel][rgb] & (1 << b)) == 0)
 8004508:	8afa      	ldrh	r2, [r7, #22]
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	4413      	add	r3, r2
 8004512:	18ca      	adds	r2, r1, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	330c      	adds	r3, #12
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	fa42 f303 	asr.w	r3, r2, r3
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d109      	bne.n	8004540 <WS28XX_Update+0x60>
        {
          hLed->Buffer[i] = hLed->Pulse0;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	88db      	ldrh	r3, [r3, #6]
 8004530:	b2d9      	uxtb	r1, r3
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	4413      	add	r3, r2
 8004538:	33a2      	adds	r3, #162	@ 0xa2
 800453a:	460a      	mov	r2, r1
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e008      	b.n	8004552 <WS28XX_Update+0x72>
        }
        else
        {
          hLed->Buffer[i] = hLed->Pulse1;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	891b      	ldrh	r3, [r3, #8]
 8004544:	b2d9      	uxtb	r1, r3
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	4413      	add	r3, r2
 800454c:	33a2      	adds	r3, #162	@ 0xa2
 800454e:	460a      	mov	r2, r1
 8004550:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	3301      	adds	r3, #1
 8004556:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3b01      	subs	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	dad1      	bge.n	8004508 <WS28XX_Update+0x28>
    for (int rgb = 0; rgb < 3; rgb ++)
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	3301      	adds	r3, #1
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b02      	cmp	r3, #2
 800456e:	ddc8      	ble.n	8004502 <WS28XX_Update+0x22>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8004570:	8afb      	ldrh	r3, [r7, #22]
 8004572:	3301      	adds	r3, #1
 8004574:	82fb      	strh	r3, [r7, #22]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	895b      	ldrh	r3, [r3, #10]
 800457a:	8afa      	ldrh	r2, [r7, #22]
 800457c:	429a      	cmp	r2, r3
 800457e:	d3bd      	bcc.n	80044fc <WS28XX_Update+0x1c>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, (hLed->MaxPixel * 24) + 4) != HAL_OK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	791b      	ldrb	r3, [r3, #4]
 8004588:	461c      	mov	r4, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f103 02a2 	add.w	r2, r3, #162	@ 0xa2
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	895b      	ldrh	r3, [r3, #10]
 8004594:	4619      	mov	r1, r3
 8004596:	0049      	lsls	r1, r1, #1
 8004598:	440b      	add	r3, r1
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	b29b      	uxth	r3, r3
 800459e:	3304      	adds	r3, #4
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	4621      	mov	r1, r4
 80045a4:	f7fe fd1e 	bl	8002fe4 <HAL_TIM_PWM_Start_DMA>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <WS28XX_Update+0xd2>
  {
    answer = false;
 80045ae:	2300      	movs	r3, #0
 80045b0:	77fb      	strb	r3, [r7, #31]
  }
  WS28XX_UnLock(hLed);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff fe7e 	bl	80042b4 <WS28XX_UnLock>
  return answer;
 80045b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3724      	adds	r7, #36	@ 0x24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd90      	pop	{r4, r7, pc}
	...

080045c4 <rand>:
 80045c4:	4b16      	ldr	r3, [pc, #88]	@ (8004620 <rand+0x5c>)
 80045c6:	b510      	push	{r4, lr}
 80045c8:	681c      	ldr	r4, [r3, #0]
 80045ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80045cc:	b9b3      	cbnz	r3, 80045fc <rand+0x38>
 80045ce:	2018      	movs	r0, #24
 80045d0:	f000 fa30 	bl	8004a34 <malloc>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6320      	str	r0, [r4, #48]	@ 0x30
 80045d8:	b920      	cbnz	r0, 80045e4 <rand+0x20>
 80045da:	2152      	movs	r1, #82	@ 0x52
 80045dc:	4b11      	ldr	r3, [pc, #68]	@ (8004624 <rand+0x60>)
 80045de:	4812      	ldr	r0, [pc, #72]	@ (8004628 <rand+0x64>)
 80045e0:	f000 f9c2 	bl	8004968 <__assert_func>
 80045e4:	4911      	ldr	r1, [pc, #68]	@ (800462c <rand+0x68>)
 80045e6:	4b12      	ldr	r3, [pc, #72]	@ (8004630 <rand+0x6c>)
 80045e8:	e9c0 1300 	strd	r1, r3, [r0]
 80045ec:	4b11      	ldr	r3, [pc, #68]	@ (8004634 <rand+0x70>)
 80045ee:	2100      	movs	r1, #0
 80045f0:	6083      	str	r3, [r0, #8]
 80045f2:	230b      	movs	r3, #11
 80045f4:	8183      	strh	r3, [r0, #12]
 80045f6:	2001      	movs	r0, #1
 80045f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80045fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80045fe:	480e      	ldr	r0, [pc, #56]	@ (8004638 <rand+0x74>)
 8004600:	690b      	ldr	r3, [r1, #16]
 8004602:	694c      	ldr	r4, [r1, #20]
 8004604:	4358      	muls	r0, r3
 8004606:	4a0d      	ldr	r2, [pc, #52]	@ (800463c <rand+0x78>)
 8004608:	fb02 0004 	mla	r0, r2, r4, r0
 800460c:	fba3 3202 	umull	r3, r2, r3, r2
 8004610:	3301      	adds	r3, #1
 8004612:	eb40 0002 	adc.w	r0, r0, r2
 8004616:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800461a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800461e:	bd10      	pop	{r4, pc}
 8004620:	20000028 	.word	0x20000028
 8004624:	08005708 	.word	0x08005708
 8004628:	0800571f 	.word	0x0800571f
 800462c:	abcd330e 	.word	0xabcd330e
 8004630:	e66d1234 	.word	0xe66d1234
 8004634:	0005deec 	.word	0x0005deec
 8004638:	5851f42d 	.word	0x5851f42d
 800463c:	4c957f2d 	.word	0x4c957f2d

08004640 <std>:
 8004640:	2300      	movs	r3, #0
 8004642:	b510      	push	{r4, lr}
 8004644:	4604      	mov	r4, r0
 8004646:	e9c0 3300 	strd	r3, r3, [r0]
 800464a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800464e:	6083      	str	r3, [r0, #8]
 8004650:	8181      	strh	r1, [r0, #12]
 8004652:	6643      	str	r3, [r0, #100]	@ 0x64
 8004654:	81c2      	strh	r2, [r0, #14]
 8004656:	6183      	str	r3, [r0, #24]
 8004658:	4619      	mov	r1, r3
 800465a:	2208      	movs	r2, #8
 800465c:	305c      	adds	r0, #92	@ 0x5c
 800465e:	f000 f906 	bl	800486e <memset>
 8004662:	4b0d      	ldr	r3, [pc, #52]	@ (8004698 <std+0x58>)
 8004664:	6224      	str	r4, [r4, #32]
 8004666:	6263      	str	r3, [r4, #36]	@ 0x24
 8004668:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <std+0x5c>)
 800466a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800466c:	4b0c      	ldr	r3, [pc, #48]	@ (80046a0 <std+0x60>)
 800466e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004670:	4b0c      	ldr	r3, [pc, #48]	@ (80046a4 <std+0x64>)
 8004672:	6323      	str	r3, [r4, #48]	@ 0x30
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <std+0x68>)
 8004676:	429c      	cmp	r4, r3
 8004678:	d006      	beq.n	8004688 <std+0x48>
 800467a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800467e:	4294      	cmp	r4, r2
 8004680:	d002      	beq.n	8004688 <std+0x48>
 8004682:	33d0      	adds	r3, #208	@ 0xd0
 8004684:	429c      	cmp	r4, r3
 8004686:	d105      	bne.n	8004694 <std+0x54>
 8004688:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800468c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004690:	f000 b966 	b.w	8004960 <__retarget_lock_init_recursive>
 8004694:	bd10      	pop	{r4, pc}
 8004696:	bf00      	nop
 8004698:	080047e9 	.word	0x080047e9
 800469c:	0800480b 	.word	0x0800480b
 80046a0:	08004843 	.word	0x08004843
 80046a4:	08004867 	.word	0x08004867
 80046a8:	200007ac 	.word	0x200007ac

080046ac <stdio_exit_handler>:
 80046ac:	4a02      	ldr	r2, [pc, #8]	@ (80046b8 <stdio_exit_handler+0xc>)
 80046ae:	4903      	ldr	r1, [pc, #12]	@ (80046bc <stdio_exit_handler+0x10>)
 80046b0:	4803      	ldr	r0, [pc, #12]	@ (80046c0 <stdio_exit_handler+0x14>)
 80046b2:	f000 b869 	b.w	8004788 <_fwalk_sglue>
 80046b6:	bf00      	nop
 80046b8:	2000001c 	.word	0x2000001c
 80046bc:	08005245 	.word	0x08005245
 80046c0:	2000002c 	.word	0x2000002c

080046c4 <cleanup_stdio>:
 80046c4:	6841      	ldr	r1, [r0, #4]
 80046c6:	4b0c      	ldr	r3, [pc, #48]	@ (80046f8 <cleanup_stdio+0x34>)
 80046c8:	b510      	push	{r4, lr}
 80046ca:	4299      	cmp	r1, r3
 80046cc:	4604      	mov	r4, r0
 80046ce:	d001      	beq.n	80046d4 <cleanup_stdio+0x10>
 80046d0:	f000 fdb8 	bl	8005244 <_fflush_r>
 80046d4:	68a1      	ldr	r1, [r4, #8]
 80046d6:	4b09      	ldr	r3, [pc, #36]	@ (80046fc <cleanup_stdio+0x38>)
 80046d8:	4299      	cmp	r1, r3
 80046da:	d002      	beq.n	80046e2 <cleanup_stdio+0x1e>
 80046dc:	4620      	mov	r0, r4
 80046de:	f000 fdb1 	bl	8005244 <_fflush_r>
 80046e2:	68e1      	ldr	r1, [r4, #12]
 80046e4:	4b06      	ldr	r3, [pc, #24]	@ (8004700 <cleanup_stdio+0x3c>)
 80046e6:	4299      	cmp	r1, r3
 80046e8:	d004      	beq.n	80046f4 <cleanup_stdio+0x30>
 80046ea:	4620      	mov	r0, r4
 80046ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f0:	f000 bda8 	b.w	8005244 <_fflush_r>
 80046f4:	bd10      	pop	{r4, pc}
 80046f6:	bf00      	nop
 80046f8:	200007ac 	.word	0x200007ac
 80046fc:	20000814 	.word	0x20000814
 8004700:	2000087c 	.word	0x2000087c

08004704 <global_stdio_init.part.0>:
 8004704:	b510      	push	{r4, lr}
 8004706:	4b0b      	ldr	r3, [pc, #44]	@ (8004734 <global_stdio_init.part.0+0x30>)
 8004708:	4c0b      	ldr	r4, [pc, #44]	@ (8004738 <global_stdio_init.part.0+0x34>)
 800470a:	4a0c      	ldr	r2, [pc, #48]	@ (800473c <global_stdio_init.part.0+0x38>)
 800470c:	4620      	mov	r0, r4
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	2104      	movs	r1, #4
 8004712:	2200      	movs	r2, #0
 8004714:	f7ff ff94 	bl	8004640 <std>
 8004718:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800471c:	2201      	movs	r2, #1
 800471e:	2109      	movs	r1, #9
 8004720:	f7ff ff8e 	bl	8004640 <std>
 8004724:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004728:	2202      	movs	r2, #2
 800472a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800472e:	2112      	movs	r1, #18
 8004730:	f7ff bf86 	b.w	8004640 <std>
 8004734:	200008e4 	.word	0x200008e4
 8004738:	200007ac 	.word	0x200007ac
 800473c:	080046ad 	.word	0x080046ad

08004740 <__sfp_lock_acquire>:
 8004740:	4801      	ldr	r0, [pc, #4]	@ (8004748 <__sfp_lock_acquire+0x8>)
 8004742:	f000 b90e 	b.w	8004962 <__retarget_lock_acquire_recursive>
 8004746:	bf00      	nop
 8004748:	200008ed 	.word	0x200008ed

0800474c <__sfp_lock_release>:
 800474c:	4801      	ldr	r0, [pc, #4]	@ (8004754 <__sfp_lock_release+0x8>)
 800474e:	f000 b909 	b.w	8004964 <__retarget_lock_release_recursive>
 8004752:	bf00      	nop
 8004754:	200008ed 	.word	0x200008ed

08004758 <__sinit>:
 8004758:	b510      	push	{r4, lr}
 800475a:	4604      	mov	r4, r0
 800475c:	f7ff fff0 	bl	8004740 <__sfp_lock_acquire>
 8004760:	6a23      	ldr	r3, [r4, #32]
 8004762:	b11b      	cbz	r3, 800476c <__sinit+0x14>
 8004764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004768:	f7ff bff0 	b.w	800474c <__sfp_lock_release>
 800476c:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <__sinit+0x28>)
 800476e:	6223      	str	r3, [r4, #32]
 8004770:	4b04      	ldr	r3, [pc, #16]	@ (8004784 <__sinit+0x2c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f5      	bne.n	8004764 <__sinit+0xc>
 8004778:	f7ff ffc4 	bl	8004704 <global_stdio_init.part.0>
 800477c:	e7f2      	b.n	8004764 <__sinit+0xc>
 800477e:	bf00      	nop
 8004780:	080046c5 	.word	0x080046c5
 8004784:	200008e4 	.word	0x200008e4

08004788 <_fwalk_sglue>:
 8004788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800478c:	4607      	mov	r7, r0
 800478e:	4688      	mov	r8, r1
 8004790:	4614      	mov	r4, r2
 8004792:	2600      	movs	r6, #0
 8004794:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004798:	f1b9 0901 	subs.w	r9, r9, #1
 800479c:	d505      	bpl.n	80047aa <_fwalk_sglue+0x22>
 800479e:	6824      	ldr	r4, [r4, #0]
 80047a0:	2c00      	cmp	r4, #0
 80047a2:	d1f7      	bne.n	8004794 <_fwalk_sglue+0xc>
 80047a4:	4630      	mov	r0, r6
 80047a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047aa:	89ab      	ldrh	r3, [r5, #12]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d907      	bls.n	80047c0 <_fwalk_sglue+0x38>
 80047b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047b4:	3301      	adds	r3, #1
 80047b6:	d003      	beq.n	80047c0 <_fwalk_sglue+0x38>
 80047b8:	4629      	mov	r1, r5
 80047ba:	4638      	mov	r0, r7
 80047bc:	47c0      	blx	r8
 80047be:	4306      	orrs	r6, r0
 80047c0:	3568      	adds	r5, #104	@ 0x68
 80047c2:	e7e9      	b.n	8004798 <_fwalk_sglue+0x10>

080047c4 <iprintf>:
 80047c4:	b40f      	push	{r0, r1, r2, r3}
 80047c6:	b507      	push	{r0, r1, r2, lr}
 80047c8:	4906      	ldr	r1, [pc, #24]	@ (80047e4 <iprintf+0x20>)
 80047ca:	ab04      	add	r3, sp, #16
 80047cc:	6808      	ldr	r0, [r1, #0]
 80047ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80047d2:	6881      	ldr	r1, [r0, #8]
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	f000 fa0b 	bl	8004bf0 <_vfiprintf_r>
 80047da:	b003      	add	sp, #12
 80047dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80047e0:	b004      	add	sp, #16
 80047e2:	4770      	bx	lr
 80047e4:	20000028 	.word	0x20000028

080047e8 <__sread>:
 80047e8:	b510      	push	{r4, lr}
 80047ea:	460c      	mov	r4, r1
 80047ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f0:	f000 f868 	bl	80048c4 <_read_r>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	bfab      	itete	ge
 80047f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047fa:	89a3      	ldrhlt	r3, [r4, #12]
 80047fc:	181b      	addge	r3, r3, r0
 80047fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004802:	bfac      	ite	ge
 8004804:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004806:	81a3      	strhlt	r3, [r4, #12]
 8004808:	bd10      	pop	{r4, pc}

0800480a <__swrite>:
 800480a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800480e:	461f      	mov	r7, r3
 8004810:	898b      	ldrh	r3, [r1, #12]
 8004812:	4605      	mov	r5, r0
 8004814:	05db      	lsls	r3, r3, #23
 8004816:	460c      	mov	r4, r1
 8004818:	4616      	mov	r6, r2
 800481a:	d505      	bpl.n	8004828 <__swrite+0x1e>
 800481c:	2302      	movs	r3, #2
 800481e:	2200      	movs	r2, #0
 8004820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004824:	f000 f83c 	bl	80048a0 <_lseek_r>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	4632      	mov	r2, r6
 800482c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004830:	81a3      	strh	r3, [r4, #12]
 8004832:	4628      	mov	r0, r5
 8004834:	463b      	mov	r3, r7
 8004836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800483a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800483e:	f000 b853 	b.w	80048e8 <_write_r>

08004842 <__sseek>:
 8004842:	b510      	push	{r4, lr}
 8004844:	460c      	mov	r4, r1
 8004846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484a:	f000 f829 	bl	80048a0 <_lseek_r>
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	bf15      	itete	ne
 8004854:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004856:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800485a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800485e:	81a3      	strheq	r3, [r4, #12]
 8004860:	bf18      	it	ne
 8004862:	81a3      	strhne	r3, [r4, #12]
 8004864:	bd10      	pop	{r4, pc}

08004866 <__sclose>:
 8004866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486a:	f000 b809 	b.w	8004880 <_close_r>

0800486e <memset>:
 800486e:	4603      	mov	r3, r0
 8004870:	4402      	add	r2, r0
 8004872:	4293      	cmp	r3, r2
 8004874:	d100      	bne.n	8004878 <memset+0xa>
 8004876:	4770      	bx	lr
 8004878:	f803 1b01 	strb.w	r1, [r3], #1
 800487c:	e7f9      	b.n	8004872 <memset+0x4>
	...

08004880 <_close_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	2300      	movs	r3, #0
 8004884:	4d05      	ldr	r5, [pc, #20]	@ (800489c <_close_r+0x1c>)
 8004886:	4604      	mov	r4, r0
 8004888:	4608      	mov	r0, r1
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	f7fc ffa1 	bl	80017d2 <_close>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_close_r+0x1a>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	b103      	cbz	r3, 800489a <_close_r+0x1a>
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	200008e8 	.word	0x200008e8

080048a0 <_lseek_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4604      	mov	r4, r0
 80048a4:	4608      	mov	r0, r1
 80048a6:	4611      	mov	r1, r2
 80048a8:	2200      	movs	r2, #0
 80048aa:	4d05      	ldr	r5, [pc, #20]	@ (80048c0 <_lseek_r+0x20>)
 80048ac:	602a      	str	r2, [r5, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f7fc ffb3 	bl	800181a <_lseek>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d102      	bne.n	80048be <_lseek_r+0x1e>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	b103      	cbz	r3, 80048be <_lseek_r+0x1e>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	200008e8 	.word	0x200008e8

080048c4 <_read_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	4604      	mov	r4, r0
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	2200      	movs	r2, #0
 80048ce:	4d05      	ldr	r5, [pc, #20]	@ (80048e4 <_read_r+0x20>)
 80048d0:	602a      	str	r2, [r5, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f7fc ff60 	bl	8001798 <_read>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_read_r+0x1e>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_read_r+0x1e>
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	200008e8 	.word	0x200008e8

080048e8 <_write_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4604      	mov	r4, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	2200      	movs	r2, #0
 80048f2:	4d05      	ldr	r5, [pc, #20]	@ (8004908 <_write_r+0x20>)
 80048f4:	602a      	str	r2, [r5, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f7fc fb5e 	bl	8000fb8 <_write>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d102      	bne.n	8004906 <_write_r+0x1e>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	b103      	cbz	r3, 8004906 <_write_r+0x1e>
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	bd38      	pop	{r3, r4, r5, pc}
 8004908:	200008e8 	.word	0x200008e8

0800490c <__errno>:
 800490c:	4b01      	ldr	r3, [pc, #4]	@ (8004914 <__errno+0x8>)
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000028 	.word	0x20000028

08004918 <__libc_init_array>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	2600      	movs	r6, #0
 800491c:	4d0c      	ldr	r5, [pc, #48]	@ (8004950 <__libc_init_array+0x38>)
 800491e:	4c0d      	ldr	r4, [pc, #52]	@ (8004954 <__libc_init_array+0x3c>)
 8004920:	1b64      	subs	r4, r4, r5
 8004922:	10a4      	asrs	r4, r4, #2
 8004924:	42a6      	cmp	r6, r4
 8004926:	d109      	bne.n	800493c <__libc_init_array+0x24>
 8004928:	f000 fe46 	bl	80055b8 <_init>
 800492c:	2600      	movs	r6, #0
 800492e:	4d0a      	ldr	r5, [pc, #40]	@ (8004958 <__libc_init_array+0x40>)
 8004930:	4c0a      	ldr	r4, [pc, #40]	@ (800495c <__libc_init_array+0x44>)
 8004932:	1b64      	subs	r4, r4, r5
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	42a6      	cmp	r6, r4
 8004938:	d105      	bne.n	8004946 <__libc_init_array+0x2e>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004940:	4798      	blx	r3
 8004942:	3601      	adds	r6, #1
 8004944:	e7ee      	b.n	8004924 <__libc_init_array+0xc>
 8004946:	f855 3b04 	ldr.w	r3, [r5], #4
 800494a:	4798      	blx	r3
 800494c:	3601      	adds	r6, #1
 800494e:	e7f2      	b.n	8004936 <__libc_init_array+0x1e>
 8004950:	080057e8 	.word	0x080057e8
 8004954:	080057e8 	.word	0x080057e8
 8004958:	080057e8 	.word	0x080057e8
 800495c:	080057ec 	.word	0x080057ec

08004960 <__retarget_lock_init_recursive>:
 8004960:	4770      	bx	lr

08004962 <__retarget_lock_acquire_recursive>:
 8004962:	4770      	bx	lr

08004964 <__retarget_lock_release_recursive>:
 8004964:	4770      	bx	lr
	...

08004968 <__assert_func>:
 8004968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800496a:	4614      	mov	r4, r2
 800496c:	461a      	mov	r2, r3
 800496e:	4b09      	ldr	r3, [pc, #36]	@ (8004994 <__assert_func+0x2c>)
 8004970:	4605      	mov	r5, r0
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68d8      	ldr	r0, [r3, #12]
 8004976:	b954      	cbnz	r4, 800498e <__assert_func+0x26>
 8004978:	4b07      	ldr	r3, [pc, #28]	@ (8004998 <__assert_func+0x30>)
 800497a:	461c      	mov	r4, r3
 800497c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004980:	9100      	str	r1, [sp, #0]
 8004982:	462b      	mov	r3, r5
 8004984:	4905      	ldr	r1, [pc, #20]	@ (800499c <__assert_func+0x34>)
 8004986:	f000 fc85 	bl	8005294 <fiprintf>
 800498a:	f000 fd47 	bl	800541c <abort>
 800498e:	4b04      	ldr	r3, [pc, #16]	@ (80049a0 <__assert_func+0x38>)
 8004990:	e7f4      	b.n	800497c <__assert_func+0x14>
 8004992:	bf00      	nop
 8004994:	20000028 	.word	0x20000028
 8004998:	080057b2 	.word	0x080057b2
 800499c:	08005784 	.word	0x08005784
 80049a0:	08005777 	.word	0x08005777

080049a4 <_free_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	4605      	mov	r5, r0
 80049a8:	2900      	cmp	r1, #0
 80049aa:	d040      	beq.n	8004a2e <_free_r+0x8a>
 80049ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b0:	1f0c      	subs	r4, r1, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bfb8      	it	lt
 80049b6:	18e4      	addlt	r4, r4, r3
 80049b8:	f000 f8e6 	bl	8004b88 <__malloc_lock>
 80049bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a30 <_free_r+0x8c>)
 80049be:	6813      	ldr	r3, [r2, #0]
 80049c0:	b933      	cbnz	r3, 80049d0 <_free_r+0x2c>
 80049c2:	6063      	str	r3, [r4, #4]
 80049c4:	6014      	str	r4, [r2, #0]
 80049c6:	4628      	mov	r0, r5
 80049c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049cc:	f000 b8e2 	b.w	8004b94 <__malloc_unlock>
 80049d0:	42a3      	cmp	r3, r4
 80049d2:	d908      	bls.n	80049e6 <_free_r+0x42>
 80049d4:	6820      	ldr	r0, [r4, #0]
 80049d6:	1821      	adds	r1, r4, r0
 80049d8:	428b      	cmp	r3, r1
 80049da:	bf01      	itttt	eq
 80049dc:	6819      	ldreq	r1, [r3, #0]
 80049de:	685b      	ldreq	r3, [r3, #4]
 80049e0:	1809      	addeq	r1, r1, r0
 80049e2:	6021      	streq	r1, [r4, #0]
 80049e4:	e7ed      	b.n	80049c2 <_free_r+0x1e>
 80049e6:	461a      	mov	r2, r3
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	b10b      	cbz	r3, 80049f0 <_free_r+0x4c>
 80049ec:	42a3      	cmp	r3, r4
 80049ee:	d9fa      	bls.n	80049e6 <_free_r+0x42>
 80049f0:	6811      	ldr	r1, [r2, #0]
 80049f2:	1850      	adds	r0, r2, r1
 80049f4:	42a0      	cmp	r0, r4
 80049f6:	d10b      	bne.n	8004a10 <_free_r+0x6c>
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	4401      	add	r1, r0
 80049fc:	1850      	adds	r0, r2, r1
 80049fe:	4283      	cmp	r3, r0
 8004a00:	6011      	str	r1, [r2, #0]
 8004a02:	d1e0      	bne.n	80049c6 <_free_r+0x22>
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4408      	add	r0, r1
 8004a0a:	6010      	str	r0, [r2, #0]
 8004a0c:	6053      	str	r3, [r2, #4]
 8004a0e:	e7da      	b.n	80049c6 <_free_r+0x22>
 8004a10:	d902      	bls.n	8004a18 <_free_r+0x74>
 8004a12:	230c      	movs	r3, #12
 8004a14:	602b      	str	r3, [r5, #0]
 8004a16:	e7d6      	b.n	80049c6 <_free_r+0x22>
 8004a18:	6820      	ldr	r0, [r4, #0]
 8004a1a:	1821      	adds	r1, r4, r0
 8004a1c:	428b      	cmp	r3, r1
 8004a1e:	bf01      	itttt	eq
 8004a20:	6819      	ldreq	r1, [r3, #0]
 8004a22:	685b      	ldreq	r3, [r3, #4]
 8004a24:	1809      	addeq	r1, r1, r0
 8004a26:	6021      	streq	r1, [r4, #0]
 8004a28:	6063      	str	r3, [r4, #4]
 8004a2a:	6054      	str	r4, [r2, #4]
 8004a2c:	e7cb      	b.n	80049c6 <_free_r+0x22>
 8004a2e:	bd38      	pop	{r3, r4, r5, pc}
 8004a30:	200008f4 	.word	0x200008f4

08004a34 <malloc>:
 8004a34:	4b02      	ldr	r3, [pc, #8]	@ (8004a40 <malloc+0xc>)
 8004a36:	4601      	mov	r1, r0
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	f000 b825 	b.w	8004a88 <_malloc_r>
 8004a3e:	bf00      	nop
 8004a40:	20000028 	.word	0x20000028

08004a44 <sbrk_aligned>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	4e0f      	ldr	r6, [pc, #60]	@ (8004a84 <sbrk_aligned+0x40>)
 8004a48:	460c      	mov	r4, r1
 8004a4a:	6831      	ldr	r1, [r6, #0]
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	b911      	cbnz	r1, 8004a56 <sbrk_aligned+0x12>
 8004a50:	f000 fcc6 	bl	80053e0 <_sbrk_r>
 8004a54:	6030      	str	r0, [r6, #0]
 8004a56:	4621      	mov	r1, r4
 8004a58:	4628      	mov	r0, r5
 8004a5a:	f000 fcc1 	bl	80053e0 <_sbrk_r>
 8004a5e:	1c43      	adds	r3, r0, #1
 8004a60:	d103      	bne.n	8004a6a <sbrk_aligned+0x26>
 8004a62:	f04f 34ff 	mov.w	r4, #4294967295
 8004a66:	4620      	mov	r0, r4
 8004a68:	bd70      	pop	{r4, r5, r6, pc}
 8004a6a:	1cc4      	adds	r4, r0, #3
 8004a6c:	f024 0403 	bic.w	r4, r4, #3
 8004a70:	42a0      	cmp	r0, r4
 8004a72:	d0f8      	beq.n	8004a66 <sbrk_aligned+0x22>
 8004a74:	1a21      	subs	r1, r4, r0
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 fcb2 	bl	80053e0 <_sbrk_r>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d1f2      	bne.n	8004a66 <sbrk_aligned+0x22>
 8004a80:	e7ef      	b.n	8004a62 <sbrk_aligned+0x1e>
 8004a82:	bf00      	nop
 8004a84:	200008f0 	.word	0x200008f0

08004a88 <_malloc_r>:
 8004a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a8c:	1ccd      	adds	r5, r1, #3
 8004a8e:	f025 0503 	bic.w	r5, r5, #3
 8004a92:	3508      	adds	r5, #8
 8004a94:	2d0c      	cmp	r5, #12
 8004a96:	bf38      	it	cc
 8004a98:	250c      	movcc	r5, #12
 8004a9a:	2d00      	cmp	r5, #0
 8004a9c:	4606      	mov	r6, r0
 8004a9e:	db01      	blt.n	8004aa4 <_malloc_r+0x1c>
 8004aa0:	42a9      	cmp	r1, r5
 8004aa2:	d904      	bls.n	8004aae <_malloc_r+0x26>
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	6033      	str	r3, [r6, #0]
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b84 <_malloc_r+0xfc>
 8004ab2:	f000 f869 	bl	8004b88 <__malloc_lock>
 8004ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8004aba:	461c      	mov	r4, r3
 8004abc:	bb44      	cbnz	r4, 8004b10 <_malloc_r+0x88>
 8004abe:	4629      	mov	r1, r5
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f7ff ffbf 	bl	8004a44 <sbrk_aligned>
 8004ac6:	1c43      	adds	r3, r0, #1
 8004ac8:	4604      	mov	r4, r0
 8004aca:	d158      	bne.n	8004b7e <_malloc_r+0xf6>
 8004acc:	f8d8 4000 	ldr.w	r4, [r8]
 8004ad0:	4627      	mov	r7, r4
 8004ad2:	2f00      	cmp	r7, #0
 8004ad4:	d143      	bne.n	8004b5e <_malloc_r+0xd6>
 8004ad6:	2c00      	cmp	r4, #0
 8004ad8:	d04b      	beq.n	8004b72 <_malloc_r+0xea>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	4639      	mov	r1, r7
 8004ade:	4630      	mov	r0, r6
 8004ae0:	eb04 0903 	add.w	r9, r4, r3
 8004ae4:	f000 fc7c 	bl	80053e0 <_sbrk_r>
 8004ae8:	4581      	cmp	r9, r0
 8004aea:	d142      	bne.n	8004b72 <_malloc_r+0xea>
 8004aec:	6821      	ldr	r1, [r4, #0]
 8004aee:	4630      	mov	r0, r6
 8004af0:	1a6d      	subs	r5, r5, r1
 8004af2:	4629      	mov	r1, r5
 8004af4:	f7ff ffa6 	bl	8004a44 <sbrk_aligned>
 8004af8:	3001      	adds	r0, #1
 8004afa:	d03a      	beq.n	8004b72 <_malloc_r+0xea>
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	442b      	add	r3, r5
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	f8d8 3000 	ldr.w	r3, [r8]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	bb62      	cbnz	r2, 8004b64 <_malloc_r+0xdc>
 8004b0a:	f8c8 7000 	str.w	r7, [r8]
 8004b0e:	e00f      	b.n	8004b30 <_malloc_r+0xa8>
 8004b10:	6822      	ldr	r2, [r4, #0]
 8004b12:	1b52      	subs	r2, r2, r5
 8004b14:	d420      	bmi.n	8004b58 <_malloc_r+0xd0>
 8004b16:	2a0b      	cmp	r2, #11
 8004b18:	d917      	bls.n	8004b4a <_malloc_r+0xc2>
 8004b1a:	1961      	adds	r1, r4, r5
 8004b1c:	42a3      	cmp	r3, r4
 8004b1e:	6025      	str	r5, [r4, #0]
 8004b20:	bf18      	it	ne
 8004b22:	6059      	strne	r1, [r3, #4]
 8004b24:	6863      	ldr	r3, [r4, #4]
 8004b26:	bf08      	it	eq
 8004b28:	f8c8 1000 	streq.w	r1, [r8]
 8004b2c:	5162      	str	r2, [r4, r5]
 8004b2e:	604b      	str	r3, [r1, #4]
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 f82f 	bl	8004b94 <__malloc_unlock>
 8004b36:	f104 000b 	add.w	r0, r4, #11
 8004b3a:	1d23      	adds	r3, r4, #4
 8004b3c:	f020 0007 	bic.w	r0, r0, #7
 8004b40:	1ac2      	subs	r2, r0, r3
 8004b42:	bf1c      	itt	ne
 8004b44:	1a1b      	subne	r3, r3, r0
 8004b46:	50a3      	strne	r3, [r4, r2]
 8004b48:	e7af      	b.n	8004aaa <_malloc_r+0x22>
 8004b4a:	6862      	ldr	r2, [r4, #4]
 8004b4c:	42a3      	cmp	r3, r4
 8004b4e:	bf0c      	ite	eq
 8004b50:	f8c8 2000 	streq.w	r2, [r8]
 8004b54:	605a      	strne	r2, [r3, #4]
 8004b56:	e7eb      	b.n	8004b30 <_malloc_r+0xa8>
 8004b58:	4623      	mov	r3, r4
 8004b5a:	6864      	ldr	r4, [r4, #4]
 8004b5c:	e7ae      	b.n	8004abc <_malloc_r+0x34>
 8004b5e:	463c      	mov	r4, r7
 8004b60:	687f      	ldr	r7, [r7, #4]
 8004b62:	e7b6      	b.n	8004ad2 <_malloc_r+0x4a>
 8004b64:	461a      	mov	r2, r3
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	42a3      	cmp	r3, r4
 8004b6a:	d1fb      	bne.n	8004b64 <_malloc_r+0xdc>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	6053      	str	r3, [r2, #4]
 8004b70:	e7de      	b.n	8004b30 <_malloc_r+0xa8>
 8004b72:	230c      	movs	r3, #12
 8004b74:	4630      	mov	r0, r6
 8004b76:	6033      	str	r3, [r6, #0]
 8004b78:	f000 f80c 	bl	8004b94 <__malloc_unlock>
 8004b7c:	e794      	b.n	8004aa8 <_malloc_r+0x20>
 8004b7e:	6005      	str	r5, [r0, #0]
 8004b80:	e7d6      	b.n	8004b30 <_malloc_r+0xa8>
 8004b82:	bf00      	nop
 8004b84:	200008f4 	.word	0x200008f4

08004b88 <__malloc_lock>:
 8004b88:	4801      	ldr	r0, [pc, #4]	@ (8004b90 <__malloc_lock+0x8>)
 8004b8a:	f7ff beea 	b.w	8004962 <__retarget_lock_acquire_recursive>
 8004b8e:	bf00      	nop
 8004b90:	200008ec 	.word	0x200008ec

08004b94 <__malloc_unlock>:
 8004b94:	4801      	ldr	r0, [pc, #4]	@ (8004b9c <__malloc_unlock+0x8>)
 8004b96:	f7ff bee5 	b.w	8004964 <__retarget_lock_release_recursive>
 8004b9a:	bf00      	nop
 8004b9c:	200008ec 	.word	0x200008ec

08004ba0 <__sfputc_r>:
 8004ba0:	6893      	ldr	r3, [r2, #8]
 8004ba2:	b410      	push	{r4}
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	6093      	str	r3, [r2, #8]
 8004baa:	da07      	bge.n	8004bbc <__sfputc_r+0x1c>
 8004bac:	6994      	ldr	r4, [r2, #24]
 8004bae:	42a3      	cmp	r3, r4
 8004bb0:	db01      	blt.n	8004bb6 <__sfputc_r+0x16>
 8004bb2:	290a      	cmp	r1, #10
 8004bb4:	d102      	bne.n	8004bbc <__sfputc_r+0x1c>
 8004bb6:	bc10      	pop	{r4}
 8004bb8:	f000 bb7e 	b.w	80052b8 <__swbuf_r>
 8004bbc:	6813      	ldr	r3, [r2, #0]
 8004bbe:	1c58      	adds	r0, r3, #1
 8004bc0:	6010      	str	r0, [r2, #0]
 8004bc2:	7019      	strb	r1, [r3, #0]
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	bc10      	pop	{r4}
 8004bc8:	4770      	bx	lr

08004bca <__sfputs_r>:
 8004bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bcc:	4606      	mov	r6, r0
 8004bce:	460f      	mov	r7, r1
 8004bd0:	4614      	mov	r4, r2
 8004bd2:	18d5      	adds	r5, r2, r3
 8004bd4:	42ac      	cmp	r4, r5
 8004bd6:	d101      	bne.n	8004bdc <__sfputs_r+0x12>
 8004bd8:	2000      	movs	r0, #0
 8004bda:	e007      	b.n	8004bec <__sfputs_r+0x22>
 8004bdc:	463a      	mov	r2, r7
 8004bde:	4630      	mov	r0, r6
 8004be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be4:	f7ff ffdc 	bl	8004ba0 <__sfputc_r>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	d1f3      	bne.n	8004bd4 <__sfputs_r+0xa>
 8004bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bf0 <_vfiprintf_r>:
 8004bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf4:	460d      	mov	r5, r1
 8004bf6:	4614      	mov	r4, r2
 8004bf8:	4698      	mov	r8, r3
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	b09d      	sub	sp, #116	@ 0x74
 8004bfe:	b118      	cbz	r0, 8004c08 <_vfiprintf_r+0x18>
 8004c00:	6a03      	ldr	r3, [r0, #32]
 8004c02:	b90b      	cbnz	r3, 8004c08 <_vfiprintf_r+0x18>
 8004c04:	f7ff fda8 	bl	8004758 <__sinit>
 8004c08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c0a:	07d9      	lsls	r1, r3, #31
 8004c0c:	d405      	bmi.n	8004c1a <_vfiprintf_r+0x2a>
 8004c0e:	89ab      	ldrh	r3, [r5, #12]
 8004c10:	059a      	lsls	r2, r3, #22
 8004c12:	d402      	bmi.n	8004c1a <_vfiprintf_r+0x2a>
 8004c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c16:	f7ff fea4 	bl	8004962 <__retarget_lock_acquire_recursive>
 8004c1a:	89ab      	ldrh	r3, [r5, #12]
 8004c1c:	071b      	lsls	r3, r3, #28
 8004c1e:	d501      	bpl.n	8004c24 <_vfiprintf_r+0x34>
 8004c20:	692b      	ldr	r3, [r5, #16]
 8004c22:	b99b      	cbnz	r3, 8004c4c <_vfiprintf_r+0x5c>
 8004c24:	4629      	mov	r1, r5
 8004c26:	4630      	mov	r0, r6
 8004c28:	f000 fb84 	bl	8005334 <__swsetup_r>
 8004c2c:	b170      	cbz	r0, 8004c4c <_vfiprintf_r+0x5c>
 8004c2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c30:	07dc      	lsls	r4, r3, #31
 8004c32:	d504      	bpl.n	8004c3e <_vfiprintf_r+0x4e>
 8004c34:	f04f 30ff 	mov.w	r0, #4294967295
 8004c38:	b01d      	add	sp, #116	@ 0x74
 8004c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3e:	89ab      	ldrh	r3, [r5, #12]
 8004c40:	0598      	lsls	r0, r3, #22
 8004c42:	d4f7      	bmi.n	8004c34 <_vfiprintf_r+0x44>
 8004c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c46:	f7ff fe8d 	bl	8004964 <__retarget_lock_release_recursive>
 8004c4a:	e7f3      	b.n	8004c34 <_vfiprintf_r+0x44>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c50:	2320      	movs	r3, #32
 8004c52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c56:	2330      	movs	r3, #48	@ 0x30
 8004c58:	f04f 0901 	mov.w	r9, #1
 8004c5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c60:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004e0c <_vfiprintf_r+0x21c>
 8004c64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c68:	4623      	mov	r3, r4
 8004c6a:	469a      	mov	sl, r3
 8004c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c70:	b10a      	cbz	r2, 8004c76 <_vfiprintf_r+0x86>
 8004c72:	2a25      	cmp	r2, #37	@ 0x25
 8004c74:	d1f9      	bne.n	8004c6a <_vfiprintf_r+0x7a>
 8004c76:	ebba 0b04 	subs.w	fp, sl, r4
 8004c7a:	d00b      	beq.n	8004c94 <_vfiprintf_r+0xa4>
 8004c7c:	465b      	mov	r3, fp
 8004c7e:	4622      	mov	r2, r4
 8004c80:	4629      	mov	r1, r5
 8004c82:	4630      	mov	r0, r6
 8004c84:	f7ff ffa1 	bl	8004bca <__sfputs_r>
 8004c88:	3001      	adds	r0, #1
 8004c8a:	f000 80a7 	beq.w	8004ddc <_vfiprintf_r+0x1ec>
 8004c8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c90:	445a      	add	r2, fp
 8004c92:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c94:	f89a 3000 	ldrb.w	r3, [sl]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 809f 	beq.w	8004ddc <_vfiprintf_r+0x1ec>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ca8:	f10a 0a01 	add.w	sl, sl, #1
 8004cac:	9304      	str	r3, [sp, #16]
 8004cae:	9307      	str	r3, [sp, #28]
 8004cb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cb6:	4654      	mov	r4, sl
 8004cb8:	2205      	movs	r2, #5
 8004cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cbe:	4853      	ldr	r0, [pc, #332]	@ (8004e0c <_vfiprintf_r+0x21c>)
 8004cc0:	f000 fb9e 	bl	8005400 <memchr>
 8004cc4:	9a04      	ldr	r2, [sp, #16]
 8004cc6:	b9d8      	cbnz	r0, 8004d00 <_vfiprintf_r+0x110>
 8004cc8:	06d1      	lsls	r1, r2, #27
 8004cca:	bf44      	itt	mi
 8004ccc:	2320      	movmi	r3, #32
 8004cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cd2:	0713      	lsls	r3, r2, #28
 8004cd4:	bf44      	itt	mi
 8004cd6:	232b      	movmi	r3, #43	@ 0x2b
 8004cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ce0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ce2:	d015      	beq.n	8004d10 <_vfiprintf_r+0x120>
 8004ce4:	4654      	mov	r4, sl
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	f04f 0c0a 	mov.w	ip, #10
 8004cec:	9a07      	ldr	r2, [sp, #28]
 8004cee:	4621      	mov	r1, r4
 8004cf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cf4:	3b30      	subs	r3, #48	@ 0x30
 8004cf6:	2b09      	cmp	r3, #9
 8004cf8:	d94b      	bls.n	8004d92 <_vfiprintf_r+0x1a2>
 8004cfa:	b1b0      	cbz	r0, 8004d2a <_vfiprintf_r+0x13a>
 8004cfc:	9207      	str	r2, [sp, #28]
 8004cfe:	e014      	b.n	8004d2a <_vfiprintf_r+0x13a>
 8004d00:	eba0 0308 	sub.w	r3, r0, r8
 8004d04:	fa09 f303 	lsl.w	r3, r9, r3
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	46a2      	mov	sl, r4
 8004d0c:	9304      	str	r3, [sp, #16]
 8004d0e:	e7d2      	b.n	8004cb6 <_vfiprintf_r+0xc6>
 8004d10:	9b03      	ldr	r3, [sp, #12]
 8004d12:	1d19      	adds	r1, r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	9103      	str	r1, [sp, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bfbb      	ittet	lt
 8004d1c:	425b      	neglt	r3, r3
 8004d1e:	f042 0202 	orrlt.w	r2, r2, #2
 8004d22:	9307      	strge	r3, [sp, #28]
 8004d24:	9307      	strlt	r3, [sp, #28]
 8004d26:	bfb8      	it	lt
 8004d28:	9204      	strlt	r2, [sp, #16]
 8004d2a:	7823      	ldrb	r3, [r4, #0]
 8004d2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d2e:	d10a      	bne.n	8004d46 <_vfiprintf_r+0x156>
 8004d30:	7863      	ldrb	r3, [r4, #1]
 8004d32:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d34:	d132      	bne.n	8004d9c <_vfiprintf_r+0x1ac>
 8004d36:	9b03      	ldr	r3, [sp, #12]
 8004d38:	3402      	adds	r4, #2
 8004d3a:	1d1a      	adds	r2, r3, #4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	9203      	str	r2, [sp, #12]
 8004d40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d44:	9305      	str	r3, [sp, #20]
 8004d46:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004e10 <_vfiprintf_r+0x220>
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	4650      	mov	r0, sl
 8004d4e:	7821      	ldrb	r1, [r4, #0]
 8004d50:	f000 fb56 	bl	8005400 <memchr>
 8004d54:	b138      	cbz	r0, 8004d66 <_vfiprintf_r+0x176>
 8004d56:	2240      	movs	r2, #64	@ 0x40
 8004d58:	9b04      	ldr	r3, [sp, #16]
 8004d5a:	eba0 000a 	sub.w	r0, r0, sl
 8004d5e:	4082      	lsls	r2, r0
 8004d60:	4313      	orrs	r3, r2
 8004d62:	3401      	adds	r4, #1
 8004d64:	9304      	str	r3, [sp, #16]
 8004d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d6a:	2206      	movs	r2, #6
 8004d6c:	4829      	ldr	r0, [pc, #164]	@ (8004e14 <_vfiprintf_r+0x224>)
 8004d6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d72:	f000 fb45 	bl	8005400 <memchr>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d03f      	beq.n	8004dfa <_vfiprintf_r+0x20a>
 8004d7a:	4b27      	ldr	r3, [pc, #156]	@ (8004e18 <_vfiprintf_r+0x228>)
 8004d7c:	bb1b      	cbnz	r3, 8004dc6 <_vfiprintf_r+0x1d6>
 8004d7e:	9b03      	ldr	r3, [sp, #12]
 8004d80:	3307      	adds	r3, #7
 8004d82:	f023 0307 	bic.w	r3, r3, #7
 8004d86:	3308      	adds	r3, #8
 8004d88:	9303      	str	r3, [sp, #12]
 8004d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d8c:	443b      	add	r3, r7
 8004d8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d90:	e76a      	b.n	8004c68 <_vfiprintf_r+0x78>
 8004d92:	460c      	mov	r4, r1
 8004d94:	2001      	movs	r0, #1
 8004d96:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d9a:	e7a8      	b.n	8004cee <_vfiprintf_r+0xfe>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f04f 0c0a 	mov.w	ip, #10
 8004da2:	4619      	mov	r1, r3
 8004da4:	3401      	adds	r4, #1
 8004da6:	9305      	str	r3, [sp, #20]
 8004da8:	4620      	mov	r0, r4
 8004daa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dae:	3a30      	subs	r2, #48	@ 0x30
 8004db0:	2a09      	cmp	r2, #9
 8004db2:	d903      	bls.n	8004dbc <_vfiprintf_r+0x1cc>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0c6      	beq.n	8004d46 <_vfiprintf_r+0x156>
 8004db8:	9105      	str	r1, [sp, #20]
 8004dba:	e7c4      	b.n	8004d46 <_vfiprintf_r+0x156>
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dc4:	e7f0      	b.n	8004da8 <_vfiprintf_r+0x1b8>
 8004dc6:	ab03      	add	r3, sp, #12
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	462a      	mov	r2, r5
 8004dcc:	4630      	mov	r0, r6
 8004dce:	4b13      	ldr	r3, [pc, #76]	@ (8004e1c <_vfiprintf_r+0x22c>)
 8004dd0:	a904      	add	r1, sp, #16
 8004dd2:	f3af 8000 	nop.w
 8004dd6:	4607      	mov	r7, r0
 8004dd8:	1c78      	adds	r0, r7, #1
 8004dda:	d1d6      	bne.n	8004d8a <_vfiprintf_r+0x19a>
 8004ddc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dde:	07d9      	lsls	r1, r3, #31
 8004de0:	d405      	bmi.n	8004dee <_vfiprintf_r+0x1fe>
 8004de2:	89ab      	ldrh	r3, [r5, #12]
 8004de4:	059a      	lsls	r2, r3, #22
 8004de6:	d402      	bmi.n	8004dee <_vfiprintf_r+0x1fe>
 8004de8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dea:	f7ff fdbb 	bl	8004964 <__retarget_lock_release_recursive>
 8004dee:	89ab      	ldrh	r3, [r5, #12]
 8004df0:	065b      	lsls	r3, r3, #25
 8004df2:	f53f af1f 	bmi.w	8004c34 <_vfiprintf_r+0x44>
 8004df6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004df8:	e71e      	b.n	8004c38 <_vfiprintf_r+0x48>
 8004dfa:	ab03      	add	r3, sp, #12
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	462a      	mov	r2, r5
 8004e00:	4630      	mov	r0, r6
 8004e02:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <_vfiprintf_r+0x22c>)
 8004e04:	a904      	add	r1, sp, #16
 8004e06:	f000 f87d 	bl	8004f04 <_printf_i>
 8004e0a:	e7e4      	b.n	8004dd6 <_vfiprintf_r+0x1e6>
 8004e0c:	080057b3 	.word	0x080057b3
 8004e10:	080057b9 	.word	0x080057b9
 8004e14:	080057bd 	.word	0x080057bd
 8004e18:	00000000 	.word	0x00000000
 8004e1c:	08004bcb 	.word	0x08004bcb

08004e20 <_printf_common>:
 8004e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e24:	4616      	mov	r6, r2
 8004e26:	4698      	mov	r8, r3
 8004e28:	688a      	ldr	r2, [r1, #8]
 8004e2a:	690b      	ldr	r3, [r1, #16]
 8004e2c:	4607      	mov	r7, r0
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	bfb8      	it	lt
 8004e32:	4613      	movlt	r3, r2
 8004e34:	6033      	str	r3, [r6, #0]
 8004e36:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e40:	b10a      	cbz	r2, 8004e46 <_printf_common+0x26>
 8004e42:	3301      	adds	r3, #1
 8004e44:	6033      	str	r3, [r6, #0]
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	0699      	lsls	r1, r3, #26
 8004e4a:	bf42      	ittt	mi
 8004e4c:	6833      	ldrmi	r3, [r6, #0]
 8004e4e:	3302      	addmi	r3, #2
 8004e50:	6033      	strmi	r3, [r6, #0]
 8004e52:	6825      	ldr	r5, [r4, #0]
 8004e54:	f015 0506 	ands.w	r5, r5, #6
 8004e58:	d106      	bne.n	8004e68 <_printf_common+0x48>
 8004e5a:	f104 0a19 	add.w	sl, r4, #25
 8004e5e:	68e3      	ldr	r3, [r4, #12]
 8004e60:	6832      	ldr	r2, [r6, #0]
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	42ab      	cmp	r3, r5
 8004e66:	dc2b      	bgt.n	8004ec0 <_printf_common+0xa0>
 8004e68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	3b00      	subs	r3, #0
 8004e70:	bf18      	it	ne
 8004e72:	2301      	movne	r3, #1
 8004e74:	0692      	lsls	r2, r2, #26
 8004e76:	d430      	bmi.n	8004eda <_printf_common+0xba>
 8004e78:	4641      	mov	r1, r8
 8004e7a:	4638      	mov	r0, r7
 8004e7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e80:	47c8      	blx	r9
 8004e82:	3001      	adds	r0, #1
 8004e84:	d023      	beq.n	8004ece <_printf_common+0xae>
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	6922      	ldr	r2, [r4, #16]
 8004e8a:	f003 0306 	and.w	r3, r3, #6
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	bf14      	ite	ne
 8004e92:	2500      	movne	r5, #0
 8004e94:	6833      	ldreq	r3, [r6, #0]
 8004e96:	f04f 0600 	mov.w	r6, #0
 8004e9a:	bf08      	it	eq
 8004e9c:	68e5      	ldreq	r5, [r4, #12]
 8004e9e:	f104 041a 	add.w	r4, r4, #26
 8004ea2:	bf08      	it	eq
 8004ea4:	1aed      	subeq	r5, r5, r3
 8004ea6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004eaa:	bf08      	it	eq
 8004eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	bfc4      	itt	gt
 8004eb4:	1a9b      	subgt	r3, r3, r2
 8004eb6:	18ed      	addgt	r5, r5, r3
 8004eb8:	42b5      	cmp	r5, r6
 8004eba:	d11a      	bne.n	8004ef2 <_printf_common+0xd2>
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	e008      	b.n	8004ed2 <_printf_common+0xb2>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	4652      	mov	r2, sl
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	47c8      	blx	r9
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d103      	bne.n	8004ed6 <_printf_common+0xb6>
 8004ece:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed6:	3501      	adds	r5, #1
 8004ed8:	e7c1      	b.n	8004e5e <_printf_common+0x3e>
 8004eda:	2030      	movs	r0, #48	@ 0x30
 8004edc:	18e1      	adds	r1, r4, r3
 8004ede:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ee8:	4422      	add	r2, r4
 8004eea:	3302      	adds	r3, #2
 8004eec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ef0:	e7c2      	b.n	8004e78 <_printf_common+0x58>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	4641      	mov	r1, r8
 8004ef8:	4638      	mov	r0, r7
 8004efa:	47c8      	blx	r9
 8004efc:	3001      	adds	r0, #1
 8004efe:	d0e6      	beq.n	8004ece <_printf_common+0xae>
 8004f00:	3601      	adds	r6, #1
 8004f02:	e7d9      	b.n	8004eb8 <_printf_common+0x98>

08004f04 <_printf_i>:
 8004f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f08:	7e0f      	ldrb	r7, [r1, #24]
 8004f0a:	4691      	mov	r9, r2
 8004f0c:	2f78      	cmp	r7, #120	@ 0x78
 8004f0e:	4680      	mov	r8, r0
 8004f10:	460c      	mov	r4, r1
 8004f12:	469a      	mov	sl, r3
 8004f14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f1a:	d807      	bhi.n	8004f2c <_printf_i+0x28>
 8004f1c:	2f62      	cmp	r7, #98	@ 0x62
 8004f1e:	d80a      	bhi.n	8004f36 <_printf_i+0x32>
 8004f20:	2f00      	cmp	r7, #0
 8004f22:	f000 80d3 	beq.w	80050cc <_printf_i+0x1c8>
 8004f26:	2f58      	cmp	r7, #88	@ 0x58
 8004f28:	f000 80ba 	beq.w	80050a0 <_printf_i+0x19c>
 8004f2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f34:	e03a      	b.n	8004fac <_printf_i+0xa8>
 8004f36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f3a:	2b15      	cmp	r3, #21
 8004f3c:	d8f6      	bhi.n	8004f2c <_printf_i+0x28>
 8004f3e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f44 <_printf_i+0x40>)
 8004f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f44:	08004f9d 	.word	0x08004f9d
 8004f48:	08004fb1 	.word	0x08004fb1
 8004f4c:	08004f2d 	.word	0x08004f2d
 8004f50:	08004f2d 	.word	0x08004f2d
 8004f54:	08004f2d 	.word	0x08004f2d
 8004f58:	08004f2d 	.word	0x08004f2d
 8004f5c:	08004fb1 	.word	0x08004fb1
 8004f60:	08004f2d 	.word	0x08004f2d
 8004f64:	08004f2d 	.word	0x08004f2d
 8004f68:	08004f2d 	.word	0x08004f2d
 8004f6c:	08004f2d 	.word	0x08004f2d
 8004f70:	080050b3 	.word	0x080050b3
 8004f74:	08004fdb 	.word	0x08004fdb
 8004f78:	0800506d 	.word	0x0800506d
 8004f7c:	08004f2d 	.word	0x08004f2d
 8004f80:	08004f2d 	.word	0x08004f2d
 8004f84:	080050d5 	.word	0x080050d5
 8004f88:	08004f2d 	.word	0x08004f2d
 8004f8c:	08004fdb 	.word	0x08004fdb
 8004f90:	08004f2d 	.word	0x08004f2d
 8004f94:	08004f2d 	.word	0x08004f2d
 8004f98:	08005075 	.word	0x08005075
 8004f9c:	6833      	ldr	r3, [r6, #0]
 8004f9e:	1d1a      	adds	r2, r3, #4
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6032      	str	r2, [r6, #0]
 8004fa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fac:	2301      	movs	r3, #1
 8004fae:	e09e      	b.n	80050ee <_printf_i+0x1ea>
 8004fb0:	6833      	ldr	r3, [r6, #0]
 8004fb2:	6820      	ldr	r0, [r4, #0]
 8004fb4:	1d19      	adds	r1, r3, #4
 8004fb6:	6031      	str	r1, [r6, #0]
 8004fb8:	0606      	lsls	r6, r0, #24
 8004fba:	d501      	bpl.n	8004fc0 <_printf_i+0xbc>
 8004fbc:	681d      	ldr	r5, [r3, #0]
 8004fbe:	e003      	b.n	8004fc8 <_printf_i+0xc4>
 8004fc0:	0645      	lsls	r5, r0, #25
 8004fc2:	d5fb      	bpl.n	8004fbc <_printf_i+0xb8>
 8004fc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fc8:	2d00      	cmp	r5, #0
 8004fca:	da03      	bge.n	8004fd4 <_printf_i+0xd0>
 8004fcc:	232d      	movs	r3, #45	@ 0x2d
 8004fce:	426d      	negs	r5, r5
 8004fd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fd4:	230a      	movs	r3, #10
 8004fd6:	4859      	ldr	r0, [pc, #356]	@ (800513c <_printf_i+0x238>)
 8004fd8:	e011      	b.n	8004ffe <_printf_i+0xfa>
 8004fda:	6821      	ldr	r1, [r4, #0]
 8004fdc:	6833      	ldr	r3, [r6, #0]
 8004fde:	0608      	lsls	r0, r1, #24
 8004fe0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fe4:	d402      	bmi.n	8004fec <_printf_i+0xe8>
 8004fe6:	0649      	lsls	r1, r1, #25
 8004fe8:	bf48      	it	mi
 8004fea:	b2ad      	uxthmi	r5, r5
 8004fec:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fee:	6033      	str	r3, [r6, #0]
 8004ff0:	bf14      	ite	ne
 8004ff2:	230a      	movne	r3, #10
 8004ff4:	2308      	moveq	r3, #8
 8004ff6:	4851      	ldr	r0, [pc, #324]	@ (800513c <_printf_i+0x238>)
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ffe:	6866      	ldr	r6, [r4, #4]
 8005000:	2e00      	cmp	r6, #0
 8005002:	bfa8      	it	ge
 8005004:	6821      	ldrge	r1, [r4, #0]
 8005006:	60a6      	str	r6, [r4, #8]
 8005008:	bfa4      	itt	ge
 800500a:	f021 0104 	bicge.w	r1, r1, #4
 800500e:	6021      	strge	r1, [r4, #0]
 8005010:	b90d      	cbnz	r5, 8005016 <_printf_i+0x112>
 8005012:	2e00      	cmp	r6, #0
 8005014:	d04b      	beq.n	80050ae <_printf_i+0x1aa>
 8005016:	4616      	mov	r6, r2
 8005018:	fbb5 f1f3 	udiv	r1, r5, r3
 800501c:	fb03 5711 	mls	r7, r3, r1, r5
 8005020:	5dc7      	ldrb	r7, [r0, r7]
 8005022:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005026:	462f      	mov	r7, r5
 8005028:	42bb      	cmp	r3, r7
 800502a:	460d      	mov	r5, r1
 800502c:	d9f4      	bls.n	8005018 <_printf_i+0x114>
 800502e:	2b08      	cmp	r3, #8
 8005030:	d10b      	bne.n	800504a <_printf_i+0x146>
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	07df      	lsls	r7, r3, #31
 8005036:	d508      	bpl.n	800504a <_printf_i+0x146>
 8005038:	6923      	ldr	r3, [r4, #16]
 800503a:	6861      	ldr	r1, [r4, #4]
 800503c:	4299      	cmp	r1, r3
 800503e:	bfde      	ittt	le
 8005040:	2330      	movle	r3, #48	@ 0x30
 8005042:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005046:	f106 36ff 	addle.w	r6, r6, #4294967295
 800504a:	1b92      	subs	r2, r2, r6
 800504c:	6122      	str	r2, [r4, #16]
 800504e:	464b      	mov	r3, r9
 8005050:	4621      	mov	r1, r4
 8005052:	4640      	mov	r0, r8
 8005054:	f8cd a000 	str.w	sl, [sp]
 8005058:	aa03      	add	r2, sp, #12
 800505a:	f7ff fee1 	bl	8004e20 <_printf_common>
 800505e:	3001      	adds	r0, #1
 8005060:	d14a      	bne.n	80050f8 <_printf_i+0x1f4>
 8005062:	f04f 30ff 	mov.w	r0, #4294967295
 8005066:	b004      	add	sp, #16
 8005068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	f043 0320 	orr.w	r3, r3, #32
 8005072:	6023      	str	r3, [r4, #0]
 8005074:	2778      	movs	r7, #120	@ 0x78
 8005076:	4832      	ldr	r0, [pc, #200]	@ (8005140 <_printf_i+0x23c>)
 8005078:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	6831      	ldr	r1, [r6, #0]
 8005080:	061f      	lsls	r7, r3, #24
 8005082:	f851 5b04 	ldr.w	r5, [r1], #4
 8005086:	d402      	bmi.n	800508e <_printf_i+0x18a>
 8005088:	065f      	lsls	r7, r3, #25
 800508a:	bf48      	it	mi
 800508c:	b2ad      	uxthmi	r5, r5
 800508e:	6031      	str	r1, [r6, #0]
 8005090:	07d9      	lsls	r1, r3, #31
 8005092:	bf44      	itt	mi
 8005094:	f043 0320 	orrmi.w	r3, r3, #32
 8005098:	6023      	strmi	r3, [r4, #0]
 800509a:	b11d      	cbz	r5, 80050a4 <_printf_i+0x1a0>
 800509c:	2310      	movs	r3, #16
 800509e:	e7ab      	b.n	8004ff8 <_printf_i+0xf4>
 80050a0:	4826      	ldr	r0, [pc, #152]	@ (800513c <_printf_i+0x238>)
 80050a2:	e7e9      	b.n	8005078 <_printf_i+0x174>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	f023 0320 	bic.w	r3, r3, #32
 80050aa:	6023      	str	r3, [r4, #0]
 80050ac:	e7f6      	b.n	800509c <_printf_i+0x198>
 80050ae:	4616      	mov	r6, r2
 80050b0:	e7bd      	b.n	800502e <_printf_i+0x12a>
 80050b2:	6833      	ldr	r3, [r6, #0]
 80050b4:	6825      	ldr	r5, [r4, #0]
 80050b6:	1d18      	adds	r0, r3, #4
 80050b8:	6961      	ldr	r1, [r4, #20]
 80050ba:	6030      	str	r0, [r6, #0]
 80050bc:	062e      	lsls	r6, r5, #24
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	d501      	bpl.n	80050c6 <_printf_i+0x1c2>
 80050c2:	6019      	str	r1, [r3, #0]
 80050c4:	e002      	b.n	80050cc <_printf_i+0x1c8>
 80050c6:	0668      	lsls	r0, r5, #25
 80050c8:	d5fb      	bpl.n	80050c2 <_printf_i+0x1be>
 80050ca:	8019      	strh	r1, [r3, #0]
 80050cc:	2300      	movs	r3, #0
 80050ce:	4616      	mov	r6, r2
 80050d0:	6123      	str	r3, [r4, #16]
 80050d2:	e7bc      	b.n	800504e <_printf_i+0x14a>
 80050d4:	6833      	ldr	r3, [r6, #0]
 80050d6:	2100      	movs	r1, #0
 80050d8:	1d1a      	adds	r2, r3, #4
 80050da:	6032      	str	r2, [r6, #0]
 80050dc:	681e      	ldr	r6, [r3, #0]
 80050de:	6862      	ldr	r2, [r4, #4]
 80050e0:	4630      	mov	r0, r6
 80050e2:	f000 f98d 	bl	8005400 <memchr>
 80050e6:	b108      	cbz	r0, 80050ec <_printf_i+0x1e8>
 80050e8:	1b80      	subs	r0, r0, r6
 80050ea:	6060      	str	r0, [r4, #4]
 80050ec:	6863      	ldr	r3, [r4, #4]
 80050ee:	6123      	str	r3, [r4, #16]
 80050f0:	2300      	movs	r3, #0
 80050f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050f6:	e7aa      	b.n	800504e <_printf_i+0x14a>
 80050f8:	4632      	mov	r2, r6
 80050fa:	4649      	mov	r1, r9
 80050fc:	4640      	mov	r0, r8
 80050fe:	6923      	ldr	r3, [r4, #16]
 8005100:	47d0      	blx	sl
 8005102:	3001      	adds	r0, #1
 8005104:	d0ad      	beq.n	8005062 <_printf_i+0x15e>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	079b      	lsls	r3, r3, #30
 800510a:	d413      	bmi.n	8005134 <_printf_i+0x230>
 800510c:	68e0      	ldr	r0, [r4, #12]
 800510e:	9b03      	ldr	r3, [sp, #12]
 8005110:	4298      	cmp	r0, r3
 8005112:	bfb8      	it	lt
 8005114:	4618      	movlt	r0, r3
 8005116:	e7a6      	b.n	8005066 <_printf_i+0x162>
 8005118:	2301      	movs	r3, #1
 800511a:	4632      	mov	r2, r6
 800511c:	4649      	mov	r1, r9
 800511e:	4640      	mov	r0, r8
 8005120:	47d0      	blx	sl
 8005122:	3001      	adds	r0, #1
 8005124:	d09d      	beq.n	8005062 <_printf_i+0x15e>
 8005126:	3501      	adds	r5, #1
 8005128:	68e3      	ldr	r3, [r4, #12]
 800512a:	9903      	ldr	r1, [sp, #12]
 800512c:	1a5b      	subs	r3, r3, r1
 800512e:	42ab      	cmp	r3, r5
 8005130:	dcf2      	bgt.n	8005118 <_printf_i+0x214>
 8005132:	e7eb      	b.n	800510c <_printf_i+0x208>
 8005134:	2500      	movs	r5, #0
 8005136:	f104 0619 	add.w	r6, r4, #25
 800513a:	e7f5      	b.n	8005128 <_printf_i+0x224>
 800513c:	080057c4 	.word	0x080057c4
 8005140:	080057d5 	.word	0x080057d5

08005144 <__sflush_r>:
 8005144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	0716      	lsls	r6, r2, #28
 800514c:	4605      	mov	r5, r0
 800514e:	460c      	mov	r4, r1
 8005150:	d454      	bmi.n	80051fc <__sflush_r+0xb8>
 8005152:	684b      	ldr	r3, [r1, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	dc02      	bgt.n	800515e <__sflush_r+0x1a>
 8005158:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	dd48      	ble.n	80051f0 <__sflush_r+0xac>
 800515e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005160:	2e00      	cmp	r6, #0
 8005162:	d045      	beq.n	80051f0 <__sflush_r+0xac>
 8005164:	2300      	movs	r3, #0
 8005166:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800516a:	682f      	ldr	r7, [r5, #0]
 800516c:	6a21      	ldr	r1, [r4, #32]
 800516e:	602b      	str	r3, [r5, #0]
 8005170:	d030      	beq.n	80051d4 <__sflush_r+0x90>
 8005172:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	0759      	lsls	r1, r3, #29
 8005178:	d505      	bpl.n	8005186 <__sflush_r+0x42>
 800517a:	6863      	ldr	r3, [r4, #4]
 800517c:	1ad2      	subs	r2, r2, r3
 800517e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005180:	b10b      	cbz	r3, 8005186 <__sflush_r+0x42>
 8005182:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005184:	1ad2      	subs	r2, r2, r3
 8005186:	2300      	movs	r3, #0
 8005188:	4628      	mov	r0, r5
 800518a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800518c:	6a21      	ldr	r1, [r4, #32]
 800518e:	47b0      	blx	r6
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	89a3      	ldrh	r3, [r4, #12]
 8005194:	d106      	bne.n	80051a4 <__sflush_r+0x60>
 8005196:	6829      	ldr	r1, [r5, #0]
 8005198:	291d      	cmp	r1, #29
 800519a:	d82b      	bhi.n	80051f4 <__sflush_r+0xb0>
 800519c:	4a28      	ldr	r2, [pc, #160]	@ (8005240 <__sflush_r+0xfc>)
 800519e:	410a      	asrs	r2, r1
 80051a0:	07d6      	lsls	r6, r2, #31
 80051a2:	d427      	bmi.n	80051f4 <__sflush_r+0xb0>
 80051a4:	2200      	movs	r2, #0
 80051a6:	6062      	str	r2, [r4, #4]
 80051a8:	6922      	ldr	r2, [r4, #16]
 80051aa:	04d9      	lsls	r1, r3, #19
 80051ac:	6022      	str	r2, [r4, #0]
 80051ae:	d504      	bpl.n	80051ba <__sflush_r+0x76>
 80051b0:	1c42      	adds	r2, r0, #1
 80051b2:	d101      	bne.n	80051b8 <__sflush_r+0x74>
 80051b4:	682b      	ldr	r3, [r5, #0]
 80051b6:	b903      	cbnz	r3, 80051ba <__sflush_r+0x76>
 80051b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80051ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051bc:	602f      	str	r7, [r5, #0]
 80051be:	b1b9      	cbz	r1, 80051f0 <__sflush_r+0xac>
 80051c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051c4:	4299      	cmp	r1, r3
 80051c6:	d002      	beq.n	80051ce <__sflush_r+0x8a>
 80051c8:	4628      	mov	r0, r5
 80051ca:	f7ff fbeb 	bl	80049a4 <_free_r>
 80051ce:	2300      	movs	r3, #0
 80051d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80051d2:	e00d      	b.n	80051f0 <__sflush_r+0xac>
 80051d4:	2301      	movs	r3, #1
 80051d6:	4628      	mov	r0, r5
 80051d8:	47b0      	blx	r6
 80051da:	4602      	mov	r2, r0
 80051dc:	1c50      	adds	r0, r2, #1
 80051de:	d1c9      	bne.n	8005174 <__sflush_r+0x30>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0c6      	beq.n	8005174 <__sflush_r+0x30>
 80051e6:	2b1d      	cmp	r3, #29
 80051e8:	d001      	beq.n	80051ee <__sflush_r+0xaa>
 80051ea:	2b16      	cmp	r3, #22
 80051ec:	d11d      	bne.n	800522a <__sflush_r+0xe6>
 80051ee:	602f      	str	r7, [r5, #0]
 80051f0:	2000      	movs	r0, #0
 80051f2:	e021      	b.n	8005238 <__sflush_r+0xf4>
 80051f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051f8:	b21b      	sxth	r3, r3
 80051fa:	e01a      	b.n	8005232 <__sflush_r+0xee>
 80051fc:	690f      	ldr	r7, [r1, #16]
 80051fe:	2f00      	cmp	r7, #0
 8005200:	d0f6      	beq.n	80051f0 <__sflush_r+0xac>
 8005202:	0793      	lsls	r3, r2, #30
 8005204:	bf18      	it	ne
 8005206:	2300      	movne	r3, #0
 8005208:	680e      	ldr	r6, [r1, #0]
 800520a:	bf08      	it	eq
 800520c:	694b      	ldreq	r3, [r1, #20]
 800520e:	1bf6      	subs	r6, r6, r7
 8005210:	600f      	str	r7, [r1, #0]
 8005212:	608b      	str	r3, [r1, #8]
 8005214:	2e00      	cmp	r6, #0
 8005216:	ddeb      	ble.n	80051f0 <__sflush_r+0xac>
 8005218:	4633      	mov	r3, r6
 800521a:	463a      	mov	r2, r7
 800521c:	4628      	mov	r0, r5
 800521e:	6a21      	ldr	r1, [r4, #32]
 8005220:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005224:	47e0      	blx	ip
 8005226:	2800      	cmp	r0, #0
 8005228:	dc07      	bgt.n	800523a <__sflush_r+0xf6>
 800522a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800522e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005232:	f04f 30ff 	mov.w	r0, #4294967295
 8005236:	81a3      	strh	r3, [r4, #12]
 8005238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800523a:	4407      	add	r7, r0
 800523c:	1a36      	subs	r6, r6, r0
 800523e:	e7e9      	b.n	8005214 <__sflush_r+0xd0>
 8005240:	dfbffffe 	.word	0xdfbffffe

08005244 <_fflush_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	690b      	ldr	r3, [r1, #16]
 8005248:	4605      	mov	r5, r0
 800524a:	460c      	mov	r4, r1
 800524c:	b913      	cbnz	r3, 8005254 <_fflush_r+0x10>
 800524e:	2500      	movs	r5, #0
 8005250:	4628      	mov	r0, r5
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	b118      	cbz	r0, 800525e <_fflush_r+0x1a>
 8005256:	6a03      	ldr	r3, [r0, #32]
 8005258:	b90b      	cbnz	r3, 800525e <_fflush_r+0x1a>
 800525a:	f7ff fa7d 	bl	8004758 <__sinit>
 800525e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0f3      	beq.n	800524e <_fflush_r+0xa>
 8005266:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005268:	07d0      	lsls	r0, r2, #31
 800526a:	d404      	bmi.n	8005276 <_fflush_r+0x32>
 800526c:	0599      	lsls	r1, r3, #22
 800526e:	d402      	bmi.n	8005276 <_fflush_r+0x32>
 8005270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005272:	f7ff fb76 	bl	8004962 <__retarget_lock_acquire_recursive>
 8005276:	4628      	mov	r0, r5
 8005278:	4621      	mov	r1, r4
 800527a:	f7ff ff63 	bl	8005144 <__sflush_r>
 800527e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005280:	4605      	mov	r5, r0
 8005282:	07da      	lsls	r2, r3, #31
 8005284:	d4e4      	bmi.n	8005250 <_fflush_r+0xc>
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	059b      	lsls	r3, r3, #22
 800528a:	d4e1      	bmi.n	8005250 <_fflush_r+0xc>
 800528c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800528e:	f7ff fb69 	bl	8004964 <__retarget_lock_release_recursive>
 8005292:	e7dd      	b.n	8005250 <_fflush_r+0xc>

08005294 <fiprintf>:
 8005294:	b40e      	push	{r1, r2, r3}
 8005296:	b503      	push	{r0, r1, lr}
 8005298:	4601      	mov	r1, r0
 800529a:	ab03      	add	r3, sp, #12
 800529c:	4805      	ldr	r0, [pc, #20]	@ (80052b4 <fiprintf+0x20>)
 800529e:	f853 2b04 	ldr.w	r2, [r3], #4
 80052a2:	6800      	ldr	r0, [r0, #0]
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	f7ff fca3 	bl	8004bf0 <_vfiprintf_r>
 80052aa:	b002      	add	sp, #8
 80052ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80052b0:	b003      	add	sp, #12
 80052b2:	4770      	bx	lr
 80052b4:	20000028 	.word	0x20000028

080052b8 <__swbuf_r>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	460e      	mov	r6, r1
 80052bc:	4614      	mov	r4, r2
 80052be:	4605      	mov	r5, r0
 80052c0:	b118      	cbz	r0, 80052ca <__swbuf_r+0x12>
 80052c2:	6a03      	ldr	r3, [r0, #32]
 80052c4:	b90b      	cbnz	r3, 80052ca <__swbuf_r+0x12>
 80052c6:	f7ff fa47 	bl	8004758 <__sinit>
 80052ca:	69a3      	ldr	r3, [r4, #24]
 80052cc:	60a3      	str	r3, [r4, #8]
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	071a      	lsls	r2, r3, #28
 80052d2:	d501      	bpl.n	80052d8 <__swbuf_r+0x20>
 80052d4:	6923      	ldr	r3, [r4, #16]
 80052d6:	b943      	cbnz	r3, 80052ea <__swbuf_r+0x32>
 80052d8:	4621      	mov	r1, r4
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 f82a 	bl	8005334 <__swsetup_r>
 80052e0:	b118      	cbz	r0, 80052ea <__swbuf_r+0x32>
 80052e2:	f04f 37ff 	mov.w	r7, #4294967295
 80052e6:	4638      	mov	r0, r7
 80052e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	6922      	ldr	r2, [r4, #16]
 80052ee:	b2f6      	uxtb	r6, r6
 80052f0:	1a98      	subs	r0, r3, r2
 80052f2:	6963      	ldr	r3, [r4, #20]
 80052f4:	4637      	mov	r7, r6
 80052f6:	4283      	cmp	r3, r0
 80052f8:	dc05      	bgt.n	8005306 <__swbuf_r+0x4e>
 80052fa:	4621      	mov	r1, r4
 80052fc:	4628      	mov	r0, r5
 80052fe:	f7ff ffa1 	bl	8005244 <_fflush_r>
 8005302:	2800      	cmp	r0, #0
 8005304:	d1ed      	bne.n	80052e2 <__swbuf_r+0x2a>
 8005306:	68a3      	ldr	r3, [r4, #8]
 8005308:	3b01      	subs	r3, #1
 800530a:	60a3      	str	r3, [r4, #8]
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	6022      	str	r2, [r4, #0]
 8005312:	701e      	strb	r6, [r3, #0]
 8005314:	6962      	ldr	r2, [r4, #20]
 8005316:	1c43      	adds	r3, r0, #1
 8005318:	429a      	cmp	r2, r3
 800531a:	d004      	beq.n	8005326 <__swbuf_r+0x6e>
 800531c:	89a3      	ldrh	r3, [r4, #12]
 800531e:	07db      	lsls	r3, r3, #31
 8005320:	d5e1      	bpl.n	80052e6 <__swbuf_r+0x2e>
 8005322:	2e0a      	cmp	r6, #10
 8005324:	d1df      	bne.n	80052e6 <__swbuf_r+0x2e>
 8005326:	4621      	mov	r1, r4
 8005328:	4628      	mov	r0, r5
 800532a:	f7ff ff8b 	bl	8005244 <_fflush_r>
 800532e:	2800      	cmp	r0, #0
 8005330:	d0d9      	beq.n	80052e6 <__swbuf_r+0x2e>
 8005332:	e7d6      	b.n	80052e2 <__swbuf_r+0x2a>

08005334 <__swsetup_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4b29      	ldr	r3, [pc, #164]	@ (80053dc <__swsetup_r+0xa8>)
 8005338:	4605      	mov	r5, r0
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	460c      	mov	r4, r1
 800533e:	b118      	cbz	r0, 8005348 <__swsetup_r+0x14>
 8005340:	6a03      	ldr	r3, [r0, #32]
 8005342:	b90b      	cbnz	r3, 8005348 <__swsetup_r+0x14>
 8005344:	f7ff fa08 	bl	8004758 <__sinit>
 8005348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800534c:	0719      	lsls	r1, r3, #28
 800534e:	d422      	bmi.n	8005396 <__swsetup_r+0x62>
 8005350:	06da      	lsls	r2, r3, #27
 8005352:	d407      	bmi.n	8005364 <__swsetup_r+0x30>
 8005354:	2209      	movs	r2, #9
 8005356:	602a      	str	r2, [r5, #0]
 8005358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	81a3      	strh	r3, [r4, #12]
 8005362:	e033      	b.n	80053cc <__swsetup_r+0x98>
 8005364:	0758      	lsls	r0, r3, #29
 8005366:	d512      	bpl.n	800538e <__swsetup_r+0x5a>
 8005368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800536a:	b141      	cbz	r1, 800537e <__swsetup_r+0x4a>
 800536c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005370:	4299      	cmp	r1, r3
 8005372:	d002      	beq.n	800537a <__swsetup_r+0x46>
 8005374:	4628      	mov	r0, r5
 8005376:	f7ff fb15 	bl	80049a4 <_free_r>
 800537a:	2300      	movs	r3, #0
 800537c:	6363      	str	r3, [r4, #52]	@ 0x34
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	2300      	movs	r3, #0
 8005388:	6063      	str	r3, [r4, #4]
 800538a:	6923      	ldr	r3, [r4, #16]
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	f043 0308 	orr.w	r3, r3, #8
 8005394:	81a3      	strh	r3, [r4, #12]
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	b94b      	cbnz	r3, 80053ae <__swsetup_r+0x7a>
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053a4:	d003      	beq.n	80053ae <__swsetup_r+0x7a>
 80053a6:	4621      	mov	r1, r4
 80053a8:	4628      	mov	r0, r5
 80053aa:	f000 f863 	bl	8005474 <__smakebuf_r>
 80053ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053b2:	f013 0201 	ands.w	r2, r3, #1
 80053b6:	d00a      	beq.n	80053ce <__swsetup_r+0x9a>
 80053b8:	2200      	movs	r2, #0
 80053ba:	60a2      	str	r2, [r4, #8]
 80053bc:	6962      	ldr	r2, [r4, #20]
 80053be:	4252      	negs	r2, r2
 80053c0:	61a2      	str	r2, [r4, #24]
 80053c2:	6922      	ldr	r2, [r4, #16]
 80053c4:	b942      	cbnz	r2, 80053d8 <__swsetup_r+0xa4>
 80053c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053ca:	d1c5      	bne.n	8005358 <__swsetup_r+0x24>
 80053cc:	bd38      	pop	{r3, r4, r5, pc}
 80053ce:	0799      	lsls	r1, r3, #30
 80053d0:	bf58      	it	pl
 80053d2:	6962      	ldrpl	r2, [r4, #20]
 80053d4:	60a2      	str	r2, [r4, #8]
 80053d6:	e7f4      	b.n	80053c2 <__swsetup_r+0x8e>
 80053d8:	2000      	movs	r0, #0
 80053da:	e7f7      	b.n	80053cc <__swsetup_r+0x98>
 80053dc:	20000028 	.word	0x20000028

080053e0 <_sbrk_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	2300      	movs	r3, #0
 80053e4:	4d05      	ldr	r5, [pc, #20]	@ (80053fc <_sbrk_r+0x1c>)
 80053e6:	4604      	mov	r4, r0
 80053e8:	4608      	mov	r0, r1
 80053ea:	602b      	str	r3, [r5, #0]
 80053ec:	f7fc fa22 	bl	8001834 <_sbrk>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d102      	bne.n	80053fa <_sbrk_r+0x1a>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	b103      	cbz	r3, 80053fa <_sbrk_r+0x1a>
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	200008e8 	.word	0x200008e8

08005400 <memchr>:
 8005400:	4603      	mov	r3, r0
 8005402:	b510      	push	{r4, lr}
 8005404:	b2c9      	uxtb	r1, r1
 8005406:	4402      	add	r2, r0
 8005408:	4293      	cmp	r3, r2
 800540a:	4618      	mov	r0, r3
 800540c:	d101      	bne.n	8005412 <memchr+0x12>
 800540e:	2000      	movs	r0, #0
 8005410:	e003      	b.n	800541a <memchr+0x1a>
 8005412:	7804      	ldrb	r4, [r0, #0]
 8005414:	3301      	adds	r3, #1
 8005416:	428c      	cmp	r4, r1
 8005418:	d1f6      	bne.n	8005408 <memchr+0x8>
 800541a:	bd10      	pop	{r4, pc}

0800541c <abort>:
 800541c:	2006      	movs	r0, #6
 800541e:	b508      	push	{r3, lr}
 8005420:	f000 f88c 	bl	800553c <raise>
 8005424:	2001      	movs	r0, #1
 8005426:	f7fc f9ac 	bl	8001782 <_exit>

0800542a <__swhatbuf_r>:
 800542a:	b570      	push	{r4, r5, r6, lr}
 800542c:	460c      	mov	r4, r1
 800542e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005432:	4615      	mov	r5, r2
 8005434:	2900      	cmp	r1, #0
 8005436:	461e      	mov	r6, r3
 8005438:	b096      	sub	sp, #88	@ 0x58
 800543a:	da0c      	bge.n	8005456 <__swhatbuf_r+0x2c>
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	2100      	movs	r1, #0
 8005440:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005444:	bf14      	ite	ne
 8005446:	2340      	movne	r3, #64	@ 0x40
 8005448:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800544c:	2000      	movs	r0, #0
 800544e:	6031      	str	r1, [r6, #0]
 8005450:	602b      	str	r3, [r5, #0]
 8005452:	b016      	add	sp, #88	@ 0x58
 8005454:	bd70      	pop	{r4, r5, r6, pc}
 8005456:	466a      	mov	r2, sp
 8005458:	f000 f878 	bl	800554c <_fstat_r>
 800545c:	2800      	cmp	r0, #0
 800545e:	dbed      	blt.n	800543c <__swhatbuf_r+0x12>
 8005460:	9901      	ldr	r1, [sp, #4]
 8005462:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005466:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800546a:	4259      	negs	r1, r3
 800546c:	4159      	adcs	r1, r3
 800546e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005472:	e7eb      	b.n	800544c <__swhatbuf_r+0x22>

08005474 <__smakebuf_r>:
 8005474:	898b      	ldrh	r3, [r1, #12]
 8005476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005478:	079d      	lsls	r5, r3, #30
 800547a:	4606      	mov	r6, r0
 800547c:	460c      	mov	r4, r1
 800547e:	d507      	bpl.n	8005490 <__smakebuf_r+0x1c>
 8005480:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	6123      	str	r3, [r4, #16]
 8005488:	2301      	movs	r3, #1
 800548a:	6163      	str	r3, [r4, #20]
 800548c:	b003      	add	sp, #12
 800548e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005490:	466a      	mov	r2, sp
 8005492:	ab01      	add	r3, sp, #4
 8005494:	f7ff ffc9 	bl	800542a <__swhatbuf_r>
 8005498:	9f00      	ldr	r7, [sp, #0]
 800549a:	4605      	mov	r5, r0
 800549c:	4639      	mov	r1, r7
 800549e:	4630      	mov	r0, r6
 80054a0:	f7ff faf2 	bl	8004a88 <_malloc_r>
 80054a4:	b948      	cbnz	r0, 80054ba <__smakebuf_r+0x46>
 80054a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054aa:	059a      	lsls	r2, r3, #22
 80054ac:	d4ee      	bmi.n	800548c <__smakebuf_r+0x18>
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	f043 0302 	orr.w	r3, r3, #2
 80054b6:	81a3      	strh	r3, [r4, #12]
 80054b8:	e7e2      	b.n	8005480 <__smakebuf_r+0xc>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80054c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054c4:	81a3      	strh	r3, [r4, #12]
 80054c6:	9b01      	ldr	r3, [sp, #4]
 80054c8:	6020      	str	r0, [r4, #0]
 80054ca:	b15b      	cbz	r3, 80054e4 <__smakebuf_r+0x70>
 80054cc:	4630      	mov	r0, r6
 80054ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054d2:	f000 f84d 	bl	8005570 <_isatty_r>
 80054d6:	b128      	cbz	r0, 80054e4 <__smakebuf_r+0x70>
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	f023 0303 	bic.w	r3, r3, #3
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	81a3      	strh	r3, [r4, #12]
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	431d      	orrs	r5, r3
 80054e8:	81a5      	strh	r5, [r4, #12]
 80054ea:	e7cf      	b.n	800548c <__smakebuf_r+0x18>

080054ec <_raise_r>:
 80054ec:	291f      	cmp	r1, #31
 80054ee:	b538      	push	{r3, r4, r5, lr}
 80054f0:	4605      	mov	r5, r0
 80054f2:	460c      	mov	r4, r1
 80054f4:	d904      	bls.n	8005500 <_raise_r+0x14>
 80054f6:	2316      	movs	r3, #22
 80054f8:	6003      	str	r3, [r0, #0]
 80054fa:	f04f 30ff 	mov.w	r0, #4294967295
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005502:	b112      	cbz	r2, 800550a <_raise_r+0x1e>
 8005504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005508:	b94b      	cbnz	r3, 800551e <_raise_r+0x32>
 800550a:	4628      	mov	r0, r5
 800550c:	f000 f852 	bl	80055b4 <_getpid_r>
 8005510:	4622      	mov	r2, r4
 8005512:	4601      	mov	r1, r0
 8005514:	4628      	mov	r0, r5
 8005516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800551a:	f000 b839 	b.w	8005590 <_kill_r>
 800551e:	2b01      	cmp	r3, #1
 8005520:	d00a      	beq.n	8005538 <_raise_r+0x4c>
 8005522:	1c59      	adds	r1, r3, #1
 8005524:	d103      	bne.n	800552e <_raise_r+0x42>
 8005526:	2316      	movs	r3, #22
 8005528:	6003      	str	r3, [r0, #0]
 800552a:	2001      	movs	r0, #1
 800552c:	e7e7      	b.n	80054fe <_raise_r+0x12>
 800552e:	2100      	movs	r1, #0
 8005530:	4620      	mov	r0, r4
 8005532:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005536:	4798      	blx	r3
 8005538:	2000      	movs	r0, #0
 800553a:	e7e0      	b.n	80054fe <_raise_r+0x12>

0800553c <raise>:
 800553c:	4b02      	ldr	r3, [pc, #8]	@ (8005548 <raise+0xc>)
 800553e:	4601      	mov	r1, r0
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	f7ff bfd3 	b.w	80054ec <_raise_r>
 8005546:	bf00      	nop
 8005548:	20000028 	.word	0x20000028

0800554c <_fstat_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	2300      	movs	r3, #0
 8005550:	4d06      	ldr	r5, [pc, #24]	@ (800556c <_fstat_r+0x20>)
 8005552:	4604      	mov	r4, r0
 8005554:	4608      	mov	r0, r1
 8005556:	4611      	mov	r1, r2
 8005558:	602b      	str	r3, [r5, #0]
 800555a:	f7fc f945 	bl	80017e8 <_fstat>
 800555e:	1c43      	adds	r3, r0, #1
 8005560:	d102      	bne.n	8005568 <_fstat_r+0x1c>
 8005562:	682b      	ldr	r3, [r5, #0]
 8005564:	b103      	cbz	r3, 8005568 <_fstat_r+0x1c>
 8005566:	6023      	str	r3, [r4, #0]
 8005568:	bd38      	pop	{r3, r4, r5, pc}
 800556a:	bf00      	nop
 800556c:	200008e8 	.word	0x200008e8

08005570 <_isatty_r>:
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	2300      	movs	r3, #0
 8005574:	4d05      	ldr	r5, [pc, #20]	@ (800558c <_isatty_r+0x1c>)
 8005576:	4604      	mov	r4, r0
 8005578:	4608      	mov	r0, r1
 800557a:	602b      	str	r3, [r5, #0]
 800557c:	f7fc f943 	bl	8001806 <_isatty>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d102      	bne.n	800558a <_isatty_r+0x1a>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	b103      	cbz	r3, 800558a <_isatty_r+0x1a>
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	200008e8 	.word	0x200008e8

08005590 <_kill_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	2300      	movs	r3, #0
 8005594:	4d06      	ldr	r5, [pc, #24]	@ (80055b0 <_kill_r+0x20>)
 8005596:	4604      	mov	r4, r0
 8005598:	4608      	mov	r0, r1
 800559a:	4611      	mov	r1, r2
 800559c:	602b      	str	r3, [r5, #0]
 800559e:	f7fc f8e0 	bl	8001762 <_kill>
 80055a2:	1c43      	adds	r3, r0, #1
 80055a4:	d102      	bne.n	80055ac <_kill_r+0x1c>
 80055a6:	682b      	ldr	r3, [r5, #0]
 80055a8:	b103      	cbz	r3, 80055ac <_kill_r+0x1c>
 80055aa:	6023      	str	r3, [r4, #0]
 80055ac:	bd38      	pop	{r3, r4, r5, pc}
 80055ae:	bf00      	nop
 80055b0:	200008e8 	.word	0x200008e8

080055b4 <_getpid_r>:
 80055b4:	f7fc b8ce 	b.w	8001754 <_getpid>

080055b8 <_init>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	bf00      	nop
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr

080055c4 <_fini>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	bf00      	nop
 80055c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ca:	bc08      	pop	{r3}
 80055cc:	469e      	mov	lr, r3
 80055ce:	4770      	bx	lr
