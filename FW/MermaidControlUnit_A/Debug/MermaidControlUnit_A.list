
MermaidControlUnit_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e08  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005f14  08005f14  00006f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800616c  0800616c  00008078  2**0
                  CONTENTS
  4 .ARM          00000000  0800616c  0800616c  00008078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800616c  0800616c  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800616c  0800616c  0000716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006170  08006170  00007170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006174  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019a0  20000078  080061ec  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a18  080061ec  00008a18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e824  00000000  00000000  000080a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250e  00000000  00000000  000168c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00018dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8d  00000000  00000000  00019ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196ea  00000000  00000000  0001a82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011136  00000000  00000000  00033f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f8b  00000000  00000000  0004504d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6fd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004898  00000000  00000000  000d701c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000db8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08005efc 	.word	0x08005efc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08005efc 	.word	0x08005efc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	f2ad 5d64 	subw	sp, sp, #1380	@ 0x564
 800064e:	f44f 67a9 	mov.w	r7, #1352	@ 0x548
 8000652:	446f      	add	r7, sp
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f001 fbe0 	bl	8001e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f9d8 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 fce6 	bl	800102c <MX_GPIO_Init>
  MX_DMA_Init();
 8000660:	f000 fcae 	bl	8000fc0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000664:	f000 fa2e 	bl	8000ac4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000668:	f000 faba 	bl	8000be0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800066c:	f000 fb4e 	bl	8000d0c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000670:	f000 fbe4 	bl	8000e3c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000674:	f000 fc7a 	bl	8000f6c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000678:	f000 fa62 	bl	8000b40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	printf("Initialization begin\r\n");
 800067c:	48ae      	ldr	r0, [pc, #696]	@ (8000938 <main+0x2f0>)
 800067e:	f004 fd3d 	bl	80050fc <puts>

	HAL_GPIO_WritePin(powerOn_GPIO_Port, powerOn_Pin, SET); // Power LDO Enable
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000688:	48ac      	ldr	r0, [pc, #688]	@ (800093c <main+0x2f4>)
 800068a:	f002 fadd 	bl	8002c48 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start(&htim1); // IR Receiver timer start
 800068e:	48ac      	ldr	r0, [pc, #688]	@ (8000940 <main+0x2f8>)
 8000690:	f003 f83a 	bl	8003708 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim1, 0); // IR Receiver timer cnt set
 8000694:	4baa      	ldr	r3, [pc, #680]	@ (8000940 <main+0x2f8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	@ 0x24

	WS28XX_Init(&string1, &htim2, 72, TIM_CHANNEL_3, 3);
 800069c:	2303      	movs	r3, #3
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2308      	movs	r3, #8
 80006a2:	2248      	movs	r2, #72	@ 0x48
 80006a4:	49a7      	ldr	r1, [pc, #668]	@ (8000944 <main+0x2fc>)
 80006a6:	48a8      	ldr	r0, [pc, #672]	@ (8000948 <main+0x300>)
 80006a8:	f004 fa44 	bl	8004b34 <WS28XX_Init>
	WS28XX_Init(&string4, &htim4, 72, TIM_CHANNEL_2, 3);
 80006ac:	2303      	movs	r3, #3
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2304      	movs	r3, #4
 80006b2:	2248      	movs	r2, #72	@ 0x48
 80006b4:	49a5      	ldr	r1, [pc, #660]	@ (800094c <main+0x304>)
 80006b6:	48a6      	ldr	r0, [pc, #664]	@ (8000950 <main+0x308>)
 80006b8:	f004 fa3c 	bl	8004b34 <WS28XX_Init>
	WS28XX_Init(&string7, &htim2, 72, TIM_CHANNEL_1, 3);
 80006bc:	2303      	movs	r3, #3
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2248      	movs	r2, #72	@ 0x48
 80006c4:	499f      	ldr	r1, [pc, #636]	@ (8000944 <main+0x2fc>)
 80006c6:	48a3      	ldr	r0, [pc, #652]	@ (8000954 <main+0x30c>)
 80006c8:	f004 fa34 	bl	8004b34 <WS28XX_Init>
	WS28XX_Init(&string9, &htim3, 72, TIM_CHANNEL_3, 3);
 80006cc:	2303      	movs	r3, #3
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2308      	movs	r3, #8
 80006d2:	2248      	movs	r2, #72	@ 0x48
 80006d4:	49a0      	ldr	r1, [pc, #640]	@ (8000958 <main+0x310>)
 80006d6:	48a1      	ldr	r0, [pc, #644]	@ (800095c <main+0x314>)
 80006d8:	f004 fa2c 	bl	8004b34 <WS28XX_Init>

	uint32_t tmheartbeat = 0, tm = 0; // Timestamp variable
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
	bool heartbeat = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0); //heartbeat pin
 80006e8:	2200      	movs	r2, #0
 80006ea:	2110      	movs	r1, #16
 80006ec:	4893      	ldr	r0, [pc, #588]	@ (800093c <main+0x2f4>)
 80006ee:	f002 faab 	bl	8002c48 <HAL_GPIO_WritePin>

	uint8_t ledsON = 0; //Some LED should be on - enable boost
 80006f2:	2300      	movs	r3, #0
 80006f4:	73bb      	strb	r3, [r7, #14]
	uint32_t tmboostON = 0; //timestamp for boost enabling
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
	bool boostONswitch = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	71fb      	strb	r3, [r7, #7]

	printf("Initialization complete\r\n");
 80006fe:	4898      	ldr	r0, [pc, #608]	@ (8000960 <main+0x318>)
 8000700:	f004 fcfc 	bl	80050fc <puts>

	WS28XX_SetPixel_RGBW_565(&string1, 0, COLOR_RGB565_BLUE, 50); //default init values
 8000704:	2332      	movs	r3, #50	@ 0x32
 8000706:	221f      	movs	r2, #31
 8000708:	2100      	movs	r1, #0
 800070a:	488f      	ldr	r0, [pc, #572]	@ (8000948 <main+0x300>)
 800070c:	f004 faa8 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&string1, 1, COLOR_RGB565_CRIMSON, 50);
 8000710:	2332      	movs	r3, #50	@ 0x32
 8000712:	f64d 02a7 	movw	r2, #55463	@ 0xd8a7
 8000716:	2101      	movs	r1, #1
 8000718:	488b      	ldr	r0, [pc, #556]	@ (8000948 <main+0x300>)
 800071a:	f004 faa1 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&string1, 2, COLOR_RGB565_ORANGE, 50);
 800071e:	2332      	movs	r3, #50	@ 0x32
 8000720:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 8000724:	2102      	movs	r1, #2
 8000726:	4888      	ldr	r0, [pc, #544]	@ (8000948 <main+0x300>)
 8000728:	f004 fa9a 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
	WS28XX_Update(&string4);
 800072c:	4888      	ldr	r0, [pc, #544]	@ (8000950 <main+0x308>)
 800072e:	f004 fb0b 	bl	8004d48 <WS28XX_Update>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (tmheartbeat < HAL_GetTick()) { //heartbeat LED
 8000732:	f001 fbc9 	bl	8001ec8 <HAL_GetTick>
 8000736:	4602      	mov	r2, r0
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	4293      	cmp	r3, r2
 800073c:	d220      	bcs.n	8000780 <main+0x138>
			if (heartbeat)
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d006      	beq.n	8000752 <main+0x10a>
				tmheartbeat = HAL_GetTick() + 950;
 8000744:	f001 fbc0 	bl	8001ec8 <HAL_GetTick>
 8000748:	4603      	mov	r3, r0
 800074a:	f203 33b6 	addw	r3, r3, #950	@ 0x3b6
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	e004      	b.n	800075c <main+0x114>
			else
				tmheartbeat = HAL_GetTick() + 50;
 8000752:	f001 fbb9 	bl	8001ec8 <HAL_GetTick>
 8000756:	4603      	mov	r3, r0
 8000758:	3332      	adds	r3, #50	@ 0x32
 800075a:	617b      	str	r3, [r7, #20]

			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); //heartbeat LED
 800075c:	2110      	movs	r1, #16
 800075e:	4877      	ldr	r0, [pc, #476]	@ (800093c <main+0x2f4>)
 8000760:	f002 fa8a 	bl	8002c78 <HAL_GPIO_TogglePin>

			heartbeat = !heartbeat;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2b00      	cmp	r3, #0
 8000768:	bf14      	ite	ne
 800076a:	2301      	movne	r3, #1
 800076c:	2300      	moveq	r3, #0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f083 0301 	eor.w	r3, r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	73fb      	strb	r3, [r7, #15]
		}

		if (processIR == 1) { //Command received from IR decoding
 8000780:	4b78      	ldr	r3, [pc, #480]	@ (8000964 <main+0x31c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d062      	beq.n	8000850 <main+0x208>
			processIR = 0; //reset flag
 800078a:	4b76      	ldr	r3, [pc, #472]	@ (8000964 <main+0x31c>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]

			printf("Data: %X\r\n",(unsigned int)code); //debug terminal text
 8000790:	4b75      	ldr	r3, [pc, #468]	@ (8000968 <main+0x320>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	4875      	ldr	r0, [pc, #468]	@ (800096c <main+0x324>)
 8000798:	f004 fc48 	bl	800502c <iprintf>

			switch (code) {
 800079c:	4b72      	ldr	r3, [pc, #456]	@ (8000968 <main+0x320>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a73      	ldr	r2, [pc, #460]	@ (8000970 <main+0x328>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d02d      	beq.n	8000802 <main+0x1ba>
 80007a6:	4a72      	ldr	r2, [pc, #456]	@ (8000970 <main+0x328>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d84c      	bhi.n	8000846 <main+0x1fe>
 80007ac:	4a71      	ldr	r2, [pc, #452]	@ (8000974 <main+0x32c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d033      	beq.n	800081a <main+0x1d2>
 80007b2:	4a70      	ldr	r2, [pc, #448]	@ (8000974 <main+0x32c>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d846      	bhi.n	8000846 <main+0x1fe>
 80007b8:	4a6f      	ldr	r2, [pc, #444]	@ (8000978 <main+0x330>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d015      	beq.n	80007ea <main+0x1a2>
 80007be:	4a6e      	ldr	r2, [pc, #440]	@ (8000978 <main+0x330>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d840      	bhi.n	8000846 <main+0x1fe>
 80007c4:	4a6d      	ldr	r2, [pc, #436]	@ (800097c <main+0x334>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d02d      	beq.n	8000826 <main+0x1de>
 80007ca:	4a6c      	ldr	r2, [pc, #432]	@ (800097c <main+0x334>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d83a      	bhi.n	8000846 <main+0x1fe>
 80007d0:	4a6b      	ldr	r2, [pc, #428]	@ (8000980 <main+0x338>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d02d      	beq.n	8000832 <main+0x1ea>
 80007d6:	4a6a      	ldr	r2, [pc, #424]	@ (8000980 <main+0x338>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d834      	bhi.n	8000846 <main+0x1fe>
 80007dc:	4a69      	ldr	r2, [pc, #420]	@ (8000984 <main+0x33c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d015      	beq.n	800080e <main+0x1c6>
 80007e2:	4a69      	ldr	r2, [pc, #420]	@ (8000988 <main+0x340>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d006      	beq.n	80007f6 <main+0x1ae>
			case 0xFF50AF: // "OFF"
				printf("Power OFF\r\n");
				HAL_GPIO_WritePin(powerOn_GPIO_Port, powerOn_Pin, RESET); // Power LDO Disable, MCU suicide
				break;
			default:
				break;
 80007e8:	e02d      	b.n	8000846 <main+0x1fe>
				animationCode = 1;
 80007ea:	4b68      	ldr	r3, [pc, #416]	@ (800098c <main+0x344>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	73bb      	strb	r3, [r7, #14]
				break;
 80007f4:	e028      	b.n	8000848 <main+0x200>
				animationCode = 2;
 80007f6:	4b65      	ldr	r3, [pc, #404]	@ (800098c <main+0x344>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	73bb      	strb	r3, [r7, #14]
				break;
 8000800:	e022      	b.n	8000848 <main+0x200>
				animationCode = 3;
 8000802:	4b62      	ldr	r3, [pc, #392]	@ (800098c <main+0x344>)
 8000804:	2203      	movs	r2, #3
 8000806:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 8000808:	2301      	movs	r3, #1
 800080a:	73bb      	strb	r3, [r7, #14]
				break;
 800080c:	e01c      	b.n	8000848 <main+0x200>
				animationCode = 4;
 800080e:	4b5f      	ldr	r3, [pc, #380]	@ (800098c <main+0x344>)
 8000810:	2204      	movs	r2, #4
 8000812:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	73bb      	strb	r3, [r7, #14]
				break;
 8000818:	e016      	b.n	8000848 <main+0x200>
				animationCode = 5;
 800081a:	4b5c      	ldr	r3, [pc, #368]	@ (800098c <main+0x344>)
 800081c:	2205      	movs	r2, #5
 800081e:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	73bb      	strb	r3, [r7, #14]
				break;
 8000824:	e010      	b.n	8000848 <main+0x200>
				animationCode = 0;
 8000826:	4b59      	ldr	r3, [pc, #356]	@ (800098c <main+0x344>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
				ledsON = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	73bb      	strb	r3, [r7, #14]
				break;
 8000830:	e00a      	b.n	8000848 <main+0x200>
				printf("Power OFF\r\n");
 8000832:	4857      	ldr	r0, [pc, #348]	@ (8000990 <main+0x348>)
 8000834:	f004 fc62 	bl	80050fc <puts>
				HAL_GPIO_WritePin(powerOn_GPIO_Port, powerOn_Pin, RESET); // Power LDO Disable, MCU suicide
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800083e:	483f      	ldr	r0, [pc, #252]	@ (800093c <main+0x2f4>)
 8000840:	f002 fa02 	bl	8002c48 <HAL_GPIO_WritePin>
				break;
 8000844:	e000      	b.n	8000848 <main+0x200>
				break;
 8000846:	bf00      	nop
			}

			//TODO enable check
			outputControl(ledsON);
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fd18 	bl	8001280 <outputControl>
		}

		if (tm < HAL_GetTick()) { //routine for effects
 8000850:	f001 fb3a 	bl	8001ec8 <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	4293      	cmp	r3, r2
 800085a:	f080 809c 	bcs.w	8000996 <main+0x34e>
			tm = HAL_GetTick() + 10;
 800085e:	f001 fb33 	bl	8001ec8 <HAL_GetTick>
 8000862:	4603      	mov	r3, r0
 8000864:	330a      	adds	r3, #10
 8000866:	613b      	str	r3, [r7, #16]

			switch (animationCode) {
 8000868:	4b48      	ldr	r3, [pc, #288]	@ (800098c <main+0x344>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b05      	cmp	r3, #5
 800086e:	f200 8091 	bhi.w	8000994 <main+0x34c>
 8000872:	a201      	add	r2, pc, #4	@ (adr r2, 8000878 <main+0x230>)
 8000874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000878:	08000891 	.word	0x08000891
 800087c:	080008ad 	.word	0x080008ad
 8000880:	080008c9 	.word	0x080008c9
 8000884:	080008e5 	.word	0x080008e5
 8000888:	08000901 	.word	0x08000901
 800088c:	0800091d 	.word	0x0800091d
			case 0: // "0"
				turnAllOff(string1);
 8000890:	4c2d      	ldr	r4, [pc, #180]	@ (8000948 <main+0x300>)
 8000892:	4668      	mov	r0, sp
 8000894:	f104 0310 	add.w	r3, r4, #16
 8000898:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 800089c:	4619      	mov	r1, r3
 800089e:	f004 fd88 	bl	80053b2 <memcpy>
 80008a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008a6:	f000 fd2e 	bl	8001306 <turnAllOff>
				break;
 80008aa:	e074      	b.n	8000996 <main+0x34e>
			case 1: // "1"
				setAllBlue(string1);
 80008ac:	4c26      	ldr	r4, [pc, #152]	@ (8000948 <main+0x300>)
 80008ae:	4668      	mov	r0, sp
 80008b0:	f104 0310 	add.w	r3, r4, #16
 80008b4:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 80008b8:	4619      	mov	r1, r3
 80008ba:	f004 fd7a 	bl	80053b2 <memcpy>
 80008be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008c2:	f000 fcf7 	bl	80012b4 <setAllBlue>
				break;
 80008c6:	e066      	b.n	8000996 <main+0x34e>
			case 2: // "2"
				GlitteringWavesEffect(string1);
 80008c8:	4c1f      	ldr	r4, [pc, #124]	@ (8000948 <main+0x300>)
 80008ca:	4668      	mov	r0, sp
 80008cc:	f104 0310 	add.w	r3, r4, #16
 80008d0:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 80008d4:	4619      	mov	r1, r3
 80008d6:	f004 fd6c 	bl	80053b2 <memcpy>
 80008da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008de:	f000 fd39 	bl	8001354 <GlitteringWavesEffect>
				break;
 80008e2:	e058      	b.n	8000996 <main+0x34e>
			case 3: // "3"
				EnchantedRippleEffect(string1);
 80008e4:	4c18      	ldr	r4, [pc, #96]	@ (8000948 <main+0x300>)
 80008e6:	4668      	mov	r0, sp
 80008e8:	f104 0310 	add.w	r3, r4, #16
 80008ec:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 80008f0:	4619      	mov	r1, r3
 80008f2:	f004 fd5e 	bl	80053b2 <memcpy>
 80008f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008fa:	f000 fd91 	bl	8001420 <EnchantedRippleEffect>
				break;
 80008fe:	e04a      	b.n	8000996 <main+0x34e>
			case 4: // "4"
				TwinklingGlowEffect(string1);
 8000900:	4c11      	ldr	r4, [pc, #68]	@ (8000948 <main+0x300>)
 8000902:	4668      	mov	r0, sp
 8000904:	f104 0310 	add.w	r3, r4, #16
 8000908:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 800090c:	4619      	mov	r1, r3
 800090e:	f004 fd50 	bl	80053b2 <memcpy>
 8000912:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000916:	f000 fde5 	bl	80014e4 <TwinklingGlowEffect>
				break;
 800091a:	e03c      	b.n	8000996 <main+0x34e>
			case 5: // "5"
				CarTurnSignalEffect(string1);
 800091c:	4c0a      	ldr	r4, [pc, #40]	@ (8000948 <main+0x300>)
 800091e:	4668      	mov	r0, sp
 8000920:	f104 0310 	add.w	r3, r4, #16
 8000924:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 8000928:	4619      	mov	r1, r3
 800092a:	f004 fd42 	bl	80053b2 <memcpy>
 800092e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000932:	f000 fe5b 	bl	80015ec <CarTurnSignalEffect>
				break;
 8000936:	e02e      	b.n	8000996 <main+0x34e>
 8000938:	08005f14 	.word	0x08005f14
 800093c:	40010c00 	.word	0x40010c00
 8000940:	200000c4 	.word	0x200000c4
 8000944:	2000010c 	.word	0x2000010c
 8000948:	2000034c 	.word	0x2000034c
 800094c:	2000019c 	.word	0x2000019c
 8000950:	20001354 	.word	0x20001354
 8000954:	200008a4 	.word	0x200008a4
 8000958:	20000154 	.word	0x20000154
 800095c:	20000dfc 	.word	0x20000dfc
 8000960:	08005f2c 	.word	0x08005f2c
 8000964:	20000348 	.word	0x20000348
 8000968:	20000344 	.word	0x20000344
 800096c:	08005f48 	.word	0x08005f48
 8000970:	00ffc837 	.word	0x00ffc837
 8000974:	00ffa857 	.word	0x00ffa857
 8000978:	00ff8877 	.word	0x00ff8877
 800097c:	00ff58a7 	.word	0x00ff58a7
 8000980:	00ff50af 	.word	0x00ff50af
 8000984:	00ff28d7 	.word	0x00ff28d7
 8000988:	00ff48b7 	.word	0x00ff48b7
 800098c:	20000349 	.word	0x20000349
 8000990:	08005f54 	.word	0x08005f54
			default:
				break;
 8000994:	bf00      	nop

			}
		}

		if (tmboostON < HAL_GetTick() && ledsON == 1) { //routine for waking up boost
 8000996:	f001 fa97 	bl	8001ec8 <HAL_GetTick>
 800099a:	4602      	mov	r2, r0
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4293      	cmp	r3, r2
 80009a0:	f4bf aec7 	bcs.w	8000732 <main+0xea>
 80009a4:	7bbb      	ldrb	r3, [r7, #14]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	f47f aec3 	bne.w	8000732 <main+0xea>
			if (boostONswitch == 0) { //100ms high pulse every 20s, if LEDs are running
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	f083 0301 	eor.w	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d00b      	beq.n	80009d0 <main+0x388>
				tmboostON = HAL_GetTick() + 100;
 80009b8:	f001 fa86 	bl	8001ec8 <HAL_GetTick>
 80009bc:	4603      	mov	r3, r0
 80009be:	3364      	adds	r3, #100	@ 0x64
 80009c0:	60bb      	str	r3, [r7, #8]
				HAL_GPIO_WritePin(boostWkUp_GPIO_Port, boostWkUp_Pin,
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009c8:	480f      	ldr	r0, [pc, #60]	@ (8000a08 <main+0x3c0>)
 80009ca:	f002 f93d 	bl	8002c48 <HAL_GPIO_WritePin>
 80009ce:	e00c      	b.n	80009ea <main+0x3a2>
						GPIO_PIN_SET);
			} else {
				tmboostON = HAL_GetTick() + 20000;
 80009d0:	f001 fa7a 	bl	8001ec8 <HAL_GetTick>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80009da:	3320      	adds	r3, #32
 80009dc:	60bb      	str	r3, [r7, #8]
				HAL_GPIO_WritePin(boostWkUp_GPIO_Port, boostWkUp_Pin,
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e4:	4808      	ldr	r0, [pc, #32]	@ (8000a08 <main+0x3c0>)
 80009e6:	f002 f92f 	bl	8002c48 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
			}
			boostONswitch = !boostONswitch;
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf14      	ite	ne
 80009f0:	2301      	movne	r3, #1
 80009f2:	2300      	moveq	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f083 0301 	eor.w	r3, r3, #1
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	71fb      	strb	r3, [r7, #7]
		if (tmheartbeat < HAL_GetTick()) { //heartbeat LED
 8000a06:	e694      	b.n	8000732 <main+0xea>
 8000a08:	40010c00 	.word	0x40010c00

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b094      	sub	sp, #80	@ 0x50
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a16:	2228      	movs	r2, #40	@ 0x28
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f004 fc4e 	bl	80052bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a58:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 f93a 	bl	8002cdc <HAL_RCC_OscConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a6e:	f000 fe19 	bl	80016a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	230f      	movs	r3, #15
 8000a74:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a82:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fba6 	bl	80031e0 <HAL_RCC_ClockConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a9a:	f000 fe03 	bl	80016a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aa6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fd26 	bl	80034fc <HAL_RCCEx_PeriphCLKConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ab6:	f000 fdf5 	bl	80016a4 <Error_Handler>
  }
}
 8000aba:	bf00      	nop
 8000abc:	3750      	adds	r7, #80	@ 0x50
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <MX_ADC1_Init+0x74>)
 8000ad6:	4a19      	ldr	r2, [pc, #100]	@ (8000b3c <MX_ADC1_Init+0x78>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ada:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_ADC1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <MX_ADC1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_ADC1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_ADC1_Init+0x74>)
 8000aee:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000af2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af4:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <MX_ADC1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_ADC1_Init+0x74>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b00:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <MX_ADC1_Init+0x74>)
 8000b02:	f001 fa0f 	bl	8001f24 <HAL_ADC_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b0c:	f000 fdca 	bl	80016a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b10:	2304      	movs	r3, #4
 8000b12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_ADC1_Init+0x74>)
 8000b22:	f001 fad7 	bl	80020d4 <HAL_ADC_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b2c:	f000 fdba 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000094 	.word	0x20000094
 8000b3c:	40012400 	.word	0x40012400

08000b40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bdc <MX_TIM1_Init+0x9c>)
 8000b60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b64:	2247      	movs	r2, #71	@ 0x47
 8000b66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b76:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b88:	4813      	ldr	r0, [pc, #76]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000b8a:	f002 fd6d 	bl	8003668 <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b94:	f000 fd86 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000ba6:	f003 f8b5 	bl	8003d14 <HAL_TIM_ConfigClockSource>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000bb0:	f000 fd78 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_TIM1_Init+0x98>)
 8000bc2:	f003 fd0b 	bl	80045dc <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bcc:	f000 fd6a 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200000c4 	.word	0x200000c4
 8000bdc:	40012c00 	.word	0x40012c00

08000be0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	@ 0x38
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	f107 0320 	add.w	r3, r7, #32
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	615a      	str	r2, [r3, #20]
 8000c0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c10:	4b3d      	ldr	r3, [pc, #244]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000c12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c18:	4b3b      	ldr	r3, [pc, #236]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c24:	4b38      	ldr	r3, [pc, #224]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000c26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b36      	ldr	r3, [pc, #216]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b35      	ldr	r3, [pc, #212]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c38:	4833      	ldr	r0, [pc, #204]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000c3a:	f002 fd15 	bl	8003668 <HAL_TIM_Base_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c44:	f000 fd2e 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c52:	4619      	mov	r1, r3
 8000c54:	482c      	ldr	r0, [pc, #176]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000c56:	f003 f85d 	bl	8003d14 <HAL_TIM_ConfigClockSource>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c60:	f000 fd20 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c64:	4828      	ldr	r0, [pc, #160]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000c66:	f002 fd99 	bl	800379c <HAL_TIM_PWM_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c70:	f000 fd18 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	4619      	mov	r1, r3
 8000c82:	4821      	ldr	r0, [pc, #132]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000c84:	f003 fcaa 	bl	80045dc <HAL_TIMEx_MasterConfigSynchronization>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c8e:	f000 fd09 	bl	80016a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c92:	2360      	movs	r3, #96	@ 0x60
 8000c94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4817      	ldr	r0, [pc, #92]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000caa:	f002 ff71 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000cb4:	f000 fcf6 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2204      	movs	r2, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4812      	ldr	r0, [pc, #72]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000cc0:	f002 ff66 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000cca:	f000 fceb 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000cd6:	f002 ff5b 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000ce0:	f000 fce0 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4807      	ldr	r0, [pc, #28]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000cec:	f002 ff50 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000cf6:	f000 fcd5 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cfa:	4803      	ldr	r0, [pc, #12]	@ (8000d08 <MX_TIM2_Init+0x128>)
 8000cfc:	f000 fe4a 	bl	8001994 <HAL_TIM_MspPostInit>

}
 8000d00:	bf00      	nop
 8000d02:	3738      	adds	r7, #56	@ 0x38
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000010c 	.word	0x2000010c

08000d0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	@ 0x38
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	f107 0320 	add.w	r3, r7, #32
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
 8000d38:	615a      	str	r2, [r3, #20]
 8000d3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000d3e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e38 <MX_TIM3_Init+0x12c>)
 8000d40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d42:	4b3c      	ldr	r3, [pc, #240]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d48:	4b3a      	ldr	r3, [pc, #232]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d4e:	4b39      	ldr	r3, [pc, #228]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000d50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d56:	4b37      	ldr	r3, [pc, #220]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5c:	4b35      	ldr	r3, [pc, #212]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d62:	4834      	ldr	r0, [pc, #208]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000d64:	f002 fc80 	bl	8003668 <HAL_TIM_Base_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d6e:	f000 fc99 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	482d      	ldr	r0, [pc, #180]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000d80:	f002 ffc8 	bl	8003d14 <HAL_TIM_ConfigClockSource>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d8a:	f000 fc8b 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d8e:	4829      	ldr	r0, [pc, #164]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000d90:	f002 fd04 	bl	800379c <HAL_TIM_PWM_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d9a:	f000 fc83 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da6:	f107 0320 	add.w	r3, r7, #32
 8000daa:	4619      	mov	r1, r3
 8000dac:	4821      	ldr	r0, [pc, #132]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000dae:	f003 fc15 	bl	80045dc <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000db8:	f000 fc74 	bl	80016a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbc:	2360      	movs	r3, #96	@ 0x60
 8000dbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4818      	ldr	r0, [pc, #96]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000dd4:	f002 fedc 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000dde:	f000 fc61 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2204      	movs	r2, #4
 8000de6:	4619      	mov	r1, r3
 8000de8:	4812      	ldr	r0, [pc, #72]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000dea:	f002 fed1 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000df4:	f000 fc56 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480d      	ldr	r0, [pc, #52]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000e00:	f002 fec6 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000e0a:	f000 fc4b 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	220c      	movs	r2, #12
 8000e12:	4619      	mov	r1, r3
 8000e14:	4807      	ldr	r0, [pc, #28]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000e16:	f002 febb 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000e20:	f000 fc40 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e24:	4803      	ldr	r0, [pc, #12]	@ (8000e34 <MX_TIM3_Init+0x128>)
 8000e26:	f000 fdb5 	bl	8001994 <HAL_TIM_MspPostInit>

}
 8000e2a:	bf00      	nop
 8000e2c:	3738      	adds	r7, #56	@ 0x38
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000154 	.word	0x20000154
 8000e38:	40000400 	.word	0x40000400

08000e3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08e      	sub	sp, #56	@ 0x38
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e50:	f107 0320 	add.w	r3, r7, #32
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000e6e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f68 <MX_TIM4_Init+0x12c>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e72:	4b3c      	ldr	r3, [pc, #240]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b3a      	ldr	r3, [pc, #232]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e7e:	4b39      	ldr	r3, [pc, #228]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000e80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e86:	4b37      	ldr	r3, [pc, #220]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8c:	4b35      	ldr	r3, [pc, #212]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e92:	4834      	ldr	r0, [pc, #208]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000e94:	f002 fbe8 	bl	8003668 <HAL_TIM_Base_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000e9e:	f000 fc01 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ea8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eac:	4619      	mov	r1, r3
 8000eae:	482d      	ldr	r0, [pc, #180]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000eb0:	f002 ff30 	bl	8003d14 <HAL_TIM_ConfigClockSource>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000eba:	f000 fbf3 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ebe:	4829      	ldr	r0, [pc, #164]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000ec0:	f002 fc6c 	bl	800379c <HAL_TIM_PWM_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000eca:	f000 fbeb 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ed6:	f107 0320 	add.w	r3, r7, #32
 8000eda:	4619      	mov	r1, r3
 8000edc:	4821      	ldr	r0, [pc, #132]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000ede:	f003 fb7d 	bl	80045dc <HAL_TIMEx_MasterConfigSynchronization>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000ee8:	f000 fbdc 	bl	80016a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eec:	2360      	movs	r3, #96	@ 0x60
 8000eee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	4619      	mov	r1, r3
 8000f02:	4818      	ldr	r0, [pc, #96]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000f04:	f002 fe44 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000f0e:	f000 fbc9 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2204      	movs	r2, #4
 8000f16:	4619      	mov	r1, r3
 8000f18:	4812      	ldr	r0, [pc, #72]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000f1a:	f002 fe39 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000f24:	f000 fbbe 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000f30:	f002 fe2e 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000f3a:	f000 fbb3 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	220c      	movs	r2, #12
 8000f42:	4619      	mov	r1, r3
 8000f44:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000f46:	f002 fe23 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000f50:	f000 fba8 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f54:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <MX_TIM4_Init+0x128>)
 8000f56:	f000 fd1d 	bl	8001994 <HAL_TIM_MspPostInit>

}
 8000f5a:	bf00      	nop
 8000f5c:	3738      	adds	r7, #56	@ 0x38
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000019c 	.word	0x2000019c
 8000f68:	40000800 	.word	0x40000800

08000f6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <MX_USART1_UART_Init+0x50>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000fa4:	f003 fb78 	bl	8004698 <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fae:	f000 fb79 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002f4 	.word	0x200002f4
 8000fbc:	40013800 	.word	0x40013800

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fc6:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <MX_DMA_Init+0x68>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <MX_DMA_Init+0x68>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <MX_DMA_Init+0x68>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	200b      	movs	r0, #11
 8000fe4:	f001 fa87 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fe8:	200b      	movs	r0, #11
 8000fea:	f001 faa0 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	200c      	movs	r0, #12
 8000ff4:	f001 fa7f 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ff8:	200c      	movs	r0, #12
 8000ffa:	f001 fa98 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	200e      	movs	r0, #14
 8001004:	f001 fa77 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001008:	200e      	movs	r0, #14
 800100a:	f001 fa90 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	200f      	movs	r0, #15
 8001014:	f001 fa6f 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001018:	200f      	movs	r0, #15
 800101a:	f001 fa88 	bl	800252e <HAL_NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001040:	4b3f      	ldr	r3, [pc, #252]	@ (8001140 <MX_GPIO_Init+0x114>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a3e      	ldr	r2, [pc, #248]	@ (8001140 <MX_GPIO_Init+0x114>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b3c      	ldr	r3, [pc, #240]	@ (8001140 <MX_GPIO_Init+0x114>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001058:	4b39      	ldr	r3, [pc, #228]	@ (8001140 <MX_GPIO_Init+0x114>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a38      	ldr	r2, [pc, #224]	@ (8001140 <MX_GPIO_Init+0x114>)
 800105e:	f043 0320 	orr.w	r3, r3, #32
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b36      	ldr	r3, [pc, #216]	@ (8001140 <MX_GPIO_Init+0x114>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b33      	ldr	r3, [pc, #204]	@ (8001140 <MX_GPIO_Init+0x114>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a32      	ldr	r2, [pc, #200]	@ (8001140 <MX_GPIO_Init+0x114>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b30      	ldr	r3, [pc, #192]	@ (8001140 <MX_GPIO_Init+0x114>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <MX_GPIO_Init+0x114>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a2c      	ldr	r2, [pc, #176]	@ (8001140 <MX_GPIO_Init+0x114>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <MX_GPIO_Init+0x114>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010a6:	4827      	ldr	r0, [pc, #156]	@ (8001144 <MX_GPIO_Init+0x118>)
 80010a8:	f001 fdce 	bl	8002c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, boostWkUp_Pin|powerOn_Pin|LED2_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f243 0130 	movw	r1, #12336	@ 0x3030
 80010b2:	4825      	ldr	r0, [pc, #148]	@ (8001148 <MX_GPIO_Init+0x11c>)
 80010b4:	f001 fdc8 	bl	8002c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80010b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4619      	mov	r1, r3
 80010d0:	481c      	ldr	r0, [pc, #112]	@ (8001144 <MX_GPIO_Init+0x118>)
 80010d2:	f001 fc35 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010d6:	2302      	movs	r3, #2
 80010d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010da:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <MX_GPIO_Init+0x120>)
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4619      	mov	r1, r3
 80010e8:	4819      	ldr	r0, [pc, #100]	@ (8001150 <MX_GPIO_Init+0x124>)
 80010ea:	f001 fc29 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_Boost_Pin SCL_Boost_Pin SDA_Boost_Pin */
  GPIO_InitStruct.Pin = IRQ_Boost_Pin|SCL_Boost_Pin|SDA_Boost_Pin;
 80010ee:	f640 4304 	movw	r3, #3076	@ 0xc04
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4619      	mov	r1, r3
 8001102:	4811      	ldr	r0, [pc, #68]	@ (8001148 <MX_GPIO_Init+0x11c>)
 8001104:	f001 fc1c 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : boostWkUp_Pin powerOn_Pin LED2_Pin EN_5V_Pin */
  GPIO_InitStruct.Pin = boostWkUp_Pin|powerOn_Pin|LED2_Pin|EN_5V_Pin;
 8001108:	f243 0330 	movw	r3, #12336	@ 0x3030
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2302      	movs	r3, #2
 8001118:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4619      	mov	r1, r3
 8001120:	4809      	ldr	r0, [pc, #36]	@ (8001148 <MX_GPIO_Init+0x11c>)
 8001122:	f001 fc0d 	bl	8002940 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2007      	movs	r0, #7
 800112c:	f001 f9e3 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001130:	2007      	movs	r0, #7
 8001132:	f001 f9fc 	bl	800252e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000
 8001144:	40011000 	.word	0x40011000
 8001148:	40010c00 	.word	0x40010c00
 800114c:	10210000 	.word	0x10210000
 8001150:	40010800 	.word	0x40010800

08001154 <_write>:

/* USER CODE BEGIN 4 */
/* UART PRINTF MAP */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	b29a      	uxth	r2, r3
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	4804      	ldr	r0, [pc, #16]	@ (800117c <_write+0x28>)
 800116c:	f003 fae4 	bl	8004738 <HAL_UART_Transmit>
	return len;
 8001170:	687b      	ldr	r3, [r7, #4]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200002f4 	.word	0x200002f4

08001180 <HAL_GPIO_EXTI_Callback>:
//HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	return ch;
}

/* IR TIMER AND DECODING */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_1) {
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d163      	bne.n	8001258 <HAL_GPIO_EXTI_Callback+0xd8>
		if (__HAL_TIM_GET_COUNTER(&htim1) > 8000) {
 8001190:	4b34      	ldr	r3, [pc, #208]	@ (8001264 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001196:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800119a:	d906      	bls.n	80011aa <HAL_GPIO_EXTI_Callback+0x2a>
			tempCode = 0;
 800119c:	4b32      	ldr	r3, [pc, #200]	@ (8001268 <HAL_GPIO_EXTI_Callback+0xe8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
			bitIndex = 0;
 80011a2:	4b32      	ldr	r3, [pc, #200]	@ (800126c <HAL_GPIO_EXTI_Callback+0xec>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e031      	b.n	800120e <HAL_GPIO_EXTI_Callback+0x8e>
		} else if (__HAL_TIM_GET_COUNTER(&htim1) > 1700) {
 80011aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001264 <HAL_GPIO_EXTI_Callback+0xe4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b0:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d912      	bls.n	80011de <HAL_GPIO_EXTI_Callback+0x5e>
			tempCode |= (1UL << (31 - bitIndex));   // write 1
 80011b8:	4b2c      	ldr	r3, [pc, #176]	@ (800126c <HAL_GPIO_EXTI_Callback+0xec>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80011c2:	fa23 f202 	lsr.w	r2, r3, r2
 80011c6:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <HAL_GPIO_EXTI_Callback+0xe8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	4a26      	ldr	r2, [pc, #152]	@ (8001268 <HAL_GPIO_EXTI_Callback+0xe8>)
 80011ce:	6013      	str	r3, [r2, #0]
			bitIndex++;
 80011d0:	4b26      	ldr	r3, [pc, #152]	@ (800126c <HAL_GPIO_EXTI_Callback+0xec>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b24      	ldr	r3, [pc, #144]	@ (800126c <HAL_GPIO_EXTI_Callback+0xec>)
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	e017      	b.n	800120e <HAL_GPIO_EXTI_Callback+0x8e>
		} else if (__HAL_TIM_GET_COUNTER(&htim1) > 1000) {
 80011de:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <HAL_GPIO_EXTI_Callback+0xe4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011e8:	d911      	bls.n	800120e <HAL_GPIO_EXTI_Callback+0x8e>
			tempCode &= ~(1UL << (31 - bitIndex));  // write 0
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <HAL_GPIO_EXTI_Callback+0xec>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80011f4:	40d3      	lsrs	r3, r2
 80011f6:	43da      	mvns	r2, r3
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <HAL_GPIO_EXTI_Callback+0xe8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4013      	ands	r3, r2
 80011fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001268 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001200:	6013      	str	r3, [r2, #0]
			bitIndex++;
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <HAL_GPIO_EXTI_Callback+0xec>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b18      	ldr	r3, [pc, #96]	@ (800126c <HAL_GPIO_EXTI_Callback+0xec>)
 800120c:	701a      	strb	r2, [r3, #0]
		}
		//printf("Data: %d\r\n", __HAL_TIM_GET_COUNTER(&htim1)); //debug terminal text

		if (bitIndex == 32) {
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <HAL_GPIO_EXTI_Callback+0xec>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b20      	cmp	r3, #32
 8001214:	d11c      	bne.n	8001250 <HAL_GPIO_EXTI_Callback+0xd0>
			cmdli = ~tempCode; // Logical inverted last 8 bits
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001222:	701a      	strb	r2, [r3, #0]
			cmd = tempCode >> 8; // Second last 8 bits
 8001224:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <HAL_GPIO_EXTI_Callback+0xf4>)
 800122e:	701a      	strb	r2, [r3, #0]
			if (cmdli == cmd) // Check for errors
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d106      	bne.n	800124a <HAL_GPIO_EXTI_Callback+0xca>
					{
				code = tempCode; // If no bit errors
 800123c:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_GPIO_EXTI_Callback+0xe8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0d      	ldr	r2, [pc, #52]	@ (8001278 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001242:	6013      	str	r3, [r2, #0]
				// Do your main work HERE
				//printf("Data: %X\r\n",code);
				processIR = 1;
 8001244:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
			}
			bitIndex = 0;
 800124a:	4b08      	ldr	r3, [pc, #32]	@ (800126c <HAL_GPIO_EXTI_Callback+0xec>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
		}
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001250:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2200      	movs	r2, #0
 8001256:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200000c4 	.word	0x200000c4
 8001268:	2000033c 	.word	0x2000033c
 800126c:	20000340 	.word	0x20000340
 8001270:	20000342 	.word	0x20000342
 8001274:	20000341 	.word	0x20000341
 8001278:	20000344 	.word	0x20000344
 800127c:	20000348 	.word	0x20000348

08001280 <outputControl>:

/* OUTPUT ENABLE CONTROL */
void outputControl(uint8_t en){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	if(en == 1)
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d105      	bne.n	800129c <outputControl+0x1c>
		HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, SET);
 8001290:	2201      	movs	r2, #1
 8001292:	2120      	movs	r1, #32
 8001294:	4806      	ldr	r0, [pc, #24]	@ (80012b0 <outputControl+0x30>)
 8001296:	f001 fcd7 	bl	8002c48 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, RESET);
}
 800129a:	e004      	b.n	80012a6 <outputControl+0x26>
		HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2120      	movs	r1, #32
 80012a0:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <outputControl+0x30>)
 80012a2:	f001 fcd1 	bl	8002c48 <HAL_GPIO_WritePin>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40010c00 	.word	0x40010c00

080012b4 <setAllBlue>:

/* LED EFFECTS */

void setAllBlue(WS28XX_HandleTypeDef ws) {
 80012b4:	b084      	sub	sp, #16
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	f107 0c08 	add.w	ip, r7, #8
 80012be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	WS28XX_SetPixel_RGBW_565(&ws, 0, COLOR_RGB565_CYAN, 100);
 80012c2:	2364      	movs	r3, #100	@ 0x64
 80012c4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80012c8:	2100      	movs	r1, #0
 80012ca:	f107 0008 	add.w	r0, r7, #8
 80012ce:	f003 fcc7 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB565_CYAN, 100);
 80012d2:	2364      	movs	r3, #100	@ 0x64
 80012d4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80012d8:	2101      	movs	r1, #1
 80012da:	f107 0008 	add.w	r0, r7, #8
 80012de:	f003 fcbf 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 2, COLOR_RGB565_CYAN, 100);
 80012e2:	2364      	movs	r3, #100	@ 0x64
 80012e4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80012e8:	2102      	movs	r1, #2
 80012ea:	f107 0008 	add.w	r0, r7, #8
 80012ee:	f003 fcb7 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
	WS28XX_Update(&ws);
 80012f2:	f107 0008 	add.w	r0, r7, #8
 80012f6:	f003 fd27 	bl	8004d48 <WS28XX_Update>
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001302:	b004      	add	sp, #16
 8001304:	4770      	bx	lr

08001306 <turnAllOff>:

void turnAllOff(WS28XX_HandleTypeDef ws) {
 8001306:	b084      	sub	sp, #16
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
 800130c:	f107 0c08 	add.w	ip, r7, #8
 8001310:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	WS28XX_SetPixel_RGBW_565(&ws, 0, COLOR_RGB888_BLACK, 0);
 8001314:	2300      	movs	r3, #0
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	f107 0008 	add.w	r0, r7, #8
 800131e:	f003 fc9f 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB888_BLACK, 0);
 8001322:	2300      	movs	r3, #0
 8001324:	2200      	movs	r2, #0
 8001326:	2101      	movs	r1, #1
 8001328:	f107 0008 	add.w	r0, r7, #8
 800132c:	f003 fc98 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 2, COLOR_RGB888_BLACK, 0);
 8001330:	2300      	movs	r3, #0
 8001332:	2200      	movs	r2, #0
 8001334:	2102      	movs	r1, #2
 8001336:	f107 0008 	add.w	r0, r7, #8
 800133a:	f003 fc91 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
	WS28XX_Update(&ws);
 800133e:	f107 0008 	add.w	r0, r7, #8
 8001342:	f003 fd01 	bl	8004d48 <WS28XX_Update>
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800134e:	b004      	add	sp, #16
 8001350:	4770      	bx	lr
	...

08001354 <GlitteringWavesEffect>:

void GlitteringWavesEffect(WS28XX_HandleTypeDef ws) {
 8001354:	b084      	sub	sp, #16
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	f107 0c10 	add.w	ip, r7, #16
 8001360:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	static uint32_t next_update = 0;
	static uint8_t brightness[3] = { 100, 120, 140 }; // Initial brightness for each LED
	static int8_t delta[3] = { 10, -15, 20 }; // Change in brightness for each LED

	if (HAL_GetTick() >= next_update) {
 8001364:	f000 fdb0 	bl	8001ec8 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <GlitteringWavesEffect+0xc0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d349      	bcc.n	8001406 <GlitteringWavesEffect+0xb2>
		next_update = HAL_GetTick() + 5; // 5ms periodic update
 8001372:	f000 fda9 	bl	8001ec8 <HAL_GetTick>
 8001376:	4603      	mov	r3, r0
 8001378:	3305      	adds	r3, #5
 800137a:	4a26      	ldr	r2, [pc, #152]	@ (8001414 <GlitteringWavesEffect+0xc0>)
 800137c:	6013      	str	r3, [r2, #0]

		for (int i = 0; i < 3; i++) {
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	e039      	b.n	80013f8 <GlitteringWavesEffect+0xa4>
			brightness[i] += delta[i];
 8001384:	4a24      	ldr	r2, [pc, #144]	@ (8001418 <GlitteringWavesEffect+0xc4>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	781a      	ldrb	r2, [r3, #0]
 800138c:	4923      	ldr	r1, [pc, #140]	@ (800141c <GlitteringWavesEffect+0xc8>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	440b      	add	r3, r1
 8001392:	f993 3000 	ldrsb.w	r3, [r3]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	4413      	add	r3, r2
 800139a:	b2d9      	uxtb	r1, r3
 800139c:	4a1e      	ldr	r2, [pc, #120]	@ (8001418 <GlitteringWavesEffect+0xc4>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	460a      	mov	r2, r1
 80013a4:	701a      	strb	r2, [r3, #0]
			if (brightness[i] >= 255 || brightness[i] <= 100) {
 80013a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001418 <GlitteringWavesEffect+0xc4>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2bff      	cmp	r3, #255	@ 0xff
 80013b0:	d005      	beq.n	80013be <GlitteringWavesEffect+0x6a>
 80013b2:	4a19      	ldr	r2, [pc, #100]	@ (8001418 <GlitteringWavesEffect+0xc4>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b64      	cmp	r3, #100	@ 0x64
 80013bc:	d80d      	bhi.n	80013da <GlitteringWavesEffect+0x86>
				delta[i] = -delta[i]; // Reverse direction at boundaries
 80013be:	4a17      	ldr	r2, [pc, #92]	@ (800141c <GlitteringWavesEffect+0xc8>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	f993 3000 	ldrsb.w	r3, [r3]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	425b      	negs	r3, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	b259      	sxtb	r1, r3
 80013d0:	4a12      	ldr	r2, [pc, #72]	@ (800141c <GlitteringWavesEffect+0xc8>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	460a      	mov	r2, r1
 80013d8:	701a      	strb	r2, [r3, #0]
			}
			WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_CYAN, brightness[i]);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	b299      	uxth	r1, r3
 80013de:	4a0e      	ldr	r2, [pc, #56]	@ (8001418 <GlitteringWavesEffect+0xc4>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80013ea:	f107 0010 	add.w	r0, r7, #16
 80013ee:	f003 fc37 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
		for (int i = 0; i < 3; i++) {
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3301      	adds	r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	ddc2      	ble.n	8001384 <GlitteringWavesEffect+0x30>
		}
		WS28XX_Update(&ws);
 80013fe:	f107 0010 	add.w	r0, r7, #16
 8001402:	f003 fca1 	bl	8004d48 <WS28XX_Update>
	}
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001410:	b004      	add	sp, #16
 8001412:	4770      	bx	lr
 8001414:	200018ac 	.word	0x200018ac
 8001418:	20000000 	.word	0x20000000
 800141c:	20000004 	.word	0x20000004

08001420 <EnchantedRippleEffect>:
void EnchantedRippleEffect(WS28XX_HandleTypeDef ws) {
 8001420:	b084      	sub	sp, #16
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
 8001426:	f107 0c08 	add.w	ip, r7, #8
 800142a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	static uint32_t next_update = 0;
	static uint8_t brightness = 0;
	static int8_t direction = 1; // 1 for increasing, -1 for decreasing

	if (HAL_GetTick() >= next_update) {
 800142e:	f000 fd4b 	bl	8001ec8 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <EnchantedRippleEffect+0xb8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d346      	bcc.n	80014ca <EnchantedRippleEffect+0xaa>
		next_update = HAL_GetTick() + 5; // 5ms periodic update
 800143c:	f000 fd44 	bl	8001ec8 <HAL_GetTick>
 8001440:	4603      	mov	r3, r0
 8001442:	3305      	adds	r3, #5
 8001444:	4a24      	ldr	r2, [pc, #144]	@ (80014d8 <EnchantedRippleEffect+0xb8>)
 8001446:	6013      	str	r3, [r2, #0]

		brightness += 5 * direction;
 8001448:	4b24      	ldr	r3, [pc, #144]	@ (80014dc <EnchantedRippleEffect+0xbc>)
 800144a:	f993 3000 	ldrsb.w	r3, [r3]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	0092      	lsls	r2, r2, #2
 8001454:	4413      	add	r3, r2
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <EnchantedRippleEffect+0xc0>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4413      	add	r3, r2
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <EnchantedRippleEffect+0xc0>)
 8001462:	701a      	strb	r2, [r3, #0]
		if (brightness >= 255 || brightness <= 0) {
 8001464:	4b1e      	ldr	r3, [pc, #120]	@ (80014e0 <EnchantedRippleEffect+0xc0>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2bff      	cmp	r3, #255	@ 0xff
 800146a:	d003      	beq.n	8001474 <EnchantedRippleEffect+0x54>
 800146c:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <EnchantedRippleEffect+0xc0>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d108      	bne.n	8001486 <EnchantedRippleEffect+0x66>
			direction = -direction; // Reverse at boundaries
 8001474:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <EnchantedRippleEffect+0xbc>)
 8001476:	f993 3000 	ldrsb.w	r3, [r3]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	425b      	negs	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	b25a      	sxtb	r2, r3
 8001482:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <EnchantedRippleEffect+0xbc>)
 8001484:	701a      	strb	r2, [r3, #0]
		}

		WS28XX_SetPixel_RGBW_565(&ws, 0, COLOR_RGB565_BLUE, brightness);
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <EnchantedRippleEffect+0xc0>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	221f      	movs	r2, #31
 800148c:	2100      	movs	r1, #0
 800148e:	f107 0008 	add.w	r0, r7, #8
 8001492:	f003 fbe5 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
		WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB565_GREEN, brightness / 2);
 8001496:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <EnchantedRippleEffect+0xc0>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	085b      	lsrs	r3, r3, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80014a2:	2101      	movs	r1, #1
 80014a4:	f107 0008 	add.w	r0, r7, #8
 80014a8:	f003 fbda 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
		WS28XX_SetPixel_RGBW_565(&ws, 2, COLOR_RGB565_PURPLE, 255 - brightness);
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <EnchantedRippleEffect+0xc0>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f647 020f 	movw	r2, #30735	@ 0x780f
 80014b8:	2102      	movs	r1, #2
 80014ba:	f107 0008 	add.w	r0, r7, #8
 80014be:	f003 fbcf 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
		WS28XX_Update(&ws);
 80014c2:	f107 0008 	add.w	r0, r7, #8
 80014c6:	f003 fc3f 	bl	8004d48 <WS28XX_Update>

	}
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014d2:	b004      	add	sp, #16
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	200018b0 	.word	0x200018b0
 80014dc:	20000007 	.word	0x20000007
 80014e0:	200018b4 	.word	0x200018b4

080014e4 <TwinklingGlowEffect>:
void TwinklingGlowEffect(WS28XX_HandleTypeDef ws) {
 80014e4:	b084      	sub	sp, #16
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	f107 0c10 	add.w	ip, r7, #16
 80014f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	static uint32_t next_update = 0;
	static uint8_t brightness[3] = { 50, 100, 150 }; // Initial brightness for each LED
	static int8_t delta[3] = { 5, -3, 4 }; // Change rate for each LED

	if (HAL_GetTick() >= next_update) {
 80014f4:	f000 fce8 	bl	8001ec8 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <TwinklingGlowEffect+0xf8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d365      	bcc.n	80015ce <TwinklingGlowEffect+0xea>
		next_update = HAL_GetTick() + 5; // 5ms periodic update
 8001502:	f000 fce1 	bl	8001ec8 <HAL_GetTick>
 8001506:	4603      	mov	r3, r0
 8001508:	3305      	adds	r3, #5
 800150a:	4a34      	ldr	r2, [pc, #208]	@ (80015dc <TwinklingGlowEffect+0xf8>)
 800150c:	6013      	str	r3, [r2, #0]

		for (int i = 0; i < 3; i++) {
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	e055      	b.n	80015c0 <TwinklingGlowEffect+0xdc>
			brightness[i] += delta[i];
 8001514:	4a32      	ldr	r2, [pc, #200]	@ (80015e0 <TwinklingGlowEffect+0xfc>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	4931      	ldr	r1, [pc, #196]	@ (80015e4 <TwinklingGlowEffect+0x100>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	440b      	add	r3, r1
 8001522:	f993 3000 	ldrsb.w	r3, [r3]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4413      	add	r3, r2
 800152a:	b2d9      	uxtb	r1, r3
 800152c:	4a2c      	ldr	r2, [pc, #176]	@ (80015e0 <TwinklingGlowEffect+0xfc>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	460a      	mov	r2, r1
 8001534:	701a      	strb	r2, [r3, #0]
			if (brightness[i] >= 255 || brightness[i] <= 50) {
 8001536:	4a2a      	ldr	r2, [pc, #168]	@ (80015e0 <TwinklingGlowEffect+0xfc>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2bff      	cmp	r3, #255	@ 0xff
 8001540:	d005      	beq.n	800154e <TwinklingGlowEffect+0x6a>
 8001542:	4a27      	ldr	r2, [pc, #156]	@ (80015e0 <TwinklingGlowEffect+0xfc>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b32      	cmp	r3, #50	@ 0x32
 800154c:	d829      	bhi.n	80015a2 <TwinklingGlowEffect+0xbe>
				delta[i] = -delta[i]; // Reverse direction at boundaries
 800154e:	4a25      	ldr	r2, [pc, #148]	@ (80015e4 <TwinklingGlowEffect+0x100>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	f993 3000 	ldrsb.w	r3, [r3]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	425b      	negs	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	b259      	sxtb	r1, r3
 8001560:	4a20      	ldr	r2, [pc, #128]	@ (80015e4 <TwinklingGlowEffect+0x100>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	460a      	mov	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
				// Add randomness for a twinkle effect
				if (brightness[i] <= 50) {
 800156a:	4a1d      	ldr	r2, [pc, #116]	@ (80015e0 <TwinklingGlowEffect+0xfc>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b32      	cmp	r3, #50	@ 0x32
 8001574:	d815      	bhi.n	80015a2 <TwinklingGlowEffect+0xbe>
					delta[i] = (rand() % 5) + 3; // Randomize twinkle speed
 8001576:	f003 fc59 	bl	8004e2c <rand>
 800157a:	4602      	mov	r2, r0
 800157c:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <TwinklingGlowEffect+0x104>)
 800157e:	fb83 1302 	smull	r1, r3, r3, r2
 8001582:	1059      	asrs	r1, r3, #1
 8001584:	17d3      	asrs	r3, r2, #31
 8001586:	1ac9      	subs	r1, r1, r3
 8001588:	460b      	mov	r3, r1
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	1ad1      	subs	r1, r2, r3
 8001590:	b2cb      	uxtb	r3, r1
 8001592:	3303      	adds	r3, #3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	b259      	sxtb	r1, r3
 8001598:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <TwinklingGlowEffect+0x100>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	460a      	mov	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
				}
			}
			WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_AQUA, brightness[i]);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	b299      	uxth	r1, r3
 80015a6:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <TwinklingGlowEffect+0xfc>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f645 521c 	movw	r2, #23836	@ 0x5d1c
 80015b2:	f107 0010 	add.w	r0, r7, #16
 80015b6:	f003 fb53 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
		for (int i = 0; i < 3; i++) {
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3301      	adds	r3, #1
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	dda6      	ble.n	8001514 <TwinklingGlowEffect+0x30>
		}
		WS28XX_Update(&ws);
 80015c6:	f107 0010 	add.w	r0, r7, #16
 80015ca:	f003 fbbd 	bl	8004d48 <WS28XX_Update>
	}
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015d8:	b004      	add	sp, #16
 80015da:	4770      	bx	lr
 80015dc:	200018b8 	.word	0x200018b8
 80015e0:	20000008 	.word	0x20000008
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	66666667 	.word	0x66666667

080015ec <CarTurnSignalEffect>:

void CarTurnSignalEffect(WS28XX_HandleTypeDef ws) {
 80015ec:	b084      	sub	sp, #16
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	f107 0c10 	add.w	ip, r7, #16
 80015f8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	static uint32_t next_update = 0;
	static bool leds_on = false; // State to track whether the LEDs are on or off

	if (HAL_GetTick() >= next_update) {
 80015fc:	f000 fc64 	bl	8001ec8 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	4b26      	ldr	r3, [pc, #152]	@ (800169c <CarTurnSignalEffect+0xb0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d340      	bcc.n	800168c <CarTurnSignalEffect+0xa0>
		next_update = HAL_GetTick() + (leds_on ? 300 : 700); // 300ms ON, 700ms OFF for classic timing
 800160a:	f000 fc5d 	bl	8001ec8 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <CarTurnSignalEffect+0xb4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <CarTurnSignalEffect+0x32>
 8001618:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800161c:	e001      	b.n	8001622 <CarTurnSignalEffect+0x36>
 800161e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8001622:	4413      	add	r3, r2
 8001624:	4a1d      	ldr	r2, [pc, #116]	@ (800169c <CarTurnSignalEffect+0xb0>)
 8001626:	6013      	str	r3, [r2, #0]

		if (leds_on) {
 8001628:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <CarTurnSignalEffect+0xb4>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d014      	beq.n	800165a <CarTurnSignalEffect+0x6e>
			// Turn off all LEDs
			for (int i = 0; i < 3; i++) {
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	e00a      	b.n	800164c <CarTurnSignalEffect+0x60>
				WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_BLACK, 0);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	b299      	uxth	r1, r3
 800163a:	2300      	movs	r3, #0
 800163c:	2200      	movs	r2, #0
 800163e:	f107 0010 	add.w	r0, r7, #16
 8001642:	f003 fb0d 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
			for (int i = 0; i < 3; i++) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3301      	adds	r3, #1
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b02      	cmp	r3, #2
 8001650:	ddf1      	ble.n	8001636 <CarTurnSignalEffect+0x4a>
			}
			leds_on = false;
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <CarTurnSignalEffect+0xb4>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e014      	b.n	8001684 <CarTurnSignalEffect+0x98>
		} else {
			// Turn on all LEDs with Amber
			for (int i = 0; i < 3; i++) {
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	e00b      	b.n	8001678 <CarTurnSignalEffect+0x8c>
				WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_ORANGE, 255);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b299      	uxth	r1, r3
 8001664:	23ff      	movs	r3, #255	@ 0xff
 8001666:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 800166a:	f107 0010 	add.w	r0, r7, #16
 800166e:	f003 faf7 	bl	8004c60 <WS28XX_SetPixel_RGBW_565>
			for (int i = 0; i < 3; i++) {
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2b02      	cmp	r3, #2
 800167c:	ddf0      	ble.n	8001660 <CarTurnSignalEffect+0x74>
			}
			leds_on = true;
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <CarTurnSignalEffect+0xb4>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
		}
		WS28XX_Update(&ws);
 8001684:	f107 0010 	add.w	r0, r7, #16
 8001688:	f003 fb5e 	bl	8004d48 <WS28XX_Update>
	}
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001696:	b004      	add	sp, #16
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	200018bc 	.word	0x200018bc
 80016a0:	200018c0 	.word	0x200018c0

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <Error_Handler+0x8>

080016b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_MspInit+0x5c>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	4a14      	ldr	r2, [pc, #80]	@ (800170c <HAL_MspInit+0x5c>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6193      	str	r3, [r2, #24]
 80016c2:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_MspInit+0x5c>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <HAL_MspInit+0x5c>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <HAL_MspInit+0x5c>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <HAL_MspInit+0x5c>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_MspInit+0x60>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <HAL_MspInit+0x60>)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000
 8001710:	40010000 	.word	0x40010000

08001714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <HAL_ADC_MspInit+0x6c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d121      	bne.n	8001778 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <HAL_ADC_MspInit+0x70>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <HAL_ADC_MspInit+0x70>)
 800173a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <HAL_ADC_MspInit+0x70>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <HAL_ADC_MspInit+0x70>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a0c      	ldr	r2, [pc, #48]	@ (8001784 <HAL_ADC_MspInit+0x70>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_ADC_MspInit+0x70>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001764:	2330      	movs	r3, #48	@ 0x30
 8001766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001768:	2303      	movs	r3, #3
 800176a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	4619      	mov	r1, r3
 8001772:	4805      	ldr	r0, [pc, #20]	@ (8001788 <HAL_ADC_MspInit+0x74>)
 8001774:	f001 f8e4 	bl	8002940 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001778:	bf00      	nop
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40012400 	.word	0x40012400
 8001784:	40021000 	.word	0x40021000
 8001788:	40010800 	.word	0x40010800

0800178c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a72      	ldr	r2, [pc, #456]	@ (8001964 <HAL_TIM_Base_MspInit+0x1d8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10c      	bne.n	80017b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800179e:	4b72      	ldr	r3, [pc, #456]	@ (8001968 <HAL_TIM_Base_MspInit+0x1dc>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	4a71      	ldr	r2, [pc, #452]	@ (8001968 <HAL_TIM_Base_MspInit+0x1dc>)
 80017a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017a8:	6193      	str	r3, [r2, #24]
 80017aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001968 <HAL_TIM_Base_MspInit+0x1dc>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017b6:	e0d0      	b.n	800195a <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017c0:	d15a      	bne.n	8001878 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c2:	4b69      	ldr	r3, [pc, #420]	@ (8001968 <HAL_TIM_Base_MspInit+0x1dc>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a68      	ldr	r2, [pc, #416]	@ (8001968 <HAL_TIM_Base_MspInit+0x1dc>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b66      	ldr	r3, [pc, #408]	@ (8001968 <HAL_TIM_Base_MspInit+0x1dc>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80017da:	4b64      	ldr	r3, [pc, #400]	@ (800196c <HAL_TIM_Base_MspInit+0x1e0>)
 80017dc:	4a64      	ldr	r2, [pc, #400]	@ (8001970 <HAL_TIM_Base_MspInit+0x1e4>)
 80017de:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017e0:	4b62      	ldr	r3, [pc, #392]	@ (800196c <HAL_TIM_Base_MspInit+0x1e0>)
 80017e2:	2210      	movs	r2, #16
 80017e4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e6:	4b61      	ldr	r3, [pc, #388]	@ (800196c <HAL_TIM_Base_MspInit+0x1e0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017ec:	4b5f      	ldr	r3, [pc, #380]	@ (800196c <HAL_TIM_Base_MspInit+0x1e0>)
 80017ee:	2280      	movs	r2, #128	@ 0x80
 80017f0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017f2:	4b5e      	ldr	r3, [pc, #376]	@ (800196c <HAL_TIM_Base_MspInit+0x1e0>)
 80017f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017fa:	4b5c      	ldr	r3, [pc, #368]	@ (800196c <HAL_TIM_Base_MspInit+0x1e0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001800:	4b5a      	ldr	r3, [pc, #360]	@ (800196c <HAL_TIM_Base_MspInit+0x1e0>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001806:	4b59      	ldr	r3, [pc, #356]	@ (800196c <HAL_TIM_Base_MspInit+0x1e0>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800180c:	4857      	ldr	r0, [pc, #348]	@ (800196c <HAL_TIM_Base_MspInit+0x1e0>)
 800180e:	f000 fea9 	bl	8002564 <HAL_DMA_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_TIM_Base_MspInit+0x90>
      Error_Handler();
 8001818:	f7ff ff44 	bl	80016a4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a53      	ldr	r2, [pc, #332]	@ (800196c <HAL_TIM_Base_MspInit+0x1e0>)
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24
 8001822:	4a52      	ldr	r2, [pc, #328]	@ (800196c <HAL_TIM_Base_MspInit+0x1e0>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001828:	4b52      	ldr	r3, [pc, #328]	@ (8001974 <HAL_TIM_Base_MspInit+0x1e8>)
 800182a:	4a53      	ldr	r2, [pc, #332]	@ (8001978 <HAL_TIM_Base_MspInit+0x1ec>)
 800182c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800182e:	4b51      	ldr	r3, [pc, #324]	@ (8001974 <HAL_TIM_Base_MspInit+0x1e8>)
 8001830:	2210      	movs	r2, #16
 8001832:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001834:	4b4f      	ldr	r3, [pc, #316]	@ (8001974 <HAL_TIM_Base_MspInit+0x1e8>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800183a:	4b4e      	ldr	r3, [pc, #312]	@ (8001974 <HAL_TIM_Base_MspInit+0x1e8>)
 800183c:	2280      	movs	r2, #128	@ 0x80
 800183e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001840:	4b4c      	ldr	r3, [pc, #304]	@ (8001974 <HAL_TIM_Base_MspInit+0x1e8>)
 8001842:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001846:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001848:	4b4a      	ldr	r3, [pc, #296]	@ (8001974 <HAL_TIM_Base_MspInit+0x1e8>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800184e:	4b49      	ldr	r3, [pc, #292]	@ (8001974 <HAL_TIM_Base_MspInit+0x1e8>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001854:	4b47      	ldr	r3, [pc, #284]	@ (8001974 <HAL_TIM_Base_MspInit+0x1e8>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800185a:	4846      	ldr	r0, [pc, #280]	@ (8001974 <HAL_TIM_Base_MspInit+0x1e8>)
 800185c:	f000 fe82 	bl	8002564 <HAL_DMA_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_TIM_Base_MspInit+0xde>
      Error_Handler();
 8001866:	f7ff ff1d 	bl	80016a4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a41      	ldr	r2, [pc, #260]	@ (8001974 <HAL_TIM_Base_MspInit+0x1e8>)
 800186e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001870:	4a40      	ldr	r2, [pc, #256]	@ (8001974 <HAL_TIM_Base_MspInit+0x1e8>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001876:	e070      	b.n	800195a <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a3f      	ldr	r2, [pc, #252]	@ (800197c <HAL_TIM_Base_MspInit+0x1f0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d133      	bne.n	80018ea <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001882:	4b39      	ldr	r3, [pc, #228]	@ (8001968 <HAL_TIM_Base_MspInit+0x1dc>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a38      	ldr	r2, [pc, #224]	@ (8001968 <HAL_TIM_Base_MspInit+0x1dc>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <HAL_TIM_Base_MspInit+0x1dc>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 800189a:	4b39      	ldr	r3, [pc, #228]	@ (8001980 <HAL_TIM_Base_MspInit+0x1f4>)
 800189c:	4a39      	ldr	r2, [pc, #228]	@ (8001984 <HAL_TIM_Base_MspInit+0x1f8>)
 800189e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018a0:	4b37      	ldr	r3, [pc, #220]	@ (8001980 <HAL_TIM_Base_MspInit+0x1f4>)
 80018a2:	2210      	movs	r2, #16
 80018a4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a6:	4b36      	ldr	r3, [pc, #216]	@ (8001980 <HAL_TIM_Base_MspInit+0x1f4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80018ac:	4b34      	ldr	r3, [pc, #208]	@ (8001980 <HAL_TIM_Base_MspInit+0x1f4>)
 80018ae:	2280      	movs	r2, #128	@ 0x80
 80018b0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018b2:	4b33      	ldr	r3, [pc, #204]	@ (8001980 <HAL_TIM_Base_MspInit+0x1f4>)
 80018b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018b8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ba:	4b31      	ldr	r3, [pc, #196]	@ (8001980 <HAL_TIM_Base_MspInit+0x1f4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 80018c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001980 <HAL_TIM_Base_MspInit+0x1f4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80018c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <HAL_TIM_Base_MspInit+0x1f4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80018cc:	482c      	ldr	r0, [pc, #176]	@ (8001980 <HAL_TIM_Base_MspInit+0x1f4>)
 80018ce:	f000 fe49 	bl	8002564 <HAL_DMA_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_TIM_Base_MspInit+0x150>
      Error_Handler();
 80018d8:	f7ff fee4 	bl	80016a4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a28      	ldr	r2, [pc, #160]	@ (8001980 <HAL_TIM_Base_MspInit+0x1f4>)
 80018e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018e2:	4a27      	ldr	r2, [pc, #156]	@ (8001980 <HAL_TIM_Base_MspInit+0x1f4>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80018e8:	e037      	b.n	800195a <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM4)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a26      	ldr	r2, [pc, #152]	@ (8001988 <HAL_TIM_Base_MspInit+0x1fc>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d132      	bne.n	800195a <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001968 <HAL_TIM_Base_MspInit+0x1dc>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <HAL_TIM_Base_MspInit+0x1dc>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	61d3      	str	r3, [r2, #28]
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <HAL_TIM_Base_MspInit+0x1dc>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 800190c:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <HAL_TIM_Base_MspInit+0x200>)
 800190e:	4a20      	ldr	r2, [pc, #128]	@ (8001990 <HAL_TIM_Base_MspInit+0x204>)
 8001910:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001912:	4b1e      	ldr	r3, [pc, #120]	@ (800198c <HAL_TIM_Base_MspInit+0x200>)
 8001914:	2210      	movs	r2, #16
 8001916:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001918:	4b1c      	ldr	r3, [pc, #112]	@ (800198c <HAL_TIM_Base_MspInit+0x200>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800191e:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <HAL_TIM_Base_MspInit+0x200>)
 8001920:	2280      	movs	r2, #128	@ 0x80
 8001922:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <HAL_TIM_Base_MspInit+0x200>)
 8001926:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800192a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800192c:	4b17      	ldr	r3, [pc, #92]	@ (800198c <HAL_TIM_Base_MspInit+0x200>)
 800192e:	2200      	movs	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8001932:	4b16      	ldr	r3, [pc, #88]	@ (800198c <HAL_TIM_Base_MspInit+0x200>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001938:	4b14      	ldr	r3, [pc, #80]	@ (800198c <HAL_TIM_Base_MspInit+0x200>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 800193e:	4813      	ldr	r0, [pc, #76]	@ (800198c <HAL_TIM_Base_MspInit+0x200>)
 8001940:	f000 fe10 	bl	8002564 <HAL_DMA_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_TIM_Base_MspInit+0x1c2>
      Error_Handler();
 800194a:	f7ff feab 	bl	80016a4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a0e      	ldr	r2, [pc, #56]	@ (800198c <HAL_TIM_Base_MspInit+0x200>)
 8001952:	629a      	str	r2, [r3, #40]	@ 0x28
 8001954:	4a0d      	ldr	r2, [pc, #52]	@ (800198c <HAL_TIM_Base_MspInit+0x200>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40012c00 	.word	0x40012c00
 8001968:	40021000 	.word	0x40021000
 800196c:	200001e4 	.word	0x200001e4
 8001970:	40020058 	.word	0x40020058
 8001974:	20000228 	.word	0x20000228
 8001978:	40020008 	.word	0x40020008
 800197c:	40000400 	.word	0x40000400
 8001980:	2000026c 	.word	0x2000026c
 8001984:	4002001c 	.word	0x4002001c
 8001988:	40000800 	.word	0x40000800
 800198c:	200002b0 	.word	0x200002b0
 8001990:	40020044 	.word	0x40020044

08001994 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	@ 0x30
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b2:	d143      	bne.n	8001a3c <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	4b4d      	ldr	r3, [pc, #308]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a4c      	ldr	r2, [pc, #304]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b4a      	ldr	r3, [pc, #296]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019cc:	4b47      	ldr	r3, [pc, #284]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a46      	ldr	r2, [pc, #280]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 80019d2:	f043 0308 	orr.w	r3, r3, #8
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b44      	ldr	r3, [pc, #272]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80019e4:	f248 030c 	movw	r3, #32780	@ 0x800c
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2302      	movs	r3, #2
 80019f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	483d      	ldr	r0, [pc, #244]	@ (8001af0 <HAL_TIM_MspPostInit+0x15c>)
 80019fa:	f000 ffa1 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019fe:	2308      	movs	r3, #8
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2302      	movs	r3, #2
 8001a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4838      	ldr	r0, [pc, #224]	@ (8001af4 <HAL_TIM_MspPostInit+0x160>)
 8001a12:	f000 ff95 	bl	8002940 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001a16:	4b38      	ldr	r3, [pc, #224]	@ (8001af8 <HAL_TIM_MspPostInit+0x164>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a26:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a34:	4a30      	ldr	r2, [pc, #192]	@ (8001af8 <HAL_TIM_MspPostInit+0x164>)
 8001a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a38:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a3a:	e053      	b.n	8001ae4 <HAL_TIM_MspPostInit+0x150>
  else if(htim->Instance==TIM3)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a2e      	ldr	r2, [pc, #184]	@ (8001afc <HAL_TIM_MspPostInit+0x168>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d130      	bne.n	8001aa8 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b29      	ldr	r3, [pc, #164]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	4a28      	ldr	r2, [pc, #160]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6193      	str	r3, [r2, #24]
 8001a52:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	4a22      	ldr	r2, [pc, #136]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 8001a64:	f043 0308 	orr.w	r3, r3, #8
 8001a68:	6193      	str	r3, [r2, #24]
 8001a6a:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a76:	23c0      	movs	r3, #192	@ 0xc0
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	4619      	mov	r1, r3
 8001a88:	4819      	ldr	r0, [pc, #100]	@ (8001af0 <HAL_TIM_MspPostInit+0x15c>)
 8001a8a:	f000 ff59 	bl	8002940 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2302      	movs	r3, #2
 8001a98:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4814      	ldr	r0, [pc, #80]	@ (8001af4 <HAL_TIM_MspPostInit+0x160>)
 8001aa2:	f000 ff4d 	bl	8002940 <HAL_GPIO_Init>
}
 8001aa6:	e01d      	b.n	8001ae4 <HAL_TIM_MspPostInit+0x150>
  else if(htim->Instance==TIM4)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a14      	ldr	r2, [pc, #80]	@ (8001b00 <HAL_TIM_MspPostInit+0x16c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d118      	bne.n	8001ae4 <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 8001ab8:	f043 0308 	orr.w	r3, r3, #8
 8001abc:	6193      	str	r3, [r2, #24]
 8001abe:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <HAL_TIM_MspPostInit+0x158>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001aca:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <HAL_TIM_MspPostInit+0x160>)
 8001ae0:	f000 ff2e 	bl	8002940 <HAL_GPIO_Init>
}
 8001ae4:	bf00      	nop
 8001ae6:	3730      	adds	r7, #48	@ 0x30
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010800 	.word	0x40010800
 8001af4:	40010c00 	.word	0x40010c00
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40000400 	.word	0x40000400
 8001b00:	40000800 	.word	0x40000800

08001b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b90 <HAL_UART_MspInit+0x8c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d131      	bne.n	8001b88 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b24:	4b1b      	ldr	r3, [pc, #108]	@ (8001b94 <HAL_UART_MspInit+0x90>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a1a      	ldr	r2, [pc, #104]	@ (8001b94 <HAL_UART_MspInit+0x90>)
 8001b2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <HAL_UART_MspInit+0x90>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <HAL_UART_MspInit+0x90>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a14      	ldr	r2, [pc, #80]	@ (8001b94 <HAL_UART_MspInit+0x90>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <HAL_UART_MspInit+0x90>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4619      	mov	r1, r3
 8001b68:	480b      	ldr	r0, [pc, #44]	@ (8001b98 <HAL_UART_MspInit+0x94>)
 8001b6a:	f000 fee9 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4619      	mov	r1, r3
 8001b82:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <HAL_UART_MspInit+0x94>)
 8001b84:	f000 fedc 	bl	8002940 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b88:	bf00      	nop
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40013800 	.word	0x40013800
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010800 	.word	0x40010800

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <NMI_Handler+0x4>

08001ba4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bae:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <HardFault_Handler+0x14>)
 8001bb0:	f001 f84a 	bl	8002c48 <HAL_GPIO_WritePin>
							GPIO_PIN_SET);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <HardFault_Handler+0x10>
 8001bb8:	40011000 	.word	0x40011000

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bc6:	4802      	ldr	r0, [pc, #8]	@ (8001bd0 <MemManage_Handler+0x14>)
 8001bc8:	f001 f83e 	bl	8002c48 <HAL_GPIO_WritePin>
								GPIO_PIN_SET);
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <MemManage_Handler+0x10>
 8001bd0:	40011000 	.word	0x40011000

08001bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0c:	f000 f94a 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f001 f847 	bl	8002cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001c28:	4802      	ldr	r0, [pc, #8]	@ (8001c34 <DMA1_Channel1_IRQHandler+0x10>)
 8001c2a:	f000 fd55 	bl	80026d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000228 	.word	0x20000228

08001c38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <DMA1_Channel2_IRQHandler+0x10>)
 8001c3e:	f000 fd4b 	bl	80026d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000026c 	.word	0x2000026c

08001c4c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <DMA1_Channel4_IRQHandler+0x10>)
 8001c52:	f000 fd41 	bl	80026d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200002b0 	.word	0x200002b0

08001c60 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <DMA1_Channel5_IRQHandler+0x10>)
 8001c66:	f000 fd37 	bl	80026d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200001e4 	.word	0x200001e4

08001c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <_kill>:

int _kill(int pid, int sig)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c8c:	f003 fb64 	bl	8005358 <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2216      	movs	r2, #22
 8001c94:	601a      	str	r2, [r3, #0]
  return -1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_exit>:

void _exit (int status)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001caa:	f04f 31ff 	mov.w	r1, #4294967295
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffe7 	bl	8001c82 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <_exit+0x12>

08001cb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e00a      	b.n	8001ce0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cca:	f3af 8000 	nop.w
 8001cce:	4601      	mov	r1, r0
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	b2ca      	uxtb	r2, r1
 8001cd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf0      	blt.n	8001cca <_read+0x12>
  }

  return len;
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d18:	605a      	str	r2, [r3, #4]
  return 0;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <_isatty>:

int _isatty(int file)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b085      	sub	sp, #20
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
	...

08001d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d5c:	4a14      	ldr	r2, [pc, #80]	@ (8001db0 <_sbrk+0x5c>)
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <_sbrk+0x60>)
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d68:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d70:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <_sbrk+0x64>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <_sbrk+0x68>)
 8001d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d207      	bcs.n	8001d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d84:	f003 fae8 	bl	8005358 <__errno>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	e009      	b.n	8001da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d94:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <_sbrk+0x64>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9a:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	4a05      	ldr	r2, [pc, #20]	@ (8001db8 <_sbrk+0x64>)
 8001da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001da6:	68fb      	ldr	r3, [r7, #12]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20005000 	.word	0x20005000
 8001db4:	00000400 	.word	0x00000400
 8001db8:	200018c4 	.word	0x200018c4
 8001dbc:	20001a18 	.word	0x20001a18

08001dc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dcc:	f7ff fff8 	bl	8001dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd0:	480b      	ldr	r0, [pc, #44]	@ (8001e00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dd2:	490c      	ldr	r1, [pc, #48]	@ (8001e04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd8:	e002      	b.n	8001de0 <LoopCopyDataInit>

08001dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dde:	3304      	adds	r3, #4

08001de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de4:	d3f9      	bcc.n	8001dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de6:	4a09      	ldr	r2, [pc, #36]	@ (8001e0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001de8:	4c09      	ldr	r4, [pc, #36]	@ (8001e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dec:	e001      	b.n	8001df2 <LoopFillZerobss>

08001dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df0:	3204      	adds	r2, #4

08001df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df4:	d3fb      	bcc.n	8001dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001df6:	f003 fab5 	bl	8005364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dfa:	f7fe fc25 	bl	8000648 <main>
  bx lr
 8001dfe:	4770      	bx	lr
  ldr r0, =_sdata
 8001e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e04:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e08:	08006174 	.word	0x08006174
  ldr r2, =_sbss
 8001e0c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e10:	20001a18 	.word	0x20001a18

08001e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC1_2_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <HAL_Init+0x28>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	@ (8001e40 <HAL_Init+0x28>)
 8001e22:	f043 0310 	orr.w	r3, r3, #16
 8001e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 fb59 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	200f      	movs	r0, #15
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fc3c 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fb71 	bl	800254a <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 fb39 	bl	80024f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	@ (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000010 	.word	0x20000010
 8001e9c:	20000018 	.word	0x20000018
 8001ea0:	20000014 	.word	0x20000014

08001ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <HAL_IncTick+0x1c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <HAL_IncTick+0x20>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a03      	ldr	r2, [pc, #12]	@ (8001ec4 <HAL_IncTick+0x20>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000018 	.word	0x20000018
 8001ec4:	200018c8 	.word	0x200018c8

08001ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b02      	ldr	r3, [pc, #8]	@ (8001ed8 <HAL_GetTick+0x10>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	200018c8 	.word	0x200018c8

08001edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff fff0 	bl	8001ec8 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d005      	beq.n	8001f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_Delay+0x44>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f02:	bf00      	nop
 8001f04:	f7ff ffe0 	bl	8001ec8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d8f7      	bhi.n	8001f04 <HAL_Delay+0x28>
  {
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000018 	.word	0x20000018

08001f24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0be      	b.n	80020c4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fbd6 	bl	8001714 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f9ab 	bl	80022c4 <ADC_ConversionStop_Disable>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 8099 	bne.w	80020b2 <HAL_ADC_Init+0x18e>
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 8095 	bne.w	80020b2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f90:	f023 0302 	bic.w	r3, r3, #2
 8001f94:	f043 0202 	orr.w	r2, r3, #2
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fa4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7b1b      	ldrb	r3, [r3, #12]
 8001faa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fbc:	d003      	beq.n	8001fc6 <HAL_ADC_Init+0xa2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d102      	bne.n	8001fcc <HAL_ADC_Init+0xa8>
 8001fc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fca:	e000      	b.n	8001fce <HAL_ADC_Init+0xaa>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7d1b      	ldrb	r3, [r3, #20]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d119      	bne.n	8002010 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7b1b      	ldrb	r3, [r3, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d109      	bne.n	8001ff8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	035a      	lsls	r2, r3, #13
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	e00b      	b.n	8002010 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002008:	f043 0201 	orr.w	r2, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	430a      	orrs	r2, r1
 8002022:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	4b28      	ldr	r3, [pc, #160]	@ (80020cc <HAL_ADC_Init+0x1a8>)
 800202c:	4013      	ands	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	430b      	orrs	r3, r1
 8002036:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002040:	d003      	beq.n	800204a <HAL_ADC_Init+0x126>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d104      	bne.n	8002054 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	3b01      	subs	r3, #1
 8002050:	051b      	lsls	r3, r3, #20
 8002052:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	430a      	orrs	r2, r1
 8002066:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <HAL_ADC_Init+0x1ac>)
 8002070:	4013      	ands	r3, r2
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	429a      	cmp	r2, r3
 8002076:	d10b      	bne.n	8002090 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002082:	f023 0303 	bic.w	r3, r3, #3
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800208e:	e018      	b.n	80020c2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	f023 0312 	bic.w	r3, r3, #18
 8002098:	f043 0210 	orr.w	r2, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020b0:	e007      	b.n	80020c2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b6:	f043 0210 	orr.w	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	ffe1f7fd 	.word	0xffe1f7fd
 80020d0:	ff1f0efe 	.word	0xff1f0efe

080020d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x20>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e0dc      	b.n	80022ae <HAL_ADC_ConfigChannel+0x1da>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b06      	cmp	r3, #6
 8002102:	d81c      	bhi.n	800213e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	3b05      	subs	r3, #5
 8002116:	221f      	movs	r2, #31
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	4019      	ands	r1, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	3b05      	subs	r3, #5
 8002130:	fa00 f203 	lsl.w	r2, r0, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	635a      	str	r2, [r3, #52]	@ 0x34
 800213c:	e03c      	b.n	80021b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b0c      	cmp	r3, #12
 8002144:	d81c      	bhi.n	8002180 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b23      	subs	r3, #35	@ 0x23
 8002158:	221f      	movs	r2, #31
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	4019      	ands	r1, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3b23      	subs	r3, #35	@ 0x23
 8002172:	fa00 f203 	lsl.w	r2, r0, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	631a      	str	r2, [r3, #48]	@ 0x30
 800217e:	e01b      	b.n	80021b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	3b41      	subs	r3, #65	@ 0x41
 8002192:	221f      	movs	r2, #31
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	4019      	ands	r1, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	3b41      	subs	r3, #65	@ 0x41
 80021ac:	fa00 f203 	lsl.w	r2, r0, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b09      	cmp	r3, #9
 80021be:	d91c      	bls.n	80021fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68d9      	ldr	r1, [r3, #12]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	3b1e      	subs	r3, #30
 80021d2:	2207      	movs	r2, #7
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	4019      	ands	r1, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6898      	ldr	r0, [r3, #8]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	3b1e      	subs	r3, #30
 80021ec:	fa00 f203 	lsl.w	r2, r0, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	e019      	b.n	800222e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6919      	ldr	r1, [r3, #16]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	2207      	movs	r2, #7
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	4019      	ands	r1, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6898      	ldr	r0, [r3, #8]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	fa00 f203 	lsl.w	r2, r0, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b10      	cmp	r3, #16
 8002234:	d003      	beq.n	800223e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800223a:	2b11      	cmp	r3, #17
 800223c:	d132      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d125      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d126      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002264:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b10      	cmp	r3, #16
 800226c:	d11a      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800226e:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <HAL_ADC_ConfigChannel+0x1e8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a13      	ldr	r2, [pc, #76]	@ (80022c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	0c9a      	lsrs	r2, r3, #18
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002284:	e002      	b.n	800228c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3b01      	subs	r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f9      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x1b2>
 8002292:	e007      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	f043 0220 	orr.w	r2, r3, #32
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	40012400 	.word	0x40012400
 80022bc:	20000010 	.word	0x20000010
 80022c0:	431bde83 	.word	0x431bde83

080022c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d12e      	bne.n	800233c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ee:	f7ff fdeb 	bl	8001ec8 <HAL_GetTick>
 80022f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022f4:	e01b      	b.n	800232e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022f6:	f7ff fde7 	bl	8001ec8 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d914      	bls.n	800232e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d10d      	bne.n	800232e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002316:	f043 0210 	orr.w	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e007      	b.n	800233e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d0dc      	beq.n	80022f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002364:	4013      	ands	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237a:	4a04      	ldr	r2, [pc, #16]	@ (800238c <__NVIC_SetPriorityGrouping+0x44>)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	60d3      	str	r3, [r2, #12]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002394:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	f003 0307 	and.w	r3, r3, #7
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db0b      	blt.n	80023d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4906      	ldr	r1, [pc, #24]	@ (80023e0 <__NVIC_EnableIRQ+0x34>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2001      	movs	r0, #1
 80023ce:	fa00 f202 	lsl.w	r2, r0, r2
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	@ (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	@ 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024ac:	d301      	bcc.n	80024b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00f      	b.n	80024d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <SysTick_Config+0x40>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ba:	210f      	movs	r1, #15
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f7ff ff90 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <SysTick_Config+0x40>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <SysTick_Config+0x40>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff2d 	bl	8002348 <__NVIC_SetPriorityGrouping>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff42 	bl	8002390 <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff90 	bl	8002438 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5f 	bl	80023e4 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff35 	bl	80023ac <__NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffa2 	bl	800249c <SysTick_Config>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e043      	b.n	8002602 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	4b22      	ldr	r3, [pc, #136]	@ (800260c <HAL_DMA_Init+0xa8>)
 8002582:	4413      	add	r3, r2
 8002584:	4a22      	ldr	r2, [pc, #136]	@ (8002610 <HAL_DMA_Init+0xac>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	009a      	lsls	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a1f      	ldr	r2, [pc, #124]	@ (8002614 <HAL_DMA_Init+0xb0>)
 8002596:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025ae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80025b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	bffdfff8 	.word	0xbffdfff8
 8002610:	cccccccd 	.word	0xcccccccd
 8002614:	40020000 	.word	0x40020000

08002618 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_DMA_Start_IT+0x20>
 8002634:	2302      	movs	r3, #2
 8002636:	e04b      	b.n	80026d0 <HAL_DMA_Start_IT+0xb8>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d13a      	bne.n	80026c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0201 	bic.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f937 	bl	80028e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 020e 	orr.w	r2, r2, #14
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e00f      	b.n	80026b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0204 	bic.w	r2, r2, #4
 800269e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 020a 	orr.w	r2, r2, #10
 80026ae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e005      	b.n	80026ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
 80026cc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	2204      	movs	r2, #4
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d04f      	beq.n	80027a0 <HAL_DMA_IRQHandler+0xc8>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	d04a      	beq.n	80027a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a66      	ldr	r2, [pc, #408]	@ (80028c8 <HAL_DMA_IRQHandler+0x1f0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d029      	beq.n	8002786 <HAL_DMA_IRQHandler+0xae>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a65      	ldr	r2, [pc, #404]	@ (80028cc <HAL_DMA_IRQHandler+0x1f4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d022      	beq.n	8002782 <HAL_DMA_IRQHandler+0xaa>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a63      	ldr	r2, [pc, #396]	@ (80028d0 <HAL_DMA_IRQHandler+0x1f8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01a      	beq.n	800277c <HAL_DMA_IRQHandler+0xa4>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a62      	ldr	r2, [pc, #392]	@ (80028d4 <HAL_DMA_IRQHandler+0x1fc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d012      	beq.n	8002776 <HAL_DMA_IRQHandler+0x9e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a60      	ldr	r2, [pc, #384]	@ (80028d8 <HAL_DMA_IRQHandler+0x200>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00a      	beq.n	8002770 <HAL_DMA_IRQHandler+0x98>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a5f      	ldr	r2, [pc, #380]	@ (80028dc <HAL_DMA_IRQHandler+0x204>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d102      	bne.n	800276a <HAL_DMA_IRQHandler+0x92>
 8002764:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002768:	e00e      	b.n	8002788 <HAL_DMA_IRQHandler+0xb0>
 800276a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800276e:	e00b      	b.n	8002788 <HAL_DMA_IRQHandler+0xb0>
 8002770:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002774:	e008      	b.n	8002788 <HAL_DMA_IRQHandler+0xb0>
 8002776:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800277a:	e005      	b.n	8002788 <HAL_DMA_IRQHandler+0xb0>
 800277c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002780:	e002      	b.n	8002788 <HAL_DMA_IRQHandler+0xb0>
 8002782:	2340      	movs	r3, #64	@ 0x40
 8002784:	e000      	b.n	8002788 <HAL_DMA_IRQHandler+0xb0>
 8002786:	2304      	movs	r3, #4
 8002788:	4a55      	ldr	r2, [pc, #340]	@ (80028e0 <HAL_DMA_IRQHandler+0x208>)
 800278a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 8094 	beq.w	80028be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800279e:	e08e      	b.n	80028be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	2202      	movs	r2, #2
 80027a6:	409a      	lsls	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d056      	beq.n	800285e <HAL_DMA_IRQHandler+0x186>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d051      	beq.n	800285e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 020a 	bic.w	r2, r2, #10
 80027d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a38      	ldr	r2, [pc, #224]	@ (80028c8 <HAL_DMA_IRQHandler+0x1f0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d029      	beq.n	800283e <HAL_DMA_IRQHandler+0x166>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a37      	ldr	r2, [pc, #220]	@ (80028cc <HAL_DMA_IRQHandler+0x1f4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d022      	beq.n	800283a <HAL_DMA_IRQHandler+0x162>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a35      	ldr	r2, [pc, #212]	@ (80028d0 <HAL_DMA_IRQHandler+0x1f8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01a      	beq.n	8002834 <HAL_DMA_IRQHandler+0x15c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a34      	ldr	r2, [pc, #208]	@ (80028d4 <HAL_DMA_IRQHandler+0x1fc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d012      	beq.n	800282e <HAL_DMA_IRQHandler+0x156>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a32      	ldr	r2, [pc, #200]	@ (80028d8 <HAL_DMA_IRQHandler+0x200>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00a      	beq.n	8002828 <HAL_DMA_IRQHandler+0x150>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a31      	ldr	r2, [pc, #196]	@ (80028dc <HAL_DMA_IRQHandler+0x204>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d102      	bne.n	8002822 <HAL_DMA_IRQHandler+0x14a>
 800281c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002820:	e00e      	b.n	8002840 <HAL_DMA_IRQHandler+0x168>
 8002822:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002826:	e00b      	b.n	8002840 <HAL_DMA_IRQHandler+0x168>
 8002828:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800282c:	e008      	b.n	8002840 <HAL_DMA_IRQHandler+0x168>
 800282e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002832:	e005      	b.n	8002840 <HAL_DMA_IRQHandler+0x168>
 8002834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002838:	e002      	b.n	8002840 <HAL_DMA_IRQHandler+0x168>
 800283a:	2320      	movs	r3, #32
 800283c:	e000      	b.n	8002840 <HAL_DMA_IRQHandler+0x168>
 800283e:	2302      	movs	r3, #2
 8002840:	4a27      	ldr	r2, [pc, #156]	@ (80028e0 <HAL_DMA_IRQHandler+0x208>)
 8002842:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	d034      	beq.n	80028be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800285c:	e02f      	b.n	80028be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	2208      	movs	r2, #8
 8002864:	409a      	lsls	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d028      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x1e8>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d023      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 020e 	bic.w	r2, r2, #14
 8002886:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f202 	lsl.w	r2, r1, r2
 8002896:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
    }
  }
  return;
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
}
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40020008 	.word	0x40020008
 80028cc:	4002001c 	.word	0x4002001c
 80028d0:	40020030 	.word	0x40020030
 80028d4:	40020044 	.word	0x40020044
 80028d8:	40020058 	.word	0x40020058
 80028dc:	4002006c 	.word	0x4002006c
 80028e0:	40020000 	.word	0x40020000

080028e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fa:	2101      	movs	r1, #1
 80028fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002900:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b10      	cmp	r3, #16
 8002910:	d108      	bne.n	8002924 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002922:	e007      	b.n	8002934 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	60da      	str	r2, [r3, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
	...

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b08b      	sub	sp, #44	@ 0x2c
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002952:	e169      	b.n	8002c28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002954:	2201      	movs	r2, #1
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	429a      	cmp	r2, r3
 800296e:	f040 8158 	bne.w	8002c22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a9a      	ldr	r2, [pc, #616]	@ (8002be0 <HAL_GPIO_Init+0x2a0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d05e      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 800297c:	4a98      	ldr	r2, [pc, #608]	@ (8002be0 <HAL_GPIO_Init+0x2a0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d875      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 8002982:	4a98      	ldr	r2, [pc, #608]	@ (8002be4 <HAL_GPIO_Init+0x2a4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d058      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 8002988:	4a96      	ldr	r2, [pc, #600]	@ (8002be4 <HAL_GPIO_Init+0x2a4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d86f      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 800298e:	4a96      	ldr	r2, [pc, #600]	@ (8002be8 <HAL_GPIO_Init+0x2a8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d052      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 8002994:	4a94      	ldr	r2, [pc, #592]	@ (8002be8 <HAL_GPIO_Init+0x2a8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d869      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 800299a:	4a94      	ldr	r2, [pc, #592]	@ (8002bec <HAL_GPIO_Init+0x2ac>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d04c      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 80029a0:	4a92      	ldr	r2, [pc, #584]	@ (8002bec <HAL_GPIO_Init+0x2ac>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d863      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 80029a6:	4a92      	ldr	r2, [pc, #584]	@ (8002bf0 <HAL_GPIO_Init+0x2b0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d046      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 80029ac:	4a90      	ldr	r2, [pc, #576]	@ (8002bf0 <HAL_GPIO_Init+0x2b0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d85d      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 80029b2:	2b12      	cmp	r3, #18
 80029b4:	d82a      	bhi.n	8002a0c <HAL_GPIO_Init+0xcc>
 80029b6:	2b12      	cmp	r3, #18
 80029b8:	d859      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 80029ba:	a201      	add	r2, pc, #4	@ (adr r2, 80029c0 <HAL_GPIO_Init+0x80>)
 80029bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c0:	08002a3b 	.word	0x08002a3b
 80029c4:	08002a15 	.word	0x08002a15
 80029c8:	08002a27 	.word	0x08002a27
 80029cc:	08002a69 	.word	0x08002a69
 80029d0:	08002a6f 	.word	0x08002a6f
 80029d4:	08002a6f 	.word	0x08002a6f
 80029d8:	08002a6f 	.word	0x08002a6f
 80029dc:	08002a6f 	.word	0x08002a6f
 80029e0:	08002a6f 	.word	0x08002a6f
 80029e4:	08002a6f 	.word	0x08002a6f
 80029e8:	08002a6f 	.word	0x08002a6f
 80029ec:	08002a6f 	.word	0x08002a6f
 80029f0:	08002a6f 	.word	0x08002a6f
 80029f4:	08002a6f 	.word	0x08002a6f
 80029f8:	08002a6f 	.word	0x08002a6f
 80029fc:	08002a6f 	.word	0x08002a6f
 8002a00:	08002a6f 	.word	0x08002a6f
 8002a04:	08002a1d 	.word	0x08002a1d
 8002a08:	08002a31 	.word	0x08002a31
 8002a0c:	4a79      	ldr	r2, [pc, #484]	@ (8002bf4 <HAL_GPIO_Init+0x2b4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a12:	e02c      	b.n	8002a6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	623b      	str	r3, [r7, #32]
          break;
 8002a1a:	e029      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	3304      	adds	r3, #4
 8002a22:	623b      	str	r3, [r7, #32]
          break;
 8002a24:	e024      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	623b      	str	r3, [r7, #32]
          break;
 8002a2e:	e01f      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	330c      	adds	r3, #12
 8002a36:	623b      	str	r3, [r7, #32]
          break;
 8002a38:	e01a      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a42:	2304      	movs	r3, #4
 8002a44:	623b      	str	r3, [r7, #32]
          break;
 8002a46:	e013      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a50:	2308      	movs	r3, #8
 8002a52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	611a      	str	r2, [r3, #16]
          break;
 8002a5a:	e009      	b.n	8002a70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	615a      	str	r2, [r3, #20]
          break;
 8002a66:	e003      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
          break;
 8002a6c:	e000      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          break;
 8002a6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2bff      	cmp	r3, #255	@ 0xff
 8002a74:	d801      	bhi.n	8002a7a <HAL_GPIO_Init+0x13a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	e001      	b.n	8002a7e <HAL_GPIO_Init+0x13e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2bff      	cmp	r3, #255	@ 0xff
 8002a84:	d802      	bhi.n	8002a8c <HAL_GPIO_Init+0x14c>
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	e002      	b.n	8002a92 <HAL_GPIO_Init+0x152>
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	3b08      	subs	r3, #8
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	210f      	movs	r1, #15
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	6a39      	ldr	r1, [r7, #32]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	431a      	orrs	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 80b1 	beq.w	8002c22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf8 <HAL_GPIO_Init+0x2b8>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a4c      	ldr	r2, [pc, #304]	@ (8002bf8 <HAL_GPIO_Init+0x2b8>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf8 <HAL_GPIO_Init+0x2b8>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ad8:	4a48      	ldr	r2, [pc, #288]	@ (8002bfc <HAL_GPIO_Init+0x2bc>)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	089b      	lsrs	r3, r3, #2
 8002ade:	3302      	adds	r3, #2
 8002ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	220f      	movs	r2, #15
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a40      	ldr	r2, [pc, #256]	@ (8002c00 <HAL_GPIO_Init+0x2c0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d013      	beq.n	8002b2c <HAL_GPIO_Init+0x1ec>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a3f      	ldr	r2, [pc, #252]	@ (8002c04 <HAL_GPIO_Init+0x2c4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00d      	beq.n	8002b28 <HAL_GPIO_Init+0x1e8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a3e      	ldr	r2, [pc, #248]	@ (8002c08 <HAL_GPIO_Init+0x2c8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d007      	beq.n	8002b24 <HAL_GPIO_Init+0x1e4>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a3d      	ldr	r2, [pc, #244]	@ (8002c0c <HAL_GPIO_Init+0x2cc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_GPIO_Init+0x1e0>
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e006      	b.n	8002b2e <HAL_GPIO_Init+0x1ee>
 8002b20:	2304      	movs	r3, #4
 8002b22:	e004      	b.n	8002b2e <HAL_GPIO_Init+0x1ee>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e002      	b.n	8002b2e <HAL_GPIO_Init+0x1ee>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_GPIO_Init+0x1ee>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b30:	f002 0203 	and.w	r2, r2, #3
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	4093      	lsls	r3, r2
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b3e:	492f      	ldr	r1, [pc, #188]	@ (8002bfc <HAL_GPIO_Init+0x2bc>)
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d006      	beq.n	8002b66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b58:	4b2d      	ldr	r3, [pc, #180]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	492c      	ldr	r1, [pc, #176]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b66:	4b2a      	ldr	r3, [pc, #168]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	4928      	ldr	r1, [pc, #160]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d006      	beq.n	8002b8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b80:	4b23      	ldr	r3, [pc, #140]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	4922      	ldr	r1, [pc, #136]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60cb      	str	r3, [r1, #12]
 8002b8c:	e006      	b.n	8002b9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b8e:	4b20      	ldr	r3, [pc, #128]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	491e      	ldr	r1, [pc, #120]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ba8:	4b19      	ldr	r3, [pc, #100]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	4918      	ldr	r1, [pc, #96]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
 8002bb4:	e006      	b.n	8002bc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bb6:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	4914      	ldr	r1, [pc, #80]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d021      	beq.n	8002c14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	490e      	ldr	r1, [pc, #56]	@ (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
 8002bdc:	e021      	b.n	8002c22 <HAL_GPIO_Init+0x2e2>
 8002bde:	bf00      	nop
 8002be0:	10320000 	.word	0x10320000
 8002be4:	10310000 	.word	0x10310000
 8002be8:	10220000 	.word	0x10220000
 8002bec:	10210000 	.word	0x10210000
 8002bf0:	10120000 	.word	0x10120000
 8002bf4:	10110000 	.word	0x10110000
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40010000 	.word	0x40010000
 8002c00:	40010800 	.word	0x40010800
 8002c04:	40010c00 	.word	0x40010c00
 8002c08:	40011000 	.word	0x40011000
 8002c0c:	40011400 	.word	0x40011400
 8002c10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c14:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <HAL_GPIO_Init+0x304>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	4909      	ldr	r1, [pc, #36]	@ (8002c44 <HAL_GPIO_Init+0x304>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	3301      	adds	r3, #1
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f47f ae8e 	bne.w	8002954 <HAL_GPIO_Init+0x14>
  }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	372c      	adds	r7, #44	@ 0x2c
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40010400 	.word	0x40010400

08002c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]
 8002c54:	4613      	mov	r3, r2
 8002c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c58:	787b      	ldrb	r3, [r7, #1]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c64:	e003      	b.n	8002c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	041a      	lsls	r2, r3, #16
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	611a      	str	r2, [r3, #16]
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	041a      	lsls	r2, r3, #16
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	43d9      	mvns	r1, r3
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	400b      	ands	r3, r1
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	611a      	str	r2, [r3, #16]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cb6:	4b08      	ldr	r3, [pc, #32]	@ (8002cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cc2:	4a05      	ldr	r2, [pc, #20]	@ (8002cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fa58 	bl	8001180 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40010400 	.word	0x40010400

08002cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e272      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8087 	beq.w	8002e0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cfc:	4b92      	ldr	r3, [pc, #584]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 030c 	and.w	r3, r3, #12
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d00c      	beq.n	8002d22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d08:	4b8f      	ldr	r3, [pc, #572]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d112      	bne.n	8002d3a <HAL_RCC_OscConfig+0x5e>
 8002d14:	4b8c      	ldr	r3, [pc, #560]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d20:	d10b      	bne.n	8002d3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d22:	4b89      	ldr	r3, [pc, #548]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d06c      	beq.n	8002e08 <HAL_RCC_OscConfig+0x12c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d168      	bne.n	8002e08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e24c      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x76>
 8002d44:	4b80      	ldr	r3, [pc, #512]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a7f      	ldr	r2, [pc, #508]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	e02e      	b.n	8002db0 <HAL_RCC_OscConfig+0xd4>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x98>
 8002d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a7a      	ldr	r2, [pc, #488]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	4b78      	ldr	r3, [pc, #480]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a77      	ldr	r2, [pc, #476]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e01d      	b.n	8002db0 <HAL_RCC_OscConfig+0xd4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0xbc>
 8002d7e:	4b72      	ldr	r3, [pc, #456]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a71      	ldr	r2, [pc, #452]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0xd4>
 8002d98:	4b6b      	ldr	r3, [pc, #428]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b68      	ldr	r3, [pc, #416]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a67      	ldr	r2, [pc, #412]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7ff f886 	bl	8001ec8 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7ff f882 	bl	8001ec8 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	@ 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e200      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xe4>
 8002dde:	e014      	b.n	8002e0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7ff f872 	bl	8001ec8 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de8:	f7ff f86e 	bl	8001ec8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	@ 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1ec      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfa:	4b53      	ldr	r3, [pc, #332]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x10c>
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d063      	beq.n	8002ede <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e16:	4b4c      	ldr	r3, [pc, #304]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e22:	4b49      	ldr	r3, [pc, #292]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d11c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x18c>
 8002e2e:	4b46      	ldr	r3, [pc, #280]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d116      	bne.n	8002e68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	4b43      	ldr	r3, [pc, #268]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_RCC_OscConfig+0x176>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e1c0      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e52:	4b3d      	ldr	r3, [pc, #244]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4939      	ldr	r1, [pc, #228]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e66:	e03a      	b.n	8002ede <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e70:	4b36      	ldr	r3, [pc, #216]	@ (8002f4c <HAL_RCC_OscConfig+0x270>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7ff f827 	bl	8001ec8 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7ff f823 	bl	8001ec8 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1a1      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	4b2d      	ldr	r3, [pc, #180]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4927      	ldr	r1, [pc, #156]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]
 8002eb0:	e015      	b.n	8002ede <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb2:	4b26      	ldr	r3, [pc, #152]	@ (8002f4c <HAL_RCC_OscConfig+0x270>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7ff f806 	bl	8001ec8 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec0:	f7ff f802 	bl	8001ec8 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e180      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d03a      	beq.n	8002f60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d019      	beq.n	8002f26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef2:	4b17      	ldr	r3, [pc, #92]	@ (8002f50 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef8:	f7fe ffe6 	bl	8001ec8 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f00:	f7fe ffe2 	bl	8001ec8 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e160      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	4b0d      	ldr	r3, [pc, #52]	@ (8002f48 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f000 face 	bl	80034c0 <RCC_Delay>
 8002f24:	e01c      	b.n	8002f60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f26:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <HAL_RCC_OscConfig+0x274>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2c:	f7fe ffcc 	bl	8001ec8 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f32:	e00f      	b.n	8002f54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f34:	f7fe ffc8 	bl	8001ec8 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d908      	bls.n	8002f54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e146      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	42420000 	.word	0x42420000
 8002f50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	4b92      	ldr	r3, [pc, #584]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e9      	bne.n	8002f34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80a6 	beq.w	80030ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b8b      	ldr	r3, [pc, #556]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10d      	bne.n	8002f9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	4b88      	ldr	r3, [pc, #544]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	4a87      	ldr	r2, [pc, #540]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f88:	61d3      	str	r3, [r2, #28]
 8002f8a:	4b85      	ldr	r3, [pc, #532]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f96:	2301      	movs	r3, #1
 8002f98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9a:	4b82      	ldr	r3, [pc, #520]	@ (80031a4 <HAL_RCC_OscConfig+0x4c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d118      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80031a4 <HAL_RCC_OscConfig+0x4c8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a7e      	ldr	r2, [pc, #504]	@ (80031a4 <HAL_RCC_OscConfig+0x4c8>)
 8002fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe ff89 	bl	8001ec8 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fba:	f7fe ff85 	bl	8001ec8 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b64      	cmp	r3, #100	@ 0x64
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e103      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	4b75      	ldr	r3, [pc, #468]	@ (80031a4 <HAL_RCC_OscConfig+0x4c8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_OscConfig+0x312>
 8002fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	4a6e      	ldr	r2, [pc, #440]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6213      	str	r3, [r2, #32]
 8002fec:	e02d      	b.n	800304a <HAL_RCC_OscConfig+0x36e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0x334>
 8002ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4a69      	ldr	r2, [pc, #420]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	6213      	str	r3, [r2, #32]
 8003002:	4b67      	ldr	r3, [pc, #412]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4a66      	ldr	r2, [pc, #408]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	f023 0304 	bic.w	r3, r3, #4
 800300c:	6213      	str	r3, [r2, #32]
 800300e:	e01c      	b.n	800304a <HAL_RCC_OscConfig+0x36e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b05      	cmp	r3, #5
 8003016:	d10c      	bne.n	8003032 <HAL_RCC_OscConfig+0x356>
 8003018:	4b61      	ldr	r3, [pc, #388]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4a60      	ldr	r2, [pc, #384]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	f043 0304 	orr.w	r3, r3, #4
 8003022:	6213      	str	r3, [r2, #32]
 8003024:	4b5e      	ldr	r3, [pc, #376]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4a5d      	ldr	r2, [pc, #372]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6213      	str	r3, [r2, #32]
 8003030:	e00b      	b.n	800304a <HAL_RCC_OscConfig+0x36e>
 8003032:	4b5b      	ldr	r3, [pc, #364]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4a5a      	ldr	r2, [pc, #360]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	6213      	str	r3, [r2, #32]
 800303e:	4b58      	ldr	r3, [pc, #352]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	4a57      	ldr	r2, [pc, #348]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	f023 0304 	bic.w	r3, r3, #4
 8003048:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d015      	beq.n	800307e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003052:	f7fe ff39 	bl	8001ec8 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003058:	e00a      	b.n	8003070 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe ff35 	bl	8001ec8 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e0b1      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003070:	4b4b      	ldr	r3, [pc, #300]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0ee      	beq.n	800305a <HAL_RCC_OscConfig+0x37e>
 800307c:	e014      	b.n	80030a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307e:	f7fe ff23 	bl	8001ec8 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003084:	e00a      	b.n	800309c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7fe ff1f 	bl	8001ec8 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e09b      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309c:	4b40      	ldr	r3, [pc, #256]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ee      	bne.n	8003086 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d105      	bne.n	80030ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ae:	4b3c      	ldr	r3, [pc, #240]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	4a3b      	ldr	r2, [pc, #236]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8087 	beq.w	80031d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c4:	4b36      	ldr	r3, [pc, #216]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 030c 	and.w	r3, r3, #12
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d061      	beq.n	8003194 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d146      	bne.n	8003166 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d8:	4b33      	ldr	r3, [pc, #204]	@ (80031a8 <HAL_RCC_OscConfig+0x4cc>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe fef3 	bl	8001ec8 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e6:	f7fe feef 	bl	8001ec8 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e06d      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f8:	4b29      	ldr	r3, [pc, #164]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f0      	bne.n	80030e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800310c:	d108      	bne.n	8003120 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800310e:	4b24      	ldr	r3, [pc, #144]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	4921      	ldr	r1, [pc, #132]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003120:	4b1f      	ldr	r3, [pc, #124]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a19      	ldr	r1, [r3, #32]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	430b      	orrs	r3, r1
 8003132:	491b      	ldr	r1, [pc, #108]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003138:	4b1b      	ldr	r3, [pc, #108]	@ (80031a8 <HAL_RCC_OscConfig+0x4cc>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7fe fec3 	bl	8001ec8 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003146:	f7fe febf 	bl	8001ec8 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e03d      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003158:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x46a>
 8003164:	e035      	b.n	80031d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003166:	4b10      	ldr	r3, [pc, #64]	@ (80031a8 <HAL_RCC_OscConfig+0x4cc>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe feac 	bl	8001ec8 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003174:	f7fe fea8 	bl	8001ec8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e026      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003186:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x498>
 8003192:	e01e      	b.n	80031d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e019      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40007000 	.word	0x40007000
 80031a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ac:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <HAL_RCC_OscConfig+0x500>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d001      	beq.n	80031d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000

080031e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0d0      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b6a      	ldr	r3, [pc, #424]	@ (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d910      	bls.n	8003224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b67      	ldr	r3, [pc, #412]	@ (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0207 	bic.w	r2, r3, #7
 800320a:	4965      	ldr	r1, [pc, #404]	@ (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b63      	ldr	r3, [pc, #396]	@ (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0b8      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d020      	beq.n	8003272 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800323c:	4b59      	ldr	r3, [pc, #356]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4a58      	ldr	r2, [pc, #352]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003246:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003254:	4b53      	ldr	r3, [pc, #332]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4a52      	ldr	r2, [pc, #328]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800325e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003260:	4b50      	ldr	r3, [pc, #320]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	494d      	ldr	r1, [pc, #308]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d040      	beq.n	8003300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b47      	ldr	r3, [pc, #284]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d115      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e07f      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	4b41      	ldr	r3, [pc, #260]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e073      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	4b3d      	ldr	r3, [pc, #244]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e06b      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b39      	ldr	r3, [pc, #228]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4936      	ldr	r1, [pc, #216]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d0:	f7fe fdfa 	bl	8001ec8 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fe fdf6 	bl	8001ec8 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e053      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b2d      	ldr	r3, [pc, #180]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4b27      	ldr	r3, [pc, #156]	@ (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d210      	bcs.n	8003330 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b24      	ldr	r3, [pc, #144]	@ (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	4922      	ldr	r1, [pc, #136]	@ (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b20      	ldr	r3, [pc, #128]	@ (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e032      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800333c:	4b19      	ldr	r3, [pc, #100]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4916      	ldr	r1, [pc, #88]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	4313      	orrs	r3, r2
 800334c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800335a:	4b12      	ldr	r3, [pc, #72]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	490e      	ldr	r1, [pc, #56]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800336e:	f000 f821 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 8003372:	4602      	mov	r2, r0
 8003374:	4b0b      	ldr	r3, [pc, #44]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	490a      	ldr	r1, [pc, #40]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	5ccb      	ldrb	r3, [r1, r3]
 8003382:	fa22 f303 	lsr.w	r3, r2, r3
 8003386:	4a09      	ldr	r2, [pc, #36]	@ (80033ac <HAL_RCC_ClockConfig+0x1cc>)
 8003388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800338a:	4b09      	ldr	r3, [pc, #36]	@ (80033b0 <HAL_RCC_ClockConfig+0x1d0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fd58 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40022000 	.word	0x40022000
 80033a4:	40021000 	.word	0x40021000
 80033a8:	08005f60 	.word	0x08005f60
 80033ac:	20000010 	.word	0x20000010
 80033b0:	20000014 	.word	0x20000014

080033b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x94>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d002      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x30>
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0x36>
 80033e2:	e027      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033e4:	4b19      	ldr	r3, [pc, #100]	@ (800344c <HAL_RCC_GetSysClockFreq+0x98>)
 80033e6:	613b      	str	r3, [r7, #16]
      break;
 80033e8:	e027      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	0c9b      	lsrs	r3, r3, #18
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	4a17      	ldr	r2, [pc, #92]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033f4:	5cd3      	ldrb	r3, [r2, r3]
 80033f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d010      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003402:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x94>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	0c5b      	lsrs	r3, r3, #17
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	4a11      	ldr	r2, [pc, #68]	@ (8003454 <HAL_RCC_GetSysClockFreq+0xa0>)
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a0d      	ldr	r2, [pc, #52]	@ (800344c <HAL_RCC_GetSysClockFreq+0x98>)
 8003416:	fb03 f202 	mul.w	r2, r3, r2
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	e004      	b.n	800342e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a0c      	ldr	r2, [pc, #48]	@ (8003458 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003428:	fb02 f303 	mul.w	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	613b      	str	r3, [r7, #16]
      break;
 8003432:	e002      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003434:	4b05      	ldr	r3, [pc, #20]	@ (800344c <HAL_RCC_GetSysClockFreq+0x98>)
 8003436:	613b      	str	r3, [r7, #16]
      break;
 8003438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800343a:	693b      	ldr	r3, [r7, #16]
}
 800343c:	4618      	mov	r0, r3
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	007a1200 	.word	0x007a1200
 8003450:	08005f78 	.word	0x08005f78
 8003454:	08005f88 	.word	0x08005f88
 8003458:	003d0900 	.word	0x003d0900

0800345c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003460:	4b02      	ldr	r3, [pc, #8]	@ (800346c <HAL_RCC_GetHCLKFreq+0x10>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	20000010 	.word	0x20000010

08003470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003474:	f7ff fff2 	bl	800345c <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4903      	ldr	r1, [pc, #12]	@ (8003494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	08005f70 	.word	0x08005f70

08003498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800349c:	f7ff ffde 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	0adb      	lsrs	r3, r3, #11
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4903      	ldr	r1, [pc, #12]	@ (80034bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000
 80034bc:	08005f70 	.word	0x08005f70

080034c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034c8:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <RCC_Delay+0x34>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0a      	ldr	r2, [pc, #40]	@ (80034f8 <RCC_Delay+0x38>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	0a5b      	lsrs	r3, r3, #9
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034dc:	bf00      	nop
  }
  while (Delay --);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1e5a      	subs	r2, r3, #1
 80034e2:	60fa      	str	r2, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f9      	bne.n	80034dc <RCC_Delay+0x1c>
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	20000010 	.word	0x20000010
 80034f8:	10624dd3 	.word	0x10624dd3

080034fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d07d      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003518:	2300      	movs	r3, #0
 800351a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351c:	4b4f      	ldr	r3, [pc, #316]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10d      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003528:	4b4c      	ldr	r3, [pc, #304]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	4a4b      	ldr	r2, [pc, #300]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003532:	61d3      	str	r3, [r2, #28]
 8003534:	4b49      	ldr	r3, [pc, #292]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003540:	2301      	movs	r3, #1
 8003542:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003544:	4b46      	ldr	r3, [pc, #280]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d118      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003550:	4b43      	ldr	r3, [pc, #268]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a42      	ldr	r2, [pc, #264]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800355a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355c:	f7fe fcb4 	bl	8001ec8 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003562:	e008      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003564:	f7fe fcb0 	bl	8001ec8 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	@ 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e06d      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	4b3a      	ldr	r3, [pc, #232]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003582:	4b36      	ldr	r3, [pc, #216]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800358a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d02e      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	429a      	cmp	r2, r3
 800359e:	d027      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035a0:	4b2e      	ldr	r3, [pc, #184]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035b6:	4a29      	ldr	r2, [pc, #164]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d014      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c6:	f7fe fc7f 	bl	8001ec8 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fe fc7b 	bl	8001ec8 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e036      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e4:	4b1d      	ldr	r3, [pc, #116]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0ee      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035f0:	4b1a      	ldr	r3, [pc, #104]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4917      	ldr	r1, [pc, #92]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003602:	7dfb      	ldrb	r3, [r7, #23]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d105      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003608:	4b14      	ldr	r3, [pc, #80]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4a13      	ldr	r2, [pc, #76]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003612:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003620:	4b0e      	ldr	r3, [pc, #56]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	490b      	ldr	r1, [pc, #44]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800363e:	4b07      	ldr	r3, [pc, #28]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	4904      	ldr	r1, [pc, #16]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
 8003664:	42420440 	.word	0x42420440

08003668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e041      	b.n	80036fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fe f87c 	bl	800178c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f000 fce8 	bl	800407c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d001      	beq.n	8003720 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e032      	b.n	8003786 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a18      	ldr	r2, [pc, #96]	@ (8003790 <HAL_TIM_Base_Start+0x88>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00e      	beq.n	8003750 <HAL_TIM_Base_Start+0x48>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800373a:	d009      	beq.n	8003750 <HAL_TIM_Base_Start+0x48>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a14      	ldr	r2, [pc, #80]	@ (8003794 <HAL_TIM_Base_Start+0x8c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d004      	beq.n	8003750 <HAL_TIM_Base_Start+0x48>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a13      	ldr	r2, [pc, #76]	@ (8003798 <HAL_TIM_Base_Start+0x90>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d111      	bne.n	8003774 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b06      	cmp	r3, #6
 8003760:	d010      	beq.n	8003784 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003772:	e007      	b.n	8003784 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr
 8003790:	40012c00 	.word	0x40012c00
 8003794:	40000400 	.word	0x40000400
 8003798:	40000800 	.word	0x40000800

0800379c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e041      	b.n	8003832 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f839 	bl	800383a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3304      	adds	r3, #4
 80037d8:	4619      	mov	r1, r3
 80037da:	4610      	mov	r0, r2
 80037dc:	f000 fc4e 	bl	800407c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e022      	b.n	80038be <HAL_TIM_PWM_Start_DMA+0x72>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b04      	cmp	r3, #4
 800387c:	d109      	bne.n	8003892 <HAL_TIM_PWM_Start_DMA+0x46>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	e015      	b.n	80038be <HAL_TIM_PWM_Start_DMA+0x72>
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d109      	bne.n	80038ac <HAL_TIM_PWM_Start_DMA+0x60>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e008      	b.n	80038be <HAL_TIM_PWM_Start_DMA+0x72>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
 80038c4:	e153      	b.n	8003b6e <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <HAL_TIM_PWM_Start_DMA+0x94>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e022      	b.n	8003926 <HAL_TIM_PWM_Start_DMA+0xda>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d109      	bne.n	80038fa <HAL_TIM_PWM_Start_DMA+0xae>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	e015      	b.n	8003926 <HAL_TIM_PWM_Start_DMA+0xda>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d109      	bne.n	8003914 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e008      	b.n	8003926 <HAL_TIM_PWM_Start_DMA+0xda>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d024      	beq.n	8003974 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <HAL_TIM_PWM_Start_DMA+0xea>
 8003930:	887b      	ldrh	r3, [r7, #2]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e119      	b.n	8003b6e <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <HAL_TIM_PWM_Start_DMA+0xfe>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003948:	e016      	b.n	8003978 <HAL_TIM_PWM_Start_DMA+0x12c>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d104      	bne.n	800395a <HAL_TIM_PWM_Start_DMA+0x10e>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003958:	e00e      	b.n	8003978 <HAL_TIM_PWM_Start_DMA+0x12c>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d104      	bne.n	800396a <HAL_TIM_PWM_Start_DMA+0x11e>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003968:	e006      	b.n	8003978 <HAL_TIM_PWM_Start_DMA+0x12c>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003972:	e001      	b.n	8003978 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0fa      	b.n	8003b6e <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b0c      	cmp	r3, #12
 800397c:	f200 80ae 	bhi.w	8003adc <HAL_TIM_PWM_Start_DMA+0x290>
 8003980:	a201      	add	r2, pc, #4	@ (adr r2, 8003988 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	080039bd 	.word	0x080039bd
 800398c:	08003add 	.word	0x08003add
 8003990:	08003add 	.word	0x08003add
 8003994:	08003add 	.word	0x08003add
 8003998:	08003a05 	.word	0x08003a05
 800399c:	08003add 	.word	0x08003add
 80039a0:	08003add 	.word	0x08003add
 80039a4:	08003add 	.word	0x08003add
 80039a8:	08003a4d 	.word	0x08003a4d
 80039ac:	08003add 	.word	0x08003add
 80039b0:	08003add 	.word	0x08003add
 80039b4:	08003add 	.word	0x08003add
 80039b8:	08003a95 	.word	0x08003a95
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	4a6d      	ldr	r2, [pc, #436]	@ (8003b78 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80039c2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	4a6c      	ldr	r2, [pc, #432]	@ (8003b7c <HAL_TIM_PWM_Start_DMA+0x330>)
 80039ca:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003b80 <HAL_TIM_PWM_Start_DMA+0x334>)
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3334      	adds	r3, #52	@ 0x34
 80039e0:	461a      	mov	r2, r3
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	f7fe fe18 	bl	8002618 <HAL_DMA_Start_IT>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e0bd      	b.n	8003b6e <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a00:	60da      	str	r2, [r3, #12]
      break;
 8003a02:	e06e      	b.n	8003ae2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a08:	4a5b      	ldr	r2, [pc, #364]	@ (8003b78 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003a0a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a10:	4a5a      	ldr	r2, [pc, #360]	@ (8003b7c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003a12:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a18:	4a59      	ldr	r2, [pc, #356]	@ (8003b80 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3338      	adds	r3, #56	@ 0x38
 8003a28:	461a      	mov	r2, r3
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	f7fe fdf4 	bl	8002618 <HAL_DMA_Start_IT>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e099      	b.n	8003b6e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a48:	60da      	str	r2, [r3, #12]
      break;
 8003a4a:	e04a      	b.n	8003ae2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	4a49      	ldr	r2, [pc, #292]	@ (8003b78 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003a52:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a58:	4a48      	ldr	r2, [pc, #288]	@ (8003b7c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	4a47      	ldr	r2, [pc, #284]	@ (8003b80 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003a62:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	333c      	adds	r3, #60	@ 0x3c
 8003a70:	461a      	mov	r2, r3
 8003a72:	887b      	ldrh	r3, [r7, #2]
 8003a74:	f7fe fdd0 	bl	8002618 <HAL_DMA_Start_IT>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e075      	b.n	8003b6e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a90:	60da      	str	r2, [r3, #12]
      break;
 8003a92:	e026      	b.n	8003ae2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	4a37      	ldr	r2, [pc, #220]	@ (8003b78 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003a9a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa0:	4a36      	ldr	r2, [pc, #216]	@ (8003b7c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa8:	4a35      	ldr	r2, [pc, #212]	@ (8003b80 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3340      	adds	r3, #64	@ 0x40
 8003ab8:	461a      	mov	r2, r3
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	f7fe fdac 	bl	8002618 <HAL_DMA_Start_IT>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e051      	b.n	8003b6e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ad8:	60da      	str	r2, [r3, #12]
      break;
 8003ada:	e002      	b.n	8003ae2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d141      	bne.n	8003b6c <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2201      	movs	r2, #1
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fd4f 	bl	8004594 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a22      	ldr	r2, [pc, #136]	@ (8003b84 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d107      	bne.n	8003b10 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b0e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1b      	ldr	r2, [pc, #108]	@ (8003b84 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00e      	beq.n	8003b38 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b22:	d009      	beq.n	8003b38 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a17      	ldr	r2, [pc, #92]	@ (8003b88 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a16      	ldr	r2, [pc, #88]	@ (8003b8c <HAL_TIM_PWM_Start_DMA+0x340>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d111      	bne.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d010      	beq.n	8003b6c <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5a:	e007      	b.n	8003b6c <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	08003f6b 	.word	0x08003f6b
 8003b7c:	08004013 	.word	0x08004013
 8003b80:	08003ed9 	.word	0x08003ed9
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40000400 	.word	0x40000400
 8003b8c:	40000800 	.word	0x40000800

08003b90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e0ae      	b.n	8003d0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	f200 809f 	bhi.w	8003cfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003cfd 	.word	0x08003cfd
 8003bcc:	08003cfd 	.word	0x08003cfd
 8003bd0:	08003cfd 	.word	0x08003cfd
 8003bd4:	08003c39 	.word	0x08003c39
 8003bd8:	08003cfd 	.word	0x08003cfd
 8003bdc:	08003cfd 	.word	0x08003cfd
 8003be0:	08003cfd 	.word	0x08003cfd
 8003be4:	08003c7b 	.word	0x08003c7b
 8003be8:	08003cfd 	.word	0x08003cfd
 8003bec:	08003cfd 	.word	0x08003cfd
 8003bf0:	08003cfd 	.word	0x08003cfd
 8003bf4:	08003cbb 	.word	0x08003cbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68b9      	ldr	r1, [r7, #8]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 faaa 	bl	8004158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0208 	orr.w	r2, r2, #8
 8003c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0204 	bic.w	r2, r2, #4
 8003c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6999      	ldr	r1, [r3, #24]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	691a      	ldr	r2, [r3, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	619a      	str	r2, [r3, #24]
      break;
 8003c36:	e064      	b.n	8003d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 faf0 	bl	8004224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	021a      	lsls	r2, r3, #8
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	619a      	str	r2, [r3, #24]
      break;
 8003c78:	e043      	b.n	8003d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fb39 	bl	80042f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0208 	orr.w	r2, r2, #8
 8003c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69da      	ldr	r2, [r3, #28]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0204 	bic.w	r2, r2, #4
 8003ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69d9      	ldr	r1, [r3, #28]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	61da      	str	r2, [r3, #28]
      break;
 8003cb8:	e023      	b.n	8003d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fb83 	bl	80043cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	021a      	lsls	r2, r3, #8
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	61da      	str	r2, [r3, #28]
      break;
 8003cfa:	e002      	b.n	8003d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003d00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_TIM_ConfigClockSource+0x1c>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e0b4      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x186>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d68:	d03e      	beq.n	8003de8 <HAL_TIM_ConfigClockSource+0xd4>
 8003d6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d6e:	f200 8087 	bhi.w	8003e80 <HAL_TIM_ConfigClockSource+0x16c>
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d76:	f000 8086 	beq.w	8003e86 <HAL_TIM_ConfigClockSource+0x172>
 8003d7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d7e:	d87f      	bhi.n	8003e80 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b70      	cmp	r3, #112	@ 0x70
 8003d82:	d01a      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0xa6>
 8003d84:	2b70      	cmp	r3, #112	@ 0x70
 8003d86:	d87b      	bhi.n	8003e80 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b60      	cmp	r3, #96	@ 0x60
 8003d8a:	d050      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x11a>
 8003d8c:	2b60      	cmp	r3, #96	@ 0x60
 8003d8e:	d877      	bhi.n	8003e80 <HAL_TIM_ConfigClockSource+0x16c>
 8003d90:	2b50      	cmp	r3, #80	@ 0x50
 8003d92:	d03c      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0xfa>
 8003d94:	2b50      	cmp	r3, #80	@ 0x50
 8003d96:	d873      	bhi.n	8003e80 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b40      	cmp	r3, #64	@ 0x40
 8003d9a:	d058      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x13a>
 8003d9c:	2b40      	cmp	r3, #64	@ 0x40
 8003d9e:	d86f      	bhi.n	8003e80 <HAL_TIM_ConfigClockSource+0x16c>
 8003da0:	2b30      	cmp	r3, #48	@ 0x30
 8003da2:	d064      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0x15a>
 8003da4:	2b30      	cmp	r3, #48	@ 0x30
 8003da6:	d86b      	bhi.n	8003e80 <HAL_TIM_ConfigClockSource+0x16c>
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d060      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0x15a>
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d867      	bhi.n	8003e80 <HAL_TIM_ConfigClockSource+0x16c>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d05c      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0x15a>
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d05a      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0x15a>
 8003db8:	e062      	b.n	8003e80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dca:	f000 fbc4 	bl	8004556 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ddc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	609a      	str	r2, [r3, #8]
      break;
 8003de6:	e04f      	b.n	8003e88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003df8:	f000 fbad 	bl	8004556 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e0a:	609a      	str	r2, [r3, #8]
      break;
 8003e0c:	e03c      	b.n	8003e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f000 fb24 	bl	8004468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2150      	movs	r1, #80	@ 0x50
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fb7b 	bl	8004522 <TIM_ITRx_SetConfig>
      break;
 8003e2c:	e02c      	b.n	8003e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f000 fb42 	bl	80044c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2160      	movs	r1, #96	@ 0x60
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fb6b 	bl	8004522 <TIM_ITRx_SetConfig>
      break;
 8003e4c:	e01c      	b.n	8003e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f000 fb04 	bl	8004468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2140      	movs	r1, #64	@ 0x40
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fb5b 	bl	8004522 <TIM_ITRx_SetConfig>
      break;
 8003e6c:	e00c      	b.n	8003e88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f000 fb52 	bl	8004522 <TIM_ITRx_SetConfig>
      break;
 8003e7e:	e003      	b.n	8003e88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
      break;
 8003e84:	e000      	b.n	8003e88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d107      	bne.n	8003f00 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003efe:	e02a      	b.n	8003f56 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d107      	bne.n	8003f1a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f18:	e01d      	b.n	8003f56 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d107      	bne.n	8003f34 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2204      	movs	r2, #4
 8003f28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f32:	e010      	b.n	8003f56 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d107      	bne.n	8003f4e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2208      	movs	r2, #8
 8003f42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f4c:	e003      	b.n	8003f56 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7ff ffb5 	bl	8003ec6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	771a      	strb	r2, [r3, #28]
}
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d10b      	bne.n	8003f9a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d136      	bne.n	8003ffe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f98:	e031      	b.n	8003ffe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d10b      	bne.n	8003fbc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d125      	bne.n	8003ffe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fba:	e020      	b.n	8003ffe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d10b      	bne.n	8003fde <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d114      	bne.n	8003ffe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fdc:	e00f      	b.n	8003ffe <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d10a      	bne.n	8003ffe <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2208      	movs	r2, #8
 8003fec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff ff4f 	bl	8003ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	771a      	strb	r2, [r3, #28]
}
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	d103      	bne.n	8004032 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	771a      	strb	r2, [r3, #28]
 8004030:	e019      	b.n	8004066 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d103      	bne.n	8004044 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2202      	movs	r2, #2
 8004040:	771a      	strb	r2, [r3, #28]
 8004042:	e010      	b.n	8004066 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	429a      	cmp	r2, r3
 800404c:	d103      	bne.n	8004056 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2204      	movs	r2, #4
 8004052:	771a      	strb	r2, [r3, #28]
 8004054:	e007      	b.n	8004066 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	429a      	cmp	r2, r3
 800405e:	d102      	bne.n	8004066 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2208      	movs	r2, #8
 8004064:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f7ff ff24 	bl	8003eb4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	771a      	strb	r2, [r3, #28]
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a2f      	ldr	r2, [pc, #188]	@ (800414c <TIM_Base_SetConfig+0xd0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00b      	beq.n	80040ac <TIM_Base_SetConfig+0x30>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409a:	d007      	beq.n	80040ac <TIM_Base_SetConfig+0x30>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a2c      	ldr	r2, [pc, #176]	@ (8004150 <TIM_Base_SetConfig+0xd4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <TIM_Base_SetConfig+0x30>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004154 <TIM_Base_SetConfig+0xd8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d108      	bne.n	80040be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a22      	ldr	r2, [pc, #136]	@ (800414c <TIM_Base_SetConfig+0xd0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00b      	beq.n	80040de <TIM_Base_SetConfig+0x62>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040cc:	d007      	beq.n	80040de <TIM_Base_SetConfig+0x62>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004150 <TIM_Base_SetConfig+0xd4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d003      	beq.n	80040de <TIM_Base_SetConfig+0x62>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004154 <TIM_Base_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d108      	bne.n	80040f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a0d      	ldr	r2, [pc, #52]	@ (800414c <TIM_Base_SetConfig+0xd0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d103      	bne.n	8004124 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f023 0201 	bic.w	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	611a      	str	r2, [r3, #16]
  }
}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40000400 	.word	0x40000400
 8004154:	40000800 	.word	0x40000800

08004158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f023 0201 	bic.w	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f023 0302 	bic.w	r3, r3, #2
 80041a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004220 <TIM_OC1_SetConfig+0xc8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d10c      	bne.n	80041ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0308 	bic.w	r3, r3, #8
 80041ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f023 0304 	bic.w	r3, r3, #4
 80041cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a13      	ldr	r2, [pc, #76]	@ (8004220 <TIM_OC1_SetConfig+0xc8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d111      	bne.n	80041fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	621a      	str	r2, [r3, #32]
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40012c00 	.word	0x40012c00

08004224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f023 0210 	bic.w	r2, r3, #16
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800425a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0320 	bic.w	r3, r3, #32
 800426e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a1d      	ldr	r2, [pc, #116]	@ (80042f4 <TIM_OC2_SetConfig+0xd0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d10d      	bne.n	80042a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800428a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800429e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a14      	ldr	r2, [pc, #80]	@ (80042f4 <TIM_OC2_SetConfig+0xd0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d113      	bne.n	80042d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr
 80042f4:	40012c00 	.word	0x40012c00

080042f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0303 	bic.w	r3, r3, #3
 800432e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1d      	ldr	r2, [pc, #116]	@ (80043c8 <TIM_OC3_SetConfig+0xd0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d10d      	bne.n	8004372 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800435c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a14      	ldr	r2, [pc, #80]	@ (80043c8 <TIM_OC3_SetConfig+0xd0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d113      	bne.n	80043a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	621a      	str	r2, [r3, #32]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40012c00 	.word	0x40012c00

080043cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	021b      	lsls	r3, r3, #8
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	031b      	lsls	r3, r3, #12
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a0f      	ldr	r2, [pc, #60]	@ (8004464 <TIM_OC4_SetConfig+0x98>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d109      	bne.n	8004440 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	019b      	lsls	r3, r3, #6
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr
 8004464:	40012c00 	.word	0x40012c00

08004468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f023 0201 	bic.w	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f023 030a 	bic.w	r3, r3, #10
 80044a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr

080044c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f023 0210 	bic.w	r2, r3, #16
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	031b      	lsls	r3, r3, #12
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004500:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	621a      	str	r2, [r3, #32]
}
 8004518:	bf00      	nop
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004522:	b480      	push	{r7}
 8004524:	b085      	sub	sp, #20
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004538:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	f043 0307 	orr.w	r3, r3, #7
 8004544:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	609a      	str	r2, [r3, #8]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004556:	b480      	push	{r7}
 8004558:	b087      	sub	sp, #28
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004570:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	021a      	lsls	r2, r3, #8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	431a      	orrs	r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4313      	orrs	r3, r2
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	609a      	str	r2, [r3, #8]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	2201      	movs	r2, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1a      	ldr	r2, [r3, #32]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	401a      	ands	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1a      	ldr	r2, [r3, #32]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	fa01 f303 	lsl.w	r3, r1, r3
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e046      	b.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800461a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a16      	ldr	r2, [pc, #88]	@ (800468c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00e      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004640:	d009      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a12      	ldr	r2, [pc, #72]	@ (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a10      	ldr	r2, [pc, #64]	@ (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d10c      	bne.n	8004670 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800465c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	4313      	orrs	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800

08004698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e042      	b.n	8004730 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fd fa20 	bl	8001b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2224      	movs	r2, #36	@ 0x24
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f971 	bl	80049c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695a      	ldr	r2, [r3, #20]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	@ 0x28
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b20      	cmp	r3, #32
 8004756:	d175      	bne.n	8004844 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <HAL_UART_Transmit+0x2c>
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e06e      	b.n	8004846 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2221      	movs	r2, #33	@ 0x21
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004776:	f7fd fba7 	bl	8001ec8 <HAL_GetTick>
 800477a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	88fa      	ldrh	r2, [r7, #6]
 8004780:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	88fa      	ldrh	r2, [r7, #6]
 8004786:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004790:	d108      	bne.n	80047a4 <HAL_UART_Transmit+0x6c>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	e003      	b.n	80047ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047ac:	e02e      	b.n	800480c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2200      	movs	r2, #0
 80047b6:	2180      	movs	r1, #128	@ 0x80
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f848 	bl	800484e <UART_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e03a      	b.n	8004846 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10b      	bne.n	80047ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	3302      	adds	r3, #2
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	e007      	b.n	80047fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	3301      	adds	r3, #1
 80047fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1cb      	bne.n	80047ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	2140      	movs	r1, #64	@ 0x40
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f814 	bl	800484e <UART_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e006      	b.n	8004846 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004844:	2302      	movs	r3, #2
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b086      	sub	sp, #24
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485e:	e03b      	b.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d037      	beq.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004868:	f7fd fb2e 	bl	8001ec8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	6a3a      	ldr	r2, [r7, #32]
 8004874:	429a      	cmp	r2, r3
 8004876:	d302      	bcc.n	800487e <UART_WaitOnFlagUntilTimeout+0x30>
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e03a      	b.n	80048f8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d023      	beq.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b80      	cmp	r3, #128	@ 0x80
 8004894:	d020      	beq.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b40      	cmp	r3, #64	@ 0x40
 800489a:	d01d      	beq.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d116      	bne.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f81d 	bl	8004900 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2208      	movs	r2, #8
 80048ca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e00f      	b.n	80048f8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4013      	ands	r3, r2
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	bf0c      	ite	eq
 80048e8:	2301      	moveq	r3, #1
 80048ea:	2300      	movne	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d0b4      	beq.n	8004860 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b095      	sub	sp, #84	@ 0x54
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800491e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004928:	643a      	str	r2, [r7, #64]	@ 0x40
 800492a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800492e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e5      	bne.n	8004908 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3314      	adds	r3, #20
 8004942:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	61fb      	str	r3, [r7, #28]
   return(result);
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f023 0301 	bic.w	r3, r3, #1
 8004952:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3314      	adds	r3, #20
 800495a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800495c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800495e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e5      	bne.n	800493c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004974:	2b01      	cmp	r3, #1
 8004976:	d119      	bne.n	80049ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	60bb      	str	r3, [r7, #8]
   return(result);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f023 0310 	bic.w	r3, r3, #16
 800498e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004998:	61ba      	str	r2, [r7, #24]
 800499a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6979      	ldr	r1, [r7, #20]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	613b      	str	r3, [r7, #16]
   return(result);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e5      	bne.n	8004978 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049ba:	bf00      	nop
 80049bc:	3754      	adds	r7, #84	@ 0x54
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80049fe:	f023 030c 	bic.w	r3, r3, #12
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a2c      	ldr	r2, [pc, #176]	@ (8004ad8 <UART_SetConfig+0x114>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d103      	bne.n	8004a34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a2c:	f7fe fd34 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	e002      	b.n	8004a3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a34:	f7fe fd1c 	bl	8003470 <HAL_RCC_GetPCLK1Freq>
 8004a38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009a      	lsls	r2, r3, #2
 8004a44:	441a      	add	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	4a22      	ldr	r2, [pc, #136]	@ (8004adc <UART_SetConfig+0x118>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	0119      	lsls	r1, r3, #4
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	009a      	lsls	r2, r3, #2
 8004a64:	441a      	add	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a70:	4b1a      	ldr	r3, [pc, #104]	@ (8004adc <UART_SetConfig+0x118>)
 8004a72:	fba3 0302 	umull	r0, r3, r3, r2
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	2064      	movs	r0, #100	@ 0x64
 8004a7a:	fb00 f303 	mul.w	r3, r0, r3
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	3332      	adds	r3, #50	@ 0x32
 8004a84:	4a15      	ldr	r2, [pc, #84]	@ (8004adc <UART_SetConfig+0x118>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a90:	4419      	add	r1, r3
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	009a      	lsls	r2, r3, #2
 8004a9c:	441a      	add	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8004adc <UART_SetConfig+0x118>)
 8004aaa:	fba3 0302 	umull	r0, r3, r3, r2
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	2064      	movs	r0, #100	@ 0x64
 8004ab2:	fb00 f303 	mul.w	r3, r0, r3
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	3332      	adds	r3, #50	@ 0x32
 8004abc:	4a07      	ldr	r2, [pc, #28]	@ (8004adc <UART_SetConfig+0x118>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	f003 020f 	and.w	r2, r3, #15
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	440a      	add	r2, r1
 8004ace:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40013800 	.word	0x40013800
 8004adc:	51eb851f 	.word	0x51eb851f

08004ae0 <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7fd f9f7 	bl	8001edc <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *hLed)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  while (hLed->Lock)
 8004afe:	e002      	b.n	8004b06 <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 8004b00:	2001      	movs	r0, #1
 8004b02:	f7ff ffed 	bl	8004ae0 <WS28XX_Delay>
  while (hLed->Lock)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	795b      	ldrb	r3, [r3, #5]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f8      	bne.n	8004b00 <WS28XX_Lock+0xa>
  }
  hLed->Lock = 1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	715a      	strb	r2, [r3, #5]
}
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  hLed->Lock = 0;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	715a      	strb	r2, [r3, #5]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *hLed, TIM_HandleTypeDef *hTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	4611      	mov	r1, r2
 8004b40:	461a      	mov	r2, r3
 8004b42:	460b      	mov	r3, r1
 8004b44:	80fb      	strh	r3, [r7, #6]
 8004b46:	4613      	mov	r3, r2
 8004b48:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (hLed == NULL || hTim == NULL)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d079      	beq.n	8004c48 <WS28XX_Init+0x114>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d076      	beq.n	8004c48 <WS28XX_Init+0x114>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 8004b5a:	8c3b      	ldrh	r3, [r7, #32]
 8004b5c:	2b32      	cmp	r3, #50	@ 0x32
 8004b5e:	d872      	bhi.n	8004c46 <WS28XX_Init+0x112>
    {
      break;
    }
    hLed->Channel = Channel;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	797a      	ldrb	r2, [r7, #5]
 8004b64:	711a      	strb	r2, [r3, #4]
    hLed->MaxPixel = Pixel;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8c3a      	ldrh	r2, [r7, #32]
 8004b6a:	815a      	strh	r2, [r3, #10]
    hLed->hTim = hTim;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fb fba3 	bl	80002c0 <__aeabi_i2f>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4935      	ldr	r1, [pc, #212]	@ (8004c54 <WS28XX_Init+0x120>)
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fb fca6 	bl	80004d0 <__aeabi_fdiv>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fb fae2 	bl	8000154 <__aeabi_fsub>
 8004b90:	4603      	mov	r3, r0
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fb fd38 	bl	8000608 <__aeabi_f2uiz>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(hLed->hTim ,aar_value);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(hLed->hTim, 0);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	629a      	str	r2, [r3, #40]	@ 0x28
    hLed->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8004bb8:	6938      	ldr	r0, [r7, #16]
 8004bba:	f7fb fb7d 	bl	80002b8 <__aeabi_ui2f>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	4925      	ldr	r1, [pc, #148]	@ (8004c58 <WS28XX_Init+0x124>)
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fb fbd0 	bl	8000368 <__aeabi_fmul>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4924      	ldr	r1, [pc, #144]	@ (8004c5c <WS28XX_Init+0x128>)
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fb fc7f 	bl	80004d0 <__aeabi_fdiv>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fb fd17 	bl	8000608 <__aeabi_f2uiz>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	80da      	strh	r2, [r3, #6]
    hLed->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8004be2:	6938      	ldr	r0, [r7, #16]
 8004be4:	f7fb fb68 	bl	80002b8 <__aeabi_ui2f>
 8004be8:	4603      	mov	r3, r0
 8004bea:	491a      	ldr	r1, [pc, #104]	@ (8004c54 <WS28XX_Init+0x120>)
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fb fbbb 	bl	8000368 <__aeabi_fmul>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4919      	ldr	r1, [pc, #100]	@ (8004c5c <WS28XX_Init+0x128>)
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fb fc6a 	bl	80004d0 <__aeabi_fdiv>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fb fd02 	bl	8000608 <__aeabi_f2uiz>
 8004c04:	4603      	mov	r3, r0
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	811a      	strh	r2, [r3, #8]
    memset(hLed->Pixel, 0, sizeof(hLed->Pixel));
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	2296      	movs	r2, #150	@ 0x96
 8004c12:	2100      	movs	r1, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fb51 	bl	80052bc <memset>
    memset(hLed->Buffer, 0, sizeof(hLed->Buffer));
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	33a2      	adds	r3, #162	@ 0xa2
 8004c1e:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8004c22:	2100      	movs	r1, #0
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fb49 	bl	80052bc <memset>
    HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, Pixel);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	791b      	ldrb	r3, [r3, #4]
 8004c32:	4619      	mov	r1, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f103 02a2 	add.w	r2, r3, #162	@ 0xa2
 8004c3a:	8c3b      	ldrh	r3, [r7, #32]
 8004c3c:	f7fe fe06 	bl	800384c <HAL_TIM_PWM_Start_DMA>
    answer = true;
 8004c40:	2301      	movs	r3, #1
 8004c42:	75fb      	strb	r3, [r7, #23]
 8004c44:	e000      	b.n	8004c48 <WS28XX_Init+0x114>
      break;
 8004c46:	bf00      	nop
  }
  while (0);

  return answer;
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	3f4ccccd 	.word	0x3f4ccccd
 8004c58:	3ecccccd 	.word	0x3ecccccd
 8004c5c:	3fa00000 	.word	0x3fa00000

08004c60 <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *hLed, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	4608      	mov	r0, r1
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4603      	mov	r3, r0
 8004c70:	817b      	strh	r3, [r7, #10]
 8004c72:	460b      	mov	r3, r1
 8004c74:	813b      	strh	r3, [r7, #8]
 8004c76:	4613      	mov	r3, r2
 8004c78:	71fb      	strb	r3, [r7, #7]
  bool answer = true;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= hLed->MaxPixel)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	895b      	ldrh	r3, [r3, #10]
 8004c82:	897a      	ldrh	r2, [r7, #10]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d302      	bcc.n	8004c8e <WS28XX_SetPixel_RGBW_565+0x2e>
    {
      answer = false;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8c:	e051      	b.n	8004d32 <WS28XX_SetPixel_RGBW_565+0xd2>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 8004c8e:	893b      	ldrh	r3, [r7, #8]
 8004c90:	0a1b      	lsrs	r3, r3, #8
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8004c98:	79fa      	ldrb	r2, [r7, #7]
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	4a28      	ldr	r2, [pc, #160]	@ (8004d40 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8004ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8004ca4:	441a      	add	r2, r3
 8004ca6:	11d2      	asrs	r2, r2, #7
 8004ca8:	17db      	asrs	r3, r3, #31
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	75bb      	strb	r3, [r7, #22]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 8004cae:	893b      	ldrh	r3, [r7, #8]
 8004cb0:	08db      	lsrs	r3, r3, #3
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8004cb8:	79fa      	ldrb	r2, [r7, #7]
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	4a20      	ldr	r2, [pc, #128]	@ (8004d40 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8004cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8004cc4:	441a      	add	r2, r3
 8004cc6:	11d2      	asrs	r2, r2, #7
 8004cc8:	17db      	asrs	r3, r3, #31
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	757b      	strb	r3, [r7, #21]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 8004cce:	893b      	ldrh	r3, [r7, #8]
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	79fa      	ldrb	r2, [r7, #7]
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	4a19      	ldr	r2, [pc, #100]	@ (8004d40 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8004cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8004ce0:	441a      	add	r2, r3
 8004ce2:	11d2      	asrs	r2, r2, #7
 8004ce4:	17db      	asrs	r3, r3, #31
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8004cea:	7d7b      	ldrb	r3, [r7, #21]
 8004cec:	897a      	ldrh	r2, [r7, #10]
 8004cee:	4915      	ldr	r1, [pc, #84]	@ (8004d44 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8004cf0:	5cc8      	ldrb	r0, [r1, r3]
 8004cf2:	68f9      	ldr	r1, [r7, #12]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	4413      	add	r3, r2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	4602      	mov	r2, r0
 8004d00:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8004d02:	7dbb      	ldrb	r3, [r7, #22]
 8004d04:	897a      	ldrh	r2, [r7, #10]
 8004d06:	490f      	ldr	r1, [pc, #60]	@ (8004d44 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8004d08:	5cc8      	ldrb	r0, [r1, r3]
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4413      	add	r3, r2
 8004d12:	440b      	add	r3, r1
 8004d14:	330d      	adds	r3, #13
 8004d16:	4602      	mov	r2, r0
 8004d18:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 8004d1a:	7d3b      	ldrb	r3, [r7, #20]
 8004d1c:	897a      	ldrh	r2, [r7, #10]
 8004d1e:	4909      	ldr	r1, [pc, #36]	@ (8004d44 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8004d20:	5cc8      	ldrb	r0, [r1, r3]
 8004d22:	68f9      	ldr	r1, [r7, #12]
 8004d24:	4613      	mov	r3, r2
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4413      	add	r3, r2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	330e      	adds	r3, #14
 8004d2e:	4602      	mov	r2, r0
 8004d30:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	80808081 	.word	0x80808081
 8004d44:	08005f8c 	.word	0x08005f8c

08004d48 <WS28XX_Update>:
  * @param  *hLed: Pointer to WS28XX_hLedTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *hLed)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b089      	sub	sp, #36	@ 0x24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  bool answer = true;
 8004d50:	2301      	movs	r3, #1
 8004d52:	77fb      	strb	r3, [r7, #31]
  uint32_t i = 2;
 8004d54:	2302      	movs	r3, #2
 8004d56:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(hLed);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff fecc 	bl	8004af6 <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	82fb      	strh	r3, [r7, #22]
 8004d62:	e03c      	b.n	8004dde <WS28XX_Update+0x96>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	e033      	b.n	8004dd2 <WS28XX_Update+0x8a>
    {
      for (int b = 7; b >= 0 ; b--)
 8004d6a:	2307      	movs	r3, #7
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	e02a      	b.n	8004dc6 <WS28XX_Update+0x7e>
      {
        if ((hLed->Pixel[pixel][rgb] & (1 << b)) == 0)
 8004d70:	8afa      	ldrh	r2, [r7, #22]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4413      	add	r3, r2
 8004d7a:	18ca      	adds	r2, r1, r3
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	4413      	add	r3, r2
 8004d80:	330c      	adds	r3, #12
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	fa42 f303 	asr.w	r3, r2, r3
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <WS28XX_Update+0x60>
        {
          hLed->Buffer[i] = hLed->Pulse0;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	88db      	ldrh	r3, [r3, #6]
 8004d98:	b2d9      	uxtb	r1, r3
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	4413      	add	r3, r2
 8004da0:	33a2      	adds	r3, #162	@ 0xa2
 8004da2:	460a      	mov	r2, r1
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	e008      	b.n	8004dba <WS28XX_Update+0x72>
        }
        else
        {
          hLed->Buffer[i] = hLed->Pulse1;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	891b      	ldrh	r3, [r3, #8]
 8004dac:	b2d9      	uxtb	r1, r3
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	4413      	add	r3, r2
 8004db4:	33a2      	adds	r3, #162	@ 0xa2
 8004db6:	460a      	mov	r2, r1
 8004db8:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	dad1      	bge.n	8004d70 <WS28XX_Update+0x28>
    for (int rgb = 0; rgb < 3; rgb ++)
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	ddc8      	ble.n	8004d6a <WS28XX_Update+0x22>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8004dd8:	8afb      	ldrh	r3, [r7, #22]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	82fb      	strh	r3, [r7, #22]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	895b      	ldrh	r3, [r3, #10]
 8004de2:	8afa      	ldrh	r2, [r7, #22]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d3bd      	bcc.n	8004d64 <WS28XX_Update+0x1c>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, (hLed->MaxPixel * 24) + 4) != HAL_OK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	791b      	ldrb	r3, [r3, #4]
 8004df0:	461c      	mov	r4, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f103 02a2 	add.w	r2, r3, #162	@ 0xa2
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	895b      	ldrh	r3, [r3, #10]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	0049      	lsls	r1, r1, #1
 8004e00:	440b      	add	r3, r1
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3304      	adds	r3, #4
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	f7fe fd1e 	bl	800384c <HAL_TIM_PWM_Start_DMA>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <WS28XX_Update+0xd2>
  {
    answer = false;
 8004e16:	2300      	movs	r3, #0
 8004e18:	77fb      	strb	r3, [r7, #31]
  }
  WS28XX_UnLock(hLed);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fe7e 	bl	8004b1c <WS28XX_UnLock>
  return answer;
 8004e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3724      	adds	r7, #36	@ 0x24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd90      	pop	{r4, r7, pc}
	...

08004e2c <rand>:
 8004e2c:	4b16      	ldr	r3, [pc, #88]	@ (8004e88 <rand+0x5c>)
 8004e2e:	b510      	push	{r4, lr}
 8004e30:	681c      	ldr	r4, [r3, #0]
 8004e32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004e34:	b9b3      	cbnz	r3, 8004e64 <rand+0x38>
 8004e36:	2018      	movs	r0, #24
 8004e38:	f000 fb30 	bl	800549c <malloc>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6320      	str	r0, [r4, #48]	@ 0x30
 8004e40:	b920      	cbnz	r0, 8004e4c <rand+0x20>
 8004e42:	2152      	movs	r1, #82	@ 0x52
 8004e44:	4b11      	ldr	r3, [pc, #68]	@ (8004e8c <rand+0x60>)
 8004e46:	4812      	ldr	r0, [pc, #72]	@ (8004e90 <rand+0x64>)
 8004e48:	f000 fac2 	bl	80053d0 <__assert_func>
 8004e4c:	4911      	ldr	r1, [pc, #68]	@ (8004e94 <rand+0x68>)
 8004e4e:	4b12      	ldr	r3, [pc, #72]	@ (8004e98 <rand+0x6c>)
 8004e50:	e9c0 1300 	strd	r1, r3, [r0]
 8004e54:	4b11      	ldr	r3, [pc, #68]	@ (8004e9c <rand+0x70>)
 8004e56:	2100      	movs	r1, #0
 8004e58:	6083      	str	r3, [r0, #8]
 8004e5a:	230b      	movs	r3, #11
 8004e5c:	8183      	strh	r3, [r0, #12]
 8004e5e:	2001      	movs	r0, #1
 8004e60:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004e64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004e66:	480e      	ldr	r0, [pc, #56]	@ (8004ea0 <rand+0x74>)
 8004e68:	690b      	ldr	r3, [r1, #16]
 8004e6a:	694c      	ldr	r4, [r1, #20]
 8004e6c:	4358      	muls	r0, r3
 8004e6e:	4a0d      	ldr	r2, [pc, #52]	@ (8004ea4 <rand+0x78>)
 8004e70:	fb02 0004 	mla	r0, r2, r4, r0
 8004e74:	fba3 3202 	umull	r3, r2, r3, r2
 8004e78:	3301      	adds	r3, #1
 8004e7a:	eb40 0002 	adc.w	r0, r0, r2
 8004e7e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004e82:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004e86:	bd10      	pop	{r4, pc}
 8004e88:	20000028 	.word	0x20000028
 8004e8c:	0800608c 	.word	0x0800608c
 8004e90:	080060a3 	.word	0x080060a3
 8004e94:	abcd330e 	.word	0xabcd330e
 8004e98:	e66d1234 	.word	0xe66d1234
 8004e9c:	0005deec 	.word	0x0005deec
 8004ea0:	5851f42d 	.word	0x5851f42d
 8004ea4:	4c957f2d 	.word	0x4c957f2d

08004ea8 <std>:
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	b510      	push	{r4, lr}
 8004eac:	4604      	mov	r4, r0
 8004eae:	e9c0 3300 	strd	r3, r3, [r0]
 8004eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eb6:	6083      	str	r3, [r0, #8]
 8004eb8:	8181      	strh	r1, [r0, #12]
 8004eba:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ebc:	81c2      	strh	r2, [r0, #14]
 8004ebe:	6183      	str	r3, [r0, #24]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	2208      	movs	r2, #8
 8004ec4:	305c      	adds	r0, #92	@ 0x5c
 8004ec6:	f000 f9f9 	bl	80052bc <memset>
 8004eca:	4b0d      	ldr	r3, [pc, #52]	@ (8004f00 <std+0x58>)
 8004ecc:	6224      	str	r4, [r4, #32]
 8004ece:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f04 <std+0x5c>)
 8004ed2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f08 <std+0x60>)
 8004ed6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f0c <std+0x64>)
 8004eda:	6323      	str	r3, [r4, #48]	@ 0x30
 8004edc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f10 <std+0x68>)
 8004ede:	429c      	cmp	r4, r3
 8004ee0:	d006      	beq.n	8004ef0 <std+0x48>
 8004ee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ee6:	4294      	cmp	r4, r2
 8004ee8:	d002      	beq.n	8004ef0 <std+0x48>
 8004eea:	33d0      	adds	r3, #208	@ 0xd0
 8004eec:	429c      	cmp	r4, r3
 8004eee:	d105      	bne.n	8004efc <std+0x54>
 8004ef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef8:	f000 ba58 	b.w	80053ac <__retarget_lock_init_recursive>
 8004efc:	bd10      	pop	{r4, pc}
 8004efe:	bf00      	nop
 8004f00:	0800510d 	.word	0x0800510d
 8004f04:	0800512f 	.word	0x0800512f
 8004f08:	08005167 	.word	0x08005167
 8004f0c:	0800518b 	.word	0x0800518b
 8004f10:	200018cc 	.word	0x200018cc

08004f14 <stdio_exit_handler>:
 8004f14:	4a02      	ldr	r2, [pc, #8]	@ (8004f20 <stdio_exit_handler+0xc>)
 8004f16:	4903      	ldr	r1, [pc, #12]	@ (8004f24 <stdio_exit_handler+0x10>)
 8004f18:	4803      	ldr	r0, [pc, #12]	@ (8004f28 <stdio_exit_handler+0x14>)
 8004f1a:	f000 b869 	b.w	8004ff0 <_fwalk_sglue>
 8004f1e:	bf00      	nop
 8004f20:	2000001c 	.word	0x2000001c
 8004f24:	08005cad 	.word	0x08005cad
 8004f28:	2000002c 	.word	0x2000002c

08004f2c <cleanup_stdio>:
 8004f2c:	6841      	ldr	r1, [r0, #4]
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f60 <cleanup_stdio+0x34>)
 8004f30:	b510      	push	{r4, lr}
 8004f32:	4299      	cmp	r1, r3
 8004f34:	4604      	mov	r4, r0
 8004f36:	d001      	beq.n	8004f3c <cleanup_stdio+0x10>
 8004f38:	f000 feb8 	bl	8005cac <_fflush_r>
 8004f3c:	68a1      	ldr	r1, [r4, #8]
 8004f3e:	4b09      	ldr	r3, [pc, #36]	@ (8004f64 <cleanup_stdio+0x38>)
 8004f40:	4299      	cmp	r1, r3
 8004f42:	d002      	beq.n	8004f4a <cleanup_stdio+0x1e>
 8004f44:	4620      	mov	r0, r4
 8004f46:	f000 feb1 	bl	8005cac <_fflush_r>
 8004f4a:	68e1      	ldr	r1, [r4, #12]
 8004f4c:	4b06      	ldr	r3, [pc, #24]	@ (8004f68 <cleanup_stdio+0x3c>)
 8004f4e:	4299      	cmp	r1, r3
 8004f50:	d004      	beq.n	8004f5c <cleanup_stdio+0x30>
 8004f52:	4620      	mov	r0, r4
 8004f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f58:	f000 bea8 	b.w	8005cac <_fflush_r>
 8004f5c:	bd10      	pop	{r4, pc}
 8004f5e:	bf00      	nop
 8004f60:	200018cc 	.word	0x200018cc
 8004f64:	20001934 	.word	0x20001934
 8004f68:	2000199c 	.word	0x2000199c

08004f6c <global_stdio_init.part.0>:
 8004f6c:	b510      	push	{r4, lr}
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f9c <global_stdio_init.part.0+0x30>)
 8004f70:	4c0b      	ldr	r4, [pc, #44]	@ (8004fa0 <global_stdio_init.part.0+0x34>)
 8004f72:	4a0c      	ldr	r2, [pc, #48]	@ (8004fa4 <global_stdio_init.part.0+0x38>)
 8004f74:	4620      	mov	r0, r4
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	2104      	movs	r1, #4
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f7ff ff94 	bl	8004ea8 <std>
 8004f80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f84:	2201      	movs	r2, #1
 8004f86:	2109      	movs	r1, #9
 8004f88:	f7ff ff8e 	bl	8004ea8 <std>
 8004f8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f90:	2202      	movs	r2, #2
 8004f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f96:	2112      	movs	r1, #18
 8004f98:	f7ff bf86 	b.w	8004ea8 <std>
 8004f9c:	20001a04 	.word	0x20001a04
 8004fa0:	200018cc 	.word	0x200018cc
 8004fa4:	08004f15 	.word	0x08004f15

08004fa8 <__sfp_lock_acquire>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	@ (8004fb0 <__sfp_lock_acquire+0x8>)
 8004faa:	f000 ba00 	b.w	80053ae <__retarget_lock_acquire_recursive>
 8004fae:	bf00      	nop
 8004fb0:	20001a0d 	.word	0x20001a0d

08004fb4 <__sfp_lock_release>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	@ (8004fbc <__sfp_lock_release+0x8>)
 8004fb6:	f000 b9fb 	b.w	80053b0 <__retarget_lock_release_recursive>
 8004fba:	bf00      	nop
 8004fbc:	20001a0d 	.word	0x20001a0d

08004fc0 <__sinit>:
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	f7ff fff0 	bl	8004fa8 <__sfp_lock_acquire>
 8004fc8:	6a23      	ldr	r3, [r4, #32]
 8004fca:	b11b      	cbz	r3, 8004fd4 <__sinit+0x14>
 8004fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fd0:	f7ff bff0 	b.w	8004fb4 <__sfp_lock_release>
 8004fd4:	4b04      	ldr	r3, [pc, #16]	@ (8004fe8 <__sinit+0x28>)
 8004fd6:	6223      	str	r3, [r4, #32]
 8004fd8:	4b04      	ldr	r3, [pc, #16]	@ (8004fec <__sinit+0x2c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1f5      	bne.n	8004fcc <__sinit+0xc>
 8004fe0:	f7ff ffc4 	bl	8004f6c <global_stdio_init.part.0>
 8004fe4:	e7f2      	b.n	8004fcc <__sinit+0xc>
 8004fe6:	bf00      	nop
 8004fe8:	08004f2d 	.word	0x08004f2d
 8004fec:	20001a04 	.word	0x20001a04

08004ff0 <_fwalk_sglue>:
 8004ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ff4:	4607      	mov	r7, r0
 8004ff6:	4688      	mov	r8, r1
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	2600      	movs	r6, #0
 8004ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005000:	f1b9 0901 	subs.w	r9, r9, #1
 8005004:	d505      	bpl.n	8005012 <_fwalk_sglue+0x22>
 8005006:	6824      	ldr	r4, [r4, #0]
 8005008:	2c00      	cmp	r4, #0
 800500a:	d1f7      	bne.n	8004ffc <_fwalk_sglue+0xc>
 800500c:	4630      	mov	r0, r6
 800500e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005012:	89ab      	ldrh	r3, [r5, #12]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d907      	bls.n	8005028 <_fwalk_sglue+0x38>
 8005018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800501c:	3301      	adds	r3, #1
 800501e:	d003      	beq.n	8005028 <_fwalk_sglue+0x38>
 8005020:	4629      	mov	r1, r5
 8005022:	4638      	mov	r0, r7
 8005024:	47c0      	blx	r8
 8005026:	4306      	orrs	r6, r0
 8005028:	3568      	adds	r5, #104	@ 0x68
 800502a:	e7e9      	b.n	8005000 <_fwalk_sglue+0x10>

0800502c <iprintf>:
 800502c:	b40f      	push	{r0, r1, r2, r3}
 800502e:	b507      	push	{r0, r1, r2, lr}
 8005030:	4906      	ldr	r1, [pc, #24]	@ (800504c <iprintf+0x20>)
 8005032:	ab04      	add	r3, sp, #16
 8005034:	6808      	ldr	r0, [r1, #0]
 8005036:	f853 2b04 	ldr.w	r2, [r3], #4
 800503a:	6881      	ldr	r1, [r0, #8]
 800503c:	9301      	str	r3, [sp, #4]
 800503e:	f000 fb0b 	bl	8005658 <_vfiprintf_r>
 8005042:	b003      	add	sp, #12
 8005044:	f85d eb04 	ldr.w	lr, [sp], #4
 8005048:	b004      	add	sp, #16
 800504a:	4770      	bx	lr
 800504c:	20000028 	.word	0x20000028

08005050 <_puts_r>:
 8005050:	6a03      	ldr	r3, [r0, #32]
 8005052:	b570      	push	{r4, r5, r6, lr}
 8005054:	4605      	mov	r5, r0
 8005056:	460e      	mov	r6, r1
 8005058:	6884      	ldr	r4, [r0, #8]
 800505a:	b90b      	cbnz	r3, 8005060 <_puts_r+0x10>
 800505c:	f7ff ffb0 	bl	8004fc0 <__sinit>
 8005060:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005062:	07db      	lsls	r3, r3, #31
 8005064:	d405      	bmi.n	8005072 <_puts_r+0x22>
 8005066:	89a3      	ldrh	r3, [r4, #12]
 8005068:	0598      	lsls	r0, r3, #22
 800506a:	d402      	bmi.n	8005072 <_puts_r+0x22>
 800506c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800506e:	f000 f99e 	bl	80053ae <__retarget_lock_acquire_recursive>
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	0719      	lsls	r1, r3, #28
 8005076:	d502      	bpl.n	800507e <_puts_r+0x2e>
 8005078:	6923      	ldr	r3, [r4, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d135      	bne.n	80050ea <_puts_r+0x9a>
 800507e:	4621      	mov	r1, r4
 8005080:	4628      	mov	r0, r5
 8005082:	f000 f8c5 	bl	8005210 <__swsetup_r>
 8005086:	b380      	cbz	r0, 80050ea <_puts_r+0x9a>
 8005088:	f04f 35ff 	mov.w	r5, #4294967295
 800508c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800508e:	07da      	lsls	r2, r3, #31
 8005090:	d405      	bmi.n	800509e <_puts_r+0x4e>
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	059b      	lsls	r3, r3, #22
 8005096:	d402      	bmi.n	800509e <_puts_r+0x4e>
 8005098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800509a:	f000 f989 	bl	80053b0 <__retarget_lock_release_recursive>
 800509e:	4628      	mov	r0, r5
 80050a0:	bd70      	pop	{r4, r5, r6, pc}
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	da04      	bge.n	80050b0 <_puts_r+0x60>
 80050a6:	69a2      	ldr	r2, [r4, #24]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	dc17      	bgt.n	80050dc <_puts_r+0x8c>
 80050ac:	290a      	cmp	r1, #10
 80050ae:	d015      	beq.n	80050dc <_puts_r+0x8c>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	6022      	str	r2, [r4, #0]
 80050b6:	7019      	strb	r1, [r3, #0]
 80050b8:	68a3      	ldr	r3, [r4, #8]
 80050ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050be:	3b01      	subs	r3, #1
 80050c0:	60a3      	str	r3, [r4, #8]
 80050c2:	2900      	cmp	r1, #0
 80050c4:	d1ed      	bne.n	80050a2 <_puts_r+0x52>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	da11      	bge.n	80050ee <_puts_r+0x9e>
 80050ca:	4622      	mov	r2, r4
 80050cc:	210a      	movs	r1, #10
 80050ce:	4628      	mov	r0, r5
 80050d0:	f000 f85f 	bl	8005192 <__swbuf_r>
 80050d4:	3001      	adds	r0, #1
 80050d6:	d0d7      	beq.n	8005088 <_puts_r+0x38>
 80050d8:	250a      	movs	r5, #10
 80050da:	e7d7      	b.n	800508c <_puts_r+0x3c>
 80050dc:	4622      	mov	r2, r4
 80050de:	4628      	mov	r0, r5
 80050e0:	f000 f857 	bl	8005192 <__swbuf_r>
 80050e4:	3001      	adds	r0, #1
 80050e6:	d1e7      	bne.n	80050b8 <_puts_r+0x68>
 80050e8:	e7ce      	b.n	8005088 <_puts_r+0x38>
 80050ea:	3e01      	subs	r6, #1
 80050ec:	e7e4      	b.n	80050b8 <_puts_r+0x68>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	6022      	str	r2, [r4, #0]
 80050f4:	220a      	movs	r2, #10
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e7ee      	b.n	80050d8 <_puts_r+0x88>
	...

080050fc <puts>:
 80050fc:	4b02      	ldr	r3, [pc, #8]	@ (8005108 <puts+0xc>)
 80050fe:	4601      	mov	r1, r0
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	f7ff bfa5 	b.w	8005050 <_puts_r>
 8005106:	bf00      	nop
 8005108:	20000028 	.word	0x20000028

0800510c <__sread>:
 800510c:	b510      	push	{r4, lr}
 800510e:	460c      	mov	r4, r1
 8005110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005114:	f000 f8fc 	bl	8005310 <_read_r>
 8005118:	2800      	cmp	r0, #0
 800511a:	bfab      	itete	ge
 800511c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800511e:	89a3      	ldrhlt	r3, [r4, #12]
 8005120:	181b      	addge	r3, r3, r0
 8005122:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005126:	bfac      	ite	ge
 8005128:	6563      	strge	r3, [r4, #84]	@ 0x54
 800512a:	81a3      	strhlt	r3, [r4, #12]
 800512c:	bd10      	pop	{r4, pc}

0800512e <__swrite>:
 800512e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005132:	461f      	mov	r7, r3
 8005134:	898b      	ldrh	r3, [r1, #12]
 8005136:	4605      	mov	r5, r0
 8005138:	05db      	lsls	r3, r3, #23
 800513a:	460c      	mov	r4, r1
 800513c:	4616      	mov	r6, r2
 800513e:	d505      	bpl.n	800514c <__swrite+0x1e>
 8005140:	2302      	movs	r3, #2
 8005142:	2200      	movs	r2, #0
 8005144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005148:	f000 f8d0 	bl	80052ec <_lseek_r>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	4632      	mov	r2, r6
 8005150:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	4628      	mov	r0, r5
 8005158:	463b      	mov	r3, r7
 800515a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800515e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005162:	f000 b8e7 	b.w	8005334 <_write_r>

08005166 <__sseek>:
 8005166:	b510      	push	{r4, lr}
 8005168:	460c      	mov	r4, r1
 800516a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516e:	f000 f8bd 	bl	80052ec <_lseek_r>
 8005172:	1c43      	adds	r3, r0, #1
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	bf15      	itete	ne
 8005178:	6560      	strne	r0, [r4, #84]	@ 0x54
 800517a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800517e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005182:	81a3      	strheq	r3, [r4, #12]
 8005184:	bf18      	it	ne
 8005186:	81a3      	strhne	r3, [r4, #12]
 8005188:	bd10      	pop	{r4, pc}

0800518a <__sclose>:
 800518a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800518e:	f000 b89d 	b.w	80052cc <_close_r>

08005192 <__swbuf_r>:
 8005192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005194:	460e      	mov	r6, r1
 8005196:	4614      	mov	r4, r2
 8005198:	4605      	mov	r5, r0
 800519a:	b118      	cbz	r0, 80051a4 <__swbuf_r+0x12>
 800519c:	6a03      	ldr	r3, [r0, #32]
 800519e:	b90b      	cbnz	r3, 80051a4 <__swbuf_r+0x12>
 80051a0:	f7ff ff0e 	bl	8004fc0 <__sinit>
 80051a4:	69a3      	ldr	r3, [r4, #24]
 80051a6:	60a3      	str	r3, [r4, #8]
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	071a      	lsls	r2, r3, #28
 80051ac:	d501      	bpl.n	80051b2 <__swbuf_r+0x20>
 80051ae:	6923      	ldr	r3, [r4, #16]
 80051b0:	b943      	cbnz	r3, 80051c4 <__swbuf_r+0x32>
 80051b2:	4621      	mov	r1, r4
 80051b4:	4628      	mov	r0, r5
 80051b6:	f000 f82b 	bl	8005210 <__swsetup_r>
 80051ba:	b118      	cbz	r0, 80051c4 <__swbuf_r+0x32>
 80051bc:	f04f 37ff 	mov.w	r7, #4294967295
 80051c0:	4638      	mov	r0, r7
 80051c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	6922      	ldr	r2, [r4, #16]
 80051c8:	b2f6      	uxtb	r6, r6
 80051ca:	1a98      	subs	r0, r3, r2
 80051cc:	6963      	ldr	r3, [r4, #20]
 80051ce:	4637      	mov	r7, r6
 80051d0:	4283      	cmp	r3, r0
 80051d2:	dc05      	bgt.n	80051e0 <__swbuf_r+0x4e>
 80051d4:	4621      	mov	r1, r4
 80051d6:	4628      	mov	r0, r5
 80051d8:	f000 fd68 	bl	8005cac <_fflush_r>
 80051dc:	2800      	cmp	r0, #0
 80051de:	d1ed      	bne.n	80051bc <__swbuf_r+0x2a>
 80051e0:	68a3      	ldr	r3, [r4, #8]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	60a3      	str	r3, [r4, #8]
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	6022      	str	r2, [r4, #0]
 80051ec:	701e      	strb	r6, [r3, #0]
 80051ee:	6962      	ldr	r2, [r4, #20]
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d004      	beq.n	8005200 <__swbuf_r+0x6e>
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	07db      	lsls	r3, r3, #31
 80051fa:	d5e1      	bpl.n	80051c0 <__swbuf_r+0x2e>
 80051fc:	2e0a      	cmp	r6, #10
 80051fe:	d1df      	bne.n	80051c0 <__swbuf_r+0x2e>
 8005200:	4621      	mov	r1, r4
 8005202:	4628      	mov	r0, r5
 8005204:	f000 fd52 	bl	8005cac <_fflush_r>
 8005208:	2800      	cmp	r0, #0
 800520a:	d0d9      	beq.n	80051c0 <__swbuf_r+0x2e>
 800520c:	e7d6      	b.n	80051bc <__swbuf_r+0x2a>
	...

08005210 <__swsetup_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4b29      	ldr	r3, [pc, #164]	@ (80052b8 <__swsetup_r+0xa8>)
 8005214:	4605      	mov	r5, r0
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	460c      	mov	r4, r1
 800521a:	b118      	cbz	r0, 8005224 <__swsetup_r+0x14>
 800521c:	6a03      	ldr	r3, [r0, #32]
 800521e:	b90b      	cbnz	r3, 8005224 <__swsetup_r+0x14>
 8005220:	f7ff fece 	bl	8004fc0 <__sinit>
 8005224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005228:	0719      	lsls	r1, r3, #28
 800522a:	d422      	bmi.n	8005272 <__swsetup_r+0x62>
 800522c:	06da      	lsls	r2, r3, #27
 800522e:	d407      	bmi.n	8005240 <__swsetup_r+0x30>
 8005230:	2209      	movs	r2, #9
 8005232:	602a      	str	r2, [r5, #0]
 8005234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005238:	f04f 30ff 	mov.w	r0, #4294967295
 800523c:	81a3      	strh	r3, [r4, #12]
 800523e:	e033      	b.n	80052a8 <__swsetup_r+0x98>
 8005240:	0758      	lsls	r0, r3, #29
 8005242:	d512      	bpl.n	800526a <__swsetup_r+0x5a>
 8005244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005246:	b141      	cbz	r1, 800525a <__swsetup_r+0x4a>
 8005248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800524c:	4299      	cmp	r1, r3
 800524e:	d002      	beq.n	8005256 <__swsetup_r+0x46>
 8005250:	4628      	mov	r0, r5
 8005252:	f000 f8db 	bl	800540c <_free_r>
 8005256:	2300      	movs	r3, #0
 8005258:	6363      	str	r3, [r4, #52]	@ 0x34
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005260:	81a3      	strh	r3, [r4, #12]
 8005262:	2300      	movs	r3, #0
 8005264:	6063      	str	r3, [r4, #4]
 8005266:	6923      	ldr	r3, [r4, #16]
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	89a3      	ldrh	r3, [r4, #12]
 800526c:	f043 0308 	orr.w	r3, r3, #8
 8005270:	81a3      	strh	r3, [r4, #12]
 8005272:	6923      	ldr	r3, [r4, #16]
 8005274:	b94b      	cbnz	r3, 800528a <__swsetup_r+0x7a>
 8005276:	89a3      	ldrh	r3, [r4, #12]
 8005278:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800527c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005280:	d003      	beq.n	800528a <__swsetup_r+0x7a>
 8005282:	4621      	mov	r1, r4
 8005284:	4628      	mov	r0, r5
 8005286:	f000 fd70 	bl	8005d6a <__smakebuf_r>
 800528a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800528e:	f013 0201 	ands.w	r2, r3, #1
 8005292:	d00a      	beq.n	80052aa <__swsetup_r+0x9a>
 8005294:	2200      	movs	r2, #0
 8005296:	60a2      	str	r2, [r4, #8]
 8005298:	6962      	ldr	r2, [r4, #20]
 800529a:	4252      	negs	r2, r2
 800529c:	61a2      	str	r2, [r4, #24]
 800529e:	6922      	ldr	r2, [r4, #16]
 80052a0:	b942      	cbnz	r2, 80052b4 <__swsetup_r+0xa4>
 80052a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80052a6:	d1c5      	bne.n	8005234 <__swsetup_r+0x24>
 80052a8:	bd38      	pop	{r3, r4, r5, pc}
 80052aa:	0799      	lsls	r1, r3, #30
 80052ac:	bf58      	it	pl
 80052ae:	6962      	ldrpl	r2, [r4, #20]
 80052b0:	60a2      	str	r2, [r4, #8]
 80052b2:	e7f4      	b.n	800529e <__swsetup_r+0x8e>
 80052b4:	2000      	movs	r0, #0
 80052b6:	e7f7      	b.n	80052a8 <__swsetup_r+0x98>
 80052b8:	20000028 	.word	0x20000028

080052bc <memset>:
 80052bc:	4603      	mov	r3, r0
 80052be:	4402      	add	r2, r0
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d100      	bne.n	80052c6 <memset+0xa>
 80052c4:	4770      	bx	lr
 80052c6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ca:	e7f9      	b.n	80052c0 <memset+0x4>

080052cc <_close_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	2300      	movs	r3, #0
 80052d0:	4d05      	ldr	r5, [pc, #20]	@ (80052e8 <_close_r+0x1c>)
 80052d2:	4604      	mov	r4, r0
 80052d4:	4608      	mov	r0, r1
 80052d6:	602b      	str	r3, [r5, #0]
 80052d8:	f7fc fd0b 	bl	8001cf2 <_close>
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d102      	bne.n	80052e6 <_close_r+0x1a>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	b103      	cbz	r3, 80052e6 <_close_r+0x1a>
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	bd38      	pop	{r3, r4, r5, pc}
 80052e8:	20001a08 	.word	0x20001a08

080052ec <_lseek_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4604      	mov	r4, r0
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	2200      	movs	r2, #0
 80052f6:	4d05      	ldr	r5, [pc, #20]	@ (800530c <_lseek_r+0x20>)
 80052f8:	602a      	str	r2, [r5, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f7fc fd1d 	bl	8001d3a <_lseek>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_lseek_r+0x1e>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	b103      	cbz	r3, 800530a <_lseek_r+0x1e>
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	20001a08 	.word	0x20001a08

08005310 <_read_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4604      	mov	r4, r0
 8005314:	4608      	mov	r0, r1
 8005316:	4611      	mov	r1, r2
 8005318:	2200      	movs	r2, #0
 800531a:	4d05      	ldr	r5, [pc, #20]	@ (8005330 <_read_r+0x20>)
 800531c:	602a      	str	r2, [r5, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	f7fc fcca 	bl	8001cb8 <_read>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d102      	bne.n	800532e <_read_r+0x1e>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	b103      	cbz	r3, 800532e <_read_r+0x1e>
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	bd38      	pop	{r3, r4, r5, pc}
 8005330:	20001a08 	.word	0x20001a08

08005334 <_write_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4604      	mov	r4, r0
 8005338:	4608      	mov	r0, r1
 800533a:	4611      	mov	r1, r2
 800533c:	2200      	movs	r2, #0
 800533e:	4d05      	ldr	r5, [pc, #20]	@ (8005354 <_write_r+0x20>)
 8005340:	602a      	str	r2, [r5, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	f7fb ff06 	bl	8001154 <_write>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_write_r+0x1e>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_write_r+0x1e>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	20001a08 	.word	0x20001a08

08005358 <__errno>:
 8005358:	4b01      	ldr	r3, [pc, #4]	@ (8005360 <__errno+0x8>)
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20000028 	.word	0x20000028

08005364 <__libc_init_array>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	2600      	movs	r6, #0
 8005368:	4d0c      	ldr	r5, [pc, #48]	@ (800539c <__libc_init_array+0x38>)
 800536a:	4c0d      	ldr	r4, [pc, #52]	@ (80053a0 <__libc_init_array+0x3c>)
 800536c:	1b64      	subs	r4, r4, r5
 800536e:	10a4      	asrs	r4, r4, #2
 8005370:	42a6      	cmp	r6, r4
 8005372:	d109      	bne.n	8005388 <__libc_init_array+0x24>
 8005374:	f000 fdc2 	bl	8005efc <_init>
 8005378:	2600      	movs	r6, #0
 800537a:	4d0a      	ldr	r5, [pc, #40]	@ (80053a4 <__libc_init_array+0x40>)
 800537c:	4c0a      	ldr	r4, [pc, #40]	@ (80053a8 <__libc_init_array+0x44>)
 800537e:	1b64      	subs	r4, r4, r5
 8005380:	10a4      	asrs	r4, r4, #2
 8005382:	42a6      	cmp	r6, r4
 8005384:	d105      	bne.n	8005392 <__libc_init_array+0x2e>
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	f855 3b04 	ldr.w	r3, [r5], #4
 800538c:	4798      	blx	r3
 800538e:	3601      	adds	r6, #1
 8005390:	e7ee      	b.n	8005370 <__libc_init_array+0xc>
 8005392:	f855 3b04 	ldr.w	r3, [r5], #4
 8005396:	4798      	blx	r3
 8005398:	3601      	adds	r6, #1
 800539a:	e7f2      	b.n	8005382 <__libc_init_array+0x1e>
 800539c:	0800616c 	.word	0x0800616c
 80053a0:	0800616c 	.word	0x0800616c
 80053a4:	0800616c 	.word	0x0800616c
 80053a8:	08006170 	.word	0x08006170

080053ac <__retarget_lock_init_recursive>:
 80053ac:	4770      	bx	lr

080053ae <__retarget_lock_acquire_recursive>:
 80053ae:	4770      	bx	lr

080053b0 <__retarget_lock_release_recursive>:
 80053b0:	4770      	bx	lr

080053b2 <memcpy>:
 80053b2:	440a      	add	r2, r1
 80053b4:	4291      	cmp	r1, r2
 80053b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80053ba:	d100      	bne.n	80053be <memcpy+0xc>
 80053bc:	4770      	bx	lr
 80053be:	b510      	push	{r4, lr}
 80053c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053c4:	4291      	cmp	r1, r2
 80053c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053ca:	d1f9      	bne.n	80053c0 <memcpy+0xe>
 80053cc:	bd10      	pop	{r4, pc}
	...

080053d0 <__assert_func>:
 80053d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053d2:	4614      	mov	r4, r2
 80053d4:	461a      	mov	r2, r3
 80053d6:	4b09      	ldr	r3, [pc, #36]	@ (80053fc <__assert_func+0x2c>)
 80053d8:	4605      	mov	r5, r0
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68d8      	ldr	r0, [r3, #12]
 80053de:	b954      	cbnz	r4, 80053f6 <__assert_func+0x26>
 80053e0:	4b07      	ldr	r3, [pc, #28]	@ (8005400 <__assert_func+0x30>)
 80053e2:	461c      	mov	r4, r3
 80053e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053e8:	9100      	str	r1, [sp, #0]
 80053ea:	462b      	mov	r3, r5
 80053ec:	4905      	ldr	r1, [pc, #20]	@ (8005404 <__assert_func+0x34>)
 80053ee:	f000 fc85 	bl	8005cfc <fiprintf>
 80053f2:	f000 fd37 	bl	8005e64 <abort>
 80053f6:	4b04      	ldr	r3, [pc, #16]	@ (8005408 <__assert_func+0x38>)
 80053f8:	e7f4      	b.n	80053e4 <__assert_func+0x14>
 80053fa:	bf00      	nop
 80053fc:	20000028 	.word	0x20000028
 8005400:	08006136 	.word	0x08006136
 8005404:	08006108 	.word	0x08006108
 8005408:	080060fb 	.word	0x080060fb

0800540c <_free_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4605      	mov	r5, r0
 8005410:	2900      	cmp	r1, #0
 8005412:	d040      	beq.n	8005496 <_free_r+0x8a>
 8005414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005418:	1f0c      	subs	r4, r1, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	bfb8      	it	lt
 800541e:	18e4      	addlt	r4, r4, r3
 8005420:	f000 f8e6 	bl	80055f0 <__malloc_lock>
 8005424:	4a1c      	ldr	r2, [pc, #112]	@ (8005498 <_free_r+0x8c>)
 8005426:	6813      	ldr	r3, [r2, #0]
 8005428:	b933      	cbnz	r3, 8005438 <_free_r+0x2c>
 800542a:	6063      	str	r3, [r4, #4]
 800542c:	6014      	str	r4, [r2, #0]
 800542e:	4628      	mov	r0, r5
 8005430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005434:	f000 b8e2 	b.w	80055fc <__malloc_unlock>
 8005438:	42a3      	cmp	r3, r4
 800543a:	d908      	bls.n	800544e <_free_r+0x42>
 800543c:	6820      	ldr	r0, [r4, #0]
 800543e:	1821      	adds	r1, r4, r0
 8005440:	428b      	cmp	r3, r1
 8005442:	bf01      	itttt	eq
 8005444:	6819      	ldreq	r1, [r3, #0]
 8005446:	685b      	ldreq	r3, [r3, #4]
 8005448:	1809      	addeq	r1, r1, r0
 800544a:	6021      	streq	r1, [r4, #0]
 800544c:	e7ed      	b.n	800542a <_free_r+0x1e>
 800544e:	461a      	mov	r2, r3
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	b10b      	cbz	r3, 8005458 <_free_r+0x4c>
 8005454:	42a3      	cmp	r3, r4
 8005456:	d9fa      	bls.n	800544e <_free_r+0x42>
 8005458:	6811      	ldr	r1, [r2, #0]
 800545a:	1850      	adds	r0, r2, r1
 800545c:	42a0      	cmp	r0, r4
 800545e:	d10b      	bne.n	8005478 <_free_r+0x6c>
 8005460:	6820      	ldr	r0, [r4, #0]
 8005462:	4401      	add	r1, r0
 8005464:	1850      	adds	r0, r2, r1
 8005466:	4283      	cmp	r3, r0
 8005468:	6011      	str	r1, [r2, #0]
 800546a:	d1e0      	bne.n	800542e <_free_r+0x22>
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4408      	add	r0, r1
 8005472:	6010      	str	r0, [r2, #0]
 8005474:	6053      	str	r3, [r2, #4]
 8005476:	e7da      	b.n	800542e <_free_r+0x22>
 8005478:	d902      	bls.n	8005480 <_free_r+0x74>
 800547a:	230c      	movs	r3, #12
 800547c:	602b      	str	r3, [r5, #0]
 800547e:	e7d6      	b.n	800542e <_free_r+0x22>
 8005480:	6820      	ldr	r0, [r4, #0]
 8005482:	1821      	adds	r1, r4, r0
 8005484:	428b      	cmp	r3, r1
 8005486:	bf01      	itttt	eq
 8005488:	6819      	ldreq	r1, [r3, #0]
 800548a:	685b      	ldreq	r3, [r3, #4]
 800548c:	1809      	addeq	r1, r1, r0
 800548e:	6021      	streq	r1, [r4, #0]
 8005490:	6063      	str	r3, [r4, #4]
 8005492:	6054      	str	r4, [r2, #4]
 8005494:	e7cb      	b.n	800542e <_free_r+0x22>
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	20001a14 	.word	0x20001a14

0800549c <malloc>:
 800549c:	4b02      	ldr	r3, [pc, #8]	@ (80054a8 <malloc+0xc>)
 800549e:	4601      	mov	r1, r0
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	f000 b825 	b.w	80054f0 <_malloc_r>
 80054a6:	bf00      	nop
 80054a8:	20000028 	.word	0x20000028

080054ac <sbrk_aligned>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	4e0f      	ldr	r6, [pc, #60]	@ (80054ec <sbrk_aligned+0x40>)
 80054b0:	460c      	mov	r4, r1
 80054b2:	6831      	ldr	r1, [r6, #0]
 80054b4:	4605      	mov	r5, r0
 80054b6:	b911      	cbnz	r1, 80054be <sbrk_aligned+0x12>
 80054b8:	f000 fcb6 	bl	8005e28 <_sbrk_r>
 80054bc:	6030      	str	r0, [r6, #0]
 80054be:	4621      	mov	r1, r4
 80054c0:	4628      	mov	r0, r5
 80054c2:	f000 fcb1 	bl	8005e28 <_sbrk_r>
 80054c6:	1c43      	adds	r3, r0, #1
 80054c8:	d103      	bne.n	80054d2 <sbrk_aligned+0x26>
 80054ca:	f04f 34ff 	mov.w	r4, #4294967295
 80054ce:	4620      	mov	r0, r4
 80054d0:	bd70      	pop	{r4, r5, r6, pc}
 80054d2:	1cc4      	adds	r4, r0, #3
 80054d4:	f024 0403 	bic.w	r4, r4, #3
 80054d8:	42a0      	cmp	r0, r4
 80054da:	d0f8      	beq.n	80054ce <sbrk_aligned+0x22>
 80054dc:	1a21      	subs	r1, r4, r0
 80054de:	4628      	mov	r0, r5
 80054e0:	f000 fca2 	bl	8005e28 <_sbrk_r>
 80054e4:	3001      	adds	r0, #1
 80054e6:	d1f2      	bne.n	80054ce <sbrk_aligned+0x22>
 80054e8:	e7ef      	b.n	80054ca <sbrk_aligned+0x1e>
 80054ea:	bf00      	nop
 80054ec:	20001a10 	.word	0x20001a10

080054f0 <_malloc_r>:
 80054f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f4:	1ccd      	adds	r5, r1, #3
 80054f6:	f025 0503 	bic.w	r5, r5, #3
 80054fa:	3508      	adds	r5, #8
 80054fc:	2d0c      	cmp	r5, #12
 80054fe:	bf38      	it	cc
 8005500:	250c      	movcc	r5, #12
 8005502:	2d00      	cmp	r5, #0
 8005504:	4606      	mov	r6, r0
 8005506:	db01      	blt.n	800550c <_malloc_r+0x1c>
 8005508:	42a9      	cmp	r1, r5
 800550a:	d904      	bls.n	8005516 <_malloc_r+0x26>
 800550c:	230c      	movs	r3, #12
 800550e:	6033      	str	r3, [r6, #0]
 8005510:	2000      	movs	r0, #0
 8005512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005516:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055ec <_malloc_r+0xfc>
 800551a:	f000 f869 	bl	80055f0 <__malloc_lock>
 800551e:	f8d8 3000 	ldr.w	r3, [r8]
 8005522:	461c      	mov	r4, r3
 8005524:	bb44      	cbnz	r4, 8005578 <_malloc_r+0x88>
 8005526:	4629      	mov	r1, r5
 8005528:	4630      	mov	r0, r6
 800552a:	f7ff ffbf 	bl	80054ac <sbrk_aligned>
 800552e:	1c43      	adds	r3, r0, #1
 8005530:	4604      	mov	r4, r0
 8005532:	d158      	bne.n	80055e6 <_malloc_r+0xf6>
 8005534:	f8d8 4000 	ldr.w	r4, [r8]
 8005538:	4627      	mov	r7, r4
 800553a:	2f00      	cmp	r7, #0
 800553c:	d143      	bne.n	80055c6 <_malloc_r+0xd6>
 800553e:	2c00      	cmp	r4, #0
 8005540:	d04b      	beq.n	80055da <_malloc_r+0xea>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	4639      	mov	r1, r7
 8005546:	4630      	mov	r0, r6
 8005548:	eb04 0903 	add.w	r9, r4, r3
 800554c:	f000 fc6c 	bl	8005e28 <_sbrk_r>
 8005550:	4581      	cmp	r9, r0
 8005552:	d142      	bne.n	80055da <_malloc_r+0xea>
 8005554:	6821      	ldr	r1, [r4, #0]
 8005556:	4630      	mov	r0, r6
 8005558:	1a6d      	subs	r5, r5, r1
 800555a:	4629      	mov	r1, r5
 800555c:	f7ff ffa6 	bl	80054ac <sbrk_aligned>
 8005560:	3001      	adds	r0, #1
 8005562:	d03a      	beq.n	80055da <_malloc_r+0xea>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	442b      	add	r3, r5
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	f8d8 3000 	ldr.w	r3, [r8]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	bb62      	cbnz	r2, 80055cc <_malloc_r+0xdc>
 8005572:	f8c8 7000 	str.w	r7, [r8]
 8005576:	e00f      	b.n	8005598 <_malloc_r+0xa8>
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	1b52      	subs	r2, r2, r5
 800557c:	d420      	bmi.n	80055c0 <_malloc_r+0xd0>
 800557e:	2a0b      	cmp	r2, #11
 8005580:	d917      	bls.n	80055b2 <_malloc_r+0xc2>
 8005582:	1961      	adds	r1, r4, r5
 8005584:	42a3      	cmp	r3, r4
 8005586:	6025      	str	r5, [r4, #0]
 8005588:	bf18      	it	ne
 800558a:	6059      	strne	r1, [r3, #4]
 800558c:	6863      	ldr	r3, [r4, #4]
 800558e:	bf08      	it	eq
 8005590:	f8c8 1000 	streq.w	r1, [r8]
 8005594:	5162      	str	r2, [r4, r5]
 8005596:	604b      	str	r3, [r1, #4]
 8005598:	4630      	mov	r0, r6
 800559a:	f000 f82f 	bl	80055fc <__malloc_unlock>
 800559e:	f104 000b 	add.w	r0, r4, #11
 80055a2:	1d23      	adds	r3, r4, #4
 80055a4:	f020 0007 	bic.w	r0, r0, #7
 80055a8:	1ac2      	subs	r2, r0, r3
 80055aa:	bf1c      	itt	ne
 80055ac:	1a1b      	subne	r3, r3, r0
 80055ae:	50a3      	strne	r3, [r4, r2]
 80055b0:	e7af      	b.n	8005512 <_malloc_r+0x22>
 80055b2:	6862      	ldr	r2, [r4, #4]
 80055b4:	42a3      	cmp	r3, r4
 80055b6:	bf0c      	ite	eq
 80055b8:	f8c8 2000 	streq.w	r2, [r8]
 80055bc:	605a      	strne	r2, [r3, #4]
 80055be:	e7eb      	b.n	8005598 <_malloc_r+0xa8>
 80055c0:	4623      	mov	r3, r4
 80055c2:	6864      	ldr	r4, [r4, #4]
 80055c4:	e7ae      	b.n	8005524 <_malloc_r+0x34>
 80055c6:	463c      	mov	r4, r7
 80055c8:	687f      	ldr	r7, [r7, #4]
 80055ca:	e7b6      	b.n	800553a <_malloc_r+0x4a>
 80055cc:	461a      	mov	r2, r3
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	42a3      	cmp	r3, r4
 80055d2:	d1fb      	bne.n	80055cc <_malloc_r+0xdc>
 80055d4:	2300      	movs	r3, #0
 80055d6:	6053      	str	r3, [r2, #4]
 80055d8:	e7de      	b.n	8005598 <_malloc_r+0xa8>
 80055da:	230c      	movs	r3, #12
 80055dc:	4630      	mov	r0, r6
 80055de:	6033      	str	r3, [r6, #0]
 80055e0:	f000 f80c 	bl	80055fc <__malloc_unlock>
 80055e4:	e794      	b.n	8005510 <_malloc_r+0x20>
 80055e6:	6005      	str	r5, [r0, #0]
 80055e8:	e7d6      	b.n	8005598 <_malloc_r+0xa8>
 80055ea:	bf00      	nop
 80055ec:	20001a14 	.word	0x20001a14

080055f0 <__malloc_lock>:
 80055f0:	4801      	ldr	r0, [pc, #4]	@ (80055f8 <__malloc_lock+0x8>)
 80055f2:	f7ff bedc 	b.w	80053ae <__retarget_lock_acquire_recursive>
 80055f6:	bf00      	nop
 80055f8:	20001a0c 	.word	0x20001a0c

080055fc <__malloc_unlock>:
 80055fc:	4801      	ldr	r0, [pc, #4]	@ (8005604 <__malloc_unlock+0x8>)
 80055fe:	f7ff bed7 	b.w	80053b0 <__retarget_lock_release_recursive>
 8005602:	bf00      	nop
 8005604:	20001a0c 	.word	0x20001a0c

08005608 <__sfputc_r>:
 8005608:	6893      	ldr	r3, [r2, #8]
 800560a:	b410      	push	{r4}
 800560c:	3b01      	subs	r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	6093      	str	r3, [r2, #8]
 8005612:	da07      	bge.n	8005624 <__sfputc_r+0x1c>
 8005614:	6994      	ldr	r4, [r2, #24]
 8005616:	42a3      	cmp	r3, r4
 8005618:	db01      	blt.n	800561e <__sfputc_r+0x16>
 800561a:	290a      	cmp	r1, #10
 800561c:	d102      	bne.n	8005624 <__sfputc_r+0x1c>
 800561e:	bc10      	pop	{r4}
 8005620:	f7ff bdb7 	b.w	8005192 <__swbuf_r>
 8005624:	6813      	ldr	r3, [r2, #0]
 8005626:	1c58      	adds	r0, r3, #1
 8005628:	6010      	str	r0, [r2, #0]
 800562a:	7019      	strb	r1, [r3, #0]
 800562c:	4608      	mov	r0, r1
 800562e:	bc10      	pop	{r4}
 8005630:	4770      	bx	lr

08005632 <__sfputs_r>:
 8005632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005634:	4606      	mov	r6, r0
 8005636:	460f      	mov	r7, r1
 8005638:	4614      	mov	r4, r2
 800563a:	18d5      	adds	r5, r2, r3
 800563c:	42ac      	cmp	r4, r5
 800563e:	d101      	bne.n	8005644 <__sfputs_r+0x12>
 8005640:	2000      	movs	r0, #0
 8005642:	e007      	b.n	8005654 <__sfputs_r+0x22>
 8005644:	463a      	mov	r2, r7
 8005646:	4630      	mov	r0, r6
 8005648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800564c:	f7ff ffdc 	bl	8005608 <__sfputc_r>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d1f3      	bne.n	800563c <__sfputs_r+0xa>
 8005654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005658 <_vfiprintf_r>:
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	460d      	mov	r5, r1
 800565e:	4614      	mov	r4, r2
 8005660:	4698      	mov	r8, r3
 8005662:	4606      	mov	r6, r0
 8005664:	b09d      	sub	sp, #116	@ 0x74
 8005666:	b118      	cbz	r0, 8005670 <_vfiprintf_r+0x18>
 8005668:	6a03      	ldr	r3, [r0, #32]
 800566a:	b90b      	cbnz	r3, 8005670 <_vfiprintf_r+0x18>
 800566c:	f7ff fca8 	bl	8004fc0 <__sinit>
 8005670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005672:	07d9      	lsls	r1, r3, #31
 8005674:	d405      	bmi.n	8005682 <_vfiprintf_r+0x2a>
 8005676:	89ab      	ldrh	r3, [r5, #12]
 8005678:	059a      	lsls	r2, r3, #22
 800567a:	d402      	bmi.n	8005682 <_vfiprintf_r+0x2a>
 800567c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800567e:	f7ff fe96 	bl	80053ae <__retarget_lock_acquire_recursive>
 8005682:	89ab      	ldrh	r3, [r5, #12]
 8005684:	071b      	lsls	r3, r3, #28
 8005686:	d501      	bpl.n	800568c <_vfiprintf_r+0x34>
 8005688:	692b      	ldr	r3, [r5, #16]
 800568a:	b99b      	cbnz	r3, 80056b4 <_vfiprintf_r+0x5c>
 800568c:	4629      	mov	r1, r5
 800568e:	4630      	mov	r0, r6
 8005690:	f7ff fdbe 	bl	8005210 <__swsetup_r>
 8005694:	b170      	cbz	r0, 80056b4 <_vfiprintf_r+0x5c>
 8005696:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005698:	07dc      	lsls	r4, r3, #31
 800569a:	d504      	bpl.n	80056a6 <_vfiprintf_r+0x4e>
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	b01d      	add	sp, #116	@ 0x74
 80056a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a6:	89ab      	ldrh	r3, [r5, #12]
 80056a8:	0598      	lsls	r0, r3, #22
 80056aa:	d4f7      	bmi.n	800569c <_vfiprintf_r+0x44>
 80056ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056ae:	f7ff fe7f 	bl	80053b0 <__retarget_lock_release_recursive>
 80056b2:	e7f3      	b.n	800569c <_vfiprintf_r+0x44>
 80056b4:	2300      	movs	r3, #0
 80056b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80056b8:	2320      	movs	r3, #32
 80056ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056be:	2330      	movs	r3, #48	@ 0x30
 80056c0:	f04f 0901 	mov.w	r9, #1
 80056c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80056c8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005874 <_vfiprintf_r+0x21c>
 80056cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056d0:	4623      	mov	r3, r4
 80056d2:	469a      	mov	sl, r3
 80056d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056d8:	b10a      	cbz	r2, 80056de <_vfiprintf_r+0x86>
 80056da:	2a25      	cmp	r2, #37	@ 0x25
 80056dc:	d1f9      	bne.n	80056d2 <_vfiprintf_r+0x7a>
 80056de:	ebba 0b04 	subs.w	fp, sl, r4
 80056e2:	d00b      	beq.n	80056fc <_vfiprintf_r+0xa4>
 80056e4:	465b      	mov	r3, fp
 80056e6:	4622      	mov	r2, r4
 80056e8:	4629      	mov	r1, r5
 80056ea:	4630      	mov	r0, r6
 80056ec:	f7ff ffa1 	bl	8005632 <__sfputs_r>
 80056f0:	3001      	adds	r0, #1
 80056f2:	f000 80a7 	beq.w	8005844 <_vfiprintf_r+0x1ec>
 80056f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056f8:	445a      	add	r2, fp
 80056fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80056fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 809f 	beq.w	8005844 <_vfiprintf_r+0x1ec>
 8005706:	2300      	movs	r3, #0
 8005708:	f04f 32ff 	mov.w	r2, #4294967295
 800570c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005710:	f10a 0a01 	add.w	sl, sl, #1
 8005714:	9304      	str	r3, [sp, #16]
 8005716:	9307      	str	r3, [sp, #28]
 8005718:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800571c:	931a      	str	r3, [sp, #104]	@ 0x68
 800571e:	4654      	mov	r4, sl
 8005720:	2205      	movs	r2, #5
 8005722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005726:	4853      	ldr	r0, [pc, #332]	@ (8005874 <_vfiprintf_r+0x21c>)
 8005728:	f000 fb8e 	bl	8005e48 <memchr>
 800572c:	9a04      	ldr	r2, [sp, #16]
 800572e:	b9d8      	cbnz	r0, 8005768 <_vfiprintf_r+0x110>
 8005730:	06d1      	lsls	r1, r2, #27
 8005732:	bf44      	itt	mi
 8005734:	2320      	movmi	r3, #32
 8005736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800573a:	0713      	lsls	r3, r2, #28
 800573c:	bf44      	itt	mi
 800573e:	232b      	movmi	r3, #43	@ 0x2b
 8005740:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005744:	f89a 3000 	ldrb.w	r3, [sl]
 8005748:	2b2a      	cmp	r3, #42	@ 0x2a
 800574a:	d015      	beq.n	8005778 <_vfiprintf_r+0x120>
 800574c:	4654      	mov	r4, sl
 800574e:	2000      	movs	r0, #0
 8005750:	f04f 0c0a 	mov.w	ip, #10
 8005754:	9a07      	ldr	r2, [sp, #28]
 8005756:	4621      	mov	r1, r4
 8005758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800575c:	3b30      	subs	r3, #48	@ 0x30
 800575e:	2b09      	cmp	r3, #9
 8005760:	d94b      	bls.n	80057fa <_vfiprintf_r+0x1a2>
 8005762:	b1b0      	cbz	r0, 8005792 <_vfiprintf_r+0x13a>
 8005764:	9207      	str	r2, [sp, #28]
 8005766:	e014      	b.n	8005792 <_vfiprintf_r+0x13a>
 8005768:	eba0 0308 	sub.w	r3, r0, r8
 800576c:	fa09 f303 	lsl.w	r3, r9, r3
 8005770:	4313      	orrs	r3, r2
 8005772:	46a2      	mov	sl, r4
 8005774:	9304      	str	r3, [sp, #16]
 8005776:	e7d2      	b.n	800571e <_vfiprintf_r+0xc6>
 8005778:	9b03      	ldr	r3, [sp, #12]
 800577a:	1d19      	adds	r1, r3, #4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	9103      	str	r1, [sp, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	bfbb      	ittet	lt
 8005784:	425b      	neglt	r3, r3
 8005786:	f042 0202 	orrlt.w	r2, r2, #2
 800578a:	9307      	strge	r3, [sp, #28]
 800578c:	9307      	strlt	r3, [sp, #28]
 800578e:	bfb8      	it	lt
 8005790:	9204      	strlt	r2, [sp, #16]
 8005792:	7823      	ldrb	r3, [r4, #0]
 8005794:	2b2e      	cmp	r3, #46	@ 0x2e
 8005796:	d10a      	bne.n	80057ae <_vfiprintf_r+0x156>
 8005798:	7863      	ldrb	r3, [r4, #1]
 800579a:	2b2a      	cmp	r3, #42	@ 0x2a
 800579c:	d132      	bne.n	8005804 <_vfiprintf_r+0x1ac>
 800579e:	9b03      	ldr	r3, [sp, #12]
 80057a0:	3402      	adds	r4, #2
 80057a2:	1d1a      	adds	r2, r3, #4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	9203      	str	r2, [sp, #12]
 80057a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057ac:	9305      	str	r3, [sp, #20]
 80057ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005878 <_vfiprintf_r+0x220>
 80057b2:	2203      	movs	r2, #3
 80057b4:	4650      	mov	r0, sl
 80057b6:	7821      	ldrb	r1, [r4, #0]
 80057b8:	f000 fb46 	bl	8005e48 <memchr>
 80057bc:	b138      	cbz	r0, 80057ce <_vfiprintf_r+0x176>
 80057be:	2240      	movs	r2, #64	@ 0x40
 80057c0:	9b04      	ldr	r3, [sp, #16]
 80057c2:	eba0 000a 	sub.w	r0, r0, sl
 80057c6:	4082      	lsls	r2, r0
 80057c8:	4313      	orrs	r3, r2
 80057ca:	3401      	adds	r4, #1
 80057cc:	9304      	str	r3, [sp, #16]
 80057ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d2:	2206      	movs	r2, #6
 80057d4:	4829      	ldr	r0, [pc, #164]	@ (800587c <_vfiprintf_r+0x224>)
 80057d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057da:	f000 fb35 	bl	8005e48 <memchr>
 80057de:	2800      	cmp	r0, #0
 80057e0:	d03f      	beq.n	8005862 <_vfiprintf_r+0x20a>
 80057e2:	4b27      	ldr	r3, [pc, #156]	@ (8005880 <_vfiprintf_r+0x228>)
 80057e4:	bb1b      	cbnz	r3, 800582e <_vfiprintf_r+0x1d6>
 80057e6:	9b03      	ldr	r3, [sp, #12]
 80057e8:	3307      	adds	r3, #7
 80057ea:	f023 0307 	bic.w	r3, r3, #7
 80057ee:	3308      	adds	r3, #8
 80057f0:	9303      	str	r3, [sp, #12]
 80057f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057f4:	443b      	add	r3, r7
 80057f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80057f8:	e76a      	b.n	80056d0 <_vfiprintf_r+0x78>
 80057fa:	460c      	mov	r4, r1
 80057fc:	2001      	movs	r0, #1
 80057fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005802:	e7a8      	b.n	8005756 <_vfiprintf_r+0xfe>
 8005804:	2300      	movs	r3, #0
 8005806:	f04f 0c0a 	mov.w	ip, #10
 800580a:	4619      	mov	r1, r3
 800580c:	3401      	adds	r4, #1
 800580e:	9305      	str	r3, [sp, #20]
 8005810:	4620      	mov	r0, r4
 8005812:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005816:	3a30      	subs	r2, #48	@ 0x30
 8005818:	2a09      	cmp	r2, #9
 800581a:	d903      	bls.n	8005824 <_vfiprintf_r+0x1cc>
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0c6      	beq.n	80057ae <_vfiprintf_r+0x156>
 8005820:	9105      	str	r1, [sp, #20]
 8005822:	e7c4      	b.n	80057ae <_vfiprintf_r+0x156>
 8005824:	4604      	mov	r4, r0
 8005826:	2301      	movs	r3, #1
 8005828:	fb0c 2101 	mla	r1, ip, r1, r2
 800582c:	e7f0      	b.n	8005810 <_vfiprintf_r+0x1b8>
 800582e:	ab03      	add	r3, sp, #12
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	462a      	mov	r2, r5
 8005834:	4630      	mov	r0, r6
 8005836:	4b13      	ldr	r3, [pc, #76]	@ (8005884 <_vfiprintf_r+0x22c>)
 8005838:	a904      	add	r1, sp, #16
 800583a:	f3af 8000 	nop.w
 800583e:	4607      	mov	r7, r0
 8005840:	1c78      	adds	r0, r7, #1
 8005842:	d1d6      	bne.n	80057f2 <_vfiprintf_r+0x19a>
 8005844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005846:	07d9      	lsls	r1, r3, #31
 8005848:	d405      	bmi.n	8005856 <_vfiprintf_r+0x1fe>
 800584a:	89ab      	ldrh	r3, [r5, #12]
 800584c:	059a      	lsls	r2, r3, #22
 800584e:	d402      	bmi.n	8005856 <_vfiprintf_r+0x1fe>
 8005850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005852:	f7ff fdad 	bl	80053b0 <__retarget_lock_release_recursive>
 8005856:	89ab      	ldrh	r3, [r5, #12]
 8005858:	065b      	lsls	r3, r3, #25
 800585a:	f53f af1f 	bmi.w	800569c <_vfiprintf_r+0x44>
 800585e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005860:	e71e      	b.n	80056a0 <_vfiprintf_r+0x48>
 8005862:	ab03      	add	r3, sp, #12
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	462a      	mov	r2, r5
 8005868:	4630      	mov	r0, r6
 800586a:	4b06      	ldr	r3, [pc, #24]	@ (8005884 <_vfiprintf_r+0x22c>)
 800586c:	a904      	add	r1, sp, #16
 800586e:	f000 f87d 	bl	800596c <_printf_i>
 8005872:	e7e4      	b.n	800583e <_vfiprintf_r+0x1e6>
 8005874:	08006137 	.word	0x08006137
 8005878:	0800613d 	.word	0x0800613d
 800587c:	08006141 	.word	0x08006141
 8005880:	00000000 	.word	0x00000000
 8005884:	08005633 	.word	0x08005633

08005888 <_printf_common>:
 8005888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800588c:	4616      	mov	r6, r2
 800588e:	4698      	mov	r8, r3
 8005890:	688a      	ldr	r2, [r1, #8]
 8005892:	690b      	ldr	r3, [r1, #16]
 8005894:	4607      	mov	r7, r0
 8005896:	4293      	cmp	r3, r2
 8005898:	bfb8      	it	lt
 800589a:	4613      	movlt	r3, r2
 800589c:	6033      	str	r3, [r6, #0]
 800589e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058a2:	460c      	mov	r4, r1
 80058a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058a8:	b10a      	cbz	r2, 80058ae <_printf_common+0x26>
 80058aa:	3301      	adds	r3, #1
 80058ac:	6033      	str	r3, [r6, #0]
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	0699      	lsls	r1, r3, #26
 80058b2:	bf42      	ittt	mi
 80058b4:	6833      	ldrmi	r3, [r6, #0]
 80058b6:	3302      	addmi	r3, #2
 80058b8:	6033      	strmi	r3, [r6, #0]
 80058ba:	6825      	ldr	r5, [r4, #0]
 80058bc:	f015 0506 	ands.w	r5, r5, #6
 80058c0:	d106      	bne.n	80058d0 <_printf_common+0x48>
 80058c2:	f104 0a19 	add.w	sl, r4, #25
 80058c6:	68e3      	ldr	r3, [r4, #12]
 80058c8:	6832      	ldr	r2, [r6, #0]
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	42ab      	cmp	r3, r5
 80058ce:	dc2b      	bgt.n	8005928 <_printf_common+0xa0>
 80058d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058d4:	6822      	ldr	r2, [r4, #0]
 80058d6:	3b00      	subs	r3, #0
 80058d8:	bf18      	it	ne
 80058da:	2301      	movne	r3, #1
 80058dc:	0692      	lsls	r2, r2, #26
 80058de:	d430      	bmi.n	8005942 <_printf_common+0xba>
 80058e0:	4641      	mov	r1, r8
 80058e2:	4638      	mov	r0, r7
 80058e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058e8:	47c8      	blx	r9
 80058ea:	3001      	adds	r0, #1
 80058ec:	d023      	beq.n	8005936 <_printf_common+0xae>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	6922      	ldr	r2, [r4, #16]
 80058f2:	f003 0306 	and.w	r3, r3, #6
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	bf14      	ite	ne
 80058fa:	2500      	movne	r5, #0
 80058fc:	6833      	ldreq	r3, [r6, #0]
 80058fe:	f04f 0600 	mov.w	r6, #0
 8005902:	bf08      	it	eq
 8005904:	68e5      	ldreq	r5, [r4, #12]
 8005906:	f104 041a 	add.w	r4, r4, #26
 800590a:	bf08      	it	eq
 800590c:	1aed      	subeq	r5, r5, r3
 800590e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005912:	bf08      	it	eq
 8005914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005918:	4293      	cmp	r3, r2
 800591a:	bfc4      	itt	gt
 800591c:	1a9b      	subgt	r3, r3, r2
 800591e:	18ed      	addgt	r5, r5, r3
 8005920:	42b5      	cmp	r5, r6
 8005922:	d11a      	bne.n	800595a <_printf_common+0xd2>
 8005924:	2000      	movs	r0, #0
 8005926:	e008      	b.n	800593a <_printf_common+0xb2>
 8005928:	2301      	movs	r3, #1
 800592a:	4652      	mov	r2, sl
 800592c:	4641      	mov	r1, r8
 800592e:	4638      	mov	r0, r7
 8005930:	47c8      	blx	r9
 8005932:	3001      	adds	r0, #1
 8005934:	d103      	bne.n	800593e <_printf_common+0xb6>
 8005936:	f04f 30ff 	mov.w	r0, #4294967295
 800593a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593e:	3501      	adds	r5, #1
 8005940:	e7c1      	b.n	80058c6 <_printf_common+0x3e>
 8005942:	2030      	movs	r0, #48	@ 0x30
 8005944:	18e1      	adds	r1, r4, r3
 8005946:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005950:	4422      	add	r2, r4
 8005952:	3302      	adds	r3, #2
 8005954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005958:	e7c2      	b.n	80058e0 <_printf_common+0x58>
 800595a:	2301      	movs	r3, #1
 800595c:	4622      	mov	r2, r4
 800595e:	4641      	mov	r1, r8
 8005960:	4638      	mov	r0, r7
 8005962:	47c8      	blx	r9
 8005964:	3001      	adds	r0, #1
 8005966:	d0e6      	beq.n	8005936 <_printf_common+0xae>
 8005968:	3601      	adds	r6, #1
 800596a:	e7d9      	b.n	8005920 <_printf_common+0x98>

0800596c <_printf_i>:
 800596c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005970:	7e0f      	ldrb	r7, [r1, #24]
 8005972:	4691      	mov	r9, r2
 8005974:	2f78      	cmp	r7, #120	@ 0x78
 8005976:	4680      	mov	r8, r0
 8005978:	460c      	mov	r4, r1
 800597a:	469a      	mov	sl, r3
 800597c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800597e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005982:	d807      	bhi.n	8005994 <_printf_i+0x28>
 8005984:	2f62      	cmp	r7, #98	@ 0x62
 8005986:	d80a      	bhi.n	800599e <_printf_i+0x32>
 8005988:	2f00      	cmp	r7, #0
 800598a:	f000 80d3 	beq.w	8005b34 <_printf_i+0x1c8>
 800598e:	2f58      	cmp	r7, #88	@ 0x58
 8005990:	f000 80ba 	beq.w	8005b08 <_printf_i+0x19c>
 8005994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005998:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800599c:	e03a      	b.n	8005a14 <_printf_i+0xa8>
 800599e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059a2:	2b15      	cmp	r3, #21
 80059a4:	d8f6      	bhi.n	8005994 <_printf_i+0x28>
 80059a6:	a101      	add	r1, pc, #4	@ (adr r1, 80059ac <_printf_i+0x40>)
 80059a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059ac:	08005a05 	.word	0x08005a05
 80059b0:	08005a19 	.word	0x08005a19
 80059b4:	08005995 	.word	0x08005995
 80059b8:	08005995 	.word	0x08005995
 80059bc:	08005995 	.word	0x08005995
 80059c0:	08005995 	.word	0x08005995
 80059c4:	08005a19 	.word	0x08005a19
 80059c8:	08005995 	.word	0x08005995
 80059cc:	08005995 	.word	0x08005995
 80059d0:	08005995 	.word	0x08005995
 80059d4:	08005995 	.word	0x08005995
 80059d8:	08005b1b 	.word	0x08005b1b
 80059dc:	08005a43 	.word	0x08005a43
 80059e0:	08005ad5 	.word	0x08005ad5
 80059e4:	08005995 	.word	0x08005995
 80059e8:	08005995 	.word	0x08005995
 80059ec:	08005b3d 	.word	0x08005b3d
 80059f0:	08005995 	.word	0x08005995
 80059f4:	08005a43 	.word	0x08005a43
 80059f8:	08005995 	.word	0x08005995
 80059fc:	08005995 	.word	0x08005995
 8005a00:	08005add 	.word	0x08005add
 8005a04:	6833      	ldr	r3, [r6, #0]
 8005a06:	1d1a      	adds	r2, r3, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6032      	str	r2, [r6, #0]
 8005a0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a14:	2301      	movs	r3, #1
 8005a16:	e09e      	b.n	8005b56 <_printf_i+0x1ea>
 8005a18:	6833      	ldr	r3, [r6, #0]
 8005a1a:	6820      	ldr	r0, [r4, #0]
 8005a1c:	1d19      	adds	r1, r3, #4
 8005a1e:	6031      	str	r1, [r6, #0]
 8005a20:	0606      	lsls	r6, r0, #24
 8005a22:	d501      	bpl.n	8005a28 <_printf_i+0xbc>
 8005a24:	681d      	ldr	r5, [r3, #0]
 8005a26:	e003      	b.n	8005a30 <_printf_i+0xc4>
 8005a28:	0645      	lsls	r5, r0, #25
 8005a2a:	d5fb      	bpl.n	8005a24 <_printf_i+0xb8>
 8005a2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a30:	2d00      	cmp	r5, #0
 8005a32:	da03      	bge.n	8005a3c <_printf_i+0xd0>
 8005a34:	232d      	movs	r3, #45	@ 0x2d
 8005a36:	426d      	negs	r5, r5
 8005a38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a3c:	230a      	movs	r3, #10
 8005a3e:	4859      	ldr	r0, [pc, #356]	@ (8005ba4 <_printf_i+0x238>)
 8005a40:	e011      	b.n	8005a66 <_printf_i+0xfa>
 8005a42:	6821      	ldr	r1, [r4, #0]
 8005a44:	6833      	ldr	r3, [r6, #0]
 8005a46:	0608      	lsls	r0, r1, #24
 8005a48:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a4c:	d402      	bmi.n	8005a54 <_printf_i+0xe8>
 8005a4e:	0649      	lsls	r1, r1, #25
 8005a50:	bf48      	it	mi
 8005a52:	b2ad      	uxthmi	r5, r5
 8005a54:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a56:	6033      	str	r3, [r6, #0]
 8005a58:	bf14      	ite	ne
 8005a5a:	230a      	movne	r3, #10
 8005a5c:	2308      	moveq	r3, #8
 8005a5e:	4851      	ldr	r0, [pc, #324]	@ (8005ba4 <_printf_i+0x238>)
 8005a60:	2100      	movs	r1, #0
 8005a62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a66:	6866      	ldr	r6, [r4, #4]
 8005a68:	2e00      	cmp	r6, #0
 8005a6a:	bfa8      	it	ge
 8005a6c:	6821      	ldrge	r1, [r4, #0]
 8005a6e:	60a6      	str	r6, [r4, #8]
 8005a70:	bfa4      	itt	ge
 8005a72:	f021 0104 	bicge.w	r1, r1, #4
 8005a76:	6021      	strge	r1, [r4, #0]
 8005a78:	b90d      	cbnz	r5, 8005a7e <_printf_i+0x112>
 8005a7a:	2e00      	cmp	r6, #0
 8005a7c:	d04b      	beq.n	8005b16 <_printf_i+0x1aa>
 8005a7e:	4616      	mov	r6, r2
 8005a80:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a84:	fb03 5711 	mls	r7, r3, r1, r5
 8005a88:	5dc7      	ldrb	r7, [r0, r7]
 8005a8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a8e:	462f      	mov	r7, r5
 8005a90:	42bb      	cmp	r3, r7
 8005a92:	460d      	mov	r5, r1
 8005a94:	d9f4      	bls.n	8005a80 <_printf_i+0x114>
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d10b      	bne.n	8005ab2 <_printf_i+0x146>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	07df      	lsls	r7, r3, #31
 8005a9e:	d508      	bpl.n	8005ab2 <_printf_i+0x146>
 8005aa0:	6923      	ldr	r3, [r4, #16]
 8005aa2:	6861      	ldr	r1, [r4, #4]
 8005aa4:	4299      	cmp	r1, r3
 8005aa6:	bfde      	ittt	le
 8005aa8:	2330      	movle	r3, #48	@ 0x30
 8005aaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005aae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ab2:	1b92      	subs	r2, r2, r6
 8005ab4:	6122      	str	r2, [r4, #16]
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4640      	mov	r0, r8
 8005abc:	f8cd a000 	str.w	sl, [sp]
 8005ac0:	aa03      	add	r2, sp, #12
 8005ac2:	f7ff fee1 	bl	8005888 <_printf_common>
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d14a      	bne.n	8005b60 <_printf_i+0x1f4>
 8005aca:	f04f 30ff 	mov.w	r0, #4294967295
 8005ace:	b004      	add	sp, #16
 8005ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	f043 0320 	orr.w	r3, r3, #32
 8005ada:	6023      	str	r3, [r4, #0]
 8005adc:	2778      	movs	r7, #120	@ 0x78
 8005ade:	4832      	ldr	r0, [pc, #200]	@ (8005ba8 <_printf_i+0x23c>)
 8005ae0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	6831      	ldr	r1, [r6, #0]
 8005ae8:	061f      	lsls	r7, r3, #24
 8005aea:	f851 5b04 	ldr.w	r5, [r1], #4
 8005aee:	d402      	bmi.n	8005af6 <_printf_i+0x18a>
 8005af0:	065f      	lsls	r7, r3, #25
 8005af2:	bf48      	it	mi
 8005af4:	b2ad      	uxthmi	r5, r5
 8005af6:	6031      	str	r1, [r6, #0]
 8005af8:	07d9      	lsls	r1, r3, #31
 8005afa:	bf44      	itt	mi
 8005afc:	f043 0320 	orrmi.w	r3, r3, #32
 8005b00:	6023      	strmi	r3, [r4, #0]
 8005b02:	b11d      	cbz	r5, 8005b0c <_printf_i+0x1a0>
 8005b04:	2310      	movs	r3, #16
 8005b06:	e7ab      	b.n	8005a60 <_printf_i+0xf4>
 8005b08:	4826      	ldr	r0, [pc, #152]	@ (8005ba4 <_printf_i+0x238>)
 8005b0a:	e7e9      	b.n	8005ae0 <_printf_i+0x174>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	f023 0320 	bic.w	r3, r3, #32
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	e7f6      	b.n	8005b04 <_printf_i+0x198>
 8005b16:	4616      	mov	r6, r2
 8005b18:	e7bd      	b.n	8005a96 <_printf_i+0x12a>
 8005b1a:	6833      	ldr	r3, [r6, #0]
 8005b1c:	6825      	ldr	r5, [r4, #0]
 8005b1e:	1d18      	adds	r0, r3, #4
 8005b20:	6961      	ldr	r1, [r4, #20]
 8005b22:	6030      	str	r0, [r6, #0]
 8005b24:	062e      	lsls	r6, r5, #24
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	d501      	bpl.n	8005b2e <_printf_i+0x1c2>
 8005b2a:	6019      	str	r1, [r3, #0]
 8005b2c:	e002      	b.n	8005b34 <_printf_i+0x1c8>
 8005b2e:	0668      	lsls	r0, r5, #25
 8005b30:	d5fb      	bpl.n	8005b2a <_printf_i+0x1be>
 8005b32:	8019      	strh	r1, [r3, #0]
 8005b34:	2300      	movs	r3, #0
 8005b36:	4616      	mov	r6, r2
 8005b38:	6123      	str	r3, [r4, #16]
 8005b3a:	e7bc      	b.n	8005ab6 <_printf_i+0x14a>
 8005b3c:	6833      	ldr	r3, [r6, #0]
 8005b3e:	2100      	movs	r1, #0
 8005b40:	1d1a      	adds	r2, r3, #4
 8005b42:	6032      	str	r2, [r6, #0]
 8005b44:	681e      	ldr	r6, [r3, #0]
 8005b46:	6862      	ldr	r2, [r4, #4]
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f000 f97d 	bl	8005e48 <memchr>
 8005b4e:	b108      	cbz	r0, 8005b54 <_printf_i+0x1e8>
 8005b50:	1b80      	subs	r0, r0, r6
 8005b52:	6060      	str	r0, [r4, #4]
 8005b54:	6863      	ldr	r3, [r4, #4]
 8005b56:	6123      	str	r3, [r4, #16]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b5e:	e7aa      	b.n	8005ab6 <_printf_i+0x14a>
 8005b60:	4632      	mov	r2, r6
 8005b62:	4649      	mov	r1, r9
 8005b64:	4640      	mov	r0, r8
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	47d0      	blx	sl
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d0ad      	beq.n	8005aca <_printf_i+0x15e>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	079b      	lsls	r3, r3, #30
 8005b72:	d413      	bmi.n	8005b9c <_printf_i+0x230>
 8005b74:	68e0      	ldr	r0, [r4, #12]
 8005b76:	9b03      	ldr	r3, [sp, #12]
 8005b78:	4298      	cmp	r0, r3
 8005b7a:	bfb8      	it	lt
 8005b7c:	4618      	movlt	r0, r3
 8005b7e:	e7a6      	b.n	8005ace <_printf_i+0x162>
 8005b80:	2301      	movs	r3, #1
 8005b82:	4632      	mov	r2, r6
 8005b84:	4649      	mov	r1, r9
 8005b86:	4640      	mov	r0, r8
 8005b88:	47d0      	blx	sl
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d09d      	beq.n	8005aca <_printf_i+0x15e>
 8005b8e:	3501      	adds	r5, #1
 8005b90:	68e3      	ldr	r3, [r4, #12]
 8005b92:	9903      	ldr	r1, [sp, #12]
 8005b94:	1a5b      	subs	r3, r3, r1
 8005b96:	42ab      	cmp	r3, r5
 8005b98:	dcf2      	bgt.n	8005b80 <_printf_i+0x214>
 8005b9a:	e7eb      	b.n	8005b74 <_printf_i+0x208>
 8005b9c:	2500      	movs	r5, #0
 8005b9e:	f104 0619 	add.w	r6, r4, #25
 8005ba2:	e7f5      	b.n	8005b90 <_printf_i+0x224>
 8005ba4:	08006148 	.word	0x08006148
 8005ba8:	08006159 	.word	0x08006159

08005bac <__sflush_r>:
 8005bac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	0716      	lsls	r6, r2, #28
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	d454      	bmi.n	8005c64 <__sflush_r+0xb8>
 8005bba:	684b      	ldr	r3, [r1, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	dc02      	bgt.n	8005bc6 <__sflush_r+0x1a>
 8005bc0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	dd48      	ble.n	8005c58 <__sflush_r+0xac>
 8005bc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bc8:	2e00      	cmp	r6, #0
 8005bca:	d045      	beq.n	8005c58 <__sflush_r+0xac>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005bd2:	682f      	ldr	r7, [r5, #0]
 8005bd4:	6a21      	ldr	r1, [r4, #32]
 8005bd6:	602b      	str	r3, [r5, #0]
 8005bd8:	d030      	beq.n	8005c3c <__sflush_r+0x90>
 8005bda:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	0759      	lsls	r1, r3, #29
 8005be0:	d505      	bpl.n	8005bee <__sflush_r+0x42>
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	1ad2      	subs	r2, r2, r3
 8005be6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005be8:	b10b      	cbz	r3, 8005bee <__sflush_r+0x42>
 8005bea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005bec:	1ad2      	subs	r2, r2, r3
 8005bee:	2300      	movs	r3, #0
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bf4:	6a21      	ldr	r1, [r4, #32]
 8005bf6:	47b0      	blx	r6
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	d106      	bne.n	8005c0c <__sflush_r+0x60>
 8005bfe:	6829      	ldr	r1, [r5, #0]
 8005c00:	291d      	cmp	r1, #29
 8005c02:	d82b      	bhi.n	8005c5c <__sflush_r+0xb0>
 8005c04:	4a28      	ldr	r2, [pc, #160]	@ (8005ca8 <__sflush_r+0xfc>)
 8005c06:	410a      	asrs	r2, r1
 8005c08:	07d6      	lsls	r6, r2, #31
 8005c0a:	d427      	bmi.n	8005c5c <__sflush_r+0xb0>
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	6062      	str	r2, [r4, #4]
 8005c10:	6922      	ldr	r2, [r4, #16]
 8005c12:	04d9      	lsls	r1, r3, #19
 8005c14:	6022      	str	r2, [r4, #0]
 8005c16:	d504      	bpl.n	8005c22 <__sflush_r+0x76>
 8005c18:	1c42      	adds	r2, r0, #1
 8005c1a:	d101      	bne.n	8005c20 <__sflush_r+0x74>
 8005c1c:	682b      	ldr	r3, [r5, #0]
 8005c1e:	b903      	cbnz	r3, 8005c22 <__sflush_r+0x76>
 8005c20:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c24:	602f      	str	r7, [r5, #0]
 8005c26:	b1b9      	cbz	r1, 8005c58 <__sflush_r+0xac>
 8005c28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c2c:	4299      	cmp	r1, r3
 8005c2e:	d002      	beq.n	8005c36 <__sflush_r+0x8a>
 8005c30:	4628      	mov	r0, r5
 8005c32:	f7ff fbeb 	bl	800540c <_free_r>
 8005c36:	2300      	movs	r3, #0
 8005c38:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c3a:	e00d      	b.n	8005c58 <__sflush_r+0xac>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b0      	blx	r6
 8005c42:	4602      	mov	r2, r0
 8005c44:	1c50      	adds	r0, r2, #1
 8005c46:	d1c9      	bne.n	8005bdc <__sflush_r+0x30>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0c6      	beq.n	8005bdc <__sflush_r+0x30>
 8005c4e:	2b1d      	cmp	r3, #29
 8005c50:	d001      	beq.n	8005c56 <__sflush_r+0xaa>
 8005c52:	2b16      	cmp	r3, #22
 8005c54:	d11d      	bne.n	8005c92 <__sflush_r+0xe6>
 8005c56:	602f      	str	r7, [r5, #0]
 8005c58:	2000      	movs	r0, #0
 8005c5a:	e021      	b.n	8005ca0 <__sflush_r+0xf4>
 8005c5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c60:	b21b      	sxth	r3, r3
 8005c62:	e01a      	b.n	8005c9a <__sflush_r+0xee>
 8005c64:	690f      	ldr	r7, [r1, #16]
 8005c66:	2f00      	cmp	r7, #0
 8005c68:	d0f6      	beq.n	8005c58 <__sflush_r+0xac>
 8005c6a:	0793      	lsls	r3, r2, #30
 8005c6c:	bf18      	it	ne
 8005c6e:	2300      	movne	r3, #0
 8005c70:	680e      	ldr	r6, [r1, #0]
 8005c72:	bf08      	it	eq
 8005c74:	694b      	ldreq	r3, [r1, #20]
 8005c76:	1bf6      	subs	r6, r6, r7
 8005c78:	600f      	str	r7, [r1, #0]
 8005c7a:	608b      	str	r3, [r1, #8]
 8005c7c:	2e00      	cmp	r6, #0
 8005c7e:	ddeb      	ble.n	8005c58 <__sflush_r+0xac>
 8005c80:	4633      	mov	r3, r6
 8005c82:	463a      	mov	r2, r7
 8005c84:	4628      	mov	r0, r5
 8005c86:	6a21      	ldr	r1, [r4, #32]
 8005c88:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005c8c:	47e0      	blx	ip
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	dc07      	bgt.n	8005ca2 <__sflush_r+0xf6>
 8005c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9e:	81a3      	strh	r3, [r4, #12]
 8005ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ca2:	4407      	add	r7, r0
 8005ca4:	1a36      	subs	r6, r6, r0
 8005ca6:	e7e9      	b.n	8005c7c <__sflush_r+0xd0>
 8005ca8:	dfbffffe 	.word	0xdfbffffe

08005cac <_fflush_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	690b      	ldr	r3, [r1, #16]
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	b913      	cbnz	r3, 8005cbc <_fflush_r+0x10>
 8005cb6:	2500      	movs	r5, #0
 8005cb8:	4628      	mov	r0, r5
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	b118      	cbz	r0, 8005cc6 <_fflush_r+0x1a>
 8005cbe:	6a03      	ldr	r3, [r0, #32]
 8005cc0:	b90b      	cbnz	r3, 8005cc6 <_fflush_r+0x1a>
 8005cc2:	f7ff f97d 	bl	8004fc0 <__sinit>
 8005cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0f3      	beq.n	8005cb6 <_fflush_r+0xa>
 8005cce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005cd0:	07d0      	lsls	r0, r2, #31
 8005cd2:	d404      	bmi.n	8005cde <_fflush_r+0x32>
 8005cd4:	0599      	lsls	r1, r3, #22
 8005cd6:	d402      	bmi.n	8005cde <_fflush_r+0x32>
 8005cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cda:	f7ff fb68 	bl	80053ae <__retarget_lock_acquire_recursive>
 8005cde:	4628      	mov	r0, r5
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	f7ff ff63 	bl	8005bac <__sflush_r>
 8005ce6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ce8:	4605      	mov	r5, r0
 8005cea:	07da      	lsls	r2, r3, #31
 8005cec:	d4e4      	bmi.n	8005cb8 <_fflush_r+0xc>
 8005cee:	89a3      	ldrh	r3, [r4, #12]
 8005cf0:	059b      	lsls	r3, r3, #22
 8005cf2:	d4e1      	bmi.n	8005cb8 <_fflush_r+0xc>
 8005cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cf6:	f7ff fb5b 	bl	80053b0 <__retarget_lock_release_recursive>
 8005cfa:	e7dd      	b.n	8005cb8 <_fflush_r+0xc>

08005cfc <fiprintf>:
 8005cfc:	b40e      	push	{r1, r2, r3}
 8005cfe:	b503      	push	{r0, r1, lr}
 8005d00:	4601      	mov	r1, r0
 8005d02:	ab03      	add	r3, sp, #12
 8005d04:	4805      	ldr	r0, [pc, #20]	@ (8005d1c <fiprintf+0x20>)
 8005d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d0a:	6800      	ldr	r0, [r0, #0]
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	f7ff fca3 	bl	8005658 <_vfiprintf_r>
 8005d12:	b002      	add	sp, #8
 8005d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d18:	b003      	add	sp, #12
 8005d1a:	4770      	bx	lr
 8005d1c:	20000028 	.word	0x20000028

08005d20 <__swhatbuf_r>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	460c      	mov	r4, r1
 8005d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d28:	4615      	mov	r5, r2
 8005d2a:	2900      	cmp	r1, #0
 8005d2c:	461e      	mov	r6, r3
 8005d2e:	b096      	sub	sp, #88	@ 0x58
 8005d30:	da0c      	bge.n	8005d4c <__swhatbuf_r+0x2c>
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	2100      	movs	r1, #0
 8005d36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d3a:	bf14      	ite	ne
 8005d3c:	2340      	movne	r3, #64	@ 0x40
 8005d3e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d42:	2000      	movs	r0, #0
 8005d44:	6031      	str	r1, [r6, #0]
 8005d46:	602b      	str	r3, [r5, #0]
 8005d48:	b016      	add	sp, #88	@ 0x58
 8005d4a:	bd70      	pop	{r4, r5, r6, pc}
 8005d4c:	466a      	mov	r2, sp
 8005d4e:	f000 f849 	bl	8005de4 <_fstat_r>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	dbed      	blt.n	8005d32 <__swhatbuf_r+0x12>
 8005d56:	9901      	ldr	r1, [sp, #4]
 8005d58:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d5c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d60:	4259      	negs	r1, r3
 8005d62:	4159      	adcs	r1, r3
 8005d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d68:	e7eb      	b.n	8005d42 <__swhatbuf_r+0x22>

08005d6a <__smakebuf_r>:
 8005d6a:	898b      	ldrh	r3, [r1, #12]
 8005d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d6e:	079d      	lsls	r5, r3, #30
 8005d70:	4606      	mov	r6, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	d507      	bpl.n	8005d86 <__smakebuf_r+0x1c>
 8005d76:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d7a:	6023      	str	r3, [r4, #0]
 8005d7c:	6123      	str	r3, [r4, #16]
 8005d7e:	2301      	movs	r3, #1
 8005d80:	6163      	str	r3, [r4, #20]
 8005d82:	b003      	add	sp, #12
 8005d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d86:	466a      	mov	r2, sp
 8005d88:	ab01      	add	r3, sp, #4
 8005d8a:	f7ff ffc9 	bl	8005d20 <__swhatbuf_r>
 8005d8e:	9f00      	ldr	r7, [sp, #0]
 8005d90:	4605      	mov	r5, r0
 8005d92:	4639      	mov	r1, r7
 8005d94:	4630      	mov	r0, r6
 8005d96:	f7ff fbab 	bl	80054f0 <_malloc_r>
 8005d9a:	b948      	cbnz	r0, 8005db0 <__smakebuf_r+0x46>
 8005d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da0:	059a      	lsls	r2, r3, #22
 8005da2:	d4ee      	bmi.n	8005d82 <__smakebuf_r+0x18>
 8005da4:	f023 0303 	bic.w	r3, r3, #3
 8005da8:	f043 0302 	orr.w	r3, r3, #2
 8005dac:	81a3      	strh	r3, [r4, #12]
 8005dae:	e7e2      	b.n	8005d76 <__smakebuf_r+0xc>
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dba:	81a3      	strh	r3, [r4, #12]
 8005dbc:	9b01      	ldr	r3, [sp, #4]
 8005dbe:	6020      	str	r0, [r4, #0]
 8005dc0:	b15b      	cbz	r3, 8005dda <__smakebuf_r+0x70>
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dc8:	f000 f81e 	bl	8005e08 <_isatty_r>
 8005dcc:	b128      	cbz	r0, 8005dda <__smakebuf_r+0x70>
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	f023 0303 	bic.w	r3, r3, #3
 8005dd4:	f043 0301 	orr.w	r3, r3, #1
 8005dd8:	81a3      	strh	r3, [r4, #12]
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	431d      	orrs	r5, r3
 8005dde:	81a5      	strh	r5, [r4, #12]
 8005de0:	e7cf      	b.n	8005d82 <__smakebuf_r+0x18>
	...

08005de4 <_fstat_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	2300      	movs	r3, #0
 8005de8:	4d06      	ldr	r5, [pc, #24]	@ (8005e04 <_fstat_r+0x20>)
 8005dea:	4604      	mov	r4, r0
 8005dec:	4608      	mov	r0, r1
 8005dee:	4611      	mov	r1, r2
 8005df0:	602b      	str	r3, [r5, #0]
 8005df2:	f7fb ff89 	bl	8001d08 <_fstat>
 8005df6:	1c43      	adds	r3, r0, #1
 8005df8:	d102      	bne.n	8005e00 <_fstat_r+0x1c>
 8005dfa:	682b      	ldr	r3, [r5, #0]
 8005dfc:	b103      	cbz	r3, 8005e00 <_fstat_r+0x1c>
 8005dfe:	6023      	str	r3, [r4, #0]
 8005e00:	bd38      	pop	{r3, r4, r5, pc}
 8005e02:	bf00      	nop
 8005e04:	20001a08 	.word	0x20001a08

08005e08 <_isatty_r>:
 8005e08:	b538      	push	{r3, r4, r5, lr}
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	4d05      	ldr	r5, [pc, #20]	@ (8005e24 <_isatty_r+0x1c>)
 8005e0e:	4604      	mov	r4, r0
 8005e10:	4608      	mov	r0, r1
 8005e12:	602b      	str	r3, [r5, #0]
 8005e14:	f7fb ff87 	bl	8001d26 <_isatty>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_isatty_r+0x1a>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_isatty_r+0x1a>
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	20001a08 	.word	0x20001a08

08005e28 <_sbrk_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	4d05      	ldr	r5, [pc, #20]	@ (8005e44 <_sbrk_r+0x1c>)
 8005e2e:	4604      	mov	r4, r0
 8005e30:	4608      	mov	r0, r1
 8005e32:	602b      	str	r3, [r5, #0]
 8005e34:	f7fb ff8e 	bl	8001d54 <_sbrk>
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	d102      	bne.n	8005e42 <_sbrk_r+0x1a>
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	b103      	cbz	r3, 8005e42 <_sbrk_r+0x1a>
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
 8005e44:	20001a08 	.word	0x20001a08

08005e48 <memchr>:
 8005e48:	4603      	mov	r3, r0
 8005e4a:	b510      	push	{r4, lr}
 8005e4c:	b2c9      	uxtb	r1, r1
 8005e4e:	4402      	add	r2, r0
 8005e50:	4293      	cmp	r3, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	d101      	bne.n	8005e5a <memchr+0x12>
 8005e56:	2000      	movs	r0, #0
 8005e58:	e003      	b.n	8005e62 <memchr+0x1a>
 8005e5a:	7804      	ldrb	r4, [r0, #0]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	428c      	cmp	r4, r1
 8005e60:	d1f6      	bne.n	8005e50 <memchr+0x8>
 8005e62:	bd10      	pop	{r4, pc}

08005e64 <abort>:
 8005e64:	2006      	movs	r0, #6
 8005e66:	b508      	push	{r3, lr}
 8005e68:	f000 f82c 	bl	8005ec4 <raise>
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	f7fb ff18 	bl	8001ca2 <_exit>

08005e72 <_raise_r>:
 8005e72:	291f      	cmp	r1, #31
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4605      	mov	r5, r0
 8005e78:	460c      	mov	r4, r1
 8005e7a:	d904      	bls.n	8005e86 <_raise_r+0x14>
 8005e7c:	2316      	movs	r3, #22
 8005e7e:	6003      	str	r3, [r0, #0]
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	bd38      	pop	{r3, r4, r5, pc}
 8005e86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005e88:	b112      	cbz	r2, 8005e90 <_raise_r+0x1e>
 8005e8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e8e:	b94b      	cbnz	r3, 8005ea4 <_raise_r+0x32>
 8005e90:	4628      	mov	r0, r5
 8005e92:	f000 f831 	bl	8005ef8 <_getpid_r>
 8005e96:	4622      	mov	r2, r4
 8005e98:	4601      	mov	r1, r0
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ea0:	f000 b818 	b.w	8005ed4 <_kill_r>
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d00a      	beq.n	8005ebe <_raise_r+0x4c>
 8005ea8:	1c59      	adds	r1, r3, #1
 8005eaa:	d103      	bne.n	8005eb4 <_raise_r+0x42>
 8005eac:	2316      	movs	r3, #22
 8005eae:	6003      	str	r3, [r0, #0]
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	e7e7      	b.n	8005e84 <_raise_r+0x12>
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005ebc:	4798      	blx	r3
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	e7e0      	b.n	8005e84 <_raise_r+0x12>
	...

08005ec4 <raise>:
 8005ec4:	4b02      	ldr	r3, [pc, #8]	@ (8005ed0 <raise+0xc>)
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	f7ff bfd2 	b.w	8005e72 <_raise_r>
 8005ece:	bf00      	nop
 8005ed0:	20000028 	.word	0x20000028

08005ed4 <_kill_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	4d06      	ldr	r5, [pc, #24]	@ (8005ef4 <_kill_r+0x20>)
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	602b      	str	r3, [r5, #0]
 8005ee2:	f7fb fece 	bl	8001c82 <_kill>
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	d102      	bne.n	8005ef0 <_kill_r+0x1c>
 8005eea:	682b      	ldr	r3, [r5, #0]
 8005eec:	b103      	cbz	r3, 8005ef0 <_kill_r+0x1c>
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	bd38      	pop	{r3, r4, r5, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20001a08 	.word	0x20001a08

08005ef8 <_getpid_r>:
 8005ef8:	f7fb bebc 	b.w	8001c74 <_getpid>

08005efc <_init>:
 8005efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efe:	bf00      	nop
 8005f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f02:	bc08      	pop	{r3}
 8005f04:	469e      	mov	lr, r3
 8005f06:	4770      	bx	lr

08005f08 <_fini>:
 8005f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0a:	bf00      	nop
 8005f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0e:	bc08      	pop	{r3}
 8005f10:	469e      	mov	lr, r3
 8005f12:	4770      	bx	lr
