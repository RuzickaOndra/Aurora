
MermaidControlUnit_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080060f8  080060f8  000070f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006350  08006350  0000808c  2**0
                  CONTENTS
  4 .ARM          00000000  08006350  08006350  0000808c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006350  08006350  0000808c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006350  08006350  00007350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006354  08006354  00007354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08006358  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b4  2000008c  080063e4  0000808c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a40  080063e4  00008a40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e964  00000000  00000000  000080b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250e  00000000  00000000  00016a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00018f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b94  00000000  00000000  00019df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196ea  00000000  00000000  0001a98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001128b  00000000  00000000  00034076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091fdd  00000000  00000000  00045301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d72de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048dc  00000000  00000000  000d7324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000dbc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	080060e0 	.word	0x080060e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	080060e0 	.word	0x080060e0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	f2ad 5d64 	subw	sp, sp, #1380	@ 0x564
 800064e:	f44f 67a9 	mov.w	r7, #1352	@ 0x548
 8000652:	446f      	add	r7, sp
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f001 fcd2 	bl	8001ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 fa00 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 fd0e 	bl	800107c <MX_GPIO_Init>
  MX_DMA_Init();
 8000660:	f000 fcd6 	bl	8001010 <MX_DMA_Init>
  MX_ADC1_Init();
 8000664:	f000 fa56 	bl	8000b14 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000668:	f000 fae2 	bl	8000c30 <MX_TIM2_Init>
  MX_TIM3_Init();
 800066c:	f000 fb76 	bl	8000d5c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000670:	f000 fc0c 	bl	8000e8c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000674:	f000 fca2 	bl	8000fbc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000678:	f000 fa8a 	bl	8000b90 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	printf("Initialization begin\r\n");
 800067c:	48b9      	ldr	r0, [pc, #740]	@ (8000964 <main+0x31c>)
 800067e:	f004 fe2f 	bl	80052e0 <puts>

	HAL_GPIO_WritePin(powerOn_GPIO_Port, powerOn_Pin, SET); // Power LDO Enable
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000688:	48b7      	ldr	r0, [pc, #732]	@ (8000968 <main+0x320>)
 800068a:	f002 fbcf 	bl	8002e2c <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start(&htim1); // IR Receiver timer start
 800068e:	48b7      	ldr	r0, [pc, #732]	@ (800096c <main+0x324>)
 8000690:	f003 f92c 	bl	80038ec <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim1, 0); // IR Receiver timer cnt set
 8000694:	4bb5      	ldr	r3, [pc, #724]	@ (800096c <main+0x324>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	@ 0x24

	WS28XX_Init(&string1, &htim2, 72, TIM_CHANNEL_3, 8);
 800069c:	2308      	movs	r3, #8
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2308      	movs	r3, #8
 80006a2:	2248      	movs	r2, #72	@ 0x48
 80006a4:	49b2      	ldr	r1, [pc, #712]	@ (8000970 <main+0x328>)
 80006a6:	48b3      	ldr	r0, [pc, #716]	@ (8000974 <main+0x32c>)
 80006a8:	f004 fb36 	bl	8004d18 <WS28XX_Init>
	WS28XX_Init(&string4, &htim4, 72, TIM_CHANNEL_2, 3);
 80006ac:	2303      	movs	r3, #3
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2304      	movs	r3, #4
 80006b2:	2248      	movs	r2, #72	@ 0x48
 80006b4:	49b0      	ldr	r1, [pc, #704]	@ (8000978 <main+0x330>)
 80006b6:	48b1      	ldr	r0, [pc, #708]	@ (800097c <main+0x334>)
 80006b8:	f004 fb2e 	bl	8004d18 <WS28XX_Init>
	WS28XX_Init(&string7, &htim2, 72, TIM_CHANNEL_1, 3);
 80006bc:	2303      	movs	r3, #3
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2248      	movs	r2, #72	@ 0x48
 80006c4:	49aa      	ldr	r1, [pc, #680]	@ (8000970 <main+0x328>)
 80006c6:	48ae      	ldr	r0, [pc, #696]	@ (8000980 <main+0x338>)
 80006c8:	f004 fb26 	bl	8004d18 <WS28XX_Init>
	WS28XX_Init(&string9, &htim3, 72, TIM_CHANNEL_3, 3);
 80006cc:	2303      	movs	r3, #3
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2308      	movs	r3, #8
 80006d2:	2248      	movs	r2, #72	@ 0x48
 80006d4:	49ab      	ldr	r1, [pc, #684]	@ (8000984 <main+0x33c>)
 80006d6:	48ac      	ldr	r0, [pc, #688]	@ (8000988 <main+0x340>)
 80006d8:	f004 fb1e 	bl	8004d18 <WS28XX_Init>

	uint32_t tmheartbeat = 0, tm = 0; // Timestamp variable
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
	bool heartbeat = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0); //heartbeat pin
 80006e8:	2200      	movs	r2, #0
 80006ea:	2110      	movs	r1, #16
 80006ec:	489e      	ldr	r0, [pc, #632]	@ (8000968 <main+0x320>)
 80006ee:	f002 fb9d 	bl	8002e2c <HAL_GPIO_WritePin>

	uint8_t ledsON = 0; //Some LED should be on - enable boost
 80006f2:	2300      	movs	r3, #0
 80006f4:	73bb      	strb	r3, [r7, #14]
	uint32_t tmboostON = 0; //timestamp for boost enabling
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
	bool boostONswitch = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	71fb      	strb	r3, [r7, #7]

	printf("Initialization complete\r\n");
 80006fe:	48a3      	ldr	r0, [pc, #652]	@ (800098c <main+0x344>)
 8000700:	f004 fdee 	bl	80052e0 <puts>

	WS28XX_SetPixel_RGBW_565(&string1, 0, COLOR_RGB565_BLUE, 50); //default init values
 8000704:	2332      	movs	r3, #50	@ 0x32
 8000706:	221f      	movs	r2, #31
 8000708:	2100      	movs	r1, #0
 800070a:	489a      	ldr	r0, [pc, #616]	@ (8000974 <main+0x32c>)
 800070c:	f004 fb9a 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&string1, 1, COLOR_RGB565_CRIMSON, 50);
 8000710:	2332      	movs	r3, #50	@ 0x32
 8000712:	f64d 02a7 	movw	r2, #55463	@ 0xd8a7
 8000716:	2101      	movs	r1, #1
 8000718:	4896      	ldr	r0, [pc, #600]	@ (8000974 <main+0x32c>)
 800071a:	f004 fb93 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&string1, 2, COLOR_RGB565_ORANGE, 50);
 800071e:	2332      	movs	r3, #50	@ 0x32
 8000720:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 8000724:	2102      	movs	r1, #2
 8000726:	4893      	ldr	r0, [pc, #588]	@ (8000974 <main+0x32c>)
 8000728:	f004 fb8c 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&string1, 7, COLOR_RGB565_ORANGE, 50);
 800072c:	2332      	movs	r3, #50	@ 0x32
 800072e:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 8000732:	2107      	movs	r1, #7
 8000734:	488f      	ldr	r0, [pc, #572]	@ (8000974 <main+0x32c>)
 8000736:	f004 fb85 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
	WS28XX_Update(&string1);
 800073a:	488e      	ldr	r0, [pc, #568]	@ (8000974 <main+0x32c>)
 800073c:	f004 fbf6 	bl	8004f2c <WS28XX_Update>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (tmheartbeat < HAL_GetTick()) { //heartbeat LED
 8000740:	f001 fcb4 	bl	80020ac <HAL_GetTick>
 8000744:	4602      	mov	r2, r0
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	4293      	cmp	r3, r2
 800074a:	d220      	bcs.n	800078e <main+0x146>
			if (heartbeat)
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d006      	beq.n	8000760 <main+0x118>
				tmheartbeat = HAL_GetTick() + 950;
 8000752:	f001 fcab 	bl	80020ac <HAL_GetTick>
 8000756:	4603      	mov	r3, r0
 8000758:	f203 33b6 	addw	r3, r3, #950	@ 0x3b6
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	e004      	b.n	800076a <main+0x122>
			else
				tmheartbeat = HAL_GetTick() + 50;
 8000760:	f001 fca4 	bl	80020ac <HAL_GetTick>
 8000764:	4603      	mov	r3, r0
 8000766:	3332      	adds	r3, #50	@ 0x32
 8000768:	617b      	str	r3, [r7, #20]

			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); //heartbeat LED
 800076a:	2110      	movs	r1, #16
 800076c:	487e      	ldr	r0, [pc, #504]	@ (8000968 <main+0x320>)
 800076e:	f002 fb75 	bl	8002e5c <HAL_GPIO_TogglePin>

			heartbeat = !heartbeat;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b00      	cmp	r3, #0
 8000776:	bf14      	ite	ne
 8000778:	2301      	movne	r3, #1
 800077a:	2300      	moveq	r3, #0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	f083 0301 	eor.w	r3, r3, #1
 8000782:	b2db      	uxtb	r3, r3
 8000784:	73fb      	strb	r3, [r7, #15]
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	73fb      	strb	r3, [r7, #15]
		}

		if (processIR == 1) { //Command received from IR decoding
 800078e:	4b80      	ldr	r3, [pc, #512]	@ (8000990 <main+0x348>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d06e      	beq.n	8000876 <main+0x22e>
			processIR = 0; //reset flag
 8000798:	4b7d      	ldr	r3, [pc, #500]	@ (8000990 <main+0x348>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]

			printf("Data: %X\r\n",(unsigned int)code); //debug terminal text
 800079e:	4b7d      	ldr	r3, [pc, #500]	@ (8000994 <main+0x34c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4619      	mov	r1, r3
 80007a4:	487c      	ldr	r0, [pc, #496]	@ (8000998 <main+0x350>)
 80007a6:	f004 fd33 	bl	8005210 <iprintf>

			switch (code) {
 80007aa:	4b7a      	ldr	r3, [pc, #488]	@ (8000994 <main+0x34c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a7b      	ldr	r2, [pc, #492]	@ (800099c <main+0x354>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d033      	beq.n	800081c <main+0x1d4>
 80007b4:	4a79      	ldr	r2, [pc, #484]	@ (800099c <main+0x354>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d858      	bhi.n	800086c <main+0x224>
 80007ba:	4a79      	ldr	r2, [pc, #484]	@ (80009a0 <main+0x358>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d039      	beq.n	8000834 <main+0x1ec>
 80007c0:	4a77      	ldr	r2, [pc, #476]	@ (80009a0 <main+0x358>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d852      	bhi.n	800086c <main+0x224>
 80007c6:	4a77      	ldr	r2, [pc, #476]	@ (80009a4 <main+0x35c>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d01b      	beq.n	8000804 <main+0x1bc>
 80007cc:	4a75      	ldr	r2, [pc, #468]	@ (80009a4 <main+0x35c>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d84c      	bhi.n	800086c <main+0x224>
 80007d2:	4a75      	ldr	r2, [pc, #468]	@ (80009a8 <main+0x360>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d033      	beq.n	8000840 <main+0x1f8>
 80007d8:	4a73      	ldr	r2, [pc, #460]	@ (80009a8 <main+0x360>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d846      	bhi.n	800086c <main+0x224>
 80007de:	4a73      	ldr	r2, [pc, #460]	@ (80009ac <main+0x364>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d033      	beq.n	800084c <main+0x204>
 80007e4:	4a71      	ldr	r2, [pc, #452]	@ (80009ac <main+0x364>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d840      	bhi.n	800086c <main+0x224>
 80007ea:	4a71      	ldr	r2, [pc, #452]	@ (80009b0 <main+0x368>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d033      	beq.n	8000858 <main+0x210>
 80007f0:	4a6f      	ldr	r2, [pc, #444]	@ (80009b0 <main+0x368>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d83a      	bhi.n	800086c <main+0x224>
 80007f6:	4a6f      	ldr	r2, [pc, #444]	@ (80009b4 <main+0x36c>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d015      	beq.n	8000828 <main+0x1e0>
 80007fc:	4a6e      	ldr	r2, [pc, #440]	@ (80009b8 <main+0x370>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d006      	beq.n	8000810 <main+0x1c8>
			case 0xFF50AF: // "OFF"
				printf("Power OFF\r\n");
				HAL_GPIO_WritePin(powerOn_GPIO_Port, powerOn_Pin, RESET); // Power LDO Disable, MCU suicide
				break;
			default:
				break;
 8000802:	e033      	b.n	800086c <main+0x224>
				animationCode = 1;
 8000804:	4b6d      	ldr	r3, [pc, #436]	@ (80009bc <main+0x374>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	73bb      	strb	r3, [r7, #14]
				break;
 800080e:	e02e      	b.n	800086e <main+0x226>
				animationCode = 2;
 8000810:	4b6a      	ldr	r3, [pc, #424]	@ (80009bc <main+0x374>)
 8000812:	2202      	movs	r2, #2
 8000814:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	73bb      	strb	r3, [r7, #14]
				break;
 800081a:	e028      	b.n	800086e <main+0x226>
				animationCode = 3;
 800081c:	4b67      	ldr	r3, [pc, #412]	@ (80009bc <main+0x374>)
 800081e:	2203      	movs	r2, #3
 8000820:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	73bb      	strb	r3, [r7, #14]
				break;
 8000826:	e022      	b.n	800086e <main+0x226>
				animationCode = 4;
 8000828:	4b64      	ldr	r3, [pc, #400]	@ (80009bc <main+0x374>)
 800082a:	2204      	movs	r2, #4
 800082c:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	73bb      	strb	r3, [r7, #14]
				break;
 8000832:	e01c      	b.n	800086e <main+0x226>
				animationCode = 5;
 8000834:	4b61      	ldr	r3, [pc, #388]	@ (80009bc <main+0x374>)
 8000836:	2205      	movs	r2, #5
 8000838:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	73bb      	strb	r3, [r7, #14]
				break;
 800083e:	e016      	b.n	800086e <main+0x226>
				animationCode = 6;
 8000840:	4b5e      	ldr	r3, [pc, #376]	@ (80009bc <main+0x374>)
 8000842:	2206      	movs	r2, #6
 8000844:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	73bb      	strb	r3, [r7, #14]
				break;
 800084a:	e010      	b.n	800086e <main+0x226>
				animationCode = 0;
 800084c:	4b5b      	ldr	r3, [pc, #364]	@ (80009bc <main+0x374>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
				ledsON = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	73bb      	strb	r3, [r7, #14]
				break;
 8000856:	e00a      	b.n	800086e <main+0x226>
				printf("Power OFF\r\n");
 8000858:	4859      	ldr	r0, [pc, #356]	@ (80009c0 <main+0x378>)
 800085a:	f004 fd41 	bl	80052e0 <puts>
				HAL_GPIO_WritePin(powerOn_GPIO_Port, powerOn_Pin, RESET); // Power LDO Disable, MCU suicide
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000864:	4840      	ldr	r0, [pc, #256]	@ (8000968 <main+0x320>)
 8000866:	f002 fae1 	bl	8002e2c <HAL_GPIO_WritePin>
				break;
 800086a:	e000      	b.n	800086e <main+0x226>
				break;
 800086c:	bf00      	nop
			}

			//TODO enable check
			outputControl(ledsON);
 800086e:	7bbb      	ldrb	r3, [r7, #14]
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fd2d 	bl	80012d0 <outputControl>
		}

		if (tm < HAL_GetTick()) { //routine for effects
 8000876:	f001 fc19 	bl	80020ac <HAL_GetTick>
 800087a:	4602      	mov	r2, r0
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	4293      	cmp	r3, r2
 8000880:	f080 80af 	bcs.w	80009e2 <main+0x39a>
			tm = HAL_GetTick() + 10;
 8000884:	f001 fc12 	bl	80020ac <HAL_GetTick>
 8000888:	4603      	mov	r3, r0
 800088a:	330a      	adds	r3, #10
 800088c:	613b      	str	r3, [r7, #16]

			switch (animationCode) {
 800088e:	4b4b      	ldr	r3, [pc, #300]	@ (80009bc <main+0x374>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b06      	cmp	r3, #6
 8000894:	f200 80a4 	bhi.w	80009e0 <main+0x398>
 8000898:	a201      	add	r2, pc, #4	@ (adr r2, 80008a0 <main+0x258>)
 800089a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089e:	bf00      	nop
 80008a0:	080008bd 	.word	0x080008bd
 80008a4:	080008d9 	.word	0x080008d9
 80008a8:	080008f5 	.word	0x080008f5
 80008ac:	08000911 	.word	0x08000911
 80008b0:	0800092d 	.word	0x0800092d
 80008b4:	08000949 	.word	0x08000949
 80008b8:	080009c5 	.word	0x080009c5
			case 0: // "0"
				turnAllOff(string1);
 80008bc:	4c2d      	ldr	r4, [pc, #180]	@ (8000974 <main+0x32c>)
 80008be:	4668      	mov	r0, sp
 80008c0:	f104 0310 	add.w	r3, r4, #16
 80008c4:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 80008c8:	4619      	mov	r1, r3
 80008ca:	f004 fe64 	bl	8005596 <memcpy>
 80008ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008d2:	f000 fd3c 	bl	800134e <turnAllOff>
				break;
 80008d6:	e084      	b.n	80009e2 <main+0x39a>
			case 1: // "1"
				setAllBlue(string1);
 80008d8:	4c26      	ldr	r4, [pc, #152]	@ (8000974 <main+0x32c>)
 80008da:	4668      	mov	r0, sp
 80008dc:	f104 0310 	add.w	r3, r4, #16
 80008e0:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 80008e4:	4619      	mov	r1, r3
 80008e6:	f004 fe56 	bl	8005596 <memcpy>
 80008ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008ee:	f000 fd09 	bl	8001304 <setAllBlue>
				break;
 80008f2:	e076      	b.n	80009e2 <main+0x39a>
			case 2: // "2"
				GlitteringWavesEffect(string1);
 80008f4:	4c1f      	ldr	r4, [pc, #124]	@ (8000974 <main+0x32c>)
 80008f6:	4668      	mov	r0, sp
 80008f8:	f104 0310 	add.w	r3, r4, #16
 80008fc:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 8000900:	4619      	mov	r1, r3
 8000902:	f004 fe48 	bl	8005596 <memcpy>
 8000906:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800090a:	f000 fd45 	bl	8001398 <GlitteringWavesEffect>
				break;
 800090e:	e068      	b.n	80009e2 <main+0x39a>
			case 3: // "3"
				EnchantedRippleEffect(string1);
 8000910:	4c18      	ldr	r4, [pc, #96]	@ (8000974 <main+0x32c>)
 8000912:	4668      	mov	r0, sp
 8000914:	f104 0310 	add.w	r3, r4, #16
 8000918:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 800091c:	4619      	mov	r1, r3
 800091e:	f004 fe3a 	bl	8005596 <memcpy>
 8000922:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000926:	f000 fd9d 	bl	8001464 <EnchantedRippleEffect>
				break;
 800092a:	e05a      	b.n	80009e2 <main+0x39a>
			case 4: // "4"
				TwinklingGlowEffect(string1);
 800092c:	4c11      	ldr	r4, [pc, #68]	@ (8000974 <main+0x32c>)
 800092e:	4668      	mov	r0, sp
 8000930:	f104 0310 	add.w	r3, r4, #16
 8000934:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 8000938:	4619      	mov	r1, r3
 800093a:	f004 fe2c 	bl	8005596 <memcpy>
 800093e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000942:	f000 fdf1 	bl	8001528 <TwinklingGlowEffect>
				break;
 8000946:	e04c      	b.n	80009e2 <main+0x39a>
			case 5: // "5"
				CarTurnSignalEffect(string1);
 8000948:	4c0a      	ldr	r4, [pc, #40]	@ (8000974 <main+0x32c>)
 800094a:	4668      	mov	r0, sp
 800094c:	f104 0310 	add.w	r3, r4, #16
 8000950:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 8000954:	4619      	mov	r1, r3
 8000956:	f004 fe1e 	bl	8005596 <memcpy>
 800095a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800095e:	f000 fe67 	bl	8001630 <CarTurnSignalEffect>
				break;
 8000962:	e03e      	b.n	80009e2 <main+0x39a>
 8000964:	080060f8 	.word	0x080060f8
 8000968:	40010c00 	.word	0x40010c00
 800096c:	200000d8 	.word	0x200000d8
 8000970:	20000120 	.word	0x20000120
 8000974:	20000360 	.word	0x20000360
 8000978:	200001b0 	.word	0x200001b0
 800097c:	20001368 	.word	0x20001368
 8000980:	200008b8 	.word	0x200008b8
 8000984:	20000168 	.word	0x20000168
 8000988:	20000e10 	.word	0x20000e10
 800098c:	08006110 	.word	0x08006110
 8000990:	2000035c 	.word	0x2000035c
 8000994:	20000358 	.word	0x20000358
 8000998:	0800612c 	.word	0x0800612c
 800099c:	00ffc837 	.word	0x00ffc837
 80009a0:	00ffa857 	.word	0x00ffa857
 80009a4:	00ff8877 	.word	0x00ff8877
 80009a8:	00ff6897 	.word	0x00ff6897
 80009ac:	00ff58a7 	.word	0x00ff58a7
 80009b0:	00ff50af 	.word	0x00ff50af
 80009b4:	00ff28d7 	.word	0x00ff28d7
 80009b8:	00ff48b7 	.word	0x00ff48b7
 80009bc:	2000035d 	.word	0x2000035d
 80009c0:	08006138 	.word	0x08006138
			case 6: // "6"
				TestMode(string1);
 80009c4:	4c23      	ldr	r4, [pc, #140]	@ (8000a54 <main+0x40c>)
 80009c6:	4668      	mov	r0, sp
 80009c8:	f104 0310 	add.w	r3, r4, #16
 80009cc:	f44f 62a9 	mov.w	r2, #1352	@ 0x548
 80009d0:	4619      	mov	r1, r3
 80009d2:	f004 fde0 	bl	8005596 <memcpy>
 80009d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009da:	f000 fe85 	bl	80016e8 <TestMode>
				break;
 80009de:	e000      	b.n	80009e2 <main+0x39a>
			default:
				break;
 80009e0:	bf00      	nop

			}
		}

		if (tmboostON < HAL_GetTick() && ledsON == 1) { //routine for waking up boost
 80009e2:	f001 fb63 	bl	80020ac <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4293      	cmp	r3, r2
 80009ec:	f4bf aea8 	bcs.w	8000740 <main+0xf8>
 80009f0:	7bbb      	ldrb	r3, [r7, #14]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	f47f aea4 	bne.w	8000740 <main+0xf8>
			if (boostONswitch == 0) { //100ms high pulse every 20s, if LEDs are running
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f083 0301 	eor.w	r3, r3, #1
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00b      	beq.n	8000a1c <main+0x3d4>
				tmboostON = HAL_GetTick() + 100;
 8000a04:	f001 fb52 	bl	80020ac <HAL_GetTick>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	3364      	adds	r3, #100	@ 0x64
 8000a0c:	60bb      	str	r3, [r7, #8]
				HAL_GPIO_WritePin(boostWkUp_GPIO_Port, boostWkUp_Pin,
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a14:	4810      	ldr	r0, [pc, #64]	@ (8000a58 <main+0x410>)
 8000a16:	f002 fa09 	bl	8002e2c <HAL_GPIO_WritePin>
 8000a1a:	e00c      	b.n	8000a36 <main+0x3ee>
						GPIO_PIN_SET);
			} else {
				tmboostON = HAL_GetTick() + 20000;
 8000a1c:	f001 fb46 	bl	80020ac <HAL_GetTick>
 8000a20:	4603      	mov	r3, r0
 8000a22:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8000a26:	3320      	adds	r3, #32
 8000a28:	60bb      	str	r3, [r7, #8]
				HAL_GPIO_WritePin(boostWkUp_GPIO_Port, boostWkUp_Pin,
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <main+0x410>)
 8000a32:	f002 f9fb 	bl	8002e2c <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
			}
			boostONswitch = !boostONswitch;
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bf14      	ite	ne
 8000a3c:	2301      	movne	r3, #1
 8000a3e:	2300      	moveq	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	f083 0301 	eor.w	r3, r3, #1
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	71fb      	strb	r3, [r7, #7]
		if (tmheartbeat < HAL_GetTick()) { //heartbeat LED
 8000a52:	e675      	b.n	8000740 <main+0xf8>
 8000a54:	20000360 	.word	0x20000360
 8000a58:	40010c00 	.word	0x40010c00

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	@ 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a66:	2228      	movs	r2, #40	@ 0x28
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f004 fd18 	bl	80054a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aa8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f002 fa04 	bl	8002ec0 <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000abe:	f000 fee3 	bl	8001888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ace:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2102      	movs	r1, #2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f002 fc70 	bl	80033c4 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000aea:	f000 fecd 	bl	8001888 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000aee:	2302      	movs	r3, #2
 8000af0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000af6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fdf0 	bl	80036e0 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b06:	f000 febf 	bl	8001888 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	@ 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b24:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <MX_ADC1_Init+0x74>)
 8000b26:	4a19      	ldr	r2, [pc, #100]	@ (8000b8c <MX_ADC1_Init+0x78>)
 8000b28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_ADC1_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <MX_ADC1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <MX_ADC1_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <MX_ADC1_Init+0x74>)
 8000b3e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b44:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <MX_ADC1_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <MX_ADC1_Init+0x74>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <MX_ADC1_Init+0x74>)
 8000b52:	f001 fad9 	bl	8002108 <HAL_ADC_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b5c:	f000 fe94 	bl	8001888 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b60:	2304      	movs	r3, #4
 8000b62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b64:	2301      	movs	r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_ADC1_Init+0x74>)
 8000b72:	f001 fba1 	bl	80022b8 <HAL_ADC_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b7c:	f000 fe84 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000a8 	.word	0x200000a8
 8000b8c:	40012400 	.word	0x40012400

08000b90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <MX_TIM1_Init+0x98>)
 8000bae:	4a1f      	ldr	r2, [pc, #124]	@ (8000c2c <MX_TIM1_Init+0x9c>)
 8000bb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <MX_TIM1_Init+0x98>)
 8000bb4:	2247      	movs	r2, #71	@ 0x47
 8000bb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <MX_TIM1_Init+0x98>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <MX_TIM1_Init+0x98>)
 8000bc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <MX_TIM1_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_TIM1_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <MX_TIM1_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bd8:	4813      	ldr	r0, [pc, #76]	@ (8000c28 <MX_TIM1_Init+0x98>)
 8000bda:	f002 fe37 	bl	800384c <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000be4:	f000 fe50 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <MX_TIM1_Init+0x98>)
 8000bf6:	f003 f97f 	bl	8003ef8 <HAL_TIM_ConfigClockSource>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c00:	f000 fe42 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_TIM1_Init+0x98>)
 8000c12:	f003 fdd5 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c1c:	f000 fe34 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000d8 	.word	0x200000d8
 8000c2c:	40012c00 	.word	0x40012c00

08000c30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08e      	sub	sp, #56	@ 0x38
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	f107 0320 	add.w	r3, r7, #32
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	615a      	str	r2, [r3, #20]
 8000c5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c60:	4b3d      	ldr	r3, [pc, #244]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000c62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c68:	4b3b      	ldr	r3, [pc, #236]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c74:	4b38      	ldr	r3, [pc, #224]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000c76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b36      	ldr	r3, [pc, #216]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b35      	ldr	r3, [pc, #212]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c88:	4833      	ldr	r0, [pc, #204]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000c8a:	f002 fddf 	bl	800384c <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c94:	f000 fdf8 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	482c      	ldr	r0, [pc, #176]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000ca6:	f003 f927 	bl	8003ef8 <HAL_TIM_ConfigClockSource>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000cb0:	f000 fdea 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cb4:	4828      	ldr	r0, [pc, #160]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000cb6:	f002 fe63 	bl	8003980 <HAL_TIM_PWM_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000cc0:	f000 fde2 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4821      	ldr	r0, [pc, #132]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000cd4:	f003 fd74 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cde:	f000 fdd3 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce2:	2360      	movs	r3, #96	@ 0x60
 8000ce4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4817      	ldr	r0, [pc, #92]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000cfa:	f003 f83b 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d04:	f000 fdc0 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4812      	ldr	r0, [pc, #72]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000d10:	f003 f830 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000d1a:	f000 fdb5 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2208      	movs	r2, #8
 8000d22:	4619      	mov	r1, r3
 8000d24:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000d26:	f003 f825 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000d30:	f000 fdaa 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	220c      	movs	r2, #12
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4807      	ldr	r0, [pc, #28]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000d3c:	f003 f81a 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000d46:	f000 fd9f 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d4a:	4803      	ldr	r0, [pc, #12]	@ (8000d58 <MX_TIM2_Init+0x128>)
 8000d4c:	f000 ff14 	bl	8001b78 <HAL_TIM_MspPostInit>

}
 8000d50:	bf00      	nop
 8000d52:	3738      	adds	r7, #56	@ 0x38
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000120 	.word	0x20000120

08000d5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08e      	sub	sp, #56	@ 0x38
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	f107 0320 	add.w	r3, r7, #32
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	615a      	str	r2, [r3, #20]
 8000d8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000d8e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e88 <MX_TIM3_Init+0x12c>)
 8000d90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d92:	4b3c      	ldr	r3, [pc, #240]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b3a      	ldr	r3, [pc, #232]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d9e:	4b39      	ldr	r3, [pc, #228]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000da0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da6:	4b37      	ldr	r3, [pc, #220]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dac:	4b35      	ldr	r3, [pc, #212]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000db2:	4834      	ldr	r0, [pc, #208]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000db4:	f002 fd4a 	bl	800384c <HAL_TIM_Base_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000dbe:	f000 fd63 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	482d      	ldr	r0, [pc, #180]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000dd0:	f003 f892 	bl	8003ef8 <HAL_TIM_ConfigClockSource>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000dda:	f000 fd55 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dde:	4829      	ldr	r0, [pc, #164]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000de0:	f002 fdce 	bl	8003980 <HAL_TIM_PWM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000dea:	f000 fd4d 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000df6:	f107 0320 	add.w	r3, r7, #32
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4821      	ldr	r0, [pc, #132]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000dfe:	f003 fcdf 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e08:	f000 fd3e 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0c:	2360      	movs	r3, #96	@ 0x60
 8000e0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4619      	mov	r1, r3
 8000e22:	4818      	ldr	r0, [pc, #96]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000e24:	f002 ffa6 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e2e:	f000 fd2b 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2204      	movs	r2, #4
 8000e36:	4619      	mov	r1, r3
 8000e38:	4812      	ldr	r0, [pc, #72]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000e3a:	f002 ff9b 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000e44:	f000 fd20 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480d      	ldr	r0, [pc, #52]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000e50:	f002 ff90 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000e5a:	f000 fd15 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	220c      	movs	r2, #12
 8000e62:	4619      	mov	r1, r3
 8000e64:	4807      	ldr	r0, [pc, #28]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000e66:	f002 ff85 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000e70:	f000 fd0a 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e74:	4803      	ldr	r0, [pc, #12]	@ (8000e84 <MX_TIM3_Init+0x128>)
 8000e76:	f000 fe7f 	bl	8001b78 <HAL_TIM_MspPostInit>

}
 8000e7a:	bf00      	nop
 8000e7c:	3738      	adds	r7, #56	@ 0x38
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000168 	.word	0x20000168
 8000e88:	40000400 	.word	0x40000400

08000e8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08e      	sub	sp, #56	@ 0x38
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	f107 0320 	add.w	r3, r7, #32
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]
 8000eba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8000fb8 <MX_TIM4_Init+0x12c>)
 8000ec0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ece:	4b39      	ldr	r3, [pc, #228]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ed4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed6:	4b37      	ldr	r3, [pc, #220]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000edc:	4b35      	ldr	r3, [pc, #212]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ee2:	4834      	ldr	r0, [pc, #208]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000ee4:	f002 fcb2 	bl	800384c <HAL_TIM_Base_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000eee:	f000 fccb 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ef8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000efc:	4619      	mov	r1, r3
 8000efe:	482d      	ldr	r0, [pc, #180]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000f00:	f002 fffa 	bl	8003ef8 <HAL_TIM_ConfigClockSource>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000f0a:	f000 fcbd 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f0e:	4829      	ldr	r0, [pc, #164]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000f10:	f002 fd36 	bl	8003980 <HAL_TIM_PWM_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f1a:	f000 fcb5 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4821      	ldr	r0, [pc, #132]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000f2e:	f003 fc47 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f38:	f000 fca6 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3c:	2360      	movs	r3, #96	@ 0x60
 8000f3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	4818      	ldr	r0, [pc, #96]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000f54:	f002 ff0e 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000f5e:	f000 fc93 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2204      	movs	r2, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	4812      	ldr	r0, [pc, #72]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000f6a:	f002 ff03 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000f74:	f000 fc88 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000f80:	f002 fef8 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000f8a:	f000 fc7d 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	220c      	movs	r2, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	4807      	ldr	r0, [pc, #28]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000f96:	f002 feed 	bl	8003d74 <HAL_TIM_PWM_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000fa0:	f000 fc72 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fa4:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <MX_TIM4_Init+0x128>)
 8000fa6:	f000 fde7 	bl	8001b78 <HAL_TIM_MspPostInit>

}
 8000faa:	bf00      	nop
 8000fac:	3738      	adds	r7, #56	@ 0x38
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200001b0 	.word	0x200001b0
 8000fb8:	40000800 	.word	0x40000800

08000fbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	@ (800100c <MX_USART1_UART_Init+0x50>)
 8000fc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fec:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <MX_USART1_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	@ (8001008 <MX_USART1_UART_Init+0x4c>)
 8000ff4:	f003 fc42 	bl	800487c <HAL_UART_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ffe:	f000 fc43 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000308 	.word	0x20000308
 800100c:	40013800 	.word	0x40013800

08001010 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001016:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <MX_DMA_Init+0x68>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a17      	ldr	r2, [pc, #92]	@ (8001078 <MX_DMA_Init+0x68>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <MX_DMA_Init+0x68>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	200b      	movs	r0, #11
 8001034:	f001 fb51 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001038:	200b      	movs	r0, #11
 800103a:	f001 fb6a 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	200c      	movs	r0, #12
 8001044:	f001 fb49 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001048:	200c      	movs	r0, #12
 800104a:	f001 fb62 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	200e      	movs	r0, #14
 8001054:	f001 fb41 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001058:	200e      	movs	r0, #14
 800105a:	f001 fb5a 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200f      	movs	r0, #15
 8001064:	f001 fb39 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001068:	200f      	movs	r0, #15
 800106a:	f001 fb52 	bl	8002712 <HAL_NVIC_EnableIRQ>

}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	4b3f      	ldr	r3, [pc, #252]	@ (8001190 <MX_GPIO_Init+0x114>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a3e      	ldr	r2, [pc, #248]	@ (8001190 <MX_GPIO_Init+0x114>)
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b3c      	ldr	r3, [pc, #240]	@ (8001190 <MX_GPIO_Init+0x114>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a8:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <MX_GPIO_Init+0x114>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a38      	ldr	r2, [pc, #224]	@ (8001190 <MX_GPIO_Init+0x114>)
 80010ae:	f043 0320 	orr.w	r3, r3, #32
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <MX_GPIO_Init+0x114>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0320 	and.w	r3, r3, #32
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <MX_GPIO_Init+0x114>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a32      	ldr	r2, [pc, #200]	@ (8001190 <MX_GPIO_Init+0x114>)
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <MX_GPIO_Init+0x114>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <MX_GPIO_Init+0x114>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a2c      	ldr	r2, [pc, #176]	@ (8001190 <MX_GPIO_Init+0x114>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <MX_GPIO_Init+0x114>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010f6:	4827      	ldr	r0, [pc, #156]	@ (8001194 <MX_GPIO_Init+0x118>)
 80010f8:	f001 fe98 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, boostWkUp_Pin|powerOn_Pin|LED2_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f243 0130 	movw	r1, #12336	@ 0x3030
 8001102:	4825      	ldr	r0, [pc, #148]	@ (8001198 <MX_GPIO_Init+0x11c>)
 8001104:	f001 fe92 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001108:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2302      	movs	r3, #2
 8001118:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4619      	mov	r1, r3
 8001120:	481c      	ldr	r0, [pc, #112]	@ (8001194 <MX_GPIO_Init+0x118>)
 8001122:	f001 fcff 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001126:	2302      	movs	r3, #2
 8001128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <MX_GPIO_Init+0x120>)
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4619      	mov	r1, r3
 8001138:	4819      	ldr	r0, [pc, #100]	@ (80011a0 <MX_GPIO_Init+0x124>)
 800113a:	f001 fcf3 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRQ_Boost_Pin SCL_Boost_Pin SDA_Boost_Pin */
  GPIO_InitStruct.Pin = IRQ_Boost_Pin|SCL_Boost_Pin|SDA_Boost_Pin;
 800113e:	f640 4304 	movw	r3, #3076	@ 0xc04
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	4811      	ldr	r0, [pc, #68]	@ (8001198 <MX_GPIO_Init+0x11c>)
 8001154:	f001 fce6 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : boostWkUp_Pin powerOn_Pin LED2_Pin EN_5V_Pin */
  GPIO_InitStruct.Pin = boostWkUp_Pin|powerOn_Pin|LED2_Pin|EN_5V_Pin;
 8001158:	f243 0330 	movw	r3, #12336	@ 0x3030
 800115c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2302      	movs	r3, #2
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4619      	mov	r1, r3
 8001170:	4809      	ldr	r0, [pc, #36]	@ (8001198 <MX_GPIO_Init+0x11c>)
 8001172:	f001 fcd7 	bl	8002b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2007      	movs	r0, #7
 800117c:	f001 faad 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001180:	2007      	movs	r0, #7
 8001182:	f001 fac6 	bl	8002712 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001186:	bf00      	nop
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	40011000 	.word	0x40011000
 8001198:	40010c00 	.word	0x40010c00
 800119c:	10210000 	.word	0x10210000
 80011a0:	40010800 	.word	0x40010800

080011a4 <_write>:

/* USER CODE BEGIN 4 */
/* UART PRINTF MAP */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	4804      	ldr	r0, [pc, #16]	@ (80011cc <_write+0x28>)
 80011bc:	f003 fbae 	bl	800491c <HAL_UART_Transmit>
	return len;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000308 	.word	0x20000308

080011d0 <HAL_GPIO_EXTI_Callback>:
//HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	return ch;
}

/* IR TIMER AND DECODING */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_1) {
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d163      	bne.n	80012a8 <HAL_GPIO_EXTI_Callback+0xd8>
		if (__HAL_TIM_GET_COUNTER(&htim1) > 8000) {
 80011e0:	4b34      	ldr	r3, [pc, #208]	@ (80012b4 <HAL_GPIO_EXTI_Callback+0xe4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e6:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80011ea:	d906      	bls.n	80011fa <HAL_GPIO_EXTI_Callback+0x2a>
			tempCode = 0;
 80011ec:	4b32      	ldr	r3, [pc, #200]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0xe8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
			bitIndex = 0;
 80011f2:	4b32      	ldr	r3, [pc, #200]	@ (80012bc <HAL_GPIO_EXTI_Callback+0xec>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	e031      	b.n	800125e <HAL_GPIO_EXTI_Callback+0x8e>
		} else if (__HAL_TIM_GET_COUNTER(&htim1) > 1700) {
 80011fa:	4b2e      	ldr	r3, [pc, #184]	@ (80012b4 <HAL_GPIO_EXTI_Callback+0xe4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001200:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001204:	4293      	cmp	r3, r2
 8001206:	d912      	bls.n	800122e <HAL_GPIO_EXTI_Callback+0x5e>
			tempCode |= (1UL << (31 - bitIndex));   // write 1
 8001208:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <HAL_GPIO_EXTI_Callback+0xec>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001212:	fa23 f202 	lsr.w	r2, r3, r2
 8001216:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4313      	orrs	r3, r2
 800121c:	4a26      	ldr	r2, [pc, #152]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0xe8>)
 800121e:	6013      	str	r3, [r2, #0]
			bitIndex++;
 8001220:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <HAL_GPIO_EXTI_Callback+0xec>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b24      	ldr	r3, [pc, #144]	@ (80012bc <HAL_GPIO_EXTI_Callback+0xec>)
 800122a:	701a      	strb	r2, [r3, #0]
 800122c:	e017      	b.n	800125e <HAL_GPIO_EXTI_Callback+0x8e>
		} else if (__HAL_TIM_GET_COUNTER(&htim1) > 1000) {
 800122e:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001234:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001238:	d911      	bls.n	800125e <HAL_GPIO_EXTI_Callback+0x8e>
			tempCode &= ~(1UL << (31 - bitIndex));  // write 0
 800123a:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <HAL_GPIO_EXTI_Callback+0xec>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001244:	40d3      	lsrs	r3, r2
 8001246:	43da      	mvns	r2, r3
 8001248:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0xe8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4013      	ands	r3, r2
 800124e:	4a1a      	ldr	r2, [pc, #104]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001250:	6013      	str	r3, [r2, #0]
			bitIndex++;
 8001252:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <HAL_GPIO_EXTI_Callback+0xec>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <HAL_GPIO_EXTI_Callback+0xec>)
 800125c:	701a      	strb	r2, [r3, #0]
		}
		//printf("Data: %d\r\n", __HAL_TIM_GET_COUNTER(&htim1)); //debug terminal text

		if (bitIndex == 32) {
 800125e:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <HAL_GPIO_EXTI_Callback+0xec>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b20      	cmp	r3, #32
 8001264:	d11c      	bne.n	80012a0 <HAL_GPIO_EXTI_Callback+0xd0>
			cmdli = ~tempCode; // Logical inverted last 8 bits
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001272:	701a      	strb	r2, [r3, #0]
			cmd = tempCode >> 8; // Second last 8 bits
 8001274:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <HAL_GPIO_EXTI_Callback+0xf4>)
 800127e:	701a      	strb	r2, [r3, #0]
			if (cmdli == cmd) // Check for errors
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d106      	bne.n	800129a <HAL_GPIO_EXTI_Callback+0xca>
					{
				code = tempCode; // If no bit errors
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0xe8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0d      	ldr	r2, [pc, #52]	@ (80012c8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001292:	6013      	str	r3, [r2, #0]
				// Do your main work HERE
				//printf("Data: %X\r\n",code);
				processIR = 1;
 8001294:	4b0d      	ldr	r3, [pc, #52]	@ (80012cc <HAL_GPIO_EXTI_Callback+0xfc>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
			}
			bitIndex = 0;
 800129a:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <HAL_GPIO_EXTI_Callback+0xec>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
		}
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <HAL_GPIO_EXTI_Callback+0xe4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	200000d8 	.word	0x200000d8
 80012b8:	20000350 	.word	0x20000350
 80012bc:	20000354 	.word	0x20000354
 80012c0:	20000356 	.word	0x20000356
 80012c4:	20000355 	.word	0x20000355
 80012c8:	20000358 	.word	0x20000358
 80012cc:	2000035c 	.word	0x2000035c

080012d0 <outputControl>:

/* OUTPUT ENABLE CONTROL */
void outputControl(uint8_t en){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	if(en == 1)
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d105      	bne.n	80012ec <outputControl+0x1c>
		HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	2120      	movs	r1, #32
 80012e4:	4806      	ldr	r0, [pc, #24]	@ (8001300 <outputControl+0x30>)
 80012e6:	f001 fda1 	bl	8002e2c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, RESET);
}
 80012ea:	e004      	b.n	80012f6 <outputControl+0x26>
		HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2120      	movs	r1, #32
 80012f0:	4803      	ldr	r0, [pc, #12]	@ (8001300 <outputControl+0x30>)
 80012f2:	f001 fd9b 	bl	8002e2c <HAL_GPIO_WritePin>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40010c00 	.word	0x40010c00

08001304 <setAllBlue>:

/* LED EFFECTS */

void setAllBlue(WS28XX_HandleTypeDef ws) {
 8001304:	b084      	sub	sp, #16
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	f107 0c10 	add.w	ip, r7, #16
 8001310:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i<8; i++){
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	e00b      	b.n	8001332 <setAllBlue+0x2e>
	WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_CYAN, 100);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	b299      	uxth	r1, r3
 800131e:	2364      	movs	r3, #100	@ 0x64
 8001320:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001324:	f107 0010 	add.w	r0, r7, #16
 8001328:	f003 fd8c 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
	for(int i = 0; i<8; i++){
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3301      	adds	r3, #1
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b07      	cmp	r3, #7
 8001336:	ddf0      	ble.n	800131a <setAllBlue+0x16>
	}

	WS28XX_Update(&ws);
 8001338:	f107 0010 	add.w	r0, r7, #16
 800133c:	f003 fdf6 	bl	8004f2c <WS28XX_Update>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800134a:	b004      	add	sp, #16
 800134c:	4770      	bx	lr

0800134e <turnAllOff>:

void turnAllOff(WS28XX_HandleTypeDef ws) {
 800134e:	b084      	sub	sp, #16
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	f107 0c10 	add.w	ip, r7, #16
 800135a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int i = 0; i<8; i++){
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	e00a      	b.n	800137a <turnAllOff+0x2c>
	WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB888_BLACK, 100);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	b299      	uxth	r1, r3
 8001368:	2364      	movs	r3, #100	@ 0x64
 800136a:	2200      	movs	r2, #0
 800136c:	f107 0010 	add.w	r0, r7, #16
 8001370:	f003 fd68 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
	for(int i = 0; i<8; i++){
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3301      	adds	r3, #1
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b07      	cmp	r3, #7
 800137e:	ddf1      	ble.n	8001364 <turnAllOff+0x16>
	}
	WS28XX_Update(&ws);
 8001380:	f107 0010 	add.w	r0, r7, #16
 8001384:	f003 fdd2 	bl	8004f2c <WS28XX_Update>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001392:	b004      	add	sp, #16
 8001394:	4770      	bx	lr
	...

08001398 <GlitteringWavesEffect>:

void GlitteringWavesEffect(WS28XX_HandleTypeDef ws) {
 8001398:	b084      	sub	sp, #16
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	f107 0c10 	add.w	ip, r7, #16
 80013a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 static uint32_t next_update = 0;
	    static uint8_t brightness[8] = {100, 120, 140, 160, 180, 200, 220, 240}; // Initial brightness
	    static int8_t delta[8] = {10, -15, 20, -10, 15, -20, 10, -5}; // Different rates for each LED

	    if (HAL_GetTick() >= next_update) {
 80013a8:	f000 fe80 	bl	80020ac <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001458 <GlitteringWavesEffect+0xc0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d349      	bcc.n	800144a <GlitteringWavesEffect+0xb2>
	        next_update = HAL_GetTick() + 5; // 5ms periodic update
 80013b6:	f000 fe79 	bl	80020ac <HAL_GetTick>
 80013ba:	4603      	mov	r3, r0
 80013bc:	3305      	adds	r3, #5
 80013be:	4a26      	ldr	r2, [pc, #152]	@ (8001458 <GlitteringWavesEffect+0xc0>)
 80013c0:	6013      	str	r3, [r2, #0]

	        for (int i = 0; i < 8; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	e039      	b.n	800143c <GlitteringWavesEffect+0xa4>
	            brightness[i] += delta[i];
 80013c8:	4a24      	ldr	r2, [pc, #144]	@ (800145c <GlitteringWavesEffect+0xc4>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	4923      	ldr	r1, [pc, #140]	@ (8001460 <GlitteringWavesEffect+0xc8>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	440b      	add	r3, r1
 80013d6:	f993 3000 	ldrsb.w	r3, [r3]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4413      	add	r3, r2
 80013de:	b2d9      	uxtb	r1, r3
 80013e0:	4a1e      	ldr	r2, [pc, #120]	@ (800145c <GlitteringWavesEffect+0xc4>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	460a      	mov	r2, r1
 80013e8:	701a      	strb	r2, [r3, #0]
	            if (brightness[i] >= 255 || brightness[i] <= 100) {
 80013ea:	4a1c      	ldr	r2, [pc, #112]	@ (800145c <GlitteringWavesEffect+0xc4>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2bff      	cmp	r3, #255	@ 0xff
 80013f4:	d005      	beq.n	8001402 <GlitteringWavesEffect+0x6a>
 80013f6:	4a19      	ldr	r2, [pc, #100]	@ (800145c <GlitteringWavesEffect+0xc4>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b64      	cmp	r3, #100	@ 0x64
 8001400:	d80d      	bhi.n	800141e <GlitteringWavesEffect+0x86>
	                delta[i] = -delta[i]; // Reverse direction at limits
 8001402:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <GlitteringWavesEffect+0xc8>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	f993 3000 	ldrsb.w	r3, [r3]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	425b      	negs	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	b259      	sxtb	r1, r3
 8001414:	4a12      	ldr	r2, [pc, #72]	@ (8001460 <GlitteringWavesEffect+0xc8>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	460a      	mov	r2, r1
 800141c:	701a      	strb	r2, [r3, #0]
	            }
	            WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_CYAN, brightness[i]);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	b299      	uxth	r1, r3
 8001422:	4a0e      	ldr	r2, [pc, #56]	@ (800145c <GlitteringWavesEffect+0xc4>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800142e:	f107 0010 	add.w	r0, r7, #16
 8001432:	f003 fd07 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
	        for (int i = 0; i < 8; i++) {
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3301      	adds	r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b07      	cmp	r3, #7
 8001440:	ddc2      	ble.n	80013c8 <GlitteringWavesEffect+0x30>
	        }
		WS28XX_Update(&ws);
 8001442:	f107 0010 	add.w	r0, r7, #16
 8001446:	f003 fd71 	bl	8004f2c <WS28XX_Update>
	}
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001454:	b004      	add	sp, #16
 8001456:	4770      	bx	lr
 8001458:	200018c0 	.word	0x200018c0
 800145c:	20000000 	.word	0x20000000
 8001460:	20000008 	.word	0x20000008

08001464 <EnchantedRippleEffect>:
void EnchantedRippleEffect(WS28XX_HandleTypeDef ws) {
 8001464:	b084      	sub	sp, #16
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	f107 0c10 	add.w	ip, r7, #16
 8001470:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	static uint32_t next_update = 0;
	    static uint8_t brightness = 0;
	    static int8_t direction = 1; // 1 for increasing, -1 for decreasing

	    if (HAL_GetTick() >= next_update) {
 8001474:	f000 fe1a 	bl	80020ac <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	4b28      	ldr	r3, [pc, #160]	@ (800151c <EnchantedRippleEffect+0xb8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d345      	bcc.n	800150e <EnchantedRippleEffect+0xaa>
	        next_update = HAL_GetTick() + 5; // 5ms periodic update
 8001482:	f000 fe13 	bl	80020ac <HAL_GetTick>
 8001486:	4603      	mov	r3, r0
 8001488:	3305      	adds	r3, #5
 800148a:	4a24      	ldr	r2, [pc, #144]	@ (800151c <EnchantedRippleEffect+0xb8>)
 800148c:	6013      	str	r3, [r2, #0]

	        brightness += 5 * direction;
 800148e:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <EnchantedRippleEffect+0xbc>)
 8001490:	f993 3000 	ldrsb.w	r3, [r3]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	4413      	add	r3, r2
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <EnchantedRippleEffect+0xc0>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <EnchantedRippleEffect+0xc0>)
 80014a8:	701a      	strb	r2, [r3, #0]
	        if (brightness >= 255 || brightness <= 0) {
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <EnchantedRippleEffect+0xc0>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2bff      	cmp	r3, #255	@ 0xff
 80014b0:	d003      	beq.n	80014ba <EnchantedRippleEffect+0x56>
 80014b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <EnchantedRippleEffect+0xc0>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d108      	bne.n	80014cc <EnchantedRippleEffect+0x68>
	            direction = -direction; // Reverse at boundaries
 80014ba:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <EnchantedRippleEffect+0xbc>)
 80014bc:	f993 3000 	ldrsb.w	r3, [r3]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	425b      	negs	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <EnchantedRippleEffect+0xbc>)
 80014ca:	701a      	strb	r2, [r3, #0]
	        }

	        for (int i = 0; i < 8; i++) {
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	e016      	b.n	8001500 <EnchantedRippleEffect+0x9c>
	            uint8_t adjusted_brightness = (brightness + (i * 32)) % 256; // Creates a wave effect
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <EnchantedRippleEffect+0xc0>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	015b      	lsls	r3, r3, #5
 80014dc:	4413      	add	r3, r2
 80014de:	425a      	negs	r2, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	bf58      	it	pl
 80014e6:	4253      	negpl	r3, r2
 80014e8:	70fb      	strb	r3, [r7, #3]
	            WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_BLUE, adjusted_brightness);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	b299      	uxth	r1, r3
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	221f      	movs	r2, #31
 80014f2:	f107 0010 	add.w	r0, r7, #16
 80014f6:	f003 fca5 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
	        for (int i = 0; i < 8; i++) {
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3301      	adds	r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b07      	cmp	r3, #7
 8001504:	dde5      	ble.n	80014d2 <EnchantedRippleEffect+0x6e>
	        }
		WS28XX_Update(&ws);
 8001506:	f107 0010 	add.w	r0, r7, #16
 800150a:	f003 fd0f 	bl	8004f2c <WS28XX_Update>

	}
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001518:	b004      	add	sp, #16
 800151a:	4770      	bx	lr
 800151c:	200018c4 	.word	0x200018c4
 8001520:	20000010 	.word	0x20000010
 8001524:	200018c8 	.word	0x200018c8

08001528 <TwinklingGlowEffect>:
void TwinklingGlowEffect(WS28XX_HandleTypeDef ws) {
 8001528:	b084      	sub	sp, #16
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	f107 0c10 	add.w	ip, r7, #16
 8001534:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 static uint32_t next_update = 0;
	    static uint8_t brightness[8] = {50, 100, 150, 200, 120, 180, 60, 90}; // Initial brightness
	    static int8_t delta[8] = {5, -3, 4, -6, 7, -2, 3, -4}; // Different speed changes

	    if (HAL_GetTick() >= next_update) {
 8001538:	f000 fdb8 	bl	80020ac <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	4b38      	ldr	r3, [pc, #224]	@ (8001620 <TwinklingGlowEffect+0xf8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d365      	bcc.n	8001612 <TwinklingGlowEffect+0xea>
	        next_update = HAL_GetTick() + 5; // 5ms periodic update
 8001546:	f000 fdb1 	bl	80020ac <HAL_GetTick>
 800154a:	4603      	mov	r3, r0
 800154c:	3305      	adds	r3, #5
 800154e:	4a34      	ldr	r2, [pc, #208]	@ (8001620 <TwinklingGlowEffect+0xf8>)
 8001550:	6013      	str	r3, [r2, #0]

	        for (int i = 0; i < 8; i++) {
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	e055      	b.n	8001604 <TwinklingGlowEffect+0xdc>
	            brightness[i] += delta[i];
 8001558:	4a32      	ldr	r2, [pc, #200]	@ (8001624 <TwinklingGlowEffect+0xfc>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	781a      	ldrb	r2, [r3, #0]
 8001560:	4931      	ldr	r1, [pc, #196]	@ (8001628 <TwinklingGlowEffect+0x100>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	440b      	add	r3, r1
 8001566:	f993 3000 	ldrsb.w	r3, [r3]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	b2d9      	uxtb	r1, r3
 8001570:	4a2c      	ldr	r2, [pc, #176]	@ (8001624 <TwinklingGlowEffect+0xfc>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	460a      	mov	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
	            if (brightness[i] >= 255 || brightness[i] <= 50) {
 800157a:	4a2a      	ldr	r2, [pc, #168]	@ (8001624 <TwinklingGlowEffect+0xfc>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2bff      	cmp	r3, #255	@ 0xff
 8001584:	d005      	beq.n	8001592 <TwinklingGlowEffect+0x6a>
 8001586:	4a27      	ldr	r2, [pc, #156]	@ (8001624 <TwinklingGlowEffect+0xfc>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b32      	cmp	r3, #50	@ 0x32
 8001590:	d829      	bhi.n	80015e6 <TwinklingGlowEffect+0xbe>
	                delta[i] = -delta[i]; // Reverse direction at limits
 8001592:	4a25      	ldr	r2, [pc, #148]	@ (8001628 <TwinklingGlowEffect+0x100>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4413      	add	r3, r2
 8001598:	f993 3000 	ldrsb.w	r3, [r3]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	425b      	negs	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b259      	sxtb	r1, r3
 80015a4:	4a20      	ldr	r2, [pc, #128]	@ (8001628 <TwinklingGlowEffect+0x100>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	460a      	mov	r2, r1
 80015ac:	701a      	strb	r2, [r3, #0]
	                // Randomize the twinkle speed
	                if (brightness[i] <= 50) {
 80015ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001624 <TwinklingGlowEffect+0xfc>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b32      	cmp	r3, #50	@ 0x32
 80015b8:	d815      	bhi.n	80015e6 <TwinklingGlowEffect+0xbe>
	                    delta[i] = (rand() % 5) + 3;
 80015ba:	f003 fd29 	bl	8005010 <rand>
 80015be:	4602      	mov	r2, r0
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <TwinklingGlowEffect+0x104>)
 80015c2:	fb83 1302 	smull	r1, r3, r3, r2
 80015c6:	1059      	asrs	r1, r3, #1
 80015c8:	17d3      	asrs	r3, r2, #31
 80015ca:	1ac9      	subs	r1, r1, r3
 80015cc:	460b      	mov	r3, r1
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	1ad1      	subs	r1, r2, r3
 80015d4:	b2cb      	uxtb	r3, r1
 80015d6:	3303      	adds	r3, #3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	b259      	sxtb	r1, r3
 80015dc:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <TwinklingGlowEffect+0x100>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	460a      	mov	r2, r1
 80015e4:	701a      	strb	r2, [r3, #0]
	                }
	            }
	            WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_AQUA, brightness[i]);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	b299      	uxth	r1, r3
 80015ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001624 <TwinklingGlowEffect+0xfc>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	f645 521c 	movw	r2, #23836	@ 0x5d1c
 80015f6:	f107 0010 	add.w	r0, r7, #16
 80015fa:	f003 fc23 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
	        for (int i = 0; i < 8; i++) {
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b07      	cmp	r3, #7
 8001608:	dda6      	ble.n	8001558 <TwinklingGlowEffect+0x30>
	        }
		WS28XX_Update(&ws);
 800160a:	f107 0010 	add.w	r0, r7, #16
 800160e:	f003 fc8d 	bl	8004f2c <WS28XX_Update>
	}
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800161c:	b004      	add	sp, #16
 800161e:	4770      	bx	lr
 8001620:	200018cc 	.word	0x200018cc
 8001624:	20000014 	.word	0x20000014
 8001628:	2000001c 	.word	0x2000001c
 800162c:	66666667 	.word	0x66666667

08001630 <CarTurnSignalEffect>:

void CarTurnSignalEffect(WS28XX_HandleTypeDef ws) {
 8001630:	b084      	sub	sp, #16
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	f107 0c10 	add.w	ip, r7, #16
 800163c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	static uint32_t next_update = 0;
	static bool leds_on = false; // State to track whether the LEDs are on or off

	if (HAL_GetTick() >= next_update) {
 8001640:	f000 fd34 	bl	80020ac <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <CarTurnSignalEffect+0xb0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d340      	bcc.n	80016d0 <CarTurnSignalEffect+0xa0>
		next_update = HAL_GetTick() + (leds_on ? 300 : 700); // 300ms ON, 700ms OFF for classic timing
 800164e:	f000 fd2d 	bl	80020ac <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <CarTurnSignalEffect+0xb4>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <CarTurnSignalEffect+0x32>
 800165c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001660:	e001      	b.n	8001666 <CarTurnSignalEffect+0x36>
 8001662:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8001666:	4413      	add	r3, r2
 8001668:	4a1d      	ldr	r2, [pc, #116]	@ (80016e0 <CarTurnSignalEffect+0xb0>)
 800166a:	6013      	str	r3, [r2, #0]

		if (leds_on) {
 800166c:	4b1d      	ldr	r3, [pc, #116]	@ (80016e4 <CarTurnSignalEffect+0xb4>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d014      	beq.n	800169e <CarTurnSignalEffect+0x6e>
			// Turn off all LEDs
			for (int i = 0; i < 8; i++) {
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	e00a      	b.n	8001690 <CarTurnSignalEffect+0x60>
				WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_BLACK, 0);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	b299      	uxth	r1, r3
 800167e:	2300      	movs	r3, #0
 8001680:	2200      	movs	r2, #0
 8001682:	f107 0010 	add.w	r0, r7, #16
 8001686:	f003 fbdd 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
			for (int i = 0; i < 8; i++) {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3301      	adds	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b07      	cmp	r3, #7
 8001694:	ddf1      	ble.n	800167a <CarTurnSignalEffect+0x4a>
			}
			leds_on = false;
 8001696:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <CarTurnSignalEffect+0xb4>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
 800169c:	e014      	b.n	80016c8 <CarTurnSignalEffect+0x98>
		} else {
			// Turn on all LEDs with Amber
			for (int i = 0; i < 8; i++) {
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	e00b      	b.n	80016bc <CarTurnSignalEffect+0x8c>
				WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_ORANGE, 255);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b299      	uxth	r1, r3
 80016a8:	23ff      	movs	r3, #255	@ 0xff
 80016aa:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 80016ae:	f107 0010 	add.w	r0, r7, #16
 80016b2:	f003 fbc7 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
			for (int i = 0; i < 8; i++) {
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2b07      	cmp	r3, #7
 80016c0:	ddf0      	ble.n	80016a4 <CarTurnSignalEffect+0x74>
			}
			leds_on = true;
 80016c2:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <CarTurnSignalEffect+0xb4>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
		}
		WS28XX_Update(&ws);
 80016c8:	f107 0010 	add.w	r0, r7, #16
 80016cc:	f003 fc2e 	bl	8004f2c <WS28XX_Update>
	}
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016da:	b004      	add	sp, #16
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	200018d0 	.word	0x200018d0
 80016e4:	200018d4 	.word	0x200018d4

080016e8 <TestMode>:

void TestMode(WS28XX_HandleTypeDef ws) {static uint32_t next_update = 0;
 80016e8:	b084      	sub	sp, #16
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	f107 0c18 	add.w	ip, r7, #24
 80016f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
static int led_index = 0; // Starts at LED 1
static int color_stage = 0; // 0 = Red, 1 = Green, 2 = Blue, 3 = Off
static bool all_leds_stage = false; // False = individual LED test, True = all LEDs cycle
static int all_leds_cycle_count = 0; // Tracks if the all-LED cycle has completed once

if (HAL_GetTick() >= next_update) {
 80016f8:	f000 fcd8 	bl	80020ac <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001874 <TestMode+0x18c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	f0c0 80af 	bcc.w	8001866 <TestMode+0x17e>
    if (!all_leds_stage) {
 8001708:	4b5b      	ldr	r3, [pc, #364]	@ (8001878 <TestMode+0x190>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	f083 0301 	eor.w	r3, r3, #1
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d05b      	beq.n	80017ce <TestMode+0xe6>
        next_update = HAL_GetTick() + 100; // 100ms timing for individual LED cycling
 8001716:	f000 fcc9 	bl	80020ac <HAL_GetTick>
 800171a:	4603      	mov	r3, r0
 800171c:	3364      	adds	r3, #100	@ 0x64
 800171e:	4a55      	ldr	r2, [pc, #340]	@ (8001874 <TestMode+0x18c>)
 8001720:	6013      	str	r3, [r2, #0]

        // Turn off all LEDs before updating
        for (int i = 0; i < 8; i++) {
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e00a      	b.n	800173e <TestMode+0x56>
            WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_BLACK, 0);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	b299      	uxth	r1, r3
 800172c:	2300      	movs	r3, #0
 800172e:	2200      	movs	r2, #0
 8001730:	f107 0018 	add.w	r0, r7, #24
 8001734:	f003 fb86 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < 8; i++) {
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3301      	adds	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b07      	cmp	r3, #7
 8001742:	ddf1      	ble.n	8001728 <TestMode+0x40>
        }

        // Set the current LED to the correct color
        uint16_t color;
        switch (color_stage) {
 8001744:	4b4d      	ldr	r3, [pc, #308]	@ (800187c <TestMode+0x194>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d00e      	beq.n	800176a <TestMode+0x82>
 800174c:	2b02      	cmp	r3, #2
 800174e:	dc0f      	bgt.n	8001770 <TestMode+0x88>
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <TestMode+0x72>
 8001754:	2b01      	cmp	r3, #1
 8001756:	d004      	beq.n	8001762 <TestMode+0x7a>
 8001758:	e00a      	b.n	8001770 <TestMode+0x88>
            case 0: color = COLOR_RGB565_RED; break;
 800175a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800175e:	817b      	strh	r3, [r7, #10]
 8001760:	e009      	b.n	8001776 <TestMode+0x8e>
            case 1: color = COLOR_RGB565_GREEN; break;
 8001762:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001766:	817b      	strh	r3, [r7, #10]
 8001768:	e005      	b.n	8001776 <TestMode+0x8e>
            case 2: color = COLOR_RGB565_BLUE; break;
 800176a:	231f      	movs	r3, #31
 800176c:	817b      	strh	r3, [r7, #10]
 800176e:	e002      	b.n	8001776 <TestMode+0x8e>
            default: color = COLOR_RGB565_BLACK; break;
 8001770:	2300      	movs	r3, #0
 8001772:	817b      	strh	r3, [r7, #10]
 8001774:	bf00      	nop
        }

        WS28XX_SetPixel_RGBW_565(&ws, led_index, color, 255);
 8001776:	4b42      	ldr	r3, [pc, #264]	@ (8001880 <TestMode+0x198>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b299      	uxth	r1, r3
 800177c:	897a      	ldrh	r2, [r7, #10]
 800177e:	23ff      	movs	r3, #255	@ 0xff
 8001780:	f107 0018 	add.w	r0, r7, #24
 8001784:	f003 fb5e 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
        WS28XX_Update(&ws);
 8001788:	f107 0018 	add.w	r0, r7, #24
 800178c:	f003 fbce 	bl	8004f2c <WS28XX_Update>

        // Advance color stage
        color_stage++;
 8001790:	4b3a      	ldr	r3, [pc, #232]	@ (800187c <TestMode+0x194>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4a39      	ldr	r2, [pc, #228]	@ (800187c <TestMode+0x194>)
 8001798:	6013      	str	r3, [r2, #0]
        if (color_stage > 3) { // Once Off state is reached, move to next LED
 800179a:	4b38      	ldr	r3, [pc, #224]	@ (800187c <TestMode+0x194>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	dd07      	ble.n	80017b2 <TestMode+0xca>
            color_stage = 0;
 80017a2:	4b36      	ldr	r3, [pc, #216]	@ (800187c <TestMode+0x194>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
            led_index++;
 80017a8:	4b35      	ldr	r3, [pc, #212]	@ (8001880 <TestMode+0x198>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a34      	ldr	r2, [pc, #208]	@ (8001880 <TestMode+0x198>)
 80017b0:	6013      	str	r3, [r2, #0]
        }

        // If all LEDs have been tested, switch to "all LEDs together" phase
        if (led_index >= 8) {
 80017b2:	4b33      	ldr	r3, [pc, #204]	@ (8001880 <TestMode+0x198>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b07      	cmp	r3, #7
 80017b8:	dd55      	ble.n	8001866 <TestMode+0x17e>
            all_leds_stage = true;
 80017ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001878 <TestMode+0x190>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
            color_stage = 0;
 80017c0:	4b2e      	ldr	r3, [pc, #184]	@ (800187c <TestMode+0x194>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
            all_leds_cycle_count = 0;
 80017c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001884 <TestMode+0x19c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
            led_index = 0; // Restart from LED 1
            color_stage = 0;
        }
    }
}
}
 80017cc:	e04b      	b.n	8001866 <TestMode+0x17e>
        next_update = HAL_GetTick() + 1000; // 1s timing for all-LEDs phase
 80017ce:	f000 fc6d 	bl	80020ac <HAL_GetTick>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80017d8:	4a26      	ldr	r2, [pc, #152]	@ (8001874 <TestMode+0x18c>)
 80017da:	6013      	str	r3, [r2, #0]
        switch (color_stage) {
 80017dc:	4b27      	ldr	r3, [pc, #156]	@ (800187c <TestMode+0x194>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d00e      	beq.n	8001802 <TestMode+0x11a>
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	dc0f      	bgt.n	8001808 <TestMode+0x120>
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <TestMode+0x10a>
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d004      	beq.n	80017fa <TestMode+0x112>
 80017f0:	e00a      	b.n	8001808 <TestMode+0x120>
            case 0: color = COLOR_RGB565_RED; break;
 80017f2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80017f6:	813b      	strh	r3, [r7, #8]
 80017f8:	e009      	b.n	800180e <TestMode+0x126>
            case 1: color = COLOR_RGB565_GREEN; break;
 80017fa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80017fe:	813b      	strh	r3, [r7, #8]
 8001800:	e005      	b.n	800180e <TestMode+0x126>
            case 2: color = COLOR_RGB565_BLUE; break;
 8001802:	231f      	movs	r3, #31
 8001804:	813b      	strh	r3, [r7, #8]
 8001806:	e002      	b.n	800180e <TestMode+0x126>
            default: color = COLOR_RGB565_BLACK; break;
 8001808:	2300      	movs	r3, #0
 800180a:	813b      	strh	r3, [r7, #8]
 800180c:	bf00      	nop
        for (int i = 0; i < 8; i++) {
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	e00a      	b.n	800182a <TestMode+0x142>
            WS28XX_SetPixel_RGBW_565(&ws, i, color, 255);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	b299      	uxth	r1, r3
 8001818:	893a      	ldrh	r2, [r7, #8]
 800181a:	23ff      	movs	r3, #255	@ 0xff
 800181c:	f107 0018 	add.w	r0, r7, #24
 8001820:	f003 fb10 	bl	8004e44 <WS28XX_SetPixel_RGBW_565>
        for (int i = 0; i < 8; i++) {
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3301      	adds	r3, #1
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b07      	cmp	r3, #7
 800182e:	ddf1      	ble.n	8001814 <TestMode+0x12c>
        WS28XX_Update(&ws);
 8001830:	f107 0018 	add.w	r0, r7, #24
 8001834:	f003 fb7a 	bl	8004f2c <WS28XX_Update>
        color_stage++;
 8001838:	4b10      	ldr	r3, [pc, #64]	@ (800187c <TestMode+0x194>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	4a0f      	ldr	r2, [pc, #60]	@ (800187c <TestMode+0x194>)
 8001840:	6013      	str	r3, [r2, #0]
        all_leds_cycle_count++;
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <TestMode+0x19c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	4a0e      	ldr	r2, [pc, #56]	@ (8001884 <TestMode+0x19c>)
 800184a:	6013      	str	r3, [r2, #0]
        if (all_leds_cycle_count >= 3) {
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <TestMode+0x19c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b02      	cmp	r3, #2
 8001852:	dd08      	ble.n	8001866 <TestMode+0x17e>
            all_leds_stage = false;
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <TestMode+0x190>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
            led_index = 0; // Restart from LED 1
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <TestMode+0x198>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
            color_stage = 0;
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <TestMode+0x194>)
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001870:	b004      	add	sp, #16
 8001872:	4770      	bx	lr
 8001874:	200018d8 	.word	0x200018d8
 8001878:	200018dc 	.word	0x200018dc
 800187c:	200018e0 	.word	0x200018e0
 8001880:	200018e4 	.word	0x200018e4
 8001884:	200018e8 	.word	0x200018e8

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <Error_Handler+0x8>

08001894 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <HAL_MspInit+0x5c>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	4a14      	ldr	r2, [pc, #80]	@ (80018f0 <HAL_MspInit+0x5c>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6193      	str	r3, [r2, #24]
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_MspInit+0x5c>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <HAL_MspInit+0x5c>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a0e      	ldr	r2, [pc, #56]	@ (80018f0 <HAL_MspInit+0x5c>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <HAL_MspInit+0x5c>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_MspInit+0x60>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_MspInit+0x60>)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010000 	.word	0x40010000

080018f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a14      	ldr	r2, [pc, #80]	@ (8001964 <HAL_ADC_MspInit+0x6c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d121      	bne.n	800195c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <HAL_ADC_MspInit+0x70>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <HAL_ADC_MspInit+0x70>)
 800191e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <HAL_ADC_MspInit+0x70>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <HAL_ADC_MspInit+0x70>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a0c      	ldr	r2, [pc, #48]	@ (8001968 <HAL_ADC_MspInit+0x70>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <HAL_ADC_MspInit+0x70>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001948:	2330      	movs	r3, #48	@ 0x30
 800194a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194c:	2303      	movs	r3, #3
 800194e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	4619      	mov	r1, r3
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <HAL_ADC_MspInit+0x74>)
 8001958:	f001 f8e4 	bl	8002b24 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40012400 	.word	0x40012400
 8001968:	40021000 	.word	0x40021000
 800196c:	40010800 	.word	0x40010800

08001970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a72      	ldr	r2, [pc, #456]	@ (8001b48 <HAL_TIM_Base_MspInit+0x1d8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10c      	bne.n	800199c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001982:	4b72      	ldr	r3, [pc, #456]	@ (8001b4c <HAL_TIM_Base_MspInit+0x1dc>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	4a71      	ldr	r2, [pc, #452]	@ (8001b4c <HAL_TIM_Base_MspInit+0x1dc>)
 8001988:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800198c:	6193      	str	r3, [r2, #24]
 800198e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b4c <HAL_TIM_Base_MspInit+0x1dc>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800199a:	e0d0      	b.n	8001b3e <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019a4:	d15a      	bne.n	8001a5c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a6:	4b69      	ldr	r3, [pc, #420]	@ (8001b4c <HAL_TIM_Base_MspInit+0x1dc>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4a68      	ldr	r2, [pc, #416]	@ (8001b4c <HAL_TIM_Base_MspInit+0x1dc>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	61d3      	str	r3, [r2, #28]
 80019b2:	4b66      	ldr	r3, [pc, #408]	@ (8001b4c <HAL_TIM_Base_MspInit+0x1dc>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80019be:	4b64      	ldr	r3, [pc, #400]	@ (8001b50 <HAL_TIM_Base_MspInit+0x1e0>)
 80019c0:	4a64      	ldr	r2, [pc, #400]	@ (8001b54 <HAL_TIM_Base_MspInit+0x1e4>)
 80019c2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c4:	4b62      	ldr	r3, [pc, #392]	@ (8001b50 <HAL_TIM_Base_MspInit+0x1e0>)
 80019c6:	2210      	movs	r2, #16
 80019c8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ca:	4b61      	ldr	r3, [pc, #388]	@ (8001b50 <HAL_TIM_Base_MspInit+0x1e0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001b50 <HAL_TIM_Base_MspInit+0x1e0>)
 80019d2:	2280      	movs	r2, #128	@ 0x80
 80019d4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019d6:	4b5e      	ldr	r3, [pc, #376]	@ (8001b50 <HAL_TIM_Base_MspInit+0x1e0>)
 80019d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019dc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019de:	4b5c      	ldr	r3, [pc, #368]	@ (8001b50 <HAL_TIM_Base_MspInit+0x1e0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80019e4:	4b5a      	ldr	r3, [pc, #360]	@ (8001b50 <HAL_TIM_Base_MspInit+0x1e0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80019ea:	4b59      	ldr	r3, [pc, #356]	@ (8001b50 <HAL_TIM_Base_MspInit+0x1e0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80019f0:	4857      	ldr	r0, [pc, #348]	@ (8001b50 <HAL_TIM_Base_MspInit+0x1e0>)
 80019f2:	f000 fea9 	bl	8002748 <HAL_DMA_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_TIM_Base_MspInit+0x90>
      Error_Handler();
 80019fc:	f7ff ff44 	bl	8001888 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a53      	ldr	r2, [pc, #332]	@ (8001b50 <HAL_TIM_Base_MspInit+0x1e0>)
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a06:	4a52      	ldr	r2, [pc, #328]	@ (8001b50 <HAL_TIM_Base_MspInit+0x1e0>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001a0c:	4b52      	ldr	r3, [pc, #328]	@ (8001b58 <HAL_TIM_Base_MspInit+0x1e8>)
 8001a0e:	4a53      	ldr	r2, [pc, #332]	@ (8001b5c <HAL_TIM_Base_MspInit+0x1ec>)
 8001a10:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a12:	4b51      	ldr	r3, [pc, #324]	@ (8001b58 <HAL_TIM_Base_MspInit+0x1e8>)
 8001a14:	2210      	movs	r2, #16
 8001a16:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a18:	4b4f      	ldr	r3, [pc, #316]	@ (8001b58 <HAL_TIM_Base_MspInit+0x1e8>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b58 <HAL_TIM_Base_MspInit+0x1e8>)
 8001a20:	2280      	movs	r2, #128	@ 0x80
 8001a22:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a24:	4b4c      	ldr	r3, [pc, #304]	@ (8001b58 <HAL_TIM_Base_MspInit+0x1e8>)
 8001a26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a2a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a2c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b58 <HAL_TIM_Base_MspInit+0x1e8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001a32:	4b49      	ldr	r3, [pc, #292]	@ (8001b58 <HAL_TIM_Base_MspInit+0x1e8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001a38:	4b47      	ldr	r3, [pc, #284]	@ (8001b58 <HAL_TIM_Base_MspInit+0x1e8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001a3e:	4846      	ldr	r0, [pc, #280]	@ (8001b58 <HAL_TIM_Base_MspInit+0x1e8>)
 8001a40:	f000 fe82 	bl	8002748 <HAL_DMA_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_TIM_Base_MspInit+0xde>
      Error_Handler();
 8001a4a:	f7ff ff1d 	bl	8001888 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a41      	ldr	r2, [pc, #260]	@ (8001b58 <HAL_TIM_Base_MspInit+0x1e8>)
 8001a52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a54:	4a40      	ldr	r2, [pc, #256]	@ (8001b58 <HAL_TIM_Base_MspInit+0x1e8>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001a5a:	e070      	b.n	8001b3e <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM3)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a3f      	ldr	r2, [pc, #252]	@ (8001b60 <HAL_TIM_Base_MspInit+0x1f0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d133      	bne.n	8001ace <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a66:	4b39      	ldr	r3, [pc, #228]	@ (8001b4c <HAL_TIM_Base_MspInit+0x1dc>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a38      	ldr	r2, [pc, #224]	@ (8001b4c <HAL_TIM_Base_MspInit+0x1dc>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b36      	ldr	r3, [pc, #216]	@ (8001b4c <HAL_TIM_Base_MspInit+0x1dc>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 8001a7e:	4b39      	ldr	r3, [pc, #228]	@ (8001b64 <HAL_TIM_Base_MspInit+0x1f4>)
 8001a80:	4a39      	ldr	r2, [pc, #228]	@ (8001b68 <HAL_TIM_Base_MspInit+0x1f8>)
 8001a82:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a84:	4b37      	ldr	r3, [pc, #220]	@ (8001b64 <HAL_TIM_Base_MspInit+0x1f4>)
 8001a86:	2210      	movs	r2, #16
 8001a88:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a8a:	4b36      	ldr	r3, [pc, #216]	@ (8001b64 <HAL_TIM_Base_MspInit+0x1f4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001a90:	4b34      	ldr	r3, [pc, #208]	@ (8001b64 <HAL_TIM_Base_MspInit+0x1f4>)
 8001a92:	2280      	movs	r2, #128	@ 0x80
 8001a94:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a96:	4b33      	ldr	r3, [pc, #204]	@ (8001b64 <HAL_TIM_Base_MspInit+0x1f4>)
 8001a98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a9c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a9e:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <HAL_TIM_Base_MspInit+0x1f4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b64 <HAL_TIM_Base_MspInit+0x1f4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8001b64 <HAL_TIM_Base_MspInit+0x1f4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8001ab0:	482c      	ldr	r0, [pc, #176]	@ (8001b64 <HAL_TIM_Base_MspInit+0x1f4>)
 8001ab2:	f000 fe49 	bl	8002748 <HAL_DMA_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_TIM_Base_MspInit+0x150>
      Error_Handler();
 8001abc:	f7ff fee4 	bl	8001888 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a28      	ldr	r2, [pc, #160]	@ (8001b64 <HAL_TIM_Base_MspInit+0x1f4>)
 8001ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ac6:	4a27      	ldr	r2, [pc, #156]	@ (8001b64 <HAL_TIM_Base_MspInit+0x1f4>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001acc:	e037      	b.n	8001b3e <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM4)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a26      	ldr	r2, [pc, #152]	@ (8001b6c <HAL_TIM_Base_MspInit+0x1fc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d132      	bne.n	8001b3e <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b4c <HAL_TIM_Base_MspInit+0x1dc>)
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b4c <HAL_TIM_Base_MspInit+0x1dc>)
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	61d3      	str	r3, [r2, #28]
 8001ae4:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <HAL_TIM_Base_MspInit+0x1dc>)
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <HAL_TIM_Base_MspInit+0x200>)
 8001af2:	4a20      	ldr	r2, [pc, #128]	@ (8001b74 <HAL_TIM_Base_MspInit+0x204>)
 8001af4:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <HAL_TIM_Base_MspInit+0x200>)
 8001af8:	2210      	movs	r2, #16
 8001afa:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <HAL_TIM_Base_MspInit+0x200>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <HAL_TIM_Base_MspInit+0x200>)
 8001b04:	2280      	movs	r2, #128	@ 0x80
 8001b06:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b08:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <HAL_TIM_Base_MspInit+0x200>)
 8001b0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b0e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <HAL_TIM_Base_MspInit+0x200>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8001b16:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <HAL_TIM_Base_MspInit+0x200>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <HAL_TIM_Base_MspInit+0x200>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8001b22:	4813      	ldr	r0, [pc, #76]	@ (8001b70 <HAL_TIM_Base_MspInit+0x200>)
 8001b24:	f000 fe10 	bl	8002748 <HAL_DMA_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_TIM_Base_MspInit+0x1c2>
      Error_Handler();
 8001b2e:	f7ff feab 	bl	8001888 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <HAL_TIM_Base_MspInit+0x200>)
 8001b36:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b38:	4a0d      	ldr	r2, [pc, #52]	@ (8001b70 <HAL_TIM_Base_MspInit+0x200>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40012c00 	.word	0x40012c00
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	200001f8 	.word	0x200001f8
 8001b54:	40020058 	.word	0x40020058
 8001b58:	2000023c 	.word	0x2000023c
 8001b5c:	40020008 	.word	0x40020008
 8001b60:	40000400 	.word	0x40000400
 8001b64:	20000280 	.word	0x20000280
 8001b68:	4002001c 	.word	0x4002001c
 8001b6c:	40000800 	.word	0x40000800
 8001b70:	200002c4 	.word	0x200002c4
 8001b74:	40020044 	.word	0x40020044

08001b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	@ 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b96:	d143      	bne.n	8001c20 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb0:	4b47      	ldr	r3, [pc, #284]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a46      	ldr	r2, [pc, #280]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b44      	ldr	r3, [pc, #272]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8001bc8:	f248 030c 	movw	r3, #32780	@ 0x800c
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	483d      	ldr	r0, [pc, #244]	@ (8001cd4 <HAL_TIM_MspPostInit+0x15c>)
 8001bde:	f000 ffa1 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001be2:	2308      	movs	r3, #8
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2302      	movs	r3, #2
 8001bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4838      	ldr	r0, [pc, #224]	@ (8001cd8 <HAL_TIM_MspPostInit+0x160>)
 8001bf6:	f000 ff95 	bl	8002b24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001bfa:	4b38      	ldr	r3, [pc, #224]	@ (8001cdc <HAL_TIM_MspPostInit+0x164>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c0a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c18:	4a30      	ldr	r2, [pc, #192]	@ (8001cdc <HAL_TIM_MspPostInit+0x164>)
 8001c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c1c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c1e:	e053      	b.n	8001cc8 <HAL_TIM_MspPostInit+0x150>
  else if(htim->Instance==TIM3)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a2e      	ldr	r2, [pc, #184]	@ (8001ce0 <HAL_TIM_MspPostInit+0x168>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d130      	bne.n	8001c8c <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	4b29      	ldr	r3, [pc, #164]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	4a28      	ldr	r2, [pc, #160]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6193      	str	r3, [r2, #24]
 8001c36:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	4b23      	ldr	r3, [pc, #140]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	4a22      	ldr	r2, [pc, #136]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	6193      	str	r3, [r2, #24]
 8001c4e:	4b20      	ldr	r3, [pc, #128]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c5a:	23c0      	movs	r3, #192	@ 0xc0
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2302      	movs	r3, #2
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4819      	ldr	r0, [pc, #100]	@ (8001cd4 <HAL_TIM_MspPostInit+0x15c>)
 8001c6e:	f000 ff59 	bl	8002b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c72:	2303      	movs	r3, #3
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4619      	mov	r1, r3
 8001c84:	4814      	ldr	r0, [pc, #80]	@ (8001cd8 <HAL_TIM_MspPostInit+0x160>)
 8001c86:	f000 ff4d 	bl	8002b24 <HAL_GPIO_Init>
}
 8001c8a:	e01d      	b.n	8001cc8 <HAL_TIM_MspPostInit+0x150>
  else if(htim->Instance==TIM4)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a14      	ldr	r2, [pc, #80]	@ (8001ce4 <HAL_TIM_MspPostInit+0x16c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d118      	bne.n	8001cc8 <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c96:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	6193      	str	r3, [r2, #24]
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <HAL_TIM_MspPostInit+0x158>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001cae:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <HAL_TIM_MspPostInit+0x160>)
 8001cc4:	f000 ff2e 	bl	8002b24 <HAL_GPIO_Init>
}
 8001cc8:	bf00      	nop
 8001cca:	3730      	adds	r7, #48	@ 0x30
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40010800 	.word	0x40010800
 8001cd8:	40010c00 	.word	0x40010c00
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40000800 	.word	0x40000800

08001ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1c      	ldr	r2, [pc, #112]	@ (8001d74 <HAL_UART_MspInit+0x8c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d131      	bne.n	8001d6c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <HAL_UART_MspInit+0x90>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d78 <HAL_UART_MspInit+0x90>)
 8001d0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <HAL_UART_MspInit+0x90>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <HAL_UART_MspInit+0x90>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a14      	ldr	r2, [pc, #80]	@ (8001d78 <HAL_UART_MspInit+0x90>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <HAL_UART_MspInit+0x90>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480b      	ldr	r0, [pc, #44]	@ (8001d7c <HAL_UART_MspInit+0x94>)
 8001d4e:	f000 fee9 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4619      	mov	r1, r3
 8001d66:	4805      	ldr	r0, [pc, #20]	@ (8001d7c <HAL_UART_MspInit+0x94>)
 8001d68:	f000 fedc 	bl	8002b24 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d6c:	bf00      	nop
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010800 	.word	0x40010800

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <NMI_Handler+0x4>

08001d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d92:	4802      	ldr	r0, [pc, #8]	@ (8001d9c <HardFault_Handler+0x14>)
 8001d94:	f001 f84a 	bl	8002e2c <HAL_GPIO_WritePin>
							GPIO_PIN_SET);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <HardFault_Handler+0x10>
 8001d9c:	40011000 	.word	0x40011000

08001da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,
 8001da4:	2201      	movs	r2, #1
 8001da6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001daa:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <MemManage_Handler+0x14>)
 8001dac:	f001 f83e 	bl	8002e2c <HAL_GPIO_WritePin>
								GPIO_PIN_SET);
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <MemManage_Handler+0x10>
 8001db4:	40011000 	.word	0x40011000

08001db8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <BusFault_Handler+0x4>

08001dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc4:	bf00      	nop
 8001dc6:	e7fd      	b.n	8001dc4 <UsageFault_Handler+0x4>

08001dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df0:	f000 f94a 	bl	8002088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f001 f847 	bl	8002e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001e0c:	4802      	ldr	r0, [pc, #8]	@ (8001e18 <DMA1_Channel1_IRQHandler+0x10>)
 8001e0e:	f000 fd55 	bl	80028bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000023c 	.word	0x2000023c

08001e1c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8001e20:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <DMA1_Channel2_IRQHandler+0x10>)
 8001e22:	f000 fd4b 	bl	80028bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000280 	.word	0x20000280

08001e30 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <DMA1_Channel4_IRQHandler+0x10>)
 8001e36:	f000 fd41 	bl	80028bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200002c4 	.word	0x200002c4

08001e44 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001e48:	4802      	ldr	r0, [pc, #8]	@ (8001e54 <DMA1_Channel5_IRQHandler+0x10>)
 8001e4a:	f000 fd37 	bl	80028bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200001f8 	.word	0x200001f8

08001e58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return 1;
 8001e5c:	2301      	movs	r3, #1
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <_kill>:

int _kill(int pid, int sig)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e70:	f003 fb64 	bl	800553c <__errno>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2216      	movs	r2, #22
 8001e78:	601a      	str	r2, [r3, #0]
  return -1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_exit>:

void _exit (int status)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ffe7 	bl	8001e66 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <_exit+0x12>

08001e9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e00a      	b.n	8001ec4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eae:	f3af 8000 	nop.w
 8001eb2:	4601      	mov	r1, r0
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	60ba      	str	r2, [r7, #8]
 8001eba:	b2ca      	uxtb	r2, r1
 8001ebc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	dbf0      	blt.n	8001eae <_read+0x12>
  }

  return len;
 8001ecc:	687b      	ldr	r3, [r7, #4]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001efc:	605a      	str	r2, [r3, #4]
  return 0;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <_isatty>:

int _isatty(int file)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
	...

08001f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f40:	4a14      	ldr	r2, [pc, #80]	@ (8001f94 <_sbrk+0x5c>)
 8001f42:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <_sbrk+0x60>)
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f4c:	4b13      	ldr	r3, [pc, #76]	@ (8001f9c <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <_sbrk+0x64>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <_sbrk+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5a:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d207      	bcs.n	8001f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f68:	f003 fae8 	bl	800553c <__errno>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	220c      	movs	r2, #12
 8001f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e009      	b.n	8001f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f78:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <_sbrk+0x64>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a05      	ldr	r2, [pc, #20]	@ (8001f9c <_sbrk+0x64>)
 8001f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20005000 	.word	0x20005000
 8001f98:	00000400 	.word	0x00000400
 8001f9c:	200018ec 	.word	0x200018ec
 8001fa0:	20001a40 	.word	0x20001a40

08001fa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb0:	f7ff fff8 	bl	8001fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb4:	480b      	ldr	r0, [pc, #44]	@ (8001fe4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fb6:	490c      	ldr	r1, [pc, #48]	@ (8001fe8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001fec <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fbc:	e002      	b.n	8001fc4 <LoopCopyDataInit>

08001fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc2:	3304      	adds	r3, #4

08001fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc8:	d3f9      	bcc.n	8001fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fca:	4a09      	ldr	r2, [pc, #36]	@ (8001ff0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fcc:	4c09      	ldr	r4, [pc, #36]	@ (8001ff4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd0:	e001      	b.n	8001fd6 <LoopFillZerobss>

08001fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd4:	3204      	adds	r2, #4

08001fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd8:	d3fb      	bcc.n	8001fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fda:	f003 fab5 	bl	8005548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fde:	f7fe fb33 	bl	8000648 <main>
  bx lr
 8001fe2:	4770      	bx	lr
  ldr r0, =_sdata
 8001fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001fec:	08006358 	.word	0x08006358
  ldr r2, =_sbss
 8001ff0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001ff4:	20001a40 	.word	0x20001a40

08001ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ff8:	e7fe      	b.n	8001ff8 <ADC1_2_IRQHandler>
	...

08001ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002000:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <HAL_Init+0x28>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a07      	ldr	r2, [pc, #28]	@ (8002024 <HAL_Init+0x28>)
 8002006:	f043 0310 	orr.w	r3, r3, #16
 800200a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200c:	2003      	movs	r0, #3
 800200e:	f000 fb59 	bl	80026c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002012:	200f      	movs	r0, #15
 8002014:	f000 f808 	bl	8002028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002018:	f7ff fc3c 	bl	8001894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40022000 	.word	0x40022000

08002028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002030:	4b12      	ldr	r3, [pc, #72]	@ (800207c <HAL_InitTick+0x54>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <HAL_InitTick+0x58>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800203e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fb71 	bl	800272e <HAL_SYSTICK_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00e      	b.n	8002074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b0f      	cmp	r3, #15
 800205a:	d80a      	bhi.n	8002072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205c:	2200      	movs	r2, #0
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f000 fb39 	bl	80026da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002068:	4a06      	ldr	r2, [pc, #24]	@ (8002084 <HAL_InitTick+0x5c>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	e000      	b.n	8002074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000024 	.word	0x20000024
 8002080:	2000002c 	.word	0x2000002c
 8002084:	20000028 	.word	0x20000028

08002088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800208c:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <HAL_IncTick+0x1c>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <HAL_IncTick+0x20>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a03      	ldr	r2, [pc, #12]	@ (80020a8 <HAL_IncTick+0x20>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	2000002c 	.word	0x2000002c
 80020a8:	200018f0 	.word	0x200018f0

080020ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return uwTick;
 80020b0:	4b02      	ldr	r3, [pc, #8]	@ (80020bc <HAL_GetTick+0x10>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	200018f0 	.word	0x200018f0

080020c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c8:	f7ff fff0 	bl	80020ac <HAL_GetTick>
 80020cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d005      	beq.n	80020e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020da:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <HAL_Delay+0x44>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020e6:	bf00      	nop
 80020e8:	f7ff ffe0 	bl	80020ac <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d8f7      	bhi.n	80020e8 <HAL_Delay+0x28>
  {
  }
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	2000002c 	.word	0x2000002c

08002108 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0be      	b.n	80022a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fbd6 	bl	80018f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f9ab 	bl	80024a8 <ADC_ConversionStop_Disable>
 8002152:	4603      	mov	r3, r0
 8002154:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 8099 	bne.w	8002296 <HAL_ADC_Init+0x18e>
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 8095 	bne.w	8002296 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002170:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002174:	f023 0302 	bic.w	r3, r3, #2
 8002178:	f043 0202 	orr.w	r2, r3, #2
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002188:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7b1b      	ldrb	r3, [r3, #12]
 800218e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002190:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	4313      	orrs	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021a0:	d003      	beq.n	80021aa <HAL_ADC_Init+0xa2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d102      	bne.n	80021b0 <HAL_ADC_Init+0xa8>
 80021aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021ae:	e000      	b.n	80021b2 <HAL_ADC_Init+0xaa>
 80021b0:	2300      	movs	r3, #0
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7d1b      	ldrb	r3, [r3, #20]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d119      	bne.n	80021f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7b1b      	ldrb	r3, [r3, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	035a      	lsls	r2, r3, #13
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	e00b      	b.n	80021f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e0:	f043 0220 	orr.w	r2, r3, #32
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	430a      	orrs	r2, r1
 8002206:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	4b28      	ldr	r3, [pc, #160]	@ (80022b0 <HAL_ADC_Init+0x1a8>)
 8002210:	4013      	ands	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	430b      	orrs	r3, r1
 800221a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002224:	d003      	beq.n	800222e <HAL_ADC_Init+0x126>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d104      	bne.n	8002238 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	3b01      	subs	r3, #1
 8002234:	051b      	lsls	r3, r3, #20
 8002236:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	430a      	orrs	r2, r1
 800224a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <HAL_ADC_Init+0x1ac>)
 8002254:	4013      	ands	r3, r2
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	429a      	cmp	r2, r3
 800225a:	d10b      	bne.n	8002274 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002266:	f023 0303 	bic.w	r3, r3, #3
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002272:	e018      	b.n	80022a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	f023 0312 	bic.w	r3, r3, #18
 800227c:	f043 0210 	orr.w	r2, r3, #16
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002294:	e007      	b.n	80022a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229a:	f043 0210 	orr.w	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	ffe1f7fd 	.word	0xffe1f7fd
 80022b4:	ff1f0efe 	.word	0xff1f0efe

080022b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x20>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e0dc      	b.n	8002492 <HAL_ADC_ConfigChannel+0x1da>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b06      	cmp	r3, #6
 80022e6:	d81c      	bhi.n	8002322 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b05      	subs	r3, #5
 80022fa:	221f      	movs	r2, #31
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	4019      	ands	r1, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	3b05      	subs	r3, #5
 8002314:	fa00 f203 	lsl.w	r2, r0, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002320:	e03c      	b.n	800239c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d81c      	bhi.n	8002364 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b23      	subs	r3, #35	@ 0x23
 800233c:	221f      	movs	r2, #31
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	4019      	ands	r1, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	3b23      	subs	r3, #35	@ 0x23
 8002356:	fa00 f203 	lsl.w	r2, r0, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	631a      	str	r2, [r3, #48]	@ 0x30
 8002362:	e01b      	b.n	800239c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	3b41      	subs	r3, #65	@ 0x41
 8002376:	221f      	movs	r2, #31
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	4019      	ands	r1, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	3b41      	subs	r3, #65	@ 0x41
 8002390:	fa00 f203 	lsl.w	r2, r0, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b09      	cmp	r3, #9
 80023a2:	d91c      	bls.n	80023de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68d9      	ldr	r1, [r3, #12]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	3b1e      	subs	r3, #30
 80023b6:	2207      	movs	r2, #7
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	4019      	ands	r1, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6898      	ldr	r0, [r3, #8]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	3b1e      	subs	r3, #30
 80023d0:	fa00 f203 	lsl.w	r2, r0, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	e019      	b.n	8002412 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6919      	ldr	r1, [r3, #16]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	4019      	ands	r1, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6898      	ldr	r0, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	fa00 f203 	lsl.w	r2, r0, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d003      	beq.n	8002422 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800241e:	2b11      	cmp	r3, #17
 8002420:	d132      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <HAL_ADC_ConfigChannel+0x1e4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d125      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d126      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002448:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b10      	cmp	r3, #16
 8002450:	d11a      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002452:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a13      	ldr	r2, [pc, #76]	@ (80024a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	0c9a      	lsrs	r2, r3, #18
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002468:	e002      	b.n	8002470 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3b01      	subs	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f9      	bne.n	800246a <HAL_ADC_ConfigChannel+0x1b2>
 8002476:	e007      	b.n	8002488 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247c:	f043 0220 	orr.w	r2, r3, #32
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	40012400 	.word	0x40012400
 80024a0:	20000024 	.word	0x20000024
 80024a4:	431bde83 	.word	0x431bde83

080024a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d12e      	bne.n	8002520 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024d2:	f7ff fdeb 	bl	80020ac <HAL_GetTick>
 80024d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024d8:	e01b      	b.n	8002512 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024da:	f7ff fde7 	bl	80020ac <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d914      	bls.n	8002512 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d10d      	bne.n	8002512 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fa:	f043 0210 	orr.w	r2, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002506:	f043 0201 	orr.w	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e007      	b.n	8002522 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	d0dc      	beq.n	80024da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002548:	4013      	ands	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002554:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800255c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255e:	4a04      	ldr	r2, [pc, #16]	@ (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	60d3      	str	r3, [r2, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002578:	4b04      	ldr	r3, [pc, #16]	@ (800258c <__NVIC_GetPriorityGrouping+0x18>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	f003 0307 	and.w	r3, r3, #7
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db0b      	blt.n	80025ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	4906      	ldr	r1, [pc, #24]	@ (80025c4 <__NVIC_EnableIRQ+0x34>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	2001      	movs	r0, #1
 80025b2:	fa00 f202 	lsl.w	r2, r0, r2
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	@ (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	@ (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	@ 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002690:	d301      	bcc.n	8002696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002692:	2301      	movs	r3, #1
 8002694:	e00f      	b.n	80026b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002696:	4a0a      	ldr	r2, [pc, #40]	@ (80026c0 <SysTick_Config+0x40>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269e:	210f      	movs	r1, #15
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	f7ff ff90 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <SysTick_Config+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ae:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <SysTick_Config+0x40>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff2d 	bl	800252c <__NVIC_SetPriorityGrouping>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ec:	f7ff ff42 	bl	8002574 <__NVIC_GetPriorityGrouping>
 80026f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff ff90 	bl	800261c <NVIC_EncodePriority>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff5f 	bl	80025c8 <__NVIC_SetPriority>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff35 	bl	8002590 <__NVIC_EnableIRQ>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ffa2 	bl	8002680 <SysTick_Config>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e043      	b.n	80027e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	4b22      	ldr	r3, [pc, #136]	@ (80027f0 <HAL_DMA_Init+0xa8>)
 8002766:	4413      	add	r3, r2
 8002768:	4a22      	ldr	r2, [pc, #136]	@ (80027f4 <HAL_DMA_Init+0xac>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	009a      	lsls	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a1f      	ldr	r2, [pc, #124]	@ (80027f8 <HAL_DMA_Init+0xb0>)
 800277a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002792:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002796:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	bffdfff8 	.word	0xbffdfff8
 80027f4:	cccccccd 	.word	0xcccccccd
 80027f8:	40020000 	.word	0x40020000

080027fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_DMA_Start_IT+0x20>
 8002818:	2302      	movs	r3, #2
 800281a:	e04b      	b.n	80028b4 <HAL_DMA_Start_IT+0xb8>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d13a      	bne.n	80028a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0201 	bic.w	r2, r2, #1
 800284c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f937 	bl	8002ac8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 020e 	orr.w	r2, r2, #14
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e00f      	b.n	8002894 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0204 	bic.w	r2, r2, #4
 8002882:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 020a 	orr.w	r2, r2, #10
 8002892:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e005      	b.n	80028b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
 80028b0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80028b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	2204      	movs	r2, #4
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d04f      	beq.n	8002984 <HAL_DMA_IRQHandler+0xc8>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d04a      	beq.n	8002984 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d107      	bne.n	800290c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0204 	bic.w	r2, r2, #4
 800290a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a66      	ldr	r2, [pc, #408]	@ (8002aac <HAL_DMA_IRQHandler+0x1f0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d029      	beq.n	800296a <HAL_DMA_IRQHandler+0xae>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a65      	ldr	r2, [pc, #404]	@ (8002ab0 <HAL_DMA_IRQHandler+0x1f4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d022      	beq.n	8002966 <HAL_DMA_IRQHandler+0xaa>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a63      	ldr	r2, [pc, #396]	@ (8002ab4 <HAL_DMA_IRQHandler+0x1f8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d01a      	beq.n	8002960 <HAL_DMA_IRQHandler+0xa4>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a62      	ldr	r2, [pc, #392]	@ (8002ab8 <HAL_DMA_IRQHandler+0x1fc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d012      	beq.n	800295a <HAL_DMA_IRQHandler+0x9e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a60      	ldr	r2, [pc, #384]	@ (8002abc <HAL_DMA_IRQHandler+0x200>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00a      	beq.n	8002954 <HAL_DMA_IRQHandler+0x98>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a5f      	ldr	r2, [pc, #380]	@ (8002ac0 <HAL_DMA_IRQHandler+0x204>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d102      	bne.n	800294e <HAL_DMA_IRQHandler+0x92>
 8002948:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800294c:	e00e      	b.n	800296c <HAL_DMA_IRQHandler+0xb0>
 800294e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002952:	e00b      	b.n	800296c <HAL_DMA_IRQHandler+0xb0>
 8002954:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002958:	e008      	b.n	800296c <HAL_DMA_IRQHandler+0xb0>
 800295a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800295e:	e005      	b.n	800296c <HAL_DMA_IRQHandler+0xb0>
 8002960:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002964:	e002      	b.n	800296c <HAL_DMA_IRQHandler+0xb0>
 8002966:	2340      	movs	r3, #64	@ 0x40
 8002968:	e000      	b.n	800296c <HAL_DMA_IRQHandler+0xb0>
 800296a:	2304      	movs	r3, #4
 800296c:	4a55      	ldr	r2, [pc, #340]	@ (8002ac4 <HAL_DMA_IRQHandler+0x208>)
 800296e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8094 	beq.w	8002aa2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002982:	e08e      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	2202      	movs	r2, #2
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d056      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x186>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d051      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10b      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 020a 	bic.w	r2, r2, #10
 80029ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a38      	ldr	r2, [pc, #224]	@ (8002aac <HAL_DMA_IRQHandler+0x1f0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d029      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x166>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a37      	ldr	r2, [pc, #220]	@ (8002ab0 <HAL_DMA_IRQHandler+0x1f4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d022      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x162>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a35      	ldr	r2, [pc, #212]	@ (8002ab4 <HAL_DMA_IRQHandler+0x1f8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01a      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x15c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a34      	ldr	r2, [pc, #208]	@ (8002ab8 <HAL_DMA_IRQHandler+0x1fc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d012      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x156>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a32      	ldr	r2, [pc, #200]	@ (8002abc <HAL_DMA_IRQHandler+0x200>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00a      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x150>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a31      	ldr	r2, [pc, #196]	@ (8002ac0 <HAL_DMA_IRQHandler+0x204>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d102      	bne.n	8002a06 <HAL_DMA_IRQHandler+0x14a>
 8002a00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a04:	e00e      	b.n	8002a24 <HAL_DMA_IRQHandler+0x168>
 8002a06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a0a:	e00b      	b.n	8002a24 <HAL_DMA_IRQHandler+0x168>
 8002a0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a10:	e008      	b.n	8002a24 <HAL_DMA_IRQHandler+0x168>
 8002a12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a16:	e005      	b.n	8002a24 <HAL_DMA_IRQHandler+0x168>
 8002a18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a1c:	e002      	b.n	8002a24 <HAL_DMA_IRQHandler+0x168>
 8002a1e:	2320      	movs	r3, #32
 8002a20:	e000      	b.n	8002a24 <HAL_DMA_IRQHandler+0x168>
 8002a22:	2302      	movs	r3, #2
 8002a24:	4a27      	ldr	r2, [pc, #156]	@ (8002ac4 <HAL_DMA_IRQHandler+0x208>)
 8002a26:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d034      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a40:	e02f      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	2208      	movs	r2, #8
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d028      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x1e8>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d023      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 020e 	bic.w	r2, r2, #14
 8002a6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
    }
  }
  return;
 8002aa2:	bf00      	nop
 8002aa4:	bf00      	nop
}
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40020008 	.word	0x40020008
 8002ab0:	4002001c 	.word	0x4002001c
 8002ab4:	40020030 	.word	0x40020030
 8002ab8:	40020044 	.word	0x40020044
 8002abc:	40020058 	.word	0x40020058
 8002ac0:	4002006c 	.word	0x4002006c
 8002ac4:	40020000 	.word	0x40020000

08002ac8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d108      	bne.n	8002b08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b06:	e007      	b.n	8002b18 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	60da      	str	r2, [r3, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b08b      	sub	sp, #44	@ 0x2c
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b36:	e169      	b.n	8002e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b38:	2201      	movs	r2, #1
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	f040 8158 	bne.w	8002e06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4a9a      	ldr	r2, [pc, #616]	@ (8002dc4 <HAL_GPIO_Init+0x2a0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d05e      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b60:	4a98      	ldr	r2, [pc, #608]	@ (8002dc4 <HAL_GPIO_Init+0x2a0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d875      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b66:	4a98      	ldr	r2, [pc, #608]	@ (8002dc8 <HAL_GPIO_Init+0x2a4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d058      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b6c:	4a96      	ldr	r2, [pc, #600]	@ (8002dc8 <HAL_GPIO_Init+0x2a4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d86f      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b72:	4a96      	ldr	r2, [pc, #600]	@ (8002dcc <HAL_GPIO_Init+0x2a8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d052      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b78:	4a94      	ldr	r2, [pc, #592]	@ (8002dcc <HAL_GPIO_Init+0x2a8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d869      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b7e:	4a94      	ldr	r2, [pc, #592]	@ (8002dd0 <HAL_GPIO_Init+0x2ac>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d04c      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b84:	4a92      	ldr	r2, [pc, #584]	@ (8002dd0 <HAL_GPIO_Init+0x2ac>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d863      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b8a:	4a92      	ldr	r2, [pc, #584]	@ (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d046      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
 8002b90:	4a90      	ldr	r2, [pc, #576]	@ (8002dd4 <HAL_GPIO_Init+0x2b0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d85d      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b96:	2b12      	cmp	r3, #18
 8002b98:	d82a      	bhi.n	8002bf0 <HAL_GPIO_Init+0xcc>
 8002b9a:	2b12      	cmp	r3, #18
 8002b9c:	d859      	bhi.n	8002c52 <HAL_GPIO_Init+0x12e>
 8002b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <HAL_GPIO_Init+0x80>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002c1f 	.word	0x08002c1f
 8002ba8:	08002bf9 	.word	0x08002bf9
 8002bac:	08002c0b 	.word	0x08002c0b
 8002bb0:	08002c4d 	.word	0x08002c4d
 8002bb4:	08002c53 	.word	0x08002c53
 8002bb8:	08002c53 	.word	0x08002c53
 8002bbc:	08002c53 	.word	0x08002c53
 8002bc0:	08002c53 	.word	0x08002c53
 8002bc4:	08002c53 	.word	0x08002c53
 8002bc8:	08002c53 	.word	0x08002c53
 8002bcc:	08002c53 	.word	0x08002c53
 8002bd0:	08002c53 	.word	0x08002c53
 8002bd4:	08002c53 	.word	0x08002c53
 8002bd8:	08002c53 	.word	0x08002c53
 8002bdc:	08002c53 	.word	0x08002c53
 8002be0:	08002c53 	.word	0x08002c53
 8002be4:	08002c53 	.word	0x08002c53
 8002be8:	08002c01 	.word	0x08002c01
 8002bec:	08002c15 	.word	0x08002c15
 8002bf0:	4a79      	ldr	r2, [pc, #484]	@ (8002dd8 <HAL_GPIO_Init+0x2b4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bf6:	e02c      	b.n	8002c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	623b      	str	r3, [r7, #32]
          break;
 8002bfe:	e029      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	3304      	adds	r3, #4
 8002c06:	623b      	str	r3, [r7, #32]
          break;
 8002c08:	e024      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	3308      	adds	r3, #8
 8002c10:	623b      	str	r3, [r7, #32]
          break;
 8002c12:	e01f      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	623b      	str	r3, [r7, #32]
          break;
 8002c1c:	e01a      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c26:	2304      	movs	r3, #4
 8002c28:	623b      	str	r3, [r7, #32]
          break;
 8002c2a:	e013      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d105      	bne.n	8002c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c34:	2308      	movs	r3, #8
 8002c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	611a      	str	r2, [r3, #16]
          break;
 8002c3e:	e009      	b.n	8002c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c40:	2308      	movs	r3, #8
 8002c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	615a      	str	r2, [r3, #20]
          break;
 8002c4a:	e003      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	623b      	str	r3, [r7, #32]
          break;
 8002c50:	e000      	b.n	8002c54 <HAL_GPIO_Init+0x130>
          break;
 8002c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2bff      	cmp	r3, #255	@ 0xff
 8002c58:	d801      	bhi.n	8002c5e <HAL_GPIO_Init+0x13a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	e001      	b.n	8002c62 <HAL_GPIO_Init+0x13e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2bff      	cmp	r3, #255	@ 0xff
 8002c68:	d802      	bhi.n	8002c70 <HAL_GPIO_Init+0x14c>
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	e002      	b.n	8002c76 <HAL_GPIO_Init+0x152>
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	3b08      	subs	r3, #8
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	210f      	movs	r1, #15
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	6a39      	ldr	r1, [r7, #32]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	431a      	orrs	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80b1 	beq.w	8002e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8002ddc <HAL_GPIO_Init+0x2b8>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8002ddc <HAL_GPIO_Init+0x2b8>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6193      	str	r3, [r2, #24]
 8002cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8002ddc <HAL_GPIO_Init+0x2b8>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cbc:	4a48      	ldr	r2, [pc, #288]	@ (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a40      	ldr	r2, [pc, #256]	@ (8002de4 <HAL_GPIO_Init+0x2c0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <HAL_GPIO_Init+0x1ec>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a3f      	ldr	r2, [pc, #252]	@ (8002de8 <HAL_GPIO_Init+0x2c4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00d      	beq.n	8002d0c <HAL_GPIO_Init+0x1e8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8002dec <HAL_GPIO_Init+0x2c8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <HAL_GPIO_Init+0x1e4>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8002df0 <HAL_GPIO_Init+0x2cc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_GPIO_Init+0x1e0>
 8002d00:	2303      	movs	r3, #3
 8002d02:	e006      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d04:	2304      	movs	r3, #4
 8002d06:	e004      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e002      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_GPIO_Init+0x1ee>
 8002d10:	2300      	movs	r3, #0
 8002d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d14:	f002 0203 	and.w	r2, r2, #3
 8002d18:	0092      	lsls	r2, r2, #2
 8002d1a:	4093      	lsls	r3, r2
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d22:	492f      	ldr	r1, [pc, #188]	@ (8002de0 <HAL_GPIO_Init+0x2bc>)
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	492c      	ldr	r1, [pc, #176]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]
 8002d48:	e006      	b.n	8002d58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	4928      	ldr	r1, [pc, #160]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d64:	4b23      	ldr	r3, [pc, #140]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	4922      	ldr	r1, [pc, #136]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60cb      	str	r3, [r1, #12]
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d72:	4b20      	ldr	r3, [pc, #128]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	491e      	ldr	r1, [pc, #120]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d8c:	4b19      	ldr	r3, [pc, #100]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4918      	ldr	r1, [pc, #96]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d9a:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	4914      	ldr	r1, [pc, #80]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d021      	beq.n	8002df8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002db4:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	490e      	ldr	r1, [pc, #56]	@ (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e021      	b.n	8002e06 <HAL_GPIO_Init+0x2e2>
 8002dc2:	bf00      	nop
 8002dc4:	10320000 	.word	0x10320000
 8002dc8:	10310000 	.word	0x10310000
 8002dcc:	10220000 	.word	0x10220000
 8002dd0:	10210000 	.word	0x10210000
 8002dd4:	10120000 	.word	0x10120000
 8002dd8:	10110000 	.word	0x10110000
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40010800 	.word	0x40010800
 8002de8:	40010c00 	.word	0x40010c00
 8002dec:	40011000 	.word	0x40011000
 8002df0:	40011400 	.word	0x40011400
 8002df4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	4909      	ldr	r1, [pc, #36]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	3301      	adds	r3, #1
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	fa22 f303 	lsr.w	r3, r2, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f47f ae8e 	bne.w	8002b38 <HAL_GPIO_Init+0x14>
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	372c      	adds	r7, #44	@ 0x2c
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr
 8002e28:	40010400 	.word	0x40010400

08002e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e3c:	787b      	ldrb	r3, [r7, #1]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e48:	e003      	b.n	8002e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	041a      	lsls	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	611a      	str	r2, [r3, #16]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	041a      	lsls	r2, r3, #16
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	43d9      	mvns	r1, r3
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	400b      	ands	r3, r1
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	611a      	str	r2, [r3, #16]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e9a:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d006      	beq.n	8002eb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ea6:	4a05      	ldr	r2, [pc, #20]	@ (8002ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe f98e 	bl	80011d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40010400 	.word	0x40010400

08002ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e272      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8087 	beq.w	8002fee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee0:	4b92      	ldr	r3, [pc, #584]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d00c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eec:	4b8f      	ldr	r3, [pc, #572]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d112      	bne.n	8002f1e <HAL_RCC_OscConfig+0x5e>
 8002ef8:	4b8c      	ldr	r3, [pc, #560]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f04:	d10b      	bne.n	8002f1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f06:	4b89      	ldr	r3, [pc, #548]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d06c      	beq.n	8002fec <HAL_RCC_OscConfig+0x12c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d168      	bne.n	8002fec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e24c      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_OscConfig+0x76>
 8002f28:	4b80      	ldr	r3, [pc, #512]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a7f      	ldr	r2, [pc, #508]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	e02e      	b.n	8002f94 <HAL_RCC_OscConfig+0xd4>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x98>
 8002f3e:	4b7b      	ldr	r3, [pc, #492]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a7a      	ldr	r2, [pc, #488]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b78      	ldr	r3, [pc, #480]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a77      	ldr	r2, [pc, #476]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e01d      	b.n	8002f94 <HAL_RCC_OscConfig+0xd4>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0xbc>
 8002f62:	4b72      	ldr	r3, [pc, #456]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a71      	ldr	r2, [pc, #452]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6e      	ldr	r2, [pc, #440]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0xd4>
 8002f7c:	4b6b      	ldr	r3, [pc, #428]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a6a      	ldr	r2, [pc, #424]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b68      	ldr	r3, [pc, #416]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a67      	ldr	r2, [pc, #412]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7ff f886 	bl	80020ac <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7ff f882 	bl	80020ac <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	@ 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e200      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xe4>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7ff f872 	bl	80020ac <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7ff f86e 	bl	80020ac <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	@ 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e1ec      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	4b53      	ldr	r3, [pc, #332]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x10c>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d063      	beq.n	80030c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ffa:	4b4c      	ldr	r3, [pc, #304]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003006:	4b49      	ldr	r3, [pc, #292]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b08      	cmp	r3, #8
 8003010:	d11c      	bne.n	800304c <HAL_RCC_OscConfig+0x18c>
 8003012:	4b46      	ldr	r3, [pc, #280]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	4b43      	ldr	r3, [pc, #268]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_RCC_OscConfig+0x176>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1c0      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b3d      	ldr	r3, [pc, #244]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4939      	ldr	r1, [pc, #228]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	e03a      	b.n	80030c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d020      	beq.n	8003096 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003054:	4b36      	ldr	r3, [pc, #216]	@ (8003130 <HAL_RCC_OscConfig+0x270>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7ff f827 	bl	80020ac <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003062:	f7ff f823 	bl	80020ac <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e1a1      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	4b2d      	ldr	r3, [pc, #180]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b2a      	ldr	r3, [pc, #168]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4927      	ldr	r1, [pc, #156]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003096:	4b26      	ldr	r3, [pc, #152]	@ (8003130 <HAL_RCC_OscConfig+0x270>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7ff f806 	bl	80020ac <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a4:	f7ff f802 	bl	80020ac <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e180      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	4b1d      	ldr	r3, [pc, #116]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d03a      	beq.n	8003144 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d019      	beq.n	800310a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d6:	4b17      	ldr	r3, [pc, #92]	@ (8003134 <HAL_RCC_OscConfig+0x274>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030dc:	f7fe ffe6 	bl	80020ac <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e4:	f7fe ffe2 	bl	80020ac <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e160      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	4b0d      	ldr	r3, [pc, #52]	@ (800312c <HAL_RCC_OscConfig+0x26c>)
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003102:	2001      	movs	r0, #1
 8003104:	f000 face 	bl	80036a4 <RCC_Delay>
 8003108:	e01c      	b.n	8003144 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310a:	4b0a      	ldr	r3, [pc, #40]	@ (8003134 <HAL_RCC_OscConfig+0x274>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003110:	f7fe ffcc 	bl	80020ac <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003116:	e00f      	b.n	8003138 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003118:	f7fe ffc8 	bl	80020ac <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d908      	bls.n	8003138 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e146      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	42420000 	.word	0x42420000
 8003134:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003138:	4b92      	ldr	r3, [pc, #584]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e9      	bne.n	8003118 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80a6 	beq.w	800329e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003152:	2300      	movs	r3, #0
 8003154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003156:	4b8b      	ldr	r3, [pc, #556]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10d      	bne.n	800317e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003162:	4b88      	ldr	r3, [pc, #544]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	4a87      	ldr	r2, [pc, #540]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800316c:	61d3      	str	r3, [r2, #28]
 800316e:	4b85      	ldr	r3, [pc, #532]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317a:	2301      	movs	r3, #1
 800317c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317e:	4b82      	ldr	r3, [pc, #520]	@ (8003388 <HAL_RCC_OscConfig+0x4c8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d118      	bne.n	80031bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800318a:	4b7f      	ldr	r3, [pc, #508]	@ (8003388 <HAL_RCC_OscConfig+0x4c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7e      	ldr	r2, [pc, #504]	@ (8003388 <HAL_RCC_OscConfig+0x4c8>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003196:	f7fe ff89 	bl	80020ac <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319e:	f7fe ff85 	bl	80020ac <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b64      	cmp	r3, #100	@ 0x64
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e103      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	4b75      	ldr	r3, [pc, #468]	@ (8003388 <HAL_RCC_OscConfig+0x4c8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x312>
 80031c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6213      	str	r3, [r2, #32]
 80031d0:	e02d      	b.n	800322e <HAL_RCC_OscConfig+0x36e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x334>
 80031da:	4b6a      	ldr	r3, [pc, #424]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	4a69      	ldr	r2, [pc, #420]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	6213      	str	r3, [r2, #32]
 80031e6:	4b67      	ldr	r3, [pc, #412]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4a66      	ldr	r2, [pc, #408]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	f023 0304 	bic.w	r3, r3, #4
 80031f0:	6213      	str	r3, [r2, #32]
 80031f2:	e01c      	b.n	800322e <HAL_RCC_OscConfig+0x36e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d10c      	bne.n	8003216 <HAL_RCC_OscConfig+0x356>
 80031fc:	4b61      	ldr	r3, [pc, #388]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	4a60      	ldr	r2, [pc, #384]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003202:	f043 0304 	orr.w	r3, r3, #4
 8003206:	6213      	str	r3, [r2, #32]
 8003208:	4b5e      	ldr	r3, [pc, #376]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a5d      	ldr	r2, [pc, #372]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	e00b      	b.n	800322e <HAL_RCC_OscConfig+0x36e>
 8003216:	4b5b      	ldr	r3, [pc, #364]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a5a      	ldr	r2, [pc, #360]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	4b58      	ldr	r3, [pc, #352]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a57      	ldr	r2, [pc, #348]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d015      	beq.n	8003262 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003236:	f7fe ff39 	bl	80020ac <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fe ff35 	bl	80020ac <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e0b1      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003254:	4b4b      	ldr	r3, [pc, #300]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ee      	beq.n	800323e <HAL_RCC_OscConfig+0x37e>
 8003260:	e014      	b.n	800328c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7fe ff23 	bl	80020ac <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe ff1f 	bl	80020ac <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e09b      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003280:	4b40      	ldr	r3, [pc, #256]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ee      	bne.n	800326a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4b3c      	ldr	r3, [pc, #240]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4a3b      	ldr	r2, [pc, #236]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800329c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8087 	beq.w	80033b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a8:	4b36      	ldr	r3, [pc, #216]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d061      	beq.n	8003378 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d146      	bne.n	800334a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032bc:	4b33      	ldr	r3, [pc, #204]	@ (800338c <HAL_RCC_OscConfig+0x4cc>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fe fef3 	bl	80020ac <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe feef 	bl	80020ac <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e06d      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032dc:	4b29      	ldr	r3, [pc, #164]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f0:	d108      	bne.n	8003304 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032f2:	4b24      	ldr	r3, [pc, #144]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	4921      	ldr	r1, [pc, #132]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003304:	4b1f      	ldr	r3, [pc, #124]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a19      	ldr	r1, [r3, #32]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	430b      	orrs	r3, r1
 8003316:	491b      	ldr	r1, [pc, #108]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800331c:	4b1b      	ldr	r3, [pc, #108]	@ (800338c <HAL_RCC_OscConfig+0x4cc>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7fe fec3 	bl	80020ac <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332a:	f7fe febf 	bl	80020ac <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e03d      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800333c:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x46a>
 8003348:	e035      	b.n	80033b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334a:	4b10      	ldr	r3, [pc, #64]	@ (800338c <HAL_RCC_OscConfig+0x4cc>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7fe feac 	bl	80020ac <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003358:	f7fe fea8 	bl	80020ac <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e026      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336a:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x498>
 8003376:	e01e      	b.n	80033b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d107      	bne.n	8003390 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e019      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
 8003384:	40021000 	.word	0x40021000
 8003388:	40007000 	.word	0x40007000
 800338c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003390:	4b0b      	ldr	r3, [pc, #44]	@ (80033c0 <HAL_RCC_OscConfig+0x500>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d106      	bne.n	80033b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40021000 	.word	0x40021000

080033c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0d0      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d910      	bls.n	8003408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b67      	ldr	r3, [pc, #412]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 0207 	bic.w	r2, r3, #7
 80033ee:	4965      	ldr	r1, [pc, #404]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b63      	ldr	r3, [pc, #396]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0b8      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d020      	beq.n	8003456 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003420:	4b59      	ldr	r3, [pc, #356]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a58      	ldr	r2, [pc, #352]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800342a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003438:	4b53      	ldr	r3, [pc, #332]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4a52      	ldr	r2, [pc, #328]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 800343e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003442:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003444:	4b50      	ldr	r3, [pc, #320]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	494d      	ldr	r1, [pc, #308]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d040      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b47      	ldr	r3, [pc, #284]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d115      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07f      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d107      	bne.n	8003492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003482:	4b41      	ldr	r3, [pc, #260]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e073      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003492:	4b3d      	ldr	r3, [pc, #244]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e06b      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a2:	4b39      	ldr	r3, [pc, #228]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f023 0203 	bic.w	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4936      	ldr	r1, [pc, #216]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b4:	f7fe fdfa 	bl	80020ac <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034bc:	f7fe fdf6 	bl	80020ac <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e053      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 020c 	and.w	r2, r3, #12
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d1eb      	bne.n	80034bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e4:	4b27      	ldr	r3, [pc, #156]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d210      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b24      	ldr	r3, [pc, #144]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 0207 	bic.w	r2, r3, #7
 80034fa:	4922      	ldr	r1, [pc, #136]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b20      	ldr	r3, [pc, #128]	@ (8003584 <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e032      	b.n	800357a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003520:	4b19      	ldr	r3, [pc, #100]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4916      	ldr	r1, [pc, #88]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800353e:	4b12      	ldr	r3, [pc, #72]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	490e      	ldr	r1, [pc, #56]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003552:	f000 f821 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8003556:	4602      	mov	r2, r0
 8003558:	4b0b      	ldr	r3, [pc, #44]	@ (8003588 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	490a      	ldr	r1, [pc, #40]	@ (800358c <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	5ccb      	ldrb	r3, [r1, r3]
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	4a09      	ldr	r2, [pc, #36]	@ (8003590 <HAL_RCC_ClockConfig+0x1cc>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800356e:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <HAL_RCC_ClockConfig+0x1d0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe fd58 	bl	8002028 <HAL_InitTick>

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40022000 	.word	0x40022000
 8003588:	40021000 	.word	0x40021000
 800358c:	08006144 	.word	0x08006144
 8003590:	20000024 	.word	0x20000024
 8003594:	20000028 	.word	0x20000028

08003598 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035b2:	4b1e      	ldr	r3, [pc, #120]	@ (800362c <HAL_RCC_GetSysClockFreq+0x94>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d002      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x30>
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d003      	beq.n	80035ce <HAL_RCC_GetSysClockFreq+0x36>
 80035c6:	e027      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035c8:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ca:	613b      	str	r3, [r7, #16]
      break;
 80035cc:	e027      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	0c9b      	lsrs	r3, r3, #18
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	4a17      	ldr	r2, [pc, #92]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035d8:	5cd3      	ldrb	r3, [r2, r3]
 80035da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d010      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035e6:	4b11      	ldr	r3, [pc, #68]	@ (800362c <HAL_RCC_GetSysClockFreq+0x94>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	0c5b      	lsrs	r3, r3, #17
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	4a11      	ldr	r2, [pc, #68]	@ (8003638 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035f2:	5cd3      	ldrb	r3, [r2, r3]
 80035f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x98>)
 80035fa:	fb03 f202 	mul.w	r2, r3, r2
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e004      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a0c      	ldr	r2, [pc, #48]	@ (800363c <HAL_RCC_GetSysClockFreq+0xa4>)
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	613b      	str	r3, [r7, #16]
      break;
 8003616:	e002      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003618:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x98>)
 800361a:	613b      	str	r3, [r7, #16]
      break;
 800361c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361e:	693b      	ldr	r3, [r7, #16]
}
 8003620:	4618      	mov	r0, r3
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	007a1200 	.word	0x007a1200
 8003634:	0800615c 	.word	0x0800615c
 8003638:	0800616c 	.word	0x0800616c
 800363c:	003d0900 	.word	0x003d0900

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003644:	4b02      	ldr	r3, [pc, #8]	@ (8003650 <HAL_RCC_GetHCLKFreq+0x10>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	20000024 	.word	0x20000024

08003654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003658:	f7ff fff2 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4903      	ldr	r1, [pc, #12]	@ (8003678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	08006154 	.word	0x08006154

0800367c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003680:	f7ff ffde 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	@ (800369c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	0adb      	lsrs	r3, r3, #11
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4903      	ldr	r1, [pc, #12]	@ (80036a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	08006154 	.word	0x08006154

080036a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036ac:	4b0a      	ldr	r3, [pc, #40]	@ (80036d8 <RCC_Delay+0x34>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0a      	ldr	r2, [pc, #40]	@ (80036dc <RCC_Delay+0x38>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	0a5b      	lsrs	r3, r3, #9
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036c0:	bf00      	nop
  }
  while (Delay --);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1e5a      	subs	r2, r3, #1
 80036c6:	60fa      	str	r2, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f9      	bne.n	80036c0 <RCC_Delay+0x1c>
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	20000024 	.word	0x20000024
 80036dc:	10624dd3 	.word	0x10624dd3

080036e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d07d      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036fc:	2300      	movs	r3, #0
 80036fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003700:	4b4f      	ldr	r3, [pc, #316]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10d      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370c:	4b4c      	ldr	r3, [pc, #304]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	4a4b      	ldr	r2, [pc, #300]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003716:	61d3      	str	r3, [r2, #28]
 8003718:	4b49      	ldr	r3, [pc, #292]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003724:	2301      	movs	r3, #1
 8003726:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003728:	4b46      	ldr	r3, [pc, #280]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d118      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003734:	4b43      	ldr	r3, [pc, #268]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a42      	ldr	r2, [pc, #264]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800373a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800373e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003740:	f7fe fcb4 	bl	80020ac <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003746:	e008      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003748:	f7fe fcb0 	bl	80020ac <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	@ 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e06d      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	4b3a      	ldr	r3, [pc, #232]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003766:	4b36      	ldr	r3, [pc, #216]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800376e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d02e      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	429a      	cmp	r2, r3
 8003782:	d027      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003784:	4b2e      	ldr	r3, [pc, #184]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800378c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800378e:	4b2e      	ldr	r3, [pc, #184]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003790:	2201      	movs	r2, #1
 8003792:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003794:	4b2c      	ldr	r3, [pc, #176]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800379a:	4a29      	ldr	r2, [pc, #164]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d014      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037aa:	f7fe fc7f 	bl	80020ac <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b0:	e00a      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b2:	f7fe fc7b 	bl	80020ac <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e036      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0ee      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4917      	ldr	r1, [pc, #92]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d105      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ec:	4b14      	ldr	r3, [pc, #80]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	4a13      	ldr	r2, [pc, #76]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003804:	4b0e      	ldr	r3, [pc, #56]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	490b      	ldr	r1, [pc, #44]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	4313      	orrs	r3, r2
 8003814:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	d008      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003822:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	4904      	ldr	r1, [pc, #16]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	40007000 	.word	0x40007000
 8003848:	42420440 	.word	0x42420440

0800384c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e041      	b.n	80038e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fe f87c 	bl	8001970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3304      	adds	r3, #4
 8003888:	4619      	mov	r1, r3
 800388a:	4610      	mov	r0, r2
 800388c:	f000 fce8 	bl	8004260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d001      	beq.n	8003904 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e032      	b.n	800396a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a18      	ldr	r2, [pc, #96]	@ (8003974 <HAL_TIM_Base_Start+0x88>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00e      	beq.n	8003934 <HAL_TIM_Base_Start+0x48>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391e:	d009      	beq.n	8003934 <HAL_TIM_Base_Start+0x48>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a14      	ldr	r2, [pc, #80]	@ (8003978 <HAL_TIM_Base_Start+0x8c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_TIM_Base_Start+0x48>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a13      	ldr	r2, [pc, #76]	@ (800397c <HAL_TIM_Base_Start+0x90>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d111      	bne.n	8003958 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b06      	cmp	r3, #6
 8003944:	d010      	beq.n	8003968 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0201 	orr.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003956:	e007      	b.n	8003968 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr
 8003974:	40012c00 	.word	0x40012c00
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800

08003980 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e041      	b.n	8003a16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f839 	bl	8003a1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 fc4e 	bl	8004260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <HAL_TIM_PWM_Start_DMA+0x2c>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e022      	b.n	8003aa2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d109      	bne.n	8003a76 <HAL_TIM_PWM_Start_DMA+0x46>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	bf0c      	ite	eq
 8003a6e:	2301      	moveq	r3, #1
 8003a70:	2300      	movne	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	e015      	b.n	8003aa2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d109      	bne.n	8003a90 <HAL_TIM_PWM_Start_DMA+0x60>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	e008      	b.n	8003aa2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e153      	b.n	8003d52 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <HAL_TIM_PWM_Start_DMA+0x94>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e022      	b.n	8003b0a <HAL_TIM_PWM_Start_DMA+0xda>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d109      	bne.n	8003ade <HAL_TIM_PWM_Start_DMA+0xae>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	e015      	b.n	8003b0a <HAL_TIM_PWM_Start_DMA+0xda>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d109      	bne.n	8003af8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e008      	b.n	8003b0a <HAL_TIM_PWM_Start_DMA+0xda>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d024      	beq.n	8003b58 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_TIM_PWM_Start_DMA+0xea>
 8003b14:	887b      	ldrh	r3, [r7, #2]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e119      	b.n	8003d52 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <HAL_TIM_PWM_Start_DMA+0xfe>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b2c:	e016      	b.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d104      	bne.n	8003b3e <HAL_TIM_PWM_Start_DMA+0x10e>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b3c:	e00e      	b.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d104      	bne.n	8003b4e <HAL_TIM_PWM_Start_DMA+0x11e>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b4c:	e006      	b.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2202      	movs	r2, #2
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b56:	e001      	b.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0fa      	b.n	8003d52 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b0c      	cmp	r3, #12
 8003b60:	f200 80ae 	bhi.w	8003cc0 <HAL_TIM_PWM_Start_DMA+0x290>
 8003b64:	a201      	add	r2, pc, #4	@ (adr r2, 8003b6c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003ba1 	.word	0x08003ba1
 8003b70:	08003cc1 	.word	0x08003cc1
 8003b74:	08003cc1 	.word	0x08003cc1
 8003b78:	08003cc1 	.word	0x08003cc1
 8003b7c:	08003be9 	.word	0x08003be9
 8003b80:	08003cc1 	.word	0x08003cc1
 8003b84:	08003cc1 	.word	0x08003cc1
 8003b88:	08003cc1 	.word	0x08003cc1
 8003b8c:	08003c31 	.word	0x08003c31
 8003b90:	08003cc1 	.word	0x08003cc1
 8003b94:	08003cc1 	.word	0x08003cc1
 8003b98:	08003cc1 	.word	0x08003cc1
 8003b9c:	08003c79 	.word	0x08003c79
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	4a6d      	ldr	r2, [pc, #436]	@ (8003d5c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003ba6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	4a6c      	ldr	r2, [pc, #432]	@ (8003d60 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003bae:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8003d64 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003bb6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3334      	adds	r3, #52	@ 0x34
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	887b      	ldrh	r3, [r7, #2]
 8003bc8:	f7fe fe18 	bl	80027fc <HAL_DMA_Start_IT>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e0bd      	b.n	8003d52 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be4:	60da      	str	r2, [r3, #12]
      break;
 8003be6:	e06e      	b.n	8003cc6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	4a5b      	ldr	r2, [pc, #364]	@ (8003d5c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003bee:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf4:	4a5a      	ldr	r2, [pc, #360]	@ (8003d60 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfc:	4a59      	ldr	r2, [pc, #356]	@ (8003d64 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003bfe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3338      	adds	r3, #56	@ 0x38
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	887b      	ldrh	r3, [r7, #2]
 8003c10:	f7fe fdf4 	bl	80027fc <HAL_DMA_Start_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e099      	b.n	8003d52 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c2c:	60da      	str	r2, [r3, #12]
      break;
 8003c2e:	e04a      	b.n	8003cc6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c34:	4a49      	ldr	r2, [pc, #292]	@ (8003d5c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003c36:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3c:	4a48      	ldr	r2, [pc, #288]	@ (8003d60 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	4a47      	ldr	r2, [pc, #284]	@ (8003d64 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003c46:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	333c      	adds	r3, #60	@ 0x3c
 8003c54:	461a      	mov	r2, r3
 8003c56:	887b      	ldrh	r3, [r7, #2]
 8003c58:	f7fe fdd0 	bl	80027fc <HAL_DMA_Start_IT>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e075      	b.n	8003d52 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c74:	60da      	str	r2, [r3, #12]
      break;
 8003c76:	e026      	b.n	8003cc6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7c:	4a37      	ldr	r2, [pc, #220]	@ (8003d5c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003c7e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c84:	4a36      	ldr	r2, [pc, #216]	@ (8003d60 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003c86:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	4a35      	ldr	r2, [pc, #212]	@ (8003d64 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003c8e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3340      	adds	r3, #64	@ 0x40
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	887b      	ldrh	r3, [r7, #2]
 8003ca0:	f7fe fdac 	bl	80027fc <HAL_DMA_Start_IT>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e051      	b.n	8003d52 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003cbc:	60da      	str	r2, [r3, #12]
      break;
 8003cbe:	e002      	b.n	8003cc6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d141      	bne.n	8003d50 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fd4f 	bl	8004778 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a22      	ldr	r2, [pc, #136]	@ (8003d68 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d107      	bne.n	8003cf4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cf2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d68 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00e      	beq.n	8003d1c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d06:	d009      	beq.n	8003d1c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a17      	ldr	r2, [pc, #92]	@ (8003d6c <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d004      	beq.n	8003d1c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a16      	ldr	r2, [pc, #88]	@ (8003d70 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d111      	bne.n	8003d40 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d010      	beq.n	8003d50 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	e007      	b.n	8003d50 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	0800414f 	.word	0x0800414f
 8003d60:	080041f7 	.word	0x080041f7
 8003d64:	080040bd 	.word	0x080040bd
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800

08003d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e0ae      	b.n	8003ef0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	f200 809f 	bhi.w	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003da2:	a201      	add	r2, pc, #4	@ (adr r2, 8003da8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003ddd 	.word	0x08003ddd
 8003dac:	08003ee1 	.word	0x08003ee1
 8003db0:	08003ee1 	.word	0x08003ee1
 8003db4:	08003ee1 	.word	0x08003ee1
 8003db8:	08003e1d 	.word	0x08003e1d
 8003dbc:	08003ee1 	.word	0x08003ee1
 8003dc0:	08003ee1 	.word	0x08003ee1
 8003dc4:	08003ee1 	.word	0x08003ee1
 8003dc8:	08003e5f 	.word	0x08003e5f
 8003dcc:	08003ee1 	.word	0x08003ee1
 8003dd0:	08003ee1 	.word	0x08003ee1
 8003dd4:	08003ee1 	.word	0x08003ee1
 8003dd8:	08003e9f 	.word	0x08003e9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 faaa 	bl	800433c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0208 	orr.w	r2, r2, #8
 8003df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0204 	bic.w	r2, r2, #4
 8003e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6999      	ldr	r1, [r3, #24]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	619a      	str	r2, [r3, #24]
      break;
 8003e1a:	e064      	b.n	8003ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 faf0 	bl	8004408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6999      	ldr	r1, [r3, #24]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	021a      	lsls	r2, r3, #8
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	619a      	str	r2, [r3, #24]
      break;
 8003e5c:	e043      	b.n	8003ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fb39 	bl	80044dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0208 	orr.w	r2, r2, #8
 8003e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0204 	bic.w	r2, r2, #4
 8003e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69d9      	ldr	r1, [r3, #28]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	61da      	str	r2, [r3, #28]
      break;
 8003e9c:	e023      	b.n	8003ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fb83 	bl	80045b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69d9      	ldr	r1, [r3, #28]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	021a      	lsls	r2, r3, #8
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	61da      	str	r2, [r3, #28]
      break;
 8003ede:	e002      	b.n	8003ee6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIM_ConfigClockSource+0x1c>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e0b4      	b.n	800407e <HAL_TIM_ConfigClockSource+0x186>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f4c:	d03e      	beq.n	8003fcc <HAL_TIM_ConfigClockSource+0xd4>
 8003f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f52:	f200 8087 	bhi.w	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f5a:	f000 8086 	beq.w	800406a <HAL_TIM_ConfigClockSource+0x172>
 8003f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f62:	d87f      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f64:	2b70      	cmp	r3, #112	@ 0x70
 8003f66:	d01a      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0xa6>
 8003f68:	2b70      	cmp	r3, #112	@ 0x70
 8003f6a:	d87b      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f6c:	2b60      	cmp	r3, #96	@ 0x60
 8003f6e:	d050      	beq.n	8004012 <HAL_TIM_ConfigClockSource+0x11a>
 8003f70:	2b60      	cmp	r3, #96	@ 0x60
 8003f72:	d877      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f74:	2b50      	cmp	r3, #80	@ 0x50
 8003f76:	d03c      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0xfa>
 8003f78:	2b50      	cmp	r3, #80	@ 0x50
 8003f7a:	d873      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f7c:	2b40      	cmp	r3, #64	@ 0x40
 8003f7e:	d058      	beq.n	8004032 <HAL_TIM_ConfigClockSource+0x13a>
 8003f80:	2b40      	cmp	r3, #64	@ 0x40
 8003f82:	d86f      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f84:	2b30      	cmp	r3, #48	@ 0x30
 8003f86:	d064      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x15a>
 8003f88:	2b30      	cmp	r3, #48	@ 0x30
 8003f8a:	d86b      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	d060      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x15a>
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d867      	bhi.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d05c      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x15a>
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d05a      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x15a>
 8003f9c:	e062      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fae:	f000 fbc4 	bl	800473a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	609a      	str	r2, [r3, #8]
      break;
 8003fca:	e04f      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fdc:	f000 fbad 	bl	800473a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fee:	609a      	str	r2, [r3, #8]
      break;
 8003ff0:	e03c      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffe:	461a      	mov	r2, r3
 8004000:	f000 fb24 	bl	800464c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2150      	movs	r1, #80	@ 0x50
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fb7b 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 8004010:	e02c      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800401e:	461a      	mov	r2, r3
 8004020:	f000 fb42 	bl	80046a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2160      	movs	r1, #96	@ 0x60
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fb6b 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 8004030:	e01c      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800403e:	461a      	mov	r2, r3
 8004040:	f000 fb04 	bl	800464c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2140      	movs	r1, #64	@ 0x40
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fb5b 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 8004050:	e00c      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f000 fb52 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 8004062:	e003      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
      break;
 8004068:	e000      	b.n	800406c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800406a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr

080040aa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d107      	bne.n	80040e4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040e2:	e02a      	b.n	800413a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d107      	bne.n	80040fe <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2202      	movs	r2, #2
 80040f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040fc:	e01d      	b.n	800413a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	d107      	bne.n	8004118 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2204      	movs	r2, #4
 800410c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004116:	e010      	b.n	800413a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	d107      	bne.n	8004132 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2208      	movs	r2, #8
 8004126:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004130:	e003      	b.n	800413a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff ffb5 	bl	80040aa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	771a      	strb	r2, [r3, #28]
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	429a      	cmp	r2, r3
 8004164:	d10b      	bne.n	800417e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d136      	bne.n	80041e2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800417c:	e031      	b.n	80041e2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	429a      	cmp	r2, r3
 8004186:	d10b      	bne.n	80041a0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2202      	movs	r2, #2
 800418c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d125      	bne.n	80041e2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800419e:	e020      	b.n	80041e2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d10b      	bne.n	80041c2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2204      	movs	r2, #4
 80041ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d114      	bne.n	80041e2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041c0:	e00f      	b.n	80041e2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d10a      	bne.n	80041e2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2208      	movs	r2, #8
 80041d0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d103      	bne.n	80041e2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff ff4f 	bl	8004086 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	771a      	strb	r2, [r3, #28]
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d103      	bne.n	8004216 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	771a      	strb	r2, [r3, #28]
 8004214:	e019      	b.n	800424a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	429a      	cmp	r2, r3
 800421e:	d103      	bne.n	8004228 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2202      	movs	r2, #2
 8004224:	771a      	strb	r2, [r3, #28]
 8004226:	e010      	b.n	800424a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	429a      	cmp	r2, r3
 8004230:	d103      	bne.n	800423a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2204      	movs	r2, #4
 8004236:	771a      	strb	r2, [r3, #28]
 8004238:	e007      	b.n	800424a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d102      	bne.n	800424a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2208      	movs	r2, #8
 8004248:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff ff24 	bl	8004098 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	771a      	strb	r2, [r3, #28]
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a2f      	ldr	r2, [pc, #188]	@ (8004330 <TIM_Base_SetConfig+0xd0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00b      	beq.n	8004290 <TIM_Base_SetConfig+0x30>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427e:	d007      	beq.n	8004290 <TIM_Base_SetConfig+0x30>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a2c      	ldr	r2, [pc, #176]	@ (8004334 <TIM_Base_SetConfig+0xd4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_Base_SetConfig+0x30>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a2b      	ldr	r2, [pc, #172]	@ (8004338 <TIM_Base_SetConfig+0xd8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d108      	bne.n	80042a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a22      	ldr	r2, [pc, #136]	@ (8004330 <TIM_Base_SetConfig+0xd0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00b      	beq.n	80042c2 <TIM_Base_SetConfig+0x62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b0:	d007      	beq.n	80042c2 <TIM_Base_SetConfig+0x62>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004334 <TIM_Base_SetConfig+0xd4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d003      	beq.n	80042c2 <TIM_Base_SetConfig+0x62>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004338 <TIM_Base_SetConfig+0xd8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d108      	bne.n	80042d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004330 <TIM_Base_SetConfig+0xd0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d103      	bne.n	8004308 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f023 0201 	bic.w	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	611a      	str	r2, [r3, #16]
  }
}
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800

0800433c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f023 0201 	bic.w	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800436a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f023 0302 	bic.w	r3, r3, #2
 8004384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a1c      	ldr	r2, [pc, #112]	@ (8004404 <TIM_OC1_SetConfig+0xc8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d10c      	bne.n	80043b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f023 0308 	bic.w	r3, r3, #8
 800439e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f023 0304 	bic.w	r3, r3, #4
 80043b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a13      	ldr	r2, [pc, #76]	@ (8004404 <TIM_OC1_SetConfig+0xc8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d111      	bne.n	80043de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	621a      	str	r2, [r3, #32]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40012c00 	.word	0x40012c00

08004408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f023 0210 	bic.w	r2, r3, #16
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800443e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0320 	bic.w	r3, r3, #32
 8004452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a1d      	ldr	r2, [pc, #116]	@ (80044d8 <TIM_OC2_SetConfig+0xd0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d10d      	bne.n	8004484 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800446e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004482:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a14      	ldr	r2, [pc, #80]	@ (80044d8 <TIM_OC2_SetConfig+0xd0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d113      	bne.n	80044b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004492:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800449a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	40012c00 	.word	0x40012c00

080044dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800450a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1d      	ldr	r2, [pc, #116]	@ (80045ac <TIM_OC3_SetConfig+0xd0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10d      	bne.n	8004556 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a14      	ldr	r2, [pc, #80]	@ (80045ac <TIM_OC3_SetConfig+0xd0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d113      	bne.n	8004586 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	621a      	str	r2, [r3, #32]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40012c00 	.word	0x40012c00

080045b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	031b      	lsls	r3, r3, #12
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a0f      	ldr	r2, [pc, #60]	@ (8004648 <TIM_OC4_SetConfig+0x98>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d109      	bne.n	8004624 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004616:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr
 8004648:	40012c00 	.word	0x40012c00

0800464c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	f023 0201 	bic.w	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f023 030a 	bic.w	r3, r3, #10
 8004688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	621a      	str	r2, [r3, #32]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr

080046a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f023 0210 	bic.w	r2, r3, #16
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	031b      	lsls	r3, r3, #12
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	f043 0307 	orr.w	r3, r3, #7
 8004728:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800473a:	b480      	push	{r7}
 800473c:	b087      	sub	sp, #28
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004754:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	021a      	lsls	r2, r3, #8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	431a      	orrs	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4313      	orrs	r3, r2
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	609a      	str	r2, [r3, #8]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr

08004778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	2201      	movs	r2, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1a      	ldr	r2, [r3, #32]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	43db      	mvns	r3, r3
 800479a:	401a      	ands	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	fa01 f303 	lsl.w	r3, r1, r3
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e046      	b.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a16      	ldr	r2, [pc, #88]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00e      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004824:	d009      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a12      	ldr	r2, [pc, #72]	@ (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a10      	ldr	r2, [pc, #64]	@ (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d10c      	bne.n	8004854 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	4313      	orrs	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40000400 	.word	0x40000400
 8004878:	40000800 	.word	0x40000800

0800487c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e042      	b.n	8004914 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd fa20 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2224      	movs	r2, #36	@ 0x24
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f971 	bl	8004ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	@ 0x28
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b20      	cmp	r3, #32
 800493a:	d175      	bne.n	8004a28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <HAL_UART_Transmit+0x2c>
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e06e      	b.n	8004a2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2221      	movs	r2, #33	@ 0x21
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800495a:	f7fd fba7 	bl	80020ac <HAL_GetTick>
 800495e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	88fa      	ldrh	r2, [r7, #6]
 8004964:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	88fa      	ldrh	r2, [r7, #6]
 800496a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004974:	d108      	bne.n	8004988 <HAL_UART_Transmit+0x6c>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	61bb      	str	r3, [r7, #24]
 8004986:	e003      	b.n	8004990 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800498c:	2300      	movs	r3, #0
 800498e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004990:	e02e      	b.n	80049f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2200      	movs	r2, #0
 800499a:	2180      	movs	r1, #128	@ 0x80
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f848 	bl	8004a32 <UART_WaitOnFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e03a      	b.n	8004a2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10b      	bne.n	80049d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	3302      	adds	r3, #2
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	e007      	b.n	80049e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	3301      	adds	r3, #1
 80049e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1cb      	bne.n	8004992 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2200      	movs	r2, #0
 8004a02:	2140      	movs	r1, #64	@ 0x40
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f814 	bl	8004a32 <UART_WaitOnFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e006      	b.n	8004a2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	e000      	b.n	8004a2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
  }
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3720      	adds	r7, #32
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b086      	sub	sp, #24
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a42:	e03b      	b.n	8004abc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4a:	d037      	beq.n	8004abc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4c:	f7fd fb2e 	bl	80020ac <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	6a3a      	ldr	r2, [r7, #32]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d302      	bcc.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e03a      	b.n	8004adc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d023      	beq.n	8004abc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b80      	cmp	r3, #128	@ 0x80
 8004a78:	d020      	beq.n	8004abc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b40      	cmp	r3, #64	@ 0x40
 8004a7e:	d01d      	beq.n	8004abc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d116      	bne.n	8004abc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f81d 	bl	8004ae4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2208      	movs	r2, #8
 8004aae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e00f      	b.n	8004adc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d0b4      	beq.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b095      	sub	sp, #84	@ 0x54
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e5      	bne.n	8004aec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3314      	adds	r3, #20
 8004b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f023 0301 	bic.w	r3, r3, #1
 8004b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3314      	adds	r3, #20
 8004b3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e5      	bne.n	8004b20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d119      	bne.n	8004b90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f023 0310 	bic.w	r3, r3, #16
 8004b72:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	330c      	adds	r3, #12
 8004b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b7c:	61ba      	str	r2, [r7, #24]
 8004b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6979      	ldr	r1, [r7, #20]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e5      	bne.n	8004b5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b9e:	bf00      	nop
 8004ba0:	3754      	adds	r7, #84	@ 0x54
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr

08004ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004be2:	f023 030c 	bic.w	r3, r3, #12
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	430b      	orrs	r3, r1
 8004bee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8004cbc <UART_SetConfig+0x114>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d103      	bne.n	8004c18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c10:	f7fe fd34 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	e002      	b.n	8004c1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c18:	f7fe fd1c 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 8004c1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009a      	lsls	r2, r3, #2
 8004c28:	441a      	add	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	4a22      	ldr	r2, [pc, #136]	@ (8004cc0 <UART_SetConfig+0x118>)
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	0119      	lsls	r1, r3, #4
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	009a      	lsls	r2, r3, #2
 8004c48:	441a      	add	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c54:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc0 <UART_SetConfig+0x118>)
 8004c56:	fba3 0302 	umull	r0, r3, r3, r2
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	2064      	movs	r0, #100	@ 0x64
 8004c5e:	fb00 f303 	mul.w	r3, r0, r3
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	3332      	adds	r3, #50	@ 0x32
 8004c68:	4a15      	ldr	r2, [pc, #84]	@ (8004cc0 <UART_SetConfig+0x118>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c74:	4419      	add	r1, r3
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009a      	lsls	r2, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc0 <UART_SetConfig+0x118>)
 8004c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	2064      	movs	r0, #100	@ 0x64
 8004c96:	fb00 f303 	mul.w	r3, r0, r3
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	3332      	adds	r3, #50	@ 0x32
 8004ca0:	4a07      	ldr	r2, [pc, #28]	@ (8004cc0 <UART_SetConfig+0x118>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	f003 020f 	and.w	r2, r3, #15
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	440a      	add	r2, r1
 8004cb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40013800 	.word	0x40013800
 8004cc0:	51eb851f 	.word	0x51eb851f

08004cc4 <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fd f9f7 	bl	80020c0 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *hLed)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  while (hLed->Lock)
 8004ce2:	e002      	b.n	8004cea <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	f7ff ffed 	bl	8004cc4 <WS28XX_Delay>
  while (hLed->Lock)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	795b      	ldrb	r3, [r3, #5]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f8      	bne.n	8004ce4 <WS28XX_Lock+0xa>
  }
  hLed->Lock = 1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	715a      	strb	r2, [r3, #5]
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  hLed->Lock = 0;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	715a      	strb	r2, [r3, #5]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr

08004d18 <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *hLed, TIM_HandleTypeDef *hTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	4611      	mov	r1, r2
 8004d24:	461a      	mov	r2, r3
 8004d26:	460b      	mov	r3, r1
 8004d28:	80fb      	strh	r3, [r7, #6]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	717b      	strb	r3, [r7, #5]
  bool answer = false;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	75fb      	strb	r3, [r7, #23]
  uint32_t aar_value;
  do
  {
    if (hLed == NULL || hTim == NULL)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d079      	beq.n	8004e2c <WS28XX_Init+0x114>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d076      	beq.n	8004e2c <WS28XX_Init+0x114>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 8004d3e:	8c3b      	ldrh	r3, [r7, #32]
 8004d40:	2b32      	cmp	r3, #50	@ 0x32
 8004d42:	d872      	bhi.n	8004e2a <WS28XX_Init+0x112>
    {
      break;
    }
    hLed->Channel = Channel;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	797a      	ldrb	r2, [r7, #5]
 8004d48:	711a      	strb	r2, [r3, #4]
    hLed->MaxPixel = Pixel;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8c3a      	ldrh	r2, [r7, #32]
 8004d4e:	815a      	strh	r2, [r3, #10]
    hLed->hTim = hTim;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fb fab1 	bl	80002c0 <__aeabi_i2f>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4935      	ldr	r1, [pc, #212]	@ (8004e38 <WS28XX_Init+0x120>)
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fb fbb4 	bl	80004d0 <__aeabi_fdiv>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fb f9f0 	bl	8000154 <__aeabi_fsub>
 8004d74:	4603      	mov	r3, r0
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fb fc46 	bl	8000608 <__aeabi_f2uiz>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(hLed->hTim ,aar_value);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(hLed->hTim, 0);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	629a      	str	r2, [r3, #40]	@ 0x28
    hLed->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8004d9c:	6938      	ldr	r0, [r7, #16]
 8004d9e:	f7fb fa8b 	bl	80002b8 <__aeabi_ui2f>
 8004da2:	4603      	mov	r3, r0
 8004da4:	4925      	ldr	r1, [pc, #148]	@ (8004e3c <WS28XX_Init+0x124>)
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fb fade 	bl	8000368 <__aeabi_fmul>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4924      	ldr	r1, [pc, #144]	@ (8004e40 <WS28XX_Init+0x128>)
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fb fb8d 	bl	80004d0 <__aeabi_fdiv>
 8004db6:	4603      	mov	r3, r0
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fb fc25 	bl	8000608 <__aeabi_f2uiz>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	80da      	strh	r2, [r3, #6]
    hLed->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8004dc6:	6938      	ldr	r0, [r7, #16]
 8004dc8:	f7fb fa76 	bl	80002b8 <__aeabi_ui2f>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	491a      	ldr	r1, [pc, #104]	@ (8004e38 <WS28XX_Init+0x120>)
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fb fac9 	bl	8000368 <__aeabi_fmul>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4919      	ldr	r1, [pc, #100]	@ (8004e40 <WS28XX_Init+0x128>)
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fb fb78 	bl	80004d0 <__aeabi_fdiv>
 8004de0:	4603      	mov	r3, r0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fb fc10 	bl	8000608 <__aeabi_f2uiz>
 8004de8:	4603      	mov	r3, r0
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	811a      	strh	r2, [r3, #8]
    memset(hLed->Pixel, 0, sizeof(hLed->Pixel));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	330c      	adds	r3, #12
 8004df4:	2296      	movs	r2, #150	@ 0x96
 8004df6:	2100      	movs	r1, #0
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fb51 	bl	80054a0 <memset>
    memset(hLed->Buffer, 0, sizeof(hLed->Buffer));
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	33a2      	adds	r3, #162	@ 0xa2
 8004e02:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8004e06:	2100      	movs	r1, #0
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fb49 	bl	80054a0 <memset>
    HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, Pixel);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	791b      	ldrb	r3, [r3, #4]
 8004e16:	4619      	mov	r1, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f103 02a2 	add.w	r2, r3, #162	@ 0xa2
 8004e1e:	8c3b      	ldrh	r3, [r7, #32]
 8004e20:	f7fe fe06 	bl	8003a30 <HAL_TIM_PWM_Start_DMA>
    answer = true;
 8004e24:	2301      	movs	r3, #1
 8004e26:	75fb      	strb	r3, [r7, #23]
 8004e28:	e000      	b.n	8004e2c <WS28XX_Init+0x114>
      break;
 8004e2a:	bf00      	nop
  }
  while (0);

  return answer;
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	3f4ccccd 	.word	0x3f4ccccd
 8004e3c:	3ecccccd 	.word	0x3ecccccd
 8004e40:	3fa00000 	.word	0x3fa00000

08004e44 <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *hLed, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	461a      	mov	r2, r3
 8004e52:	4603      	mov	r3, r0
 8004e54:	817b      	strh	r3, [r7, #10]
 8004e56:	460b      	mov	r3, r1
 8004e58:	813b      	strh	r3, [r7, #8]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	71fb      	strb	r3, [r7, #7]
  bool answer = true;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	75fb      	strb	r3, [r7, #23]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= hLed->MaxPixel)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	895b      	ldrh	r3, [r3, #10]
 8004e66:	897a      	ldrh	r2, [r7, #10]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d302      	bcc.n	8004e72 <WS28XX_SetPixel_RGBW_565+0x2e>
    {
      answer = false;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e70:	e051      	b.n	8004f16 <WS28XX_SetPixel_RGBW_565+0xd2>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 8004e72:	893b      	ldrh	r3, [r7, #8]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8004e7c:	79fa      	ldrb	r2, [r7, #7]
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
 8004e82:	4a28      	ldr	r2, [pc, #160]	@ (8004f24 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8004e84:	fb82 1203 	smull	r1, r2, r2, r3
 8004e88:	441a      	add	r2, r3
 8004e8a:	11d2      	asrs	r2, r2, #7
 8004e8c:	17db      	asrs	r3, r3, #31
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	75bb      	strb	r3, [r7, #22]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 8004e92:	893b      	ldrh	r3, [r7, #8]
 8004e94:	08db      	lsrs	r3, r3, #3
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8004e9c:	79fa      	ldrb	r2, [r7, #7]
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	4a20      	ldr	r2, [pc, #128]	@ (8004f24 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8004ea4:	fb82 1203 	smull	r1, r2, r2, r3
 8004ea8:	441a      	add	r2, r3
 8004eaa:	11d2      	asrs	r2, r2, #7
 8004eac:	17db      	asrs	r3, r3, #31
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	757b      	strb	r3, [r7, #21]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 8004eb2:	893b      	ldrh	r3, [r7, #8]
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	79fa      	ldrb	r2, [r7, #7]
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	4a19      	ldr	r2, [pc, #100]	@ (8004f24 <WS28XX_SetPixel_RGBW_565+0xe0>)
 8004ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8004ec4:	441a      	add	r2, r3
 8004ec6:	11d2      	asrs	r2, r2, #7
 8004ec8:	17db      	asrs	r3, r3, #31
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	753b      	strb	r3, [r7, #20]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8004ece:	7d7b      	ldrb	r3, [r7, #21]
 8004ed0:	897a      	ldrh	r2, [r7, #10]
 8004ed2:	4915      	ldr	r1, [pc, #84]	@ (8004f28 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8004ed4:	5cc8      	ldrb	r0, [r1, r3]
 8004ed6:	68f9      	ldr	r1, [r7, #12]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	4413      	add	r3, r2
 8004ede:	440b      	add	r3, r1
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 8004ee6:	7dbb      	ldrb	r3, [r7, #22]
 8004ee8:	897a      	ldrh	r2, [r7, #10]
 8004eea:	490f      	ldr	r1, [pc, #60]	@ (8004f28 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8004eec:	5cc8      	ldrb	r0, [r1, r3]
 8004eee:	68f9      	ldr	r1, [r7, #12]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4413      	add	r3, r2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	330d      	adds	r3, #13
 8004efa:	4602      	mov	r2, r0
 8004efc:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 8004efe:	7d3b      	ldrb	r3, [r7, #20]
 8004f00:	897a      	ldrh	r2, [r7, #10]
 8004f02:	4909      	ldr	r1, [pc, #36]	@ (8004f28 <WS28XX_SetPixel_RGBW_565+0xe4>)
 8004f04:	5cc8      	ldrb	r0, [r1, r3]
 8004f06:	68f9      	ldr	r1, [r7, #12]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	4413      	add	r3, r2
 8004f0e:	440b      	add	r3, r1
 8004f10:	330e      	adds	r3, #14
 8004f12:	4602      	mov	r2, r0
 8004f14:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 8004f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bc80      	pop	{r7}
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	80808081 	.word	0x80808081
 8004f28:	08006170 	.word	0x08006170

08004f2c <WS28XX_Update>:
  * @param  *hLed: Pointer to WS28XX_hLedTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *hLed)
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b089      	sub	sp, #36	@ 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  bool answer = true;
 8004f34:	2301      	movs	r3, #1
 8004f36:	77fb      	strb	r3, [r7, #31]
  uint32_t i = 2;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(hLed);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fecc 	bl	8004cda <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8004f42:	2300      	movs	r3, #0
 8004f44:	82fb      	strh	r3, [r7, #22]
 8004f46:	e03c      	b.n	8004fc2 <WS28XX_Update+0x96>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	e033      	b.n	8004fb6 <WS28XX_Update+0x8a>
    {
      for (int b = 7; b >= 0 ; b--)
 8004f4e:	2307      	movs	r3, #7
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e02a      	b.n	8004faa <WS28XX_Update+0x7e>
      {
        if ((hLed->Pixel[pixel][rgb] & (1 << b)) == 0)
 8004f54:	8afa      	ldrh	r2, [r7, #22]
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4413      	add	r3, r2
 8004f5e:	18ca      	adds	r2, r1, r3
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4413      	add	r3, r2
 8004f64:	330c      	adds	r3, #12
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	fa42 f303 	asr.w	r3, r2, r3
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <WS28XX_Update+0x60>
        {
          hLed->Buffer[i] = hLed->Pulse0;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	88db      	ldrh	r3, [r3, #6]
 8004f7c:	b2d9      	uxtb	r1, r3
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	4413      	add	r3, r2
 8004f84:	33a2      	adds	r3, #162	@ 0xa2
 8004f86:	460a      	mov	r2, r1
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e008      	b.n	8004f9e <WS28XX_Update+0x72>
        }
        else
        {
          hLed->Buffer[i] = hLed->Pulse1;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	891b      	ldrh	r3, [r3, #8]
 8004f90:	b2d9      	uxtb	r1, r3
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	4413      	add	r3, r2
 8004f98:	33a2      	adds	r3, #162	@ 0xa2
 8004f9a:	460a      	mov	r2, r1
 8004f9c:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	dad1      	bge.n	8004f54 <WS28XX_Update+0x28>
    for (int rgb = 0; rgb < 3; rgb ++)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	ddc8      	ble.n	8004f4e <WS28XX_Update+0x22>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8004fbc:	8afb      	ldrh	r3, [r7, #22]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	82fb      	strh	r3, [r7, #22]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	895b      	ldrh	r3, [r3, #10]
 8004fc6:	8afa      	ldrh	r2, [r7, #22]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d3bd      	bcc.n	8004f48 <WS28XX_Update+0x1c>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, (hLed->MaxPixel * 24) + 4) != HAL_OK)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	791b      	ldrb	r3, [r3, #4]
 8004fd4:	461c      	mov	r4, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f103 02a2 	add.w	r2, r3, #162	@ 0xa2
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	895b      	ldrh	r3, [r3, #10]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	0049      	lsls	r1, r1, #1
 8004fe4:	440b      	add	r3, r1
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3304      	adds	r3, #4
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	4621      	mov	r1, r4
 8004ff0:	f7fe fd1e 	bl	8003a30 <HAL_TIM_PWM_Start_DMA>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <WS28XX_Update+0xd2>
  {
    answer = false;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	77fb      	strb	r3, [r7, #31]
  }
  WS28XX_UnLock(hLed);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff fe7e 	bl	8004d00 <WS28XX_UnLock>
  return answer;
 8005004:	7ffb      	ldrb	r3, [r7, #31]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3724      	adds	r7, #36	@ 0x24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd90      	pop	{r4, r7, pc}
	...

08005010 <rand>:
 8005010:	4b16      	ldr	r3, [pc, #88]	@ (800506c <rand+0x5c>)
 8005012:	b510      	push	{r4, lr}
 8005014:	681c      	ldr	r4, [r3, #0]
 8005016:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005018:	b9b3      	cbnz	r3, 8005048 <rand+0x38>
 800501a:	2018      	movs	r0, #24
 800501c:	f000 fb30 	bl	8005680 <malloc>
 8005020:	4602      	mov	r2, r0
 8005022:	6320      	str	r0, [r4, #48]	@ 0x30
 8005024:	b920      	cbnz	r0, 8005030 <rand+0x20>
 8005026:	2152      	movs	r1, #82	@ 0x52
 8005028:	4b11      	ldr	r3, [pc, #68]	@ (8005070 <rand+0x60>)
 800502a:	4812      	ldr	r0, [pc, #72]	@ (8005074 <rand+0x64>)
 800502c:	f000 fac2 	bl	80055b4 <__assert_func>
 8005030:	4911      	ldr	r1, [pc, #68]	@ (8005078 <rand+0x68>)
 8005032:	4b12      	ldr	r3, [pc, #72]	@ (800507c <rand+0x6c>)
 8005034:	e9c0 1300 	strd	r1, r3, [r0]
 8005038:	4b11      	ldr	r3, [pc, #68]	@ (8005080 <rand+0x70>)
 800503a:	2100      	movs	r1, #0
 800503c:	6083      	str	r3, [r0, #8]
 800503e:	230b      	movs	r3, #11
 8005040:	8183      	strh	r3, [r0, #12]
 8005042:	2001      	movs	r0, #1
 8005044:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005048:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800504a:	480e      	ldr	r0, [pc, #56]	@ (8005084 <rand+0x74>)
 800504c:	690b      	ldr	r3, [r1, #16]
 800504e:	694c      	ldr	r4, [r1, #20]
 8005050:	4358      	muls	r0, r3
 8005052:	4a0d      	ldr	r2, [pc, #52]	@ (8005088 <rand+0x78>)
 8005054:	fb02 0004 	mla	r0, r2, r4, r0
 8005058:	fba3 3202 	umull	r3, r2, r3, r2
 800505c:	3301      	adds	r3, #1
 800505e:	eb40 0002 	adc.w	r0, r0, r2
 8005062:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005066:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800506a:	bd10      	pop	{r4, pc}
 800506c:	2000003c 	.word	0x2000003c
 8005070:	08006270 	.word	0x08006270
 8005074:	08006287 	.word	0x08006287
 8005078:	abcd330e 	.word	0xabcd330e
 800507c:	e66d1234 	.word	0xe66d1234
 8005080:	0005deec 	.word	0x0005deec
 8005084:	5851f42d 	.word	0x5851f42d
 8005088:	4c957f2d 	.word	0x4c957f2d

0800508c <std>:
 800508c:	2300      	movs	r3, #0
 800508e:	b510      	push	{r4, lr}
 8005090:	4604      	mov	r4, r0
 8005092:	e9c0 3300 	strd	r3, r3, [r0]
 8005096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800509a:	6083      	str	r3, [r0, #8]
 800509c:	8181      	strh	r1, [r0, #12]
 800509e:	6643      	str	r3, [r0, #100]	@ 0x64
 80050a0:	81c2      	strh	r2, [r0, #14]
 80050a2:	6183      	str	r3, [r0, #24]
 80050a4:	4619      	mov	r1, r3
 80050a6:	2208      	movs	r2, #8
 80050a8:	305c      	adds	r0, #92	@ 0x5c
 80050aa:	f000 f9f9 	bl	80054a0 <memset>
 80050ae:	4b0d      	ldr	r3, [pc, #52]	@ (80050e4 <std+0x58>)
 80050b0:	6224      	str	r4, [r4, #32]
 80050b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80050b4:	4b0c      	ldr	r3, [pc, #48]	@ (80050e8 <std+0x5c>)
 80050b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050b8:	4b0c      	ldr	r3, [pc, #48]	@ (80050ec <std+0x60>)
 80050ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050bc:	4b0c      	ldr	r3, [pc, #48]	@ (80050f0 <std+0x64>)
 80050be:	6323      	str	r3, [r4, #48]	@ 0x30
 80050c0:	4b0c      	ldr	r3, [pc, #48]	@ (80050f4 <std+0x68>)
 80050c2:	429c      	cmp	r4, r3
 80050c4:	d006      	beq.n	80050d4 <std+0x48>
 80050c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050ca:	4294      	cmp	r4, r2
 80050cc:	d002      	beq.n	80050d4 <std+0x48>
 80050ce:	33d0      	adds	r3, #208	@ 0xd0
 80050d0:	429c      	cmp	r4, r3
 80050d2:	d105      	bne.n	80050e0 <std+0x54>
 80050d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80050d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050dc:	f000 ba58 	b.w	8005590 <__retarget_lock_init_recursive>
 80050e0:	bd10      	pop	{r4, pc}
 80050e2:	bf00      	nop
 80050e4:	080052f1 	.word	0x080052f1
 80050e8:	08005313 	.word	0x08005313
 80050ec:	0800534b 	.word	0x0800534b
 80050f0:	0800536f 	.word	0x0800536f
 80050f4:	200018f4 	.word	0x200018f4

080050f8 <stdio_exit_handler>:
 80050f8:	4a02      	ldr	r2, [pc, #8]	@ (8005104 <stdio_exit_handler+0xc>)
 80050fa:	4903      	ldr	r1, [pc, #12]	@ (8005108 <stdio_exit_handler+0x10>)
 80050fc:	4803      	ldr	r0, [pc, #12]	@ (800510c <stdio_exit_handler+0x14>)
 80050fe:	f000 b869 	b.w	80051d4 <_fwalk_sglue>
 8005102:	bf00      	nop
 8005104:	20000030 	.word	0x20000030
 8005108:	08005e91 	.word	0x08005e91
 800510c:	20000040 	.word	0x20000040

08005110 <cleanup_stdio>:
 8005110:	6841      	ldr	r1, [r0, #4]
 8005112:	4b0c      	ldr	r3, [pc, #48]	@ (8005144 <cleanup_stdio+0x34>)
 8005114:	b510      	push	{r4, lr}
 8005116:	4299      	cmp	r1, r3
 8005118:	4604      	mov	r4, r0
 800511a:	d001      	beq.n	8005120 <cleanup_stdio+0x10>
 800511c:	f000 feb8 	bl	8005e90 <_fflush_r>
 8005120:	68a1      	ldr	r1, [r4, #8]
 8005122:	4b09      	ldr	r3, [pc, #36]	@ (8005148 <cleanup_stdio+0x38>)
 8005124:	4299      	cmp	r1, r3
 8005126:	d002      	beq.n	800512e <cleanup_stdio+0x1e>
 8005128:	4620      	mov	r0, r4
 800512a:	f000 feb1 	bl	8005e90 <_fflush_r>
 800512e:	68e1      	ldr	r1, [r4, #12]
 8005130:	4b06      	ldr	r3, [pc, #24]	@ (800514c <cleanup_stdio+0x3c>)
 8005132:	4299      	cmp	r1, r3
 8005134:	d004      	beq.n	8005140 <cleanup_stdio+0x30>
 8005136:	4620      	mov	r0, r4
 8005138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800513c:	f000 bea8 	b.w	8005e90 <_fflush_r>
 8005140:	bd10      	pop	{r4, pc}
 8005142:	bf00      	nop
 8005144:	200018f4 	.word	0x200018f4
 8005148:	2000195c 	.word	0x2000195c
 800514c:	200019c4 	.word	0x200019c4

08005150 <global_stdio_init.part.0>:
 8005150:	b510      	push	{r4, lr}
 8005152:	4b0b      	ldr	r3, [pc, #44]	@ (8005180 <global_stdio_init.part.0+0x30>)
 8005154:	4c0b      	ldr	r4, [pc, #44]	@ (8005184 <global_stdio_init.part.0+0x34>)
 8005156:	4a0c      	ldr	r2, [pc, #48]	@ (8005188 <global_stdio_init.part.0+0x38>)
 8005158:	4620      	mov	r0, r4
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	2104      	movs	r1, #4
 800515e:	2200      	movs	r2, #0
 8005160:	f7ff ff94 	bl	800508c <std>
 8005164:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005168:	2201      	movs	r2, #1
 800516a:	2109      	movs	r1, #9
 800516c:	f7ff ff8e 	bl	800508c <std>
 8005170:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005174:	2202      	movs	r2, #2
 8005176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800517a:	2112      	movs	r1, #18
 800517c:	f7ff bf86 	b.w	800508c <std>
 8005180:	20001a2c 	.word	0x20001a2c
 8005184:	200018f4 	.word	0x200018f4
 8005188:	080050f9 	.word	0x080050f9

0800518c <__sfp_lock_acquire>:
 800518c:	4801      	ldr	r0, [pc, #4]	@ (8005194 <__sfp_lock_acquire+0x8>)
 800518e:	f000 ba00 	b.w	8005592 <__retarget_lock_acquire_recursive>
 8005192:	bf00      	nop
 8005194:	20001a35 	.word	0x20001a35

08005198 <__sfp_lock_release>:
 8005198:	4801      	ldr	r0, [pc, #4]	@ (80051a0 <__sfp_lock_release+0x8>)
 800519a:	f000 b9fb 	b.w	8005594 <__retarget_lock_release_recursive>
 800519e:	bf00      	nop
 80051a0:	20001a35 	.word	0x20001a35

080051a4 <__sinit>:
 80051a4:	b510      	push	{r4, lr}
 80051a6:	4604      	mov	r4, r0
 80051a8:	f7ff fff0 	bl	800518c <__sfp_lock_acquire>
 80051ac:	6a23      	ldr	r3, [r4, #32]
 80051ae:	b11b      	cbz	r3, 80051b8 <__sinit+0x14>
 80051b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b4:	f7ff bff0 	b.w	8005198 <__sfp_lock_release>
 80051b8:	4b04      	ldr	r3, [pc, #16]	@ (80051cc <__sinit+0x28>)
 80051ba:	6223      	str	r3, [r4, #32]
 80051bc:	4b04      	ldr	r3, [pc, #16]	@ (80051d0 <__sinit+0x2c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f5      	bne.n	80051b0 <__sinit+0xc>
 80051c4:	f7ff ffc4 	bl	8005150 <global_stdio_init.part.0>
 80051c8:	e7f2      	b.n	80051b0 <__sinit+0xc>
 80051ca:	bf00      	nop
 80051cc:	08005111 	.word	0x08005111
 80051d0:	20001a2c 	.word	0x20001a2c

080051d4 <_fwalk_sglue>:
 80051d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d8:	4607      	mov	r7, r0
 80051da:	4688      	mov	r8, r1
 80051dc:	4614      	mov	r4, r2
 80051de:	2600      	movs	r6, #0
 80051e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051e4:	f1b9 0901 	subs.w	r9, r9, #1
 80051e8:	d505      	bpl.n	80051f6 <_fwalk_sglue+0x22>
 80051ea:	6824      	ldr	r4, [r4, #0]
 80051ec:	2c00      	cmp	r4, #0
 80051ee:	d1f7      	bne.n	80051e0 <_fwalk_sglue+0xc>
 80051f0:	4630      	mov	r0, r6
 80051f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051f6:	89ab      	ldrh	r3, [r5, #12]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d907      	bls.n	800520c <_fwalk_sglue+0x38>
 80051fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005200:	3301      	adds	r3, #1
 8005202:	d003      	beq.n	800520c <_fwalk_sglue+0x38>
 8005204:	4629      	mov	r1, r5
 8005206:	4638      	mov	r0, r7
 8005208:	47c0      	blx	r8
 800520a:	4306      	orrs	r6, r0
 800520c:	3568      	adds	r5, #104	@ 0x68
 800520e:	e7e9      	b.n	80051e4 <_fwalk_sglue+0x10>

08005210 <iprintf>:
 8005210:	b40f      	push	{r0, r1, r2, r3}
 8005212:	b507      	push	{r0, r1, r2, lr}
 8005214:	4906      	ldr	r1, [pc, #24]	@ (8005230 <iprintf+0x20>)
 8005216:	ab04      	add	r3, sp, #16
 8005218:	6808      	ldr	r0, [r1, #0]
 800521a:	f853 2b04 	ldr.w	r2, [r3], #4
 800521e:	6881      	ldr	r1, [r0, #8]
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	f000 fb0b 	bl	800583c <_vfiprintf_r>
 8005226:	b003      	add	sp, #12
 8005228:	f85d eb04 	ldr.w	lr, [sp], #4
 800522c:	b004      	add	sp, #16
 800522e:	4770      	bx	lr
 8005230:	2000003c 	.word	0x2000003c

08005234 <_puts_r>:
 8005234:	6a03      	ldr	r3, [r0, #32]
 8005236:	b570      	push	{r4, r5, r6, lr}
 8005238:	4605      	mov	r5, r0
 800523a:	460e      	mov	r6, r1
 800523c:	6884      	ldr	r4, [r0, #8]
 800523e:	b90b      	cbnz	r3, 8005244 <_puts_r+0x10>
 8005240:	f7ff ffb0 	bl	80051a4 <__sinit>
 8005244:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005246:	07db      	lsls	r3, r3, #31
 8005248:	d405      	bmi.n	8005256 <_puts_r+0x22>
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	0598      	lsls	r0, r3, #22
 800524e:	d402      	bmi.n	8005256 <_puts_r+0x22>
 8005250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005252:	f000 f99e 	bl	8005592 <__retarget_lock_acquire_recursive>
 8005256:	89a3      	ldrh	r3, [r4, #12]
 8005258:	0719      	lsls	r1, r3, #28
 800525a:	d502      	bpl.n	8005262 <_puts_r+0x2e>
 800525c:	6923      	ldr	r3, [r4, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d135      	bne.n	80052ce <_puts_r+0x9a>
 8005262:	4621      	mov	r1, r4
 8005264:	4628      	mov	r0, r5
 8005266:	f000 f8c5 	bl	80053f4 <__swsetup_r>
 800526a:	b380      	cbz	r0, 80052ce <_puts_r+0x9a>
 800526c:	f04f 35ff 	mov.w	r5, #4294967295
 8005270:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005272:	07da      	lsls	r2, r3, #31
 8005274:	d405      	bmi.n	8005282 <_puts_r+0x4e>
 8005276:	89a3      	ldrh	r3, [r4, #12]
 8005278:	059b      	lsls	r3, r3, #22
 800527a:	d402      	bmi.n	8005282 <_puts_r+0x4e>
 800527c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800527e:	f000 f989 	bl	8005594 <__retarget_lock_release_recursive>
 8005282:	4628      	mov	r0, r5
 8005284:	bd70      	pop	{r4, r5, r6, pc}
 8005286:	2b00      	cmp	r3, #0
 8005288:	da04      	bge.n	8005294 <_puts_r+0x60>
 800528a:	69a2      	ldr	r2, [r4, #24]
 800528c:	429a      	cmp	r2, r3
 800528e:	dc17      	bgt.n	80052c0 <_puts_r+0x8c>
 8005290:	290a      	cmp	r1, #10
 8005292:	d015      	beq.n	80052c0 <_puts_r+0x8c>
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	6022      	str	r2, [r4, #0]
 800529a:	7019      	strb	r1, [r3, #0]
 800529c:	68a3      	ldr	r3, [r4, #8]
 800529e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052a2:	3b01      	subs	r3, #1
 80052a4:	60a3      	str	r3, [r4, #8]
 80052a6:	2900      	cmp	r1, #0
 80052a8:	d1ed      	bne.n	8005286 <_puts_r+0x52>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	da11      	bge.n	80052d2 <_puts_r+0x9e>
 80052ae:	4622      	mov	r2, r4
 80052b0:	210a      	movs	r1, #10
 80052b2:	4628      	mov	r0, r5
 80052b4:	f000 f85f 	bl	8005376 <__swbuf_r>
 80052b8:	3001      	adds	r0, #1
 80052ba:	d0d7      	beq.n	800526c <_puts_r+0x38>
 80052bc:	250a      	movs	r5, #10
 80052be:	e7d7      	b.n	8005270 <_puts_r+0x3c>
 80052c0:	4622      	mov	r2, r4
 80052c2:	4628      	mov	r0, r5
 80052c4:	f000 f857 	bl	8005376 <__swbuf_r>
 80052c8:	3001      	adds	r0, #1
 80052ca:	d1e7      	bne.n	800529c <_puts_r+0x68>
 80052cc:	e7ce      	b.n	800526c <_puts_r+0x38>
 80052ce:	3e01      	subs	r6, #1
 80052d0:	e7e4      	b.n	800529c <_puts_r+0x68>
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	6022      	str	r2, [r4, #0]
 80052d8:	220a      	movs	r2, #10
 80052da:	701a      	strb	r2, [r3, #0]
 80052dc:	e7ee      	b.n	80052bc <_puts_r+0x88>
	...

080052e0 <puts>:
 80052e0:	4b02      	ldr	r3, [pc, #8]	@ (80052ec <puts+0xc>)
 80052e2:	4601      	mov	r1, r0
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	f7ff bfa5 	b.w	8005234 <_puts_r>
 80052ea:	bf00      	nop
 80052ec:	2000003c 	.word	0x2000003c

080052f0 <__sread>:
 80052f0:	b510      	push	{r4, lr}
 80052f2:	460c      	mov	r4, r1
 80052f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f8:	f000 f8fc 	bl	80054f4 <_read_r>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	bfab      	itete	ge
 8005300:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005302:	89a3      	ldrhlt	r3, [r4, #12]
 8005304:	181b      	addge	r3, r3, r0
 8005306:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800530a:	bfac      	ite	ge
 800530c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800530e:	81a3      	strhlt	r3, [r4, #12]
 8005310:	bd10      	pop	{r4, pc}

08005312 <__swrite>:
 8005312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005316:	461f      	mov	r7, r3
 8005318:	898b      	ldrh	r3, [r1, #12]
 800531a:	4605      	mov	r5, r0
 800531c:	05db      	lsls	r3, r3, #23
 800531e:	460c      	mov	r4, r1
 8005320:	4616      	mov	r6, r2
 8005322:	d505      	bpl.n	8005330 <__swrite+0x1e>
 8005324:	2302      	movs	r3, #2
 8005326:	2200      	movs	r2, #0
 8005328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532c:	f000 f8d0 	bl	80054d0 <_lseek_r>
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	4632      	mov	r2, r6
 8005334:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	4628      	mov	r0, r5
 800533c:	463b      	mov	r3, r7
 800533e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005346:	f000 b8e7 	b.w	8005518 <_write_r>

0800534a <__sseek>:
 800534a:	b510      	push	{r4, lr}
 800534c:	460c      	mov	r4, r1
 800534e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005352:	f000 f8bd 	bl	80054d0 <_lseek_r>
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	bf15      	itete	ne
 800535c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800535e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005362:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005366:	81a3      	strheq	r3, [r4, #12]
 8005368:	bf18      	it	ne
 800536a:	81a3      	strhne	r3, [r4, #12]
 800536c:	bd10      	pop	{r4, pc}

0800536e <__sclose>:
 800536e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005372:	f000 b89d 	b.w	80054b0 <_close_r>

08005376 <__swbuf_r>:
 8005376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005378:	460e      	mov	r6, r1
 800537a:	4614      	mov	r4, r2
 800537c:	4605      	mov	r5, r0
 800537e:	b118      	cbz	r0, 8005388 <__swbuf_r+0x12>
 8005380:	6a03      	ldr	r3, [r0, #32]
 8005382:	b90b      	cbnz	r3, 8005388 <__swbuf_r+0x12>
 8005384:	f7ff ff0e 	bl	80051a4 <__sinit>
 8005388:	69a3      	ldr	r3, [r4, #24]
 800538a:	60a3      	str	r3, [r4, #8]
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	071a      	lsls	r2, r3, #28
 8005390:	d501      	bpl.n	8005396 <__swbuf_r+0x20>
 8005392:	6923      	ldr	r3, [r4, #16]
 8005394:	b943      	cbnz	r3, 80053a8 <__swbuf_r+0x32>
 8005396:	4621      	mov	r1, r4
 8005398:	4628      	mov	r0, r5
 800539a:	f000 f82b 	bl	80053f4 <__swsetup_r>
 800539e:	b118      	cbz	r0, 80053a8 <__swbuf_r+0x32>
 80053a0:	f04f 37ff 	mov.w	r7, #4294967295
 80053a4:	4638      	mov	r0, r7
 80053a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	6922      	ldr	r2, [r4, #16]
 80053ac:	b2f6      	uxtb	r6, r6
 80053ae:	1a98      	subs	r0, r3, r2
 80053b0:	6963      	ldr	r3, [r4, #20]
 80053b2:	4637      	mov	r7, r6
 80053b4:	4283      	cmp	r3, r0
 80053b6:	dc05      	bgt.n	80053c4 <__swbuf_r+0x4e>
 80053b8:	4621      	mov	r1, r4
 80053ba:	4628      	mov	r0, r5
 80053bc:	f000 fd68 	bl	8005e90 <_fflush_r>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d1ed      	bne.n	80053a0 <__swbuf_r+0x2a>
 80053c4:	68a3      	ldr	r3, [r4, #8]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	60a3      	str	r3, [r4, #8]
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	6022      	str	r2, [r4, #0]
 80053d0:	701e      	strb	r6, [r3, #0]
 80053d2:	6962      	ldr	r2, [r4, #20]
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d004      	beq.n	80053e4 <__swbuf_r+0x6e>
 80053da:	89a3      	ldrh	r3, [r4, #12]
 80053dc:	07db      	lsls	r3, r3, #31
 80053de:	d5e1      	bpl.n	80053a4 <__swbuf_r+0x2e>
 80053e0:	2e0a      	cmp	r6, #10
 80053e2:	d1df      	bne.n	80053a4 <__swbuf_r+0x2e>
 80053e4:	4621      	mov	r1, r4
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 fd52 	bl	8005e90 <_fflush_r>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d0d9      	beq.n	80053a4 <__swbuf_r+0x2e>
 80053f0:	e7d6      	b.n	80053a0 <__swbuf_r+0x2a>
	...

080053f4 <__swsetup_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	4b29      	ldr	r3, [pc, #164]	@ (800549c <__swsetup_r+0xa8>)
 80053f8:	4605      	mov	r5, r0
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	460c      	mov	r4, r1
 80053fe:	b118      	cbz	r0, 8005408 <__swsetup_r+0x14>
 8005400:	6a03      	ldr	r3, [r0, #32]
 8005402:	b90b      	cbnz	r3, 8005408 <__swsetup_r+0x14>
 8005404:	f7ff fece 	bl	80051a4 <__sinit>
 8005408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800540c:	0719      	lsls	r1, r3, #28
 800540e:	d422      	bmi.n	8005456 <__swsetup_r+0x62>
 8005410:	06da      	lsls	r2, r3, #27
 8005412:	d407      	bmi.n	8005424 <__swsetup_r+0x30>
 8005414:	2209      	movs	r2, #9
 8005416:	602a      	str	r2, [r5, #0]
 8005418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800541c:	f04f 30ff 	mov.w	r0, #4294967295
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	e033      	b.n	800548c <__swsetup_r+0x98>
 8005424:	0758      	lsls	r0, r3, #29
 8005426:	d512      	bpl.n	800544e <__swsetup_r+0x5a>
 8005428:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800542a:	b141      	cbz	r1, 800543e <__swsetup_r+0x4a>
 800542c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005430:	4299      	cmp	r1, r3
 8005432:	d002      	beq.n	800543a <__swsetup_r+0x46>
 8005434:	4628      	mov	r0, r5
 8005436:	f000 f8db 	bl	80055f0 <_free_r>
 800543a:	2300      	movs	r3, #0
 800543c:	6363      	str	r3, [r4, #52]	@ 0x34
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005444:	81a3      	strh	r3, [r4, #12]
 8005446:	2300      	movs	r3, #0
 8005448:	6063      	str	r3, [r4, #4]
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	f043 0308 	orr.w	r3, r3, #8
 8005454:	81a3      	strh	r3, [r4, #12]
 8005456:	6923      	ldr	r3, [r4, #16]
 8005458:	b94b      	cbnz	r3, 800546e <__swsetup_r+0x7a>
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005464:	d003      	beq.n	800546e <__swsetup_r+0x7a>
 8005466:	4621      	mov	r1, r4
 8005468:	4628      	mov	r0, r5
 800546a:	f000 fd70 	bl	8005f4e <__smakebuf_r>
 800546e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005472:	f013 0201 	ands.w	r2, r3, #1
 8005476:	d00a      	beq.n	800548e <__swsetup_r+0x9a>
 8005478:	2200      	movs	r2, #0
 800547a:	60a2      	str	r2, [r4, #8]
 800547c:	6962      	ldr	r2, [r4, #20]
 800547e:	4252      	negs	r2, r2
 8005480:	61a2      	str	r2, [r4, #24]
 8005482:	6922      	ldr	r2, [r4, #16]
 8005484:	b942      	cbnz	r2, 8005498 <__swsetup_r+0xa4>
 8005486:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800548a:	d1c5      	bne.n	8005418 <__swsetup_r+0x24>
 800548c:	bd38      	pop	{r3, r4, r5, pc}
 800548e:	0799      	lsls	r1, r3, #30
 8005490:	bf58      	it	pl
 8005492:	6962      	ldrpl	r2, [r4, #20]
 8005494:	60a2      	str	r2, [r4, #8]
 8005496:	e7f4      	b.n	8005482 <__swsetup_r+0x8e>
 8005498:	2000      	movs	r0, #0
 800549a:	e7f7      	b.n	800548c <__swsetup_r+0x98>
 800549c:	2000003c 	.word	0x2000003c

080054a0 <memset>:
 80054a0:	4603      	mov	r3, r0
 80054a2:	4402      	add	r2, r0
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d100      	bne.n	80054aa <memset+0xa>
 80054a8:	4770      	bx	lr
 80054aa:	f803 1b01 	strb.w	r1, [r3], #1
 80054ae:	e7f9      	b.n	80054a4 <memset+0x4>

080054b0 <_close_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	2300      	movs	r3, #0
 80054b4:	4d05      	ldr	r5, [pc, #20]	@ (80054cc <_close_r+0x1c>)
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	602b      	str	r3, [r5, #0]
 80054bc:	f7fc fd0b 	bl	8001ed6 <_close>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_close_r+0x1a>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_close_r+0x1a>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	20001a30 	.word	0x20001a30

080054d0 <_lseek_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4604      	mov	r4, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	4611      	mov	r1, r2
 80054d8:	2200      	movs	r2, #0
 80054da:	4d05      	ldr	r5, [pc, #20]	@ (80054f0 <_lseek_r+0x20>)
 80054dc:	602a      	str	r2, [r5, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	f7fc fd1d 	bl	8001f1e <_lseek>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_lseek_r+0x1e>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_lseek_r+0x1e>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	20001a30 	.word	0x20001a30

080054f4 <_read_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4604      	mov	r4, r0
 80054f8:	4608      	mov	r0, r1
 80054fa:	4611      	mov	r1, r2
 80054fc:	2200      	movs	r2, #0
 80054fe:	4d05      	ldr	r5, [pc, #20]	@ (8005514 <_read_r+0x20>)
 8005500:	602a      	str	r2, [r5, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	f7fc fcca 	bl	8001e9c <_read>
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d102      	bne.n	8005512 <_read_r+0x1e>
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	b103      	cbz	r3, 8005512 <_read_r+0x1e>
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	bd38      	pop	{r3, r4, r5, pc}
 8005514:	20001a30 	.word	0x20001a30

08005518 <_write_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4604      	mov	r4, r0
 800551c:	4608      	mov	r0, r1
 800551e:	4611      	mov	r1, r2
 8005520:	2200      	movs	r2, #0
 8005522:	4d05      	ldr	r5, [pc, #20]	@ (8005538 <_write_r+0x20>)
 8005524:	602a      	str	r2, [r5, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	f7fb fe3c 	bl	80011a4 <_write>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d102      	bne.n	8005536 <_write_r+0x1e>
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	b103      	cbz	r3, 8005536 <_write_r+0x1e>
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	20001a30 	.word	0x20001a30

0800553c <__errno>:
 800553c:	4b01      	ldr	r3, [pc, #4]	@ (8005544 <__errno+0x8>)
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	2000003c 	.word	0x2000003c

08005548 <__libc_init_array>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	2600      	movs	r6, #0
 800554c:	4d0c      	ldr	r5, [pc, #48]	@ (8005580 <__libc_init_array+0x38>)
 800554e:	4c0d      	ldr	r4, [pc, #52]	@ (8005584 <__libc_init_array+0x3c>)
 8005550:	1b64      	subs	r4, r4, r5
 8005552:	10a4      	asrs	r4, r4, #2
 8005554:	42a6      	cmp	r6, r4
 8005556:	d109      	bne.n	800556c <__libc_init_array+0x24>
 8005558:	f000 fdc2 	bl	80060e0 <_init>
 800555c:	2600      	movs	r6, #0
 800555e:	4d0a      	ldr	r5, [pc, #40]	@ (8005588 <__libc_init_array+0x40>)
 8005560:	4c0a      	ldr	r4, [pc, #40]	@ (800558c <__libc_init_array+0x44>)
 8005562:	1b64      	subs	r4, r4, r5
 8005564:	10a4      	asrs	r4, r4, #2
 8005566:	42a6      	cmp	r6, r4
 8005568:	d105      	bne.n	8005576 <__libc_init_array+0x2e>
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005570:	4798      	blx	r3
 8005572:	3601      	adds	r6, #1
 8005574:	e7ee      	b.n	8005554 <__libc_init_array+0xc>
 8005576:	f855 3b04 	ldr.w	r3, [r5], #4
 800557a:	4798      	blx	r3
 800557c:	3601      	adds	r6, #1
 800557e:	e7f2      	b.n	8005566 <__libc_init_array+0x1e>
 8005580:	08006350 	.word	0x08006350
 8005584:	08006350 	.word	0x08006350
 8005588:	08006350 	.word	0x08006350
 800558c:	08006354 	.word	0x08006354

08005590 <__retarget_lock_init_recursive>:
 8005590:	4770      	bx	lr

08005592 <__retarget_lock_acquire_recursive>:
 8005592:	4770      	bx	lr

08005594 <__retarget_lock_release_recursive>:
 8005594:	4770      	bx	lr

08005596 <memcpy>:
 8005596:	440a      	add	r2, r1
 8005598:	4291      	cmp	r1, r2
 800559a:	f100 33ff 	add.w	r3, r0, #4294967295
 800559e:	d100      	bne.n	80055a2 <memcpy+0xc>
 80055a0:	4770      	bx	lr
 80055a2:	b510      	push	{r4, lr}
 80055a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055a8:	4291      	cmp	r1, r2
 80055aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ae:	d1f9      	bne.n	80055a4 <memcpy+0xe>
 80055b0:	bd10      	pop	{r4, pc}
	...

080055b4 <__assert_func>:
 80055b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055b6:	4614      	mov	r4, r2
 80055b8:	461a      	mov	r2, r3
 80055ba:	4b09      	ldr	r3, [pc, #36]	@ (80055e0 <__assert_func+0x2c>)
 80055bc:	4605      	mov	r5, r0
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68d8      	ldr	r0, [r3, #12]
 80055c2:	b954      	cbnz	r4, 80055da <__assert_func+0x26>
 80055c4:	4b07      	ldr	r3, [pc, #28]	@ (80055e4 <__assert_func+0x30>)
 80055c6:	461c      	mov	r4, r3
 80055c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055cc:	9100      	str	r1, [sp, #0]
 80055ce:	462b      	mov	r3, r5
 80055d0:	4905      	ldr	r1, [pc, #20]	@ (80055e8 <__assert_func+0x34>)
 80055d2:	f000 fc85 	bl	8005ee0 <fiprintf>
 80055d6:	f000 fd37 	bl	8006048 <abort>
 80055da:	4b04      	ldr	r3, [pc, #16]	@ (80055ec <__assert_func+0x38>)
 80055dc:	e7f4      	b.n	80055c8 <__assert_func+0x14>
 80055de:	bf00      	nop
 80055e0:	2000003c 	.word	0x2000003c
 80055e4:	0800631a 	.word	0x0800631a
 80055e8:	080062ec 	.word	0x080062ec
 80055ec:	080062df 	.word	0x080062df

080055f0 <_free_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4605      	mov	r5, r0
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d040      	beq.n	800567a <_free_r+0x8a>
 80055f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055fc:	1f0c      	subs	r4, r1, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bfb8      	it	lt
 8005602:	18e4      	addlt	r4, r4, r3
 8005604:	f000 f8e6 	bl	80057d4 <__malloc_lock>
 8005608:	4a1c      	ldr	r2, [pc, #112]	@ (800567c <_free_r+0x8c>)
 800560a:	6813      	ldr	r3, [r2, #0]
 800560c:	b933      	cbnz	r3, 800561c <_free_r+0x2c>
 800560e:	6063      	str	r3, [r4, #4]
 8005610:	6014      	str	r4, [r2, #0]
 8005612:	4628      	mov	r0, r5
 8005614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005618:	f000 b8e2 	b.w	80057e0 <__malloc_unlock>
 800561c:	42a3      	cmp	r3, r4
 800561e:	d908      	bls.n	8005632 <_free_r+0x42>
 8005620:	6820      	ldr	r0, [r4, #0]
 8005622:	1821      	adds	r1, r4, r0
 8005624:	428b      	cmp	r3, r1
 8005626:	bf01      	itttt	eq
 8005628:	6819      	ldreq	r1, [r3, #0]
 800562a:	685b      	ldreq	r3, [r3, #4]
 800562c:	1809      	addeq	r1, r1, r0
 800562e:	6021      	streq	r1, [r4, #0]
 8005630:	e7ed      	b.n	800560e <_free_r+0x1e>
 8005632:	461a      	mov	r2, r3
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	b10b      	cbz	r3, 800563c <_free_r+0x4c>
 8005638:	42a3      	cmp	r3, r4
 800563a:	d9fa      	bls.n	8005632 <_free_r+0x42>
 800563c:	6811      	ldr	r1, [r2, #0]
 800563e:	1850      	adds	r0, r2, r1
 8005640:	42a0      	cmp	r0, r4
 8005642:	d10b      	bne.n	800565c <_free_r+0x6c>
 8005644:	6820      	ldr	r0, [r4, #0]
 8005646:	4401      	add	r1, r0
 8005648:	1850      	adds	r0, r2, r1
 800564a:	4283      	cmp	r3, r0
 800564c:	6011      	str	r1, [r2, #0]
 800564e:	d1e0      	bne.n	8005612 <_free_r+0x22>
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	4408      	add	r0, r1
 8005656:	6010      	str	r0, [r2, #0]
 8005658:	6053      	str	r3, [r2, #4]
 800565a:	e7da      	b.n	8005612 <_free_r+0x22>
 800565c:	d902      	bls.n	8005664 <_free_r+0x74>
 800565e:	230c      	movs	r3, #12
 8005660:	602b      	str	r3, [r5, #0]
 8005662:	e7d6      	b.n	8005612 <_free_r+0x22>
 8005664:	6820      	ldr	r0, [r4, #0]
 8005666:	1821      	adds	r1, r4, r0
 8005668:	428b      	cmp	r3, r1
 800566a:	bf01      	itttt	eq
 800566c:	6819      	ldreq	r1, [r3, #0]
 800566e:	685b      	ldreq	r3, [r3, #4]
 8005670:	1809      	addeq	r1, r1, r0
 8005672:	6021      	streq	r1, [r4, #0]
 8005674:	6063      	str	r3, [r4, #4]
 8005676:	6054      	str	r4, [r2, #4]
 8005678:	e7cb      	b.n	8005612 <_free_r+0x22>
 800567a:	bd38      	pop	{r3, r4, r5, pc}
 800567c:	20001a3c 	.word	0x20001a3c

08005680 <malloc>:
 8005680:	4b02      	ldr	r3, [pc, #8]	@ (800568c <malloc+0xc>)
 8005682:	4601      	mov	r1, r0
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	f000 b825 	b.w	80056d4 <_malloc_r>
 800568a:	bf00      	nop
 800568c:	2000003c 	.word	0x2000003c

08005690 <sbrk_aligned>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4e0f      	ldr	r6, [pc, #60]	@ (80056d0 <sbrk_aligned+0x40>)
 8005694:	460c      	mov	r4, r1
 8005696:	6831      	ldr	r1, [r6, #0]
 8005698:	4605      	mov	r5, r0
 800569a:	b911      	cbnz	r1, 80056a2 <sbrk_aligned+0x12>
 800569c:	f000 fcb6 	bl	800600c <_sbrk_r>
 80056a0:	6030      	str	r0, [r6, #0]
 80056a2:	4621      	mov	r1, r4
 80056a4:	4628      	mov	r0, r5
 80056a6:	f000 fcb1 	bl	800600c <_sbrk_r>
 80056aa:	1c43      	adds	r3, r0, #1
 80056ac:	d103      	bne.n	80056b6 <sbrk_aligned+0x26>
 80056ae:	f04f 34ff 	mov.w	r4, #4294967295
 80056b2:	4620      	mov	r0, r4
 80056b4:	bd70      	pop	{r4, r5, r6, pc}
 80056b6:	1cc4      	adds	r4, r0, #3
 80056b8:	f024 0403 	bic.w	r4, r4, #3
 80056bc:	42a0      	cmp	r0, r4
 80056be:	d0f8      	beq.n	80056b2 <sbrk_aligned+0x22>
 80056c0:	1a21      	subs	r1, r4, r0
 80056c2:	4628      	mov	r0, r5
 80056c4:	f000 fca2 	bl	800600c <_sbrk_r>
 80056c8:	3001      	adds	r0, #1
 80056ca:	d1f2      	bne.n	80056b2 <sbrk_aligned+0x22>
 80056cc:	e7ef      	b.n	80056ae <sbrk_aligned+0x1e>
 80056ce:	bf00      	nop
 80056d0:	20001a38 	.word	0x20001a38

080056d4 <_malloc_r>:
 80056d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d8:	1ccd      	adds	r5, r1, #3
 80056da:	f025 0503 	bic.w	r5, r5, #3
 80056de:	3508      	adds	r5, #8
 80056e0:	2d0c      	cmp	r5, #12
 80056e2:	bf38      	it	cc
 80056e4:	250c      	movcc	r5, #12
 80056e6:	2d00      	cmp	r5, #0
 80056e8:	4606      	mov	r6, r0
 80056ea:	db01      	blt.n	80056f0 <_malloc_r+0x1c>
 80056ec:	42a9      	cmp	r1, r5
 80056ee:	d904      	bls.n	80056fa <_malloc_r+0x26>
 80056f0:	230c      	movs	r3, #12
 80056f2:	6033      	str	r3, [r6, #0]
 80056f4:	2000      	movs	r0, #0
 80056f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057d0 <_malloc_r+0xfc>
 80056fe:	f000 f869 	bl	80057d4 <__malloc_lock>
 8005702:	f8d8 3000 	ldr.w	r3, [r8]
 8005706:	461c      	mov	r4, r3
 8005708:	bb44      	cbnz	r4, 800575c <_malloc_r+0x88>
 800570a:	4629      	mov	r1, r5
 800570c:	4630      	mov	r0, r6
 800570e:	f7ff ffbf 	bl	8005690 <sbrk_aligned>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	4604      	mov	r4, r0
 8005716:	d158      	bne.n	80057ca <_malloc_r+0xf6>
 8005718:	f8d8 4000 	ldr.w	r4, [r8]
 800571c:	4627      	mov	r7, r4
 800571e:	2f00      	cmp	r7, #0
 8005720:	d143      	bne.n	80057aa <_malloc_r+0xd6>
 8005722:	2c00      	cmp	r4, #0
 8005724:	d04b      	beq.n	80057be <_malloc_r+0xea>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	4639      	mov	r1, r7
 800572a:	4630      	mov	r0, r6
 800572c:	eb04 0903 	add.w	r9, r4, r3
 8005730:	f000 fc6c 	bl	800600c <_sbrk_r>
 8005734:	4581      	cmp	r9, r0
 8005736:	d142      	bne.n	80057be <_malloc_r+0xea>
 8005738:	6821      	ldr	r1, [r4, #0]
 800573a:	4630      	mov	r0, r6
 800573c:	1a6d      	subs	r5, r5, r1
 800573e:	4629      	mov	r1, r5
 8005740:	f7ff ffa6 	bl	8005690 <sbrk_aligned>
 8005744:	3001      	adds	r0, #1
 8005746:	d03a      	beq.n	80057be <_malloc_r+0xea>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	442b      	add	r3, r5
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	f8d8 3000 	ldr.w	r3, [r8]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	bb62      	cbnz	r2, 80057b0 <_malloc_r+0xdc>
 8005756:	f8c8 7000 	str.w	r7, [r8]
 800575a:	e00f      	b.n	800577c <_malloc_r+0xa8>
 800575c:	6822      	ldr	r2, [r4, #0]
 800575e:	1b52      	subs	r2, r2, r5
 8005760:	d420      	bmi.n	80057a4 <_malloc_r+0xd0>
 8005762:	2a0b      	cmp	r2, #11
 8005764:	d917      	bls.n	8005796 <_malloc_r+0xc2>
 8005766:	1961      	adds	r1, r4, r5
 8005768:	42a3      	cmp	r3, r4
 800576a:	6025      	str	r5, [r4, #0]
 800576c:	bf18      	it	ne
 800576e:	6059      	strne	r1, [r3, #4]
 8005770:	6863      	ldr	r3, [r4, #4]
 8005772:	bf08      	it	eq
 8005774:	f8c8 1000 	streq.w	r1, [r8]
 8005778:	5162      	str	r2, [r4, r5]
 800577a:	604b      	str	r3, [r1, #4]
 800577c:	4630      	mov	r0, r6
 800577e:	f000 f82f 	bl	80057e0 <__malloc_unlock>
 8005782:	f104 000b 	add.w	r0, r4, #11
 8005786:	1d23      	adds	r3, r4, #4
 8005788:	f020 0007 	bic.w	r0, r0, #7
 800578c:	1ac2      	subs	r2, r0, r3
 800578e:	bf1c      	itt	ne
 8005790:	1a1b      	subne	r3, r3, r0
 8005792:	50a3      	strne	r3, [r4, r2]
 8005794:	e7af      	b.n	80056f6 <_malloc_r+0x22>
 8005796:	6862      	ldr	r2, [r4, #4]
 8005798:	42a3      	cmp	r3, r4
 800579a:	bf0c      	ite	eq
 800579c:	f8c8 2000 	streq.w	r2, [r8]
 80057a0:	605a      	strne	r2, [r3, #4]
 80057a2:	e7eb      	b.n	800577c <_malloc_r+0xa8>
 80057a4:	4623      	mov	r3, r4
 80057a6:	6864      	ldr	r4, [r4, #4]
 80057a8:	e7ae      	b.n	8005708 <_malloc_r+0x34>
 80057aa:	463c      	mov	r4, r7
 80057ac:	687f      	ldr	r7, [r7, #4]
 80057ae:	e7b6      	b.n	800571e <_malloc_r+0x4a>
 80057b0:	461a      	mov	r2, r3
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	d1fb      	bne.n	80057b0 <_malloc_r+0xdc>
 80057b8:	2300      	movs	r3, #0
 80057ba:	6053      	str	r3, [r2, #4]
 80057bc:	e7de      	b.n	800577c <_malloc_r+0xa8>
 80057be:	230c      	movs	r3, #12
 80057c0:	4630      	mov	r0, r6
 80057c2:	6033      	str	r3, [r6, #0]
 80057c4:	f000 f80c 	bl	80057e0 <__malloc_unlock>
 80057c8:	e794      	b.n	80056f4 <_malloc_r+0x20>
 80057ca:	6005      	str	r5, [r0, #0]
 80057cc:	e7d6      	b.n	800577c <_malloc_r+0xa8>
 80057ce:	bf00      	nop
 80057d0:	20001a3c 	.word	0x20001a3c

080057d4 <__malloc_lock>:
 80057d4:	4801      	ldr	r0, [pc, #4]	@ (80057dc <__malloc_lock+0x8>)
 80057d6:	f7ff bedc 	b.w	8005592 <__retarget_lock_acquire_recursive>
 80057da:	bf00      	nop
 80057dc:	20001a34 	.word	0x20001a34

080057e0 <__malloc_unlock>:
 80057e0:	4801      	ldr	r0, [pc, #4]	@ (80057e8 <__malloc_unlock+0x8>)
 80057e2:	f7ff bed7 	b.w	8005594 <__retarget_lock_release_recursive>
 80057e6:	bf00      	nop
 80057e8:	20001a34 	.word	0x20001a34

080057ec <__sfputc_r>:
 80057ec:	6893      	ldr	r3, [r2, #8]
 80057ee:	b410      	push	{r4}
 80057f0:	3b01      	subs	r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	6093      	str	r3, [r2, #8]
 80057f6:	da07      	bge.n	8005808 <__sfputc_r+0x1c>
 80057f8:	6994      	ldr	r4, [r2, #24]
 80057fa:	42a3      	cmp	r3, r4
 80057fc:	db01      	blt.n	8005802 <__sfputc_r+0x16>
 80057fe:	290a      	cmp	r1, #10
 8005800:	d102      	bne.n	8005808 <__sfputc_r+0x1c>
 8005802:	bc10      	pop	{r4}
 8005804:	f7ff bdb7 	b.w	8005376 <__swbuf_r>
 8005808:	6813      	ldr	r3, [r2, #0]
 800580a:	1c58      	adds	r0, r3, #1
 800580c:	6010      	str	r0, [r2, #0]
 800580e:	7019      	strb	r1, [r3, #0]
 8005810:	4608      	mov	r0, r1
 8005812:	bc10      	pop	{r4}
 8005814:	4770      	bx	lr

08005816 <__sfputs_r>:
 8005816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005818:	4606      	mov	r6, r0
 800581a:	460f      	mov	r7, r1
 800581c:	4614      	mov	r4, r2
 800581e:	18d5      	adds	r5, r2, r3
 8005820:	42ac      	cmp	r4, r5
 8005822:	d101      	bne.n	8005828 <__sfputs_r+0x12>
 8005824:	2000      	movs	r0, #0
 8005826:	e007      	b.n	8005838 <__sfputs_r+0x22>
 8005828:	463a      	mov	r2, r7
 800582a:	4630      	mov	r0, r6
 800582c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005830:	f7ff ffdc 	bl	80057ec <__sfputc_r>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d1f3      	bne.n	8005820 <__sfputs_r+0xa>
 8005838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800583c <_vfiprintf_r>:
 800583c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005840:	460d      	mov	r5, r1
 8005842:	4614      	mov	r4, r2
 8005844:	4698      	mov	r8, r3
 8005846:	4606      	mov	r6, r0
 8005848:	b09d      	sub	sp, #116	@ 0x74
 800584a:	b118      	cbz	r0, 8005854 <_vfiprintf_r+0x18>
 800584c:	6a03      	ldr	r3, [r0, #32]
 800584e:	b90b      	cbnz	r3, 8005854 <_vfiprintf_r+0x18>
 8005850:	f7ff fca8 	bl	80051a4 <__sinit>
 8005854:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005856:	07d9      	lsls	r1, r3, #31
 8005858:	d405      	bmi.n	8005866 <_vfiprintf_r+0x2a>
 800585a:	89ab      	ldrh	r3, [r5, #12]
 800585c:	059a      	lsls	r2, r3, #22
 800585e:	d402      	bmi.n	8005866 <_vfiprintf_r+0x2a>
 8005860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005862:	f7ff fe96 	bl	8005592 <__retarget_lock_acquire_recursive>
 8005866:	89ab      	ldrh	r3, [r5, #12]
 8005868:	071b      	lsls	r3, r3, #28
 800586a:	d501      	bpl.n	8005870 <_vfiprintf_r+0x34>
 800586c:	692b      	ldr	r3, [r5, #16]
 800586e:	b99b      	cbnz	r3, 8005898 <_vfiprintf_r+0x5c>
 8005870:	4629      	mov	r1, r5
 8005872:	4630      	mov	r0, r6
 8005874:	f7ff fdbe 	bl	80053f4 <__swsetup_r>
 8005878:	b170      	cbz	r0, 8005898 <_vfiprintf_r+0x5c>
 800587a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800587c:	07dc      	lsls	r4, r3, #31
 800587e:	d504      	bpl.n	800588a <_vfiprintf_r+0x4e>
 8005880:	f04f 30ff 	mov.w	r0, #4294967295
 8005884:	b01d      	add	sp, #116	@ 0x74
 8005886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588a:	89ab      	ldrh	r3, [r5, #12]
 800588c:	0598      	lsls	r0, r3, #22
 800588e:	d4f7      	bmi.n	8005880 <_vfiprintf_r+0x44>
 8005890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005892:	f7ff fe7f 	bl	8005594 <__retarget_lock_release_recursive>
 8005896:	e7f3      	b.n	8005880 <_vfiprintf_r+0x44>
 8005898:	2300      	movs	r3, #0
 800589a:	9309      	str	r3, [sp, #36]	@ 0x24
 800589c:	2320      	movs	r3, #32
 800589e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058a2:	2330      	movs	r3, #48	@ 0x30
 80058a4:	f04f 0901 	mov.w	r9, #1
 80058a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80058ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005a58 <_vfiprintf_r+0x21c>
 80058b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058b4:	4623      	mov	r3, r4
 80058b6:	469a      	mov	sl, r3
 80058b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058bc:	b10a      	cbz	r2, 80058c2 <_vfiprintf_r+0x86>
 80058be:	2a25      	cmp	r2, #37	@ 0x25
 80058c0:	d1f9      	bne.n	80058b6 <_vfiprintf_r+0x7a>
 80058c2:	ebba 0b04 	subs.w	fp, sl, r4
 80058c6:	d00b      	beq.n	80058e0 <_vfiprintf_r+0xa4>
 80058c8:	465b      	mov	r3, fp
 80058ca:	4622      	mov	r2, r4
 80058cc:	4629      	mov	r1, r5
 80058ce:	4630      	mov	r0, r6
 80058d0:	f7ff ffa1 	bl	8005816 <__sfputs_r>
 80058d4:	3001      	adds	r0, #1
 80058d6:	f000 80a7 	beq.w	8005a28 <_vfiprintf_r+0x1ec>
 80058da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058dc:	445a      	add	r2, fp
 80058de:	9209      	str	r2, [sp, #36]	@ 0x24
 80058e0:	f89a 3000 	ldrb.w	r3, [sl]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 809f 	beq.w	8005a28 <_vfiprintf_r+0x1ec>
 80058ea:	2300      	movs	r3, #0
 80058ec:	f04f 32ff 	mov.w	r2, #4294967295
 80058f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058f4:	f10a 0a01 	add.w	sl, sl, #1
 80058f8:	9304      	str	r3, [sp, #16]
 80058fa:	9307      	str	r3, [sp, #28]
 80058fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005900:	931a      	str	r3, [sp, #104]	@ 0x68
 8005902:	4654      	mov	r4, sl
 8005904:	2205      	movs	r2, #5
 8005906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800590a:	4853      	ldr	r0, [pc, #332]	@ (8005a58 <_vfiprintf_r+0x21c>)
 800590c:	f000 fb8e 	bl	800602c <memchr>
 8005910:	9a04      	ldr	r2, [sp, #16]
 8005912:	b9d8      	cbnz	r0, 800594c <_vfiprintf_r+0x110>
 8005914:	06d1      	lsls	r1, r2, #27
 8005916:	bf44      	itt	mi
 8005918:	2320      	movmi	r3, #32
 800591a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800591e:	0713      	lsls	r3, r2, #28
 8005920:	bf44      	itt	mi
 8005922:	232b      	movmi	r3, #43	@ 0x2b
 8005924:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005928:	f89a 3000 	ldrb.w	r3, [sl]
 800592c:	2b2a      	cmp	r3, #42	@ 0x2a
 800592e:	d015      	beq.n	800595c <_vfiprintf_r+0x120>
 8005930:	4654      	mov	r4, sl
 8005932:	2000      	movs	r0, #0
 8005934:	f04f 0c0a 	mov.w	ip, #10
 8005938:	9a07      	ldr	r2, [sp, #28]
 800593a:	4621      	mov	r1, r4
 800593c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005940:	3b30      	subs	r3, #48	@ 0x30
 8005942:	2b09      	cmp	r3, #9
 8005944:	d94b      	bls.n	80059de <_vfiprintf_r+0x1a2>
 8005946:	b1b0      	cbz	r0, 8005976 <_vfiprintf_r+0x13a>
 8005948:	9207      	str	r2, [sp, #28]
 800594a:	e014      	b.n	8005976 <_vfiprintf_r+0x13a>
 800594c:	eba0 0308 	sub.w	r3, r0, r8
 8005950:	fa09 f303 	lsl.w	r3, r9, r3
 8005954:	4313      	orrs	r3, r2
 8005956:	46a2      	mov	sl, r4
 8005958:	9304      	str	r3, [sp, #16]
 800595a:	e7d2      	b.n	8005902 <_vfiprintf_r+0xc6>
 800595c:	9b03      	ldr	r3, [sp, #12]
 800595e:	1d19      	adds	r1, r3, #4
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	9103      	str	r1, [sp, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	bfbb      	ittet	lt
 8005968:	425b      	neglt	r3, r3
 800596a:	f042 0202 	orrlt.w	r2, r2, #2
 800596e:	9307      	strge	r3, [sp, #28]
 8005970:	9307      	strlt	r3, [sp, #28]
 8005972:	bfb8      	it	lt
 8005974:	9204      	strlt	r2, [sp, #16]
 8005976:	7823      	ldrb	r3, [r4, #0]
 8005978:	2b2e      	cmp	r3, #46	@ 0x2e
 800597a:	d10a      	bne.n	8005992 <_vfiprintf_r+0x156>
 800597c:	7863      	ldrb	r3, [r4, #1]
 800597e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005980:	d132      	bne.n	80059e8 <_vfiprintf_r+0x1ac>
 8005982:	9b03      	ldr	r3, [sp, #12]
 8005984:	3402      	adds	r4, #2
 8005986:	1d1a      	adds	r2, r3, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	9203      	str	r2, [sp, #12]
 800598c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005990:	9305      	str	r3, [sp, #20]
 8005992:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005a5c <_vfiprintf_r+0x220>
 8005996:	2203      	movs	r2, #3
 8005998:	4650      	mov	r0, sl
 800599a:	7821      	ldrb	r1, [r4, #0]
 800599c:	f000 fb46 	bl	800602c <memchr>
 80059a0:	b138      	cbz	r0, 80059b2 <_vfiprintf_r+0x176>
 80059a2:	2240      	movs	r2, #64	@ 0x40
 80059a4:	9b04      	ldr	r3, [sp, #16]
 80059a6:	eba0 000a 	sub.w	r0, r0, sl
 80059aa:	4082      	lsls	r2, r0
 80059ac:	4313      	orrs	r3, r2
 80059ae:	3401      	adds	r4, #1
 80059b0:	9304      	str	r3, [sp, #16]
 80059b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059b6:	2206      	movs	r2, #6
 80059b8:	4829      	ldr	r0, [pc, #164]	@ (8005a60 <_vfiprintf_r+0x224>)
 80059ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059be:	f000 fb35 	bl	800602c <memchr>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d03f      	beq.n	8005a46 <_vfiprintf_r+0x20a>
 80059c6:	4b27      	ldr	r3, [pc, #156]	@ (8005a64 <_vfiprintf_r+0x228>)
 80059c8:	bb1b      	cbnz	r3, 8005a12 <_vfiprintf_r+0x1d6>
 80059ca:	9b03      	ldr	r3, [sp, #12]
 80059cc:	3307      	adds	r3, #7
 80059ce:	f023 0307 	bic.w	r3, r3, #7
 80059d2:	3308      	adds	r3, #8
 80059d4:	9303      	str	r3, [sp, #12]
 80059d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059d8:	443b      	add	r3, r7
 80059da:	9309      	str	r3, [sp, #36]	@ 0x24
 80059dc:	e76a      	b.n	80058b4 <_vfiprintf_r+0x78>
 80059de:	460c      	mov	r4, r1
 80059e0:	2001      	movs	r0, #1
 80059e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80059e6:	e7a8      	b.n	800593a <_vfiprintf_r+0xfe>
 80059e8:	2300      	movs	r3, #0
 80059ea:	f04f 0c0a 	mov.w	ip, #10
 80059ee:	4619      	mov	r1, r3
 80059f0:	3401      	adds	r4, #1
 80059f2:	9305      	str	r3, [sp, #20]
 80059f4:	4620      	mov	r0, r4
 80059f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059fa:	3a30      	subs	r2, #48	@ 0x30
 80059fc:	2a09      	cmp	r2, #9
 80059fe:	d903      	bls.n	8005a08 <_vfiprintf_r+0x1cc>
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0c6      	beq.n	8005992 <_vfiprintf_r+0x156>
 8005a04:	9105      	str	r1, [sp, #20]
 8005a06:	e7c4      	b.n	8005992 <_vfiprintf_r+0x156>
 8005a08:	4604      	mov	r4, r0
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a10:	e7f0      	b.n	80059f4 <_vfiprintf_r+0x1b8>
 8005a12:	ab03      	add	r3, sp, #12
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	462a      	mov	r2, r5
 8005a18:	4630      	mov	r0, r6
 8005a1a:	4b13      	ldr	r3, [pc, #76]	@ (8005a68 <_vfiprintf_r+0x22c>)
 8005a1c:	a904      	add	r1, sp, #16
 8005a1e:	f3af 8000 	nop.w
 8005a22:	4607      	mov	r7, r0
 8005a24:	1c78      	adds	r0, r7, #1
 8005a26:	d1d6      	bne.n	80059d6 <_vfiprintf_r+0x19a>
 8005a28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a2a:	07d9      	lsls	r1, r3, #31
 8005a2c:	d405      	bmi.n	8005a3a <_vfiprintf_r+0x1fe>
 8005a2e:	89ab      	ldrh	r3, [r5, #12]
 8005a30:	059a      	lsls	r2, r3, #22
 8005a32:	d402      	bmi.n	8005a3a <_vfiprintf_r+0x1fe>
 8005a34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a36:	f7ff fdad 	bl	8005594 <__retarget_lock_release_recursive>
 8005a3a:	89ab      	ldrh	r3, [r5, #12]
 8005a3c:	065b      	lsls	r3, r3, #25
 8005a3e:	f53f af1f 	bmi.w	8005880 <_vfiprintf_r+0x44>
 8005a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a44:	e71e      	b.n	8005884 <_vfiprintf_r+0x48>
 8005a46:	ab03      	add	r3, sp, #12
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	462a      	mov	r2, r5
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	4b06      	ldr	r3, [pc, #24]	@ (8005a68 <_vfiprintf_r+0x22c>)
 8005a50:	a904      	add	r1, sp, #16
 8005a52:	f000 f87d 	bl	8005b50 <_printf_i>
 8005a56:	e7e4      	b.n	8005a22 <_vfiprintf_r+0x1e6>
 8005a58:	0800631b 	.word	0x0800631b
 8005a5c:	08006321 	.word	0x08006321
 8005a60:	08006325 	.word	0x08006325
 8005a64:	00000000 	.word	0x00000000
 8005a68:	08005817 	.word	0x08005817

08005a6c <_printf_common>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	4616      	mov	r6, r2
 8005a72:	4698      	mov	r8, r3
 8005a74:	688a      	ldr	r2, [r1, #8]
 8005a76:	690b      	ldr	r3, [r1, #16]
 8005a78:	4607      	mov	r7, r0
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	bfb8      	it	lt
 8005a7e:	4613      	movlt	r3, r2
 8005a80:	6033      	str	r3, [r6, #0]
 8005a82:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a86:	460c      	mov	r4, r1
 8005a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a8c:	b10a      	cbz	r2, 8005a92 <_printf_common+0x26>
 8005a8e:	3301      	adds	r3, #1
 8005a90:	6033      	str	r3, [r6, #0]
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	0699      	lsls	r1, r3, #26
 8005a96:	bf42      	ittt	mi
 8005a98:	6833      	ldrmi	r3, [r6, #0]
 8005a9a:	3302      	addmi	r3, #2
 8005a9c:	6033      	strmi	r3, [r6, #0]
 8005a9e:	6825      	ldr	r5, [r4, #0]
 8005aa0:	f015 0506 	ands.w	r5, r5, #6
 8005aa4:	d106      	bne.n	8005ab4 <_printf_common+0x48>
 8005aa6:	f104 0a19 	add.w	sl, r4, #25
 8005aaa:	68e3      	ldr	r3, [r4, #12]
 8005aac:	6832      	ldr	r2, [r6, #0]
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	42ab      	cmp	r3, r5
 8005ab2:	dc2b      	bgt.n	8005b0c <_printf_common+0xa0>
 8005ab4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ab8:	6822      	ldr	r2, [r4, #0]
 8005aba:	3b00      	subs	r3, #0
 8005abc:	bf18      	it	ne
 8005abe:	2301      	movne	r3, #1
 8005ac0:	0692      	lsls	r2, r2, #26
 8005ac2:	d430      	bmi.n	8005b26 <_printf_common+0xba>
 8005ac4:	4641      	mov	r1, r8
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005acc:	47c8      	blx	r9
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d023      	beq.n	8005b1a <_printf_common+0xae>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	6922      	ldr	r2, [r4, #16]
 8005ad6:	f003 0306 	and.w	r3, r3, #6
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	bf14      	ite	ne
 8005ade:	2500      	movne	r5, #0
 8005ae0:	6833      	ldreq	r3, [r6, #0]
 8005ae2:	f04f 0600 	mov.w	r6, #0
 8005ae6:	bf08      	it	eq
 8005ae8:	68e5      	ldreq	r5, [r4, #12]
 8005aea:	f104 041a 	add.w	r4, r4, #26
 8005aee:	bf08      	it	eq
 8005af0:	1aed      	subeq	r5, r5, r3
 8005af2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005af6:	bf08      	it	eq
 8005af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005afc:	4293      	cmp	r3, r2
 8005afe:	bfc4      	itt	gt
 8005b00:	1a9b      	subgt	r3, r3, r2
 8005b02:	18ed      	addgt	r5, r5, r3
 8005b04:	42b5      	cmp	r5, r6
 8005b06:	d11a      	bne.n	8005b3e <_printf_common+0xd2>
 8005b08:	2000      	movs	r0, #0
 8005b0a:	e008      	b.n	8005b1e <_printf_common+0xb2>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	4652      	mov	r2, sl
 8005b10:	4641      	mov	r1, r8
 8005b12:	4638      	mov	r0, r7
 8005b14:	47c8      	blx	r9
 8005b16:	3001      	adds	r0, #1
 8005b18:	d103      	bne.n	8005b22 <_printf_common+0xb6>
 8005b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b22:	3501      	adds	r5, #1
 8005b24:	e7c1      	b.n	8005aaa <_printf_common+0x3e>
 8005b26:	2030      	movs	r0, #48	@ 0x30
 8005b28:	18e1      	adds	r1, r4, r3
 8005b2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b34:	4422      	add	r2, r4
 8005b36:	3302      	adds	r3, #2
 8005b38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b3c:	e7c2      	b.n	8005ac4 <_printf_common+0x58>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	4622      	mov	r2, r4
 8005b42:	4641      	mov	r1, r8
 8005b44:	4638      	mov	r0, r7
 8005b46:	47c8      	blx	r9
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d0e6      	beq.n	8005b1a <_printf_common+0xae>
 8005b4c:	3601      	adds	r6, #1
 8005b4e:	e7d9      	b.n	8005b04 <_printf_common+0x98>

08005b50 <_printf_i>:
 8005b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b54:	7e0f      	ldrb	r7, [r1, #24]
 8005b56:	4691      	mov	r9, r2
 8005b58:	2f78      	cmp	r7, #120	@ 0x78
 8005b5a:	4680      	mov	r8, r0
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	469a      	mov	sl, r3
 8005b60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b66:	d807      	bhi.n	8005b78 <_printf_i+0x28>
 8005b68:	2f62      	cmp	r7, #98	@ 0x62
 8005b6a:	d80a      	bhi.n	8005b82 <_printf_i+0x32>
 8005b6c:	2f00      	cmp	r7, #0
 8005b6e:	f000 80d3 	beq.w	8005d18 <_printf_i+0x1c8>
 8005b72:	2f58      	cmp	r7, #88	@ 0x58
 8005b74:	f000 80ba 	beq.w	8005cec <_printf_i+0x19c>
 8005b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b80:	e03a      	b.n	8005bf8 <_printf_i+0xa8>
 8005b82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b86:	2b15      	cmp	r3, #21
 8005b88:	d8f6      	bhi.n	8005b78 <_printf_i+0x28>
 8005b8a:	a101      	add	r1, pc, #4	@ (adr r1, 8005b90 <_printf_i+0x40>)
 8005b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b90:	08005be9 	.word	0x08005be9
 8005b94:	08005bfd 	.word	0x08005bfd
 8005b98:	08005b79 	.word	0x08005b79
 8005b9c:	08005b79 	.word	0x08005b79
 8005ba0:	08005b79 	.word	0x08005b79
 8005ba4:	08005b79 	.word	0x08005b79
 8005ba8:	08005bfd 	.word	0x08005bfd
 8005bac:	08005b79 	.word	0x08005b79
 8005bb0:	08005b79 	.word	0x08005b79
 8005bb4:	08005b79 	.word	0x08005b79
 8005bb8:	08005b79 	.word	0x08005b79
 8005bbc:	08005cff 	.word	0x08005cff
 8005bc0:	08005c27 	.word	0x08005c27
 8005bc4:	08005cb9 	.word	0x08005cb9
 8005bc8:	08005b79 	.word	0x08005b79
 8005bcc:	08005b79 	.word	0x08005b79
 8005bd0:	08005d21 	.word	0x08005d21
 8005bd4:	08005b79 	.word	0x08005b79
 8005bd8:	08005c27 	.word	0x08005c27
 8005bdc:	08005b79 	.word	0x08005b79
 8005be0:	08005b79 	.word	0x08005b79
 8005be4:	08005cc1 	.word	0x08005cc1
 8005be8:	6833      	ldr	r3, [r6, #0]
 8005bea:	1d1a      	adds	r2, r3, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6032      	str	r2, [r6, #0]
 8005bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e09e      	b.n	8005d3a <_printf_i+0x1ea>
 8005bfc:	6833      	ldr	r3, [r6, #0]
 8005bfe:	6820      	ldr	r0, [r4, #0]
 8005c00:	1d19      	adds	r1, r3, #4
 8005c02:	6031      	str	r1, [r6, #0]
 8005c04:	0606      	lsls	r6, r0, #24
 8005c06:	d501      	bpl.n	8005c0c <_printf_i+0xbc>
 8005c08:	681d      	ldr	r5, [r3, #0]
 8005c0a:	e003      	b.n	8005c14 <_printf_i+0xc4>
 8005c0c:	0645      	lsls	r5, r0, #25
 8005c0e:	d5fb      	bpl.n	8005c08 <_printf_i+0xb8>
 8005c10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c14:	2d00      	cmp	r5, #0
 8005c16:	da03      	bge.n	8005c20 <_printf_i+0xd0>
 8005c18:	232d      	movs	r3, #45	@ 0x2d
 8005c1a:	426d      	negs	r5, r5
 8005c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c20:	230a      	movs	r3, #10
 8005c22:	4859      	ldr	r0, [pc, #356]	@ (8005d88 <_printf_i+0x238>)
 8005c24:	e011      	b.n	8005c4a <_printf_i+0xfa>
 8005c26:	6821      	ldr	r1, [r4, #0]
 8005c28:	6833      	ldr	r3, [r6, #0]
 8005c2a:	0608      	lsls	r0, r1, #24
 8005c2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c30:	d402      	bmi.n	8005c38 <_printf_i+0xe8>
 8005c32:	0649      	lsls	r1, r1, #25
 8005c34:	bf48      	it	mi
 8005c36:	b2ad      	uxthmi	r5, r5
 8005c38:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c3a:	6033      	str	r3, [r6, #0]
 8005c3c:	bf14      	ite	ne
 8005c3e:	230a      	movne	r3, #10
 8005c40:	2308      	moveq	r3, #8
 8005c42:	4851      	ldr	r0, [pc, #324]	@ (8005d88 <_printf_i+0x238>)
 8005c44:	2100      	movs	r1, #0
 8005c46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c4a:	6866      	ldr	r6, [r4, #4]
 8005c4c:	2e00      	cmp	r6, #0
 8005c4e:	bfa8      	it	ge
 8005c50:	6821      	ldrge	r1, [r4, #0]
 8005c52:	60a6      	str	r6, [r4, #8]
 8005c54:	bfa4      	itt	ge
 8005c56:	f021 0104 	bicge.w	r1, r1, #4
 8005c5a:	6021      	strge	r1, [r4, #0]
 8005c5c:	b90d      	cbnz	r5, 8005c62 <_printf_i+0x112>
 8005c5e:	2e00      	cmp	r6, #0
 8005c60:	d04b      	beq.n	8005cfa <_printf_i+0x1aa>
 8005c62:	4616      	mov	r6, r2
 8005c64:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c68:	fb03 5711 	mls	r7, r3, r1, r5
 8005c6c:	5dc7      	ldrb	r7, [r0, r7]
 8005c6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c72:	462f      	mov	r7, r5
 8005c74:	42bb      	cmp	r3, r7
 8005c76:	460d      	mov	r5, r1
 8005c78:	d9f4      	bls.n	8005c64 <_printf_i+0x114>
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	d10b      	bne.n	8005c96 <_printf_i+0x146>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	07df      	lsls	r7, r3, #31
 8005c82:	d508      	bpl.n	8005c96 <_printf_i+0x146>
 8005c84:	6923      	ldr	r3, [r4, #16]
 8005c86:	6861      	ldr	r1, [r4, #4]
 8005c88:	4299      	cmp	r1, r3
 8005c8a:	bfde      	ittt	le
 8005c8c:	2330      	movle	r3, #48	@ 0x30
 8005c8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c96:	1b92      	subs	r2, r2, r6
 8005c98:	6122      	str	r2, [r4, #16]
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	f8cd a000 	str.w	sl, [sp]
 8005ca4:	aa03      	add	r2, sp, #12
 8005ca6:	f7ff fee1 	bl	8005a6c <_printf_common>
 8005caa:	3001      	adds	r0, #1
 8005cac:	d14a      	bne.n	8005d44 <_printf_i+0x1f4>
 8005cae:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb2:	b004      	add	sp, #16
 8005cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	f043 0320 	orr.w	r3, r3, #32
 8005cbe:	6023      	str	r3, [r4, #0]
 8005cc0:	2778      	movs	r7, #120	@ 0x78
 8005cc2:	4832      	ldr	r0, [pc, #200]	@ (8005d8c <_printf_i+0x23c>)
 8005cc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	6831      	ldr	r1, [r6, #0]
 8005ccc:	061f      	lsls	r7, r3, #24
 8005cce:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cd2:	d402      	bmi.n	8005cda <_printf_i+0x18a>
 8005cd4:	065f      	lsls	r7, r3, #25
 8005cd6:	bf48      	it	mi
 8005cd8:	b2ad      	uxthmi	r5, r5
 8005cda:	6031      	str	r1, [r6, #0]
 8005cdc:	07d9      	lsls	r1, r3, #31
 8005cde:	bf44      	itt	mi
 8005ce0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ce4:	6023      	strmi	r3, [r4, #0]
 8005ce6:	b11d      	cbz	r5, 8005cf0 <_printf_i+0x1a0>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	e7ab      	b.n	8005c44 <_printf_i+0xf4>
 8005cec:	4826      	ldr	r0, [pc, #152]	@ (8005d88 <_printf_i+0x238>)
 8005cee:	e7e9      	b.n	8005cc4 <_printf_i+0x174>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	f023 0320 	bic.w	r3, r3, #32
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	e7f6      	b.n	8005ce8 <_printf_i+0x198>
 8005cfa:	4616      	mov	r6, r2
 8005cfc:	e7bd      	b.n	8005c7a <_printf_i+0x12a>
 8005cfe:	6833      	ldr	r3, [r6, #0]
 8005d00:	6825      	ldr	r5, [r4, #0]
 8005d02:	1d18      	adds	r0, r3, #4
 8005d04:	6961      	ldr	r1, [r4, #20]
 8005d06:	6030      	str	r0, [r6, #0]
 8005d08:	062e      	lsls	r6, r5, #24
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	d501      	bpl.n	8005d12 <_printf_i+0x1c2>
 8005d0e:	6019      	str	r1, [r3, #0]
 8005d10:	e002      	b.n	8005d18 <_printf_i+0x1c8>
 8005d12:	0668      	lsls	r0, r5, #25
 8005d14:	d5fb      	bpl.n	8005d0e <_printf_i+0x1be>
 8005d16:	8019      	strh	r1, [r3, #0]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4616      	mov	r6, r2
 8005d1c:	6123      	str	r3, [r4, #16]
 8005d1e:	e7bc      	b.n	8005c9a <_printf_i+0x14a>
 8005d20:	6833      	ldr	r3, [r6, #0]
 8005d22:	2100      	movs	r1, #0
 8005d24:	1d1a      	adds	r2, r3, #4
 8005d26:	6032      	str	r2, [r6, #0]
 8005d28:	681e      	ldr	r6, [r3, #0]
 8005d2a:	6862      	ldr	r2, [r4, #4]
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f000 f97d 	bl	800602c <memchr>
 8005d32:	b108      	cbz	r0, 8005d38 <_printf_i+0x1e8>
 8005d34:	1b80      	subs	r0, r0, r6
 8005d36:	6060      	str	r0, [r4, #4]
 8005d38:	6863      	ldr	r3, [r4, #4]
 8005d3a:	6123      	str	r3, [r4, #16]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d42:	e7aa      	b.n	8005c9a <_printf_i+0x14a>
 8005d44:	4632      	mov	r2, r6
 8005d46:	4649      	mov	r1, r9
 8005d48:	4640      	mov	r0, r8
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	47d0      	blx	sl
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d0ad      	beq.n	8005cae <_printf_i+0x15e>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	079b      	lsls	r3, r3, #30
 8005d56:	d413      	bmi.n	8005d80 <_printf_i+0x230>
 8005d58:	68e0      	ldr	r0, [r4, #12]
 8005d5a:	9b03      	ldr	r3, [sp, #12]
 8005d5c:	4298      	cmp	r0, r3
 8005d5e:	bfb8      	it	lt
 8005d60:	4618      	movlt	r0, r3
 8005d62:	e7a6      	b.n	8005cb2 <_printf_i+0x162>
 8005d64:	2301      	movs	r3, #1
 8005d66:	4632      	mov	r2, r6
 8005d68:	4649      	mov	r1, r9
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	47d0      	blx	sl
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d09d      	beq.n	8005cae <_printf_i+0x15e>
 8005d72:	3501      	adds	r5, #1
 8005d74:	68e3      	ldr	r3, [r4, #12]
 8005d76:	9903      	ldr	r1, [sp, #12]
 8005d78:	1a5b      	subs	r3, r3, r1
 8005d7a:	42ab      	cmp	r3, r5
 8005d7c:	dcf2      	bgt.n	8005d64 <_printf_i+0x214>
 8005d7e:	e7eb      	b.n	8005d58 <_printf_i+0x208>
 8005d80:	2500      	movs	r5, #0
 8005d82:	f104 0619 	add.w	r6, r4, #25
 8005d86:	e7f5      	b.n	8005d74 <_printf_i+0x224>
 8005d88:	0800632c 	.word	0x0800632c
 8005d8c:	0800633d 	.word	0x0800633d

08005d90 <__sflush_r>:
 8005d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	0716      	lsls	r6, r2, #28
 8005d98:	4605      	mov	r5, r0
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	d454      	bmi.n	8005e48 <__sflush_r+0xb8>
 8005d9e:	684b      	ldr	r3, [r1, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	dc02      	bgt.n	8005daa <__sflush_r+0x1a>
 8005da4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	dd48      	ble.n	8005e3c <__sflush_r+0xac>
 8005daa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dac:	2e00      	cmp	r6, #0
 8005dae:	d045      	beq.n	8005e3c <__sflush_r+0xac>
 8005db0:	2300      	movs	r3, #0
 8005db2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005db6:	682f      	ldr	r7, [r5, #0]
 8005db8:	6a21      	ldr	r1, [r4, #32]
 8005dba:	602b      	str	r3, [r5, #0]
 8005dbc:	d030      	beq.n	8005e20 <__sflush_r+0x90>
 8005dbe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	0759      	lsls	r1, r3, #29
 8005dc4:	d505      	bpl.n	8005dd2 <__sflush_r+0x42>
 8005dc6:	6863      	ldr	r3, [r4, #4]
 8005dc8:	1ad2      	subs	r2, r2, r3
 8005dca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005dcc:	b10b      	cbz	r3, 8005dd2 <__sflush_r+0x42>
 8005dce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dd0:	1ad2      	subs	r2, r2, r3
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dd8:	6a21      	ldr	r1, [r4, #32]
 8005dda:	47b0      	blx	r6
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	d106      	bne.n	8005df0 <__sflush_r+0x60>
 8005de2:	6829      	ldr	r1, [r5, #0]
 8005de4:	291d      	cmp	r1, #29
 8005de6:	d82b      	bhi.n	8005e40 <__sflush_r+0xb0>
 8005de8:	4a28      	ldr	r2, [pc, #160]	@ (8005e8c <__sflush_r+0xfc>)
 8005dea:	410a      	asrs	r2, r1
 8005dec:	07d6      	lsls	r6, r2, #31
 8005dee:	d427      	bmi.n	8005e40 <__sflush_r+0xb0>
 8005df0:	2200      	movs	r2, #0
 8005df2:	6062      	str	r2, [r4, #4]
 8005df4:	6922      	ldr	r2, [r4, #16]
 8005df6:	04d9      	lsls	r1, r3, #19
 8005df8:	6022      	str	r2, [r4, #0]
 8005dfa:	d504      	bpl.n	8005e06 <__sflush_r+0x76>
 8005dfc:	1c42      	adds	r2, r0, #1
 8005dfe:	d101      	bne.n	8005e04 <__sflush_r+0x74>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b903      	cbnz	r3, 8005e06 <__sflush_r+0x76>
 8005e04:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e08:	602f      	str	r7, [r5, #0]
 8005e0a:	b1b9      	cbz	r1, 8005e3c <__sflush_r+0xac>
 8005e0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e10:	4299      	cmp	r1, r3
 8005e12:	d002      	beq.n	8005e1a <__sflush_r+0x8a>
 8005e14:	4628      	mov	r0, r5
 8005e16:	f7ff fbeb 	bl	80055f0 <_free_r>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e1e:	e00d      	b.n	8005e3c <__sflush_r+0xac>
 8005e20:	2301      	movs	r3, #1
 8005e22:	4628      	mov	r0, r5
 8005e24:	47b0      	blx	r6
 8005e26:	4602      	mov	r2, r0
 8005e28:	1c50      	adds	r0, r2, #1
 8005e2a:	d1c9      	bne.n	8005dc0 <__sflush_r+0x30>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0c6      	beq.n	8005dc0 <__sflush_r+0x30>
 8005e32:	2b1d      	cmp	r3, #29
 8005e34:	d001      	beq.n	8005e3a <__sflush_r+0xaa>
 8005e36:	2b16      	cmp	r3, #22
 8005e38:	d11d      	bne.n	8005e76 <__sflush_r+0xe6>
 8005e3a:	602f      	str	r7, [r5, #0]
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	e021      	b.n	8005e84 <__sflush_r+0xf4>
 8005e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e44:	b21b      	sxth	r3, r3
 8005e46:	e01a      	b.n	8005e7e <__sflush_r+0xee>
 8005e48:	690f      	ldr	r7, [r1, #16]
 8005e4a:	2f00      	cmp	r7, #0
 8005e4c:	d0f6      	beq.n	8005e3c <__sflush_r+0xac>
 8005e4e:	0793      	lsls	r3, r2, #30
 8005e50:	bf18      	it	ne
 8005e52:	2300      	movne	r3, #0
 8005e54:	680e      	ldr	r6, [r1, #0]
 8005e56:	bf08      	it	eq
 8005e58:	694b      	ldreq	r3, [r1, #20]
 8005e5a:	1bf6      	subs	r6, r6, r7
 8005e5c:	600f      	str	r7, [r1, #0]
 8005e5e:	608b      	str	r3, [r1, #8]
 8005e60:	2e00      	cmp	r6, #0
 8005e62:	ddeb      	ble.n	8005e3c <__sflush_r+0xac>
 8005e64:	4633      	mov	r3, r6
 8005e66:	463a      	mov	r2, r7
 8005e68:	4628      	mov	r0, r5
 8005e6a:	6a21      	ldr	r1, [r4, #32]
 8005e6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005e70:	47e0      	blx	ip
 8005e72:	2800      	cmp	r0, #0
 8005e74:	dc07      	bgt.n	8005e86 <__sflush_r+0xf6>
 8005e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e86:	4407      	add	r7, r0
 8005e88:	1a36      	subs	r6, r6, r0
 8005e8a:	e7e9      	b.n	8005e60 <__sflush_r+0xd0>
 8005e8c:	dfbffffe 	.word	0xdfbffffe

08005e90 <_fflush_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	690b      	ldr	r3, [r1, #16]
 8005e94:	4605      	mov	r5, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	b913      	cbnz	r3, 8005ea0 <_fflush_r+0x10>
 8005e9a:	2500      	movs	r5, #0
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	b118      	cbz	r0, 8005eaa <_fflush_r+0x1a>
 8005ea2:	6a03      	ldr	r3, [r0, #32]
 8005ea4:	b90b      	cbnz	r3, 8005eaa <_fflush_r+0x1a>
 8005ea6:	f7ff f97d 	bl	80051a4 <__sinit>
 8005eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0f3      	beq.n	8005e9a <_fflush_r+0xa>
 8005eb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005eb4:	07d0      	lsls	r0, r2, #31
 8005eb6:	d404      	bmi.n	8005ec2 <_fflush_r+0x32>
 8005eb8:	0599      	lsls	r1, r3, #22
 8005eba:	d402      	bmi.n	8005ec2 <_fflush_r+0x32>
 8005ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ebe:	f7ff fb68 	bl	8005592 <__retarget_lock_acquire_recursive>
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	f7ff ff63 	bl	8005d90 <__sflush_r>
 8005eca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ecc:	4605      	mov	r5, r0
 8005ece:	07da      	lsls	r2, r3, #31
 8005ed0:	d4e4      	bmi.n	8005e9c <_fflush_r+0xc>
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	059b      	lsls	r3, r3, #22
 8005ed6:	d4e1      	bmi.n	8005e9c <_fflush_r+0xc>
 8005ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eda:	f7ff fb5b 	bl	8005594 <__retarget_lock_release_recursive>
 8005ede:	e7dd      	b.n	8005e9c <_fflush_r+0xc>

08005ee0 <fiprintf>:
 8005ee0:	b40e      	push	{r1, r2, r3}
 8005ee2:	b503      	push	{r0, r1, lr}
 8005ee4:	4601      	mov	r1, r0
 8005ee6:	ab03      	add	r3, sp, #12
 8005ee8:	4805      	ldr	r0, [pc, #20]	@ (8005f00 <fiprintf+0x20>)
 8005eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eee:	6800      	ldr	r0, [r0, #0]
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	f7ff fca3 	bl	800583c <_vfiprintf_r>
 8005ef6:	b002      	add	sp, #8
 8005ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005efc:	b003      	add	sp, #12
 8005efe:	4770      	bx	lr
 8005f00:	2000003c 	.word	0x2000003c

08005f04 <__swhatbuf_r>:
 8005f04:	b570      	push	{r4, r5, r6, lr}
 8005f06:	460c      	mov	r4, r1
 8005f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0c:	4615      	mov	r5, r2
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	461e      	mov	r6, r3
 8005f12:	b096      	sub	sp, #88	@ 0x58
 8005f14:	da0c      	bge.n	8005f30 <__swhatbuf_r+0x2c>
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	2100      	movs	r1, #0
 8005f1a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f1e:	bf14      	ite	ne
 8005f20:	2340      	movne	r3, #64	@ 0x40
 8005f22:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f26:	2000      	movs	r0, #0
 8005f28:	6031      	str	r1, [r6, #0]
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	b016      	add	sp, #88	@ 0x58
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
 8005f30:	466a      	mov	r2, sp
 8005f32:	f000 f849 	bl	8005fc8 <_fstat_r>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	dbed      	blt.n	8005f16 <__swhatbuf_r+0x12>
 8005f3a:	9901      	ldr	r1, [sp, #4]
 8005f3c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f40:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f44:	4259      	negs	r1, r3
 8005f46:	4159      	adcs	r1, r3
 8005f48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f4c:	e7eb      	b.n	8005f26 <__swhatbuf_r+0x22>

08005f4e <__smakebuf_r>:
 8005f4e:	898b      	ldrh	r3, [r1, #12]
 8005f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f52:	079d      	lsls	r5, r3, #30
 8005f54:	4606      	mov	r6, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	d507      	bpl.n	8005f6a <__smakebuf_r+0x1c>
 8005f5a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	6123      	str	r3, [r4, #16]
 8005f62:	2301      	movs	r3, #1
 8005f64:	6163      	str	r3, [r4, #20]
 8005f66:	b003      	add	sp, #12
 8005f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6a:	466a      	mov	r2, sp
 8005f6c:	ab01      	add	r3, sp, #4
 8005f6e:	f7ff ffc9 	bl	8005f04 <__swhatbuf_r>
 8005f72:	9f00      	ldr	r7, [sp, #0]
 8005f74:	4605      	mov	r5, r0
 8005f76:	4639      	mov	r1, r7
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f7ff fbab 	bl	80056d4 <_malloc_r>
 8005f7e:	b948      	cbnz	r0, 8005f94 <__smakebuf_r+0x46>
 8005f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f84:	059a      	lsls	r2, r3, #22
 8005f86:	d4ee      	bmi.n	8005f66 <__smakebuf_r+0x18>
 8005f88:	f023 0303 	bic.w	r3, r3, #3
 8005f8c:	f043 0302 	orr.w	r3, r3, #2
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	e7e2      	b.n	8005f5a <__smakebuf_r+0xc>
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f9e:	81a3      	strh	r3, [r4, #12]
 8005fa0:	9b01      	ldr	r3, [sp, #4]
 8005fa2:	6020      	str	r0, [r4, #0]
 8005fa4:	b15b      	cbz	r3, 8005fbe <__smakebuf_r+0x70>
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fac:	f000 f81e 	bl	8005fec <_isatty_r>
 8005fb0:	b128      	cbz	r0, 8005fbe <__smakebuf_r+0x70>
 8005fb2:	89a3      	ldrh	r3, [r4, #12]
 8005fb4:	f023 0303 	bic.w	r3, r3, #3
 8005fb8:	f043 0301 	orr.w	r3, r3, #1
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	431d      	orrs	r5, r3
 8005fc2:	81a5      	strh	r5, [r4, #12]
 8005fc4:	e7cf      	b.n	8005f66 <__smakebuf_r+0x18>
	...

08005fc8 <_fstat_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4d06      	ldr	r5, [pc, #24]	@ (8005fe8 <_fstat_r+0x20>)
 8005fce:	4604      	mov	r4, r0
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	602b      	str	r3, [r5, #0]
 8005fd6:	f7fb ff89 	bl	8001eec <_fstat>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	d102      	bne.n	8005fe4 <_fstat_r+0x1c>
 8005fde:	682b      	ldr	r3, [r5, #0]
 8005fe0:	b103      	cbz	r3, 8005fe4 <_fstat_r+0x1c>
 8005fe2:	6023      	str	r3, [r4, #0]
 8005fe4:	bd38      	pop	{r3, r4, r5, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20001a30 	.word	0x20001a30

08005fec <_isatty_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	2300      	movs	r3, #0
 8005ff0:	4d05      	ldr	r5, [pc, #20]	@ (8006008 <_isatty_r+0x1c>)
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	f7fb ff87 	bl	8001f0a <_isatty>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d102      	bne.n	8006006 <_isatty_r+0x1a>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	b103      	cbz	r3, 8006006 <_isatty_r+0x1a>
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	20001a30 	.word	0x20001a30

0800600c <_sbrk_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	2300      	movs	r3, #0
 8006010:	4d05      	ldr	r5, [pc, #20]	@ (8006028 <_sbrk_r+0x1c>)
 8006012:	4604      	mov	r4, r0
 8006014:	4608      	mov	r0, r1
 8006016:	602b      	str	r3, [r5, #0]
 8006018:	f7fb ff8e 	bl	8001f38 <_sbrk>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d102      	bne.n	8006026 <_sbrk_r+0x1a>
 8006020:	682b      	ldr	r3, [r5, #0]
 8006022:	b103      	cbz	r3, 8006026 <_sbrk_r+0x1a>
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	bd38      	pop	{r3, r4, r5, pc}
 8006028:	20001a30 	.word	0x20001a30

0800602c <memchr>:
 800602c:	4603      	mov	r3, r0
 800602e:	b510      	push	{r4, lr}
 8006030:	b2c9      	uxtb	r1, r1
 8006032:	4402      	add	r2, r0
 8006034:	4293      	cmp	r3, r2
 8006036:	4618      	mov	r0, r3
 8006038:	d101      	bne.n	800603e <memchr+0x12>
 800603a:	2000      	movs	r0, #0
 800603c:	e003      	b.n	8006046 <memchr+0x1a>
 800603e:	7804      	ldrb	r4, [r0, #0]
 8006040:	3301      	adds	r3, #1
 8006042:	428c      	cmp	r4, r1
 8006044:	d1f6      	bne.n	8006034 <memchr+0x8>
 8006046:	bd10      	pop	{r4, pc}

08006048 <abort>:
 8006048:	2006      	movs	r0, #6
 800604a:	b508      	push	{r3, lr}
 800604c:	f000 f82c 	bl	80060a8 <raise>
 8006050:	2001      	movs	r0, #1
 8006052:	f7fb ff18 	bl	8001e86 <_exit>

08006056 <_raise_r>:
 8006056:	291f      	cmp	r1, #31
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4605      	mov	r5, r0
 800605c:	460c      	mov	r4, r1
 800605e:	d904      	bls.n	800606a <_raise_r+0x14>
 8006060:	2316      	movs	r3, #22
 8006062:	6003      	str	r3, [r0, #0]
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	bd38      	pop	{r3, r4, r5, pc}
 800606a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800606c:	b112      	cbz	r2, 8006074 <_raise_r+0x1e>
 800606e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006072:	b94b      	cbnz	r3, 8006088 <_raise_r+0x32>
 8006074:	4628      	mov	r0, r5
 8006076:	f000 f831 	bl	80060dc <_getpid_r>
 800607a:	4622      	mov	r2, r4
 800607c:	4601      	mov	r1, r0
 800607e:	4628      	mov	r0, r5
 8006080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006084:	f000 b818 	b.w	80060b8 <_kill_r>
 8006088:	2b01      	cmp	r3, #1
 800608a:	d00a      	beq.n	80060a2 <_raise_r+0x4c>
 800608c:	1c59      	adds	r1, r3, #1
 800608e:	d103      	bne.n	8006098 <_raise_r+0x42>
 8006090:	2316      	movs	r3, #22
 8006092:	6003      	str	r3, [r0, #0]
 8006094:	2001      	movs	r0, #1
 8006096:	e7e7      	b.n	8006068 <_raise_r+0x12>
 8006098:	2100      	movs	r1, #0
 800609a:	4620      	mov	r0, r4
 800609c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80060a0:	4798      	blx	r3
 80060a2:	2000      	movs	r0, #0
 80060a4:	e7e0      	b.n	8006068 <_raise_r+0x12>
	...

080060a8 <raise>:
 80060a8:	4b02      	ldr	r3, [pc, #8]	@ (80060b4 <raise+0xc>)
 80060aa:	4601      	mov	r1, r0
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	f7ff bfd2 	b.w	8006056 <_raise_r>
 80060b2:	bf00      	nop
 80060b4:	2000003c 	.word	0x2000003c

080060b8 <_kill_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	2300      	movs	r3, #0
 80060bc:	4d06      	ldr	r5, [pc, #24]	@ (80060d8 <_kill_r+0x20>)
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	4611      	mov	r1, r2
 80060c4:	602b      	str	r3, [r5, #0]
 80060c6:	f7fb fece 	bl	8001e66 <_kill>
 80060ca:	1c43      	adds	r3, r0, #1
 80060cc:	d102      	bne.n	80060d4 <_kill_r+0x1c>
 80060ce:	682b      	ldr	r3, [r5, #0]
 80060d0:	b103      	cbz	r3, 80060d4 <_kill_r+0x1c>
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	bd38      	pop	{r3, r4, r5, pc}
 80060d6:	bf00      	nop
 80060d8:	20001a30 	.word	0x20001a30

080060dc <_getpid_r>:
 80060dc:	f7fb bebc 	b.w	8001e58 <_getpid>

080060e0 <_init>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	bf00      	nop
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr

080060ec <_fini>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	bf00      	nop
 80060f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f2:	bc08      	pop	{r3}
 80060f4:	469e      	mov	lr, r3
 80060f6:	4770      	bx	lr
