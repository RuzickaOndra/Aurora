
Aurora_LEDFins_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006398  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08006458  08006458  00007458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006710  08006710  00008078  2**0
                  CONTENTS
  4 .ARM          00000000  08006710  08006710  00008078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006710  08006710  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006710  08006710  00007710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006714  08006714  00007714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006718  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  20000078  08006790  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08006790  0000848c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc9d  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f1  00000000  00000000  00015d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00017f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a53  00000000  00000000  00018c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001181a  00000000  00000000  000196ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001011f  00000000  00000000  0002aec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067c21  00000000  00000000  0003afe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2c05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae8  00000000  00000000  000a2c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000a6730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006440 	.word	0x08006440

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08006440 	.word	0x08006440

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1824      	adds	r4, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	42a3      	cmp	r3, r4
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0424      	lsls	r4, r4, #16
 8000456:	1960      	adds	r0, r4, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_f2uiz>:
 8000464:	219e      	movs	r1, #158	@ 0x9e
 8000466:	b510      	push	{r4, lr}
 8000468:	05c9      	lsls	r1, r1, #23
 800046a:	1c04      	adds	r4, r0, #0
 800046c:	f000 fcf2 	bl	8000e54 <__aeabi_fcmpge>
 8000470:	2800      	cmp	r0, #0
 8000472:	d103      	bne.n	800047c <__aeabi_f2uiz+0x18>
 8000474:	1c20      	adds	r0, r4, #0
 8000476:	f000 fc0f 	bl	8000c98 <__aeabi_f2iz>
 800047a:	bd10      	pop	{r4, pc}
 800047c:	219e      	movs	r1, #158	@ 0x9e
 800047e:	1c20      	adds	r0, r4, #0
 8000480:	05c9      	lsls	r1, r1, #23
 8000482:	f000 fa65 	bl	8000950 <__aeabi_fsub>
 8000486:	f000 fc07 	bl	8000c98 <__aeabi_f2iz>
 800048a:	2380      	movs	r3, #128	@ 0x80
 800048c:	061b      	lsls	r3, r3, #24
 800048e:	469c      	mov	ip, r3
 8000490:	4460      	add	r0, ip
 8000492:	e7f2      	b.n	800047a <__aeabi_f2uiz+0x16>

08000494 <__aeabi_fdiv>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	46d6      	mov	lr, sl
 800049c:	0244      	lsls	r4, r0, #9
 800049e:	b5c0      	push	{r6, r7, lr}
 80004a0:	0047      	lsls	r7, r0, #1
 80004a2:	1c0e      	adds	r6, r1, #0
 80004a4:	0a64      	lsrs	r4, r4, #9
 80004a6:	0e3f      	lsrs	r7, r7, #24
 80004a8:	0fc5      	lsrs	r5, r0, #31
 80004aa:	2f00      	cmp	r7, #0
 80004ac:	d03c      	beq.n	8000528 <__aeabi_fdiv+0x94>
 80004ae:	2fff      	cmp	r7, #255	@ 0xff
 80004b0:	d042      	beq.n	8000538 <__aeabi_fdiv+0xa4>
 80004b2:	2300      	movs	r3, #0
 80004b4:	2280      	movs	r2, #128	@ 0x80
 80004b6:	4699      	mov	r9, r3
 80004b8:	469a      	mov	sl, r3
 80004ba:	00e4      	lsls	r4, r4, #3
 80004bc:	04d2      	lsls	r2, r2, #19
 80004be:	4314      	orrs	r4, r2
 80004c0:	3f7f      	subs	r7, #127	@ 0x7f
 80004c2:	0273      	lsls	r3, r6, #9
 80004c4:	0a5b      	lsrs	r3, r3, #9
 80004c6:	4698      	mov	r8, r3
 80004c8:	0073      	lsls	r3, r6, #1
 80004ca:	0e1b      	lsrs	r3, r3, #24
 80004cc:	0ff6      	lsrs	r6, r6, #31
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d01b      	beq.n	800050a <__aeabi_fdiv+0x76>
 80004d2:	2bff      	cmp	r3, #255	@ 0xff
 80004d4:	d013      	beq.n	80004fe <__aeabi_fdiv+0x6a>
 80004d6:	4642      	mov	r2, r8
 80004d8:	2180      	movs	r1, #128	@ 0x80
 80004da:	00d2      	lsls	r2, r2, #3
 80004dc:	04c9      	lsls	r1, r1, #19
 80004de:	4311      	orrs	r1, r2
 80004e0:	4688      	mov	r8, r1
 80004e2:	2000      	movs	r0, #0
 80004e4:	3b7f      	subs	r3, #127	@ 0x7f
 80004e6:	0029      	movs	r1, r5
 80004e8:	1aff      	subs	r7, r7, r3
 80004ea:	464b      	mov	r3, r9
 80004ec:	4071      	eors	r1, r6
 80004ee:	b2c9      	uxtb	r1, r1
 80004f0:	2b0f      	cmp	r3, #15
 80004f2:	d900      	bls.n	80004f6 <__aeabi_fdiv+0x62>
 80004f4:	e0b5      	b.n	8000662 <__aeabi_fdiv+0x1ce>
 80004f6:	4a74      	ldr	r2, [pc, #464]	@ (80006c8 <__aeabi_fdiv+0x234>)
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	58d3      	ldr	r3, [r2, r3]
 80004fc:	469f      	mov	pc, r3
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d13f      	bne.n	8000584 <__aeabi_fdiv+0xf0>
 8000504:	3fff      	subs	r7, #255	@ 0xff
 8000506:	3302      	adds	r3, #2
 8000508:	e003      	b.n	8000512 <__aeabi_fdiv+0x7e>
 800050a:	4643      	mov	r3, r8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d12d      	bne.n	800056c <__aeabi_fdiv+0xd8>
 8000510:	2301      	movs	r3, #1
 8000512:	0029      	movs	r1, r5
 8000514:	464a      	mov	r2, r9
 8000516:	4071      	eors	r1, r6
 8000518:	b2c9      	uxtb	r1, r1
 800051a:	431a      	orrs	r2, r3
 800051c:	2a0e      	cmp	r2, #14
 800051e:	d838      	bhi.n	8000592 <__aeabi_fdiv+0xfe>
 8000520:	486a      	ldr	r0, [pc, #424]	@ (80006cc <__aeabi_fdiv+0x238>)
 8000522:	0092      	lsls	r2, r2, #2
 8000524:	5882      	ldr	r2, [r0, r2]
 8000526:	4697      	mov	pc, r2
 8000528:	2c00      	cmp	r4, #0
 800052a:	d113      	bne.n	8000554 <__aeabi_fdiv+0xc0>
 800052c:	2304      	movs	r3, #4
 800052e:	4699      	mov	r9, r3
 8000530:	3b03      	subs	r3, #3
 8000532:	2700      	movs	r7, #0
 8000534:	469a      	mov	sl, r3
 8000536:	e7c4      	b.n	80004c2 <__aeabi_fdiv+0x2e>
 8000538:	2c00      	cmp	r4, #0
 800053a:	d105      	bne.n	8000548 <__aeabi_fdiv+0xb4>
 800053c:	2308      	movs	r3, #8
 800053e:	4699      	mov	r9, r3
 8000540:	3b06      	subs	r3, #6
 8000542:	27ff      	movs	r7, #255	@ 0xff
 8000544:	469a      	mov	sl, r3
 8000546:	e7bc      	b.n	80004c2 <__aeabi_fdiv+0x2e>
 8000548:	230c      	movs	r3, #12
 800054a:	4699      	mov	r9, r3
 800054c:	3b09      	subs	r3, #9
 800054e:	27ff      	movs	r7, #255	@ 0xff
 8000550:	469a      	mov	sl, r3
 8000552:	e7b6      	b.n	80004c2 <__aeabi_fdiv+0x2e>
 8000554:	0020      	movs	r0, r4
 8000556:	f000 fc87 	bl	8000e68 <__clzsi2>
 800055a:	2776      	movs	r7, #118	@ 0x76
 800055c:	1f43      	subs	r3, r0, #5
 800055e:	409c      	lsls	r4, r3
 8000560:	2300      	movs	r3, #0
 8000562:	427f      	negs	r7, r7
 8000564:	4699      	mov	r9, r3
 8000566:	469a      	mov	sl, r3
 8000568:	1a3f      	subs	r7, r7, r0
 800056a:	e7aa      	b.n	80004c2 <__aeabi_fdiv+0x2e>
 800056c:	4640      	mov	r0, r8
 800056e:	f000 fc7b 	bl	8000e68 <__clzsi2>
 8000572:	4642      	mov	r2, r8
 8000574:	1f43      	subs	r3, r0, #5
 8000576:	409a      	lsls	r2, r3
 8000578:	2376      	movs	r3, #118	@ 0x76
 800057a:	425b      	negs	r3, r3
 800057c:	1a1b      	subs	r3, r3, r0
 800057e:	4690      	mov	r8, r2
 8000580:	2000      	movs	r0, #0
 8000582:	e7b0      	b.n	80004e6 <__aeabi_fdiv+0x52>
 8000584:	2303      	movs	r3, #3
 8000586:	464a      	mov	r2, r9
 8000588:	431a      	orrs	r2, r3
 800058a:	4691      	mov	r9, r2
 800058c:	2003      	movs	r0, #3
 800058e:	33fc      	adds	r3, #252	@ 0xfc
 8000590:	e7a9      	b.n	80004e6 <__aeabi_fdiv+0x52>
 8000592:	000d      	movs	r5, r1
 8000594:	20ff      	movs	r0, #255	@ 0xff
 8000596:	2200      	movs	r2, #0
 8000598:	05c0      	lsls	r0, r0, #23
 800059a:	07ed      	lsls	r5, r5, #31
 800059c:	4310      	orrs	r0, r2
 800059e:	4328      	orrs	r0, r5
 80005a0:	bce0      	pop	{r5, r6, r7}
 80005a2:	46ba      	mov	sl, r7
 80005a4:	46b1      	mov	r9, r6
 80005a6:	46a8      	mov	r8, r5
 80005a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005aa:	000d      	movs	r5, r1
 80005ac:	2000      	movs	r0, #0
 80005ae:	2200      	movs	r2, #0
 80005b0:	e7f2      	b.n	8000598 <__aeabi_fdiv+0x104>
 80005b2:	4653      	mov	r3, sl
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d0ed      	beq.n	8000594 <__aeabi_fdiv+0x100>
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	d033      	beq.n	8000624 <__aeabi_fdiv+0x190>
 80005bc:	46a0      	mov	r8, r4
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d105      	bne.n	80005ce <__aeabi_fdiv+0x13a>
 80005c2:	2000      	movs	r0, #0
 80005c4:	2200      	movs	r2, #0
 80005c6:	e7e7      	b.n	8000598 <__aeabi_fdiv+0x104>
 80005c8:	0035      	movs	r5, r6
 80005ca:	2803      	cmp	r0, #3
 80005cc:	d07a      	beq.n	80006c4 <__aeabi_fdiv+0x230>
 80005ce:	003b      	movs	r3, r7
 80005d0:	337f      	adds	r3, #127	@ 0x7f
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dd2d      	ble.n	8000632 <__aeabi_fdiv+0x19e>
 80005d6:	4642      	mov	r2, r8
 80005d8:	0752      	lsls	r2, r2, #29
 80005da:	d007      	beq.n	80005ec <__aeabi_fdiv+0x158>
 80005dc:	220f      	movs	r2, #15
 80005de:	4641      	mov	r1, r8
 80005e0:	400a      	ands	r2, r1
 80005e2:	2a04      	cmp	r2, #4
 80005e4:	d002      	beq.n	80005ec <__aeabi_fdiv+0x158>
 80005e6:	2204      	movs	r2, #4
 80005e8:	4694      	mov	ip, r2
 80005ea:	44e0      	add	r8, ip
 80005ec:	4642      	mov	r2, r8
 80005ee:	0112      	lsls	r2, r2, #4
 80005f0:	d505      	bpl.n	80005fe <__aeabi_fdiv+0x16a>
 80005f2:	4642      	mov	r2, r8
 80005f4:	4b36      	ldr	r3, [pc, #216]	@ (80006d0 <__aeabi_fdiv+0x23c>)
 80005f6:	401a      	ands	r2, r3
 80005f8:	003b      	movs	r3, r7
 80005fa:	4690      	mov	r8, r2
 80005fc:	3380      	adds	r3, #128	@ 0x80
 80005fe:	2bfe      	cmp	r3, #254	@ 0xfe
 8000600:	dcc8      	bgt.n	8000594 <__aeabi_fdiv+0x100>
 8000602:	4642      	mov	r2, r8
 8000604:	0192      	lsls	r2, r2, #6
 8000606:	0a52      	lsrs	r2, r2, #9
 8000608:	b2d8      	uxtb	r0, r3
 800060a:	e7c5      	b.n	8000598 <__aeabi_fdiv+0x104>
 800060c:	2280      	movs	r2, #128	@ 0x80
 800060e:	2500      	movs	r5, #0
 8000610:	20ff      	movs	r0, #255	@ 0xff
 8000612:	03d2      	lsls	r2, r2, #15
 8000614:	e7c0      	b.n	8000598 <__aeabi_fdiv+0x104>
 8000616:	2280      	movs	r2, #128	@ 0x80
 8000618:	03d2      	lsls	r2, r2, #15
 800061a:	4214      	tst	r4, r2
 800061c:	d002      	beq.n	8000624 <__aeabi_fdiv+0x190>
 800061e:	4643      	mov	r3, r8
 8000620:	4213      	tst	r3, r2
 8000622:	d049      	beq.n	80006b8 <__aeabi_fdiv+0x224>
 8000624:	2280      	movs	r2, #128	@ 0x80
 8000626:	03d2      	lsls	r2, r2, #15
 8000628:	4322      	orrs	r2, r4
 800062a:	0252      	lsls	r2, r2, #9
 800062c:	20ff      	movs	r0, #255	@ 0xff
 800062e:	0a52      	lsrs	r2, r2, #9
 8000630:	e7b2      	b.n	8000598 <__aeabi_fdiv+0x104>
 8000632:	2201      	movs	r2, #1
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	2b1b      	cmp	r3, #27
 8000638:	dcc3      	bgt.n	80005c2 <__aeabi_fdiv+0x12e>
 800063a:	4642      	mov	r2, r8
 800063c:	40da      	lsrs	r2, r3
 800063e:	4643      	mov	r3, r8
 8000640:	379e      	adds	r7, #158	@ 0x9e
 8000642:	40bb      	lsls	r3, r7
 8000644:	1e59      	subs	r1, r3, #1
 8000646:	418b      	sbcs	r3, r1
 8000648:	431a      	orrs	r2, r3
 800064a:	0753      	lsls	r3, r2, #29
 800064c:	d004      	beq.n	8000658 <__aeabi_fdiv+0x1c4>
 800064e:	230f      	movs	r3, #15
 8000650:	4013      	ands	r3, r2
 8000652:	2b04      	cmp	r3, #4
 8000654:	d000      	beq.n	8000658 <__aeabi_fdiv+0x1c4>
 8000656:	3204      	adds	r2, #4
 8000658:	0153      	lsls	r3, r2, #5
 800065a:	d529      	bpl.n	80006b0 <__aeabi_fdiv+0x21c>
 800065c:	2001      	movs	r0, #1
 800065e:	2200      	movs	r2, #0
 8000660:	e79a      	b.n	8000598 <__aeabi_fdiv+0x104>
 8000662:	4642      	mov	r2, r8
 8000664:	0163      	lsls	r3, r4, #5
 8000666:	0155      	lsls	r5, r2, #5
 8000668:	42ab      	cmp	r3, r5
 800066a:	d215      	bcs.n	8000698 <__aeabi_fdiv+0x204>
 800066c:	201b      	movs	r0, #27
 800066e:	2200      	movs	r2, #0
 8000670:	3f01      	subs	r7, #1
 8000672:	2601      	movs	r6, #1
 8000674:	001c      	movs	r4, r3
 8000676:	0052      	lsls	r2, r2, #1
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	2c00      	cmp	r4, #0
 800067c:	db01      	blt.n	8000682 <__aeabi_fdiv+0x1ee>
 800067e:	429d      	cmp	r5, r3
 8000680:	d801      	bhi.n	8000686 <__aeabi_fdiv+0x1f2>
 8000682:	1b5b      	subs	r3, r3, r5
 8000684:	4332      	orrs	r2, r6
 8000686:	3801      	subs	r0, #1
 8000688:	2800      	cmp	r0, #0
 800068a:	d1f3      	bne.n	8000674 <__aeabi_fdiv+0x1e0>
 800068c:	1e58      	subs	r0, r3, #1
 800068e:	4183      	sbcs	r3, r0
 8000690:	4313      	orrs	r3, r2
 8000692:	4698      	mov	r8, r3
 8000694:	000d      	movs	r5, r1
 8000696:	e79a      	b.n	80005ce <__aeabi_fdiv+0x13a>
 8000698:	201a      	movs	r0, #26
 800069a:	2201      	movs	r2, #1
 800069c:	1b5b      	subs	r3, r3, r5
 800069e:	e7e8      	b.n	8000672 <__aeabi_fdiv+0x1de>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	425a      	negs	r2, r3
 80006a4:	4153      	adcs	r3, r2
 80006a6:	425b      	negs	r3, r3
 80006a8:	0035      	movs	r5, r6
 80006aa:	2200      	movs	r2, #0
 80006ac:	b2d8      	uxtb	r0, r3
 80006ae:	e773      	b.n	8000598 <__aeabi_fdiv+0x104>
 80006b0:	0192      	lsls	r2, r2, #6
 80006b2:	2000      	movs	r0, #0
 80006b4:	0a52      	lsrs	r2, r2, #9
 80006b6:	e76f      	b.n	8000598 <__aeabi_fdiv+0x104>
 80006b8:	431a      	orrs	r2, r3
 80006ba:	0252      	lsls	r2, r2, #9
 80006bc:	0035      	movs	r5, r6
 80006be:	20ff      	movs	r0, #255	@ 0xff
 80006c0:	0a52      	lsrs	r2, r2, #9
 80006c2:	e769      	b.n	8000598 <__aeabi_fdiv+0x104>
 80006c4:	4644      	mov	r4, r8
 80006c6:	e7ad      	b.n	8000624 <__aeabi_fdiv+0x190>
 80006c8:	08006464 	.word	0x08006464
 80006cc:	080064a4 	.word	0x080064a4
 80006d0:	f7ffffff 	.word	0xf7ffffff

080006d4 <__aeabi_fmul>:
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	464f      	mov	r7, r9
 80006d8:	4646      	mov	r6, r8
 80006da:	46d6      	mov	lr, sl
 80006dc:	0243      	lsls	r3, r0, #9
 80006de:	0a5b      	lsrs	r3, r3, #9
 80006e0:	0045      	lsls	r5, r0, #1
 80006e2:	b5c0      	push	{r6, r7, lr}
 80006e4:	4699      	mov	r9, r3
 80006e6:	1c0f      	adds	r7, r1, #0
 80006e8:	0e2d      	lsrs	r5, r5, #24
 80006ea:	0fc6      	lsrs	r6, r0, #31
 80006ec:	2d00      	cmp	r5, #0
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fmul+0x1e>
 80006f0:	e088      	b.n	8000804 <__aeabi_fmul+0x130>
 80006f2:	2dff      	cmp	r5, #255	@ 0xff
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fmul+0x24>
 80006f6:	e08d      	b.n	8000814 <__aeabi_fmul+0x140>
 80006f8:	2280      	movs	r2, #128	@ 0x80
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	04d2      	lsls	r2, r2, #19
 80006fe:	431a      	orrs	r2, r3
 8000700:	2300      	movs	r3, #0
 8000702:	4691      	mov	r9, r2
 8000704:	4698      	mov	r8, r3
 8000706:	469a      	mov	sl, r3
 8000708:	3d7f      	subs	r5, #127	@ 0x7f
 800070a:	027c      	lsls	r4, r7, #9
 800070c:	007b      	lsls	r3, r7, #1
 800070e:	0a64      	lsrs	r4, r4, #9
 8000710:	0e1b      	lsrs	r3, r3, #24
 8000712:	0fff      	lsrs	r7, r7, #31
 8000714:	2b00      	cmp	r3, #0
 8000716:	d068      	beq.n	80007ea <__aeabi_fmul+0x116>
 8000718:	2bff      	cmp	r3, #255	@ 0xff
 800071a:	d021      	beq.n	8000760 <__aeabi_fmul+0x8c>
 800071c:	2280      	movs	r2, #128	@ 0x80
 800071e:	00e4      	lsls	r4, r4, #3
 8000720:	04d2      	lsls	r2, r2, #19
 8000722:	4314      	orrs	r4, r2
 8000724:	4642      	mov	r2, r8
 8000726:	3b7f      	subs	r3, #127	@ 0x7f
 8000728:	195b      	adds	r3, r3, r5
 800072a:	2100      	movs	r1, #0
 800072c:	1c5d      	adds	r5, r3, #1
 800072e:	2a0a      	cmp	r2, #10
 8000730:	dc2e      	bgt.n	8000790 <__aeabi_fmul+0xbc>
 8000732:	407e      	eors	r6, r7
 8000734:	4642      	mov	r2, r8
 8000736:	2a02      	cmp	r2, #2
 8000738:	dc23      	bgt.n	8000782 <__aeabi_fmul+0xae>
 800073a:	3a01      	subs	r2, #1
 800073c:	2a01      	cmp	r2, #1
 800073e:	d900      	bls.n	8000742 <__aeabi_fmul+0x6e>
 8000740:	e0bd      	b.n	80008be <__aeabi_fmul+0x1ea>
 8000742:	2902      	cmp	r1, #2
 8000744:	d06e      	beq.n	8000824 <__aeabi_fmul+0x150>
 8000746:	2901      	cmp	r1, #1
 8000748:	d12c      	bne.n	80007a4 <__aeabi_fmul+0xd0>
 800074a:	2000      	movs	r0, #0
 800074c:	2200      	movs	r2, #0
 800074e:	05c0      	lsls	r0, r0, #23
 8000750:	07f6      	lsls	r6, r6, #31
 8000752:	4310      	orrs	r0, r2
 8000754:	4330      	orrs	r0, r6
 8000756:	bce0      	pop	{r5, r6, r7}
 8000758:	46ba      	mov	sl, r7
 800075a:	46b1      	mov	r9, r6
 800075c:	46a8      	mov	r8, r5
 800075e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000760:	002b      	movs	r3, r5
 8000762:	33ff      	adds	r3, #255	@ 0xff
 8000764:	2c00      	cmp	r4, #0
 8000766:	d065      	beq.n	8000834 <__aeabi_fmul+0x160>
 8000768:	2203      	movs	r2, #3
 800076a:	4641      	mov	r1, r8
 800076c:	4311      	orrs	r1, r2
 800076e:	0032      	movs	r2, r6
 8000770:	3501      	adds	r5, #1
 8000772:	4688      	mov	r8, r1
 8000774:	407a      	eors	r2, r7
 8000776:	35ff      	adds	r5, #255	@ 0xff
 8000778:	290a      	cmp	r1, #10
 800077a:	dd00      	ble.n	800077e <__aeabi_fmul+0xaa>
 800077c:	e0d8      	b.n	8000930 <__aeabi_fmul+0x25c>
 800077e:	0016      	movs	r6, r2
 8000780:	2103      	movs	r1, #3
 8000782:	4640      	mov	r0, r8
 8000784:	2201      	movs	r2, #1
 8000786:	4082      	lsls	r2, r0
 8000788:	20a6      	movs	r0, #166	@ 0xa6
 800078a:	00c0      	lsls	r0, r0, #3
 800078c:	4202      	tst	r2, r0
 800078e:	d020      	beq.n	80007d2 <__aeabi_fmul+0xfe>
 8000790:	4653      	mov	r3, sl
 8000792:	2b02      	cmp	r3, #2
 8000794:	d046      	beq.n	8000824 <__aeabi_fmul+0x150>
 8000796:	2b03      	cmp	r3, #3
 8000798:	d100      	bne.n	800079c <__aeabi_fmul+0xc8>
 800079a:	e0bb      	b.n	8000914 <__aeabi_fmul+0x240>
 800079c:	4651      	mov	r1, sl
 800079e:	464c      	mov	r4, r9
 80007a0:	2901      	cmp	r1, #1
 80007a2:	d0d2      	beq.n	800074a <__aeabi_fmul+0x76>
 80007a4:	002b      	movs	r3, r5
 80007a6:	337f      	adds	r3, #127	@ 0x7f
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	dd70      	ble.n	800088e <__aeabi_fmul+0x1ba>
 80007ac:	0762      	lsls	r2, r4, #29
 80007ae:	d004      	beq.n	80007ba <__aeabi_fmul+0xe6>
 80007b0:	220f      	movs	r2, #15
 80007b2:	4022      	ands	r2, r4
 80007b4:	2a04      	cmp	r2, #4
 80007b6:	d000      	beq.n	80007ba <__aeabi_fmul+0xe6>
 80007b8:	3404      	adds	r4, #4
 80007ba:	0122      	lsls	r2, r4, #4
 80007bc:	d503      	bpl.n	80007c6 <__aeabi_fmul+0xf2>
 80007be:	4b63      	ldr	r3, [pc, #396]	@ (800094c <__aeabi_fmul+0x278>)
 80007c0:	401c      	ands	r4, r3
 80007c2:	002b      	movs	r3, r5
 80007c4:	3380      	adds	r3, #128	@ 0x80
 80007c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80007c8:	dc2c      	bgt.n	8000824 <__aeabi_fmul+0x150>
 80007ca:	01a2      	lsls	r2, r4, #6
 80007cc:	0a52      	lsrs	r2, r2, #9
 80007ce:	b2d8      	uxtb	r0, r3
 80007d0:	e7bd      	b.n	800074e <__aeabi_fmul+0x7a>
 80007d2:	2090      	movs	r0, #144	@ 0x90
 80007d4:	0080      	lsls	r0, r0, #2
 80007d6:	4202      	tst	r2, r0
 80007d8:	d127      	bne.n	800082a <__aeabi_fmul+0x156>
 80007da:	38b9      	subs	r0, #185	@ 0xb9
 80007dc:	38ff      	subs	r0, #255	@ 0xff
 80007de:	4210      	tst	r0, r2
 80007e0:	d06d      	beq.n	80008be <__aeabi_fmul+0x1ea>
 80007e2:	003e      	movs	r6, r7
 80007e4:	46a1      	mov	r9, r4
 80007e6:	468a      	mov	sl, r1
 80007e8:	e7d2      	b.n	8000790 <__aeabi_fmul+0xbc>
 80007ea:	2c00      	cmp	r4, #0
 80007ec:	d141      	bne.n	8000872 <__aeabi_fmul+0x19e>
 80007ee:	2301      	movs	r3, #1
 80007f0:	4642      	mov	r2, r8
 80007f2:	431a      	orrs	r2, r3
 80007f4:	4690      	mov	r8, r2
 80007f6:	002b      	movs	r3, r5
 80007f8:	4642      	mov	r2, r8
 80007fa:	2101      	movs	r1, #1
 80007fc:	1c5d      	adds	r5, r3, #1
 80007fe:	2a0a      	cmp	r2, #10
 8000800:	dd97      	ble.n	8000732 <__aeabi_fmul+0x5e>
 8000802:	e7c5      	b.n	8000790 <__aeabi_fmul+0xbc>
 8000804:	2b00      	cmp	r3, #0
 8000806:	d126      	bne.n	8000856 <__aeabi_fmul+0x182>
 8000808:	2304      	movs	r3, #4
 800080a:	4698      	mov	r8, r3
 800080c:	3b03      	subs	r3, #3
 800080e:	2500      	movs	r5, #0
 8000810:	469a      	mov	sl, r3
 8000812:	e77a      	b.n	800070a <__aeabi_fmul+0x36>
 8000814:	2b00      	cmp	r3, #0
 8000816:	d118      	bne.n	800084a <__aeabi_fmul+0x176>
 8000818:	2308      	movs	r3, #8
 800081a:	4698      	mov	r8, r3
 800081c:	3b06      	subs	r3, #6
 800081e:	25ff      	movs	r5, #255	@ 0xff
 8000820:	469a      	mov	sl, r3
 8000822:	e772      	b.n	800070a <__aeabi_fmul+0x36>
 8000824:	20ff      	movs	r0, #255	@ 0xff
 8000826:	2200      	movs	r2, #0
 8000828:	e791      	b.n	800074e <__aeabi_fmul+0x7a>
 800082a:	2280      	movs	r2, #128	@ 0x80
 800082c:	2600      	movs	r6, #0
 800082e:	20ff      	movs	r0, #255	@ 0xff
 8000830:	03d2      	lsls	r2, r2, #15
 8000832:	e78c      	b.n	800074e <__aeabi_fmul+0x7a>
 8000834:	4641      	mov	r1, r8
 8000836:	2202      	movs	r2, #2
 8000838:	3501      	adds	r5, #1
 800083a:	4311      	orrs	r1, r2
 800083c:	4688      	mov	r8, r1
 800083e:	35ff      	adds	r5, #255	@ 0xff
 8000840:	290a      	cmp	r1, #10
 8000842:	dca5      	bgt.n	8000790 <__aeabi_fmul+0xbc>
 8000844:	2102      	movs	r1, #2
 8000846:	407e      	eors	r6, r7
 8000848:	e774      	b.n	8000734 <__aeabi_fmul+0x60>
 800084a:	230c      	movs	r3, #12
 800084c:	4698      	mov	r8, r3
 800084e:	3b09      	subs	r3, #9
 8000850:	25ff      	movs	r5, #255	@ 0xff
 8000852:	469a      	mov	sl, r3
 8000854:	e759      	b.n	800070a <__aeabi_fmul+0x36>
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fb06 	bl	8000e68 <__clzsi2>
 800085c:	464a      	mov	r2, r9
 800085e:	1f43      	subs	r3, r0, #5
 8000860:	2576      	movs	r5, #118	@ 0x76
 8000862:	409a      	lsls	r2, r3
 8000864:	2300      	movs	r3, #0
 8000866:	426d      	negs	r5, r5
 8000868:	4691      	mov	r9, r2
 800086a:	4698      	mov	r8, r3
 800086c:	469a      	mov	sl, r3
 800086e:	1a2d      	subs	r5, r5, r0
 8000870:	e74b      	b.n	800070a <__aeabi_fmul+0x36>
 8000872:	0020      	movs	r0, r4
 8000874:	f000 faf8 	bl	8000e68 <__clzsi2>
 8000878:	4642      	mov	r2, r8
 800087a:	1f43      	subs	r3, r0, #5
 800087c:	409c      	lsls	r4, r3
 800087e:	1a2b      	subs	r3, r5, r0
 8000880:	3b76      	subs	r3, #118	@ 0x76
 8000882:	2100      	movs	r1, #0
 8000884:	1c5d      	adds	r5, r3, #1
 8000886:	2a0a      	cmp	r2, #10
 8000888:	dc00      	bgt.n	800088c <__aeabi_fmul+0x1b8>
 800088a:	e752      	b.n	8000732 <__aeabi_fmul+0x5e>
 800088c:	e780      	b.n	8000790 <__aeabi_fmul+0xbc>
 800088e:	2201      	movs	r2, #1
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	2b1b      	cmp	r3, #27
 8000894:	dd00      	ble.n	8000898 <__aeabi_fmul+0x1c4>
 8000896:	e758      	b.n	800074a <__aeabi_fmul+0x76>
 8000898:	359e      	adds	r5, #158	@ 0x9e
 800089a:	0022      	movs	r2, r4
 800089c:	40ac      	lsls	r4, r5
 800089e:	40da      	lsrs	r2, r3
 80008a0:	1e63      	subs	r3, r4, #1
 80008a2:	419c      	sbcs	r4, r3
 80008a4:	4322      	orrs	r2, r4
 80008a6:	0753      	lsls	r3, r2, #29
 80008a8:	d004      	beq.n	80008b4 <__aeabi_fmul+0x1e0>
 80008aa:	230f      	movs	r3, #15
 80008ac:	4013      	ands	r3, r2
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fmul+0x1e0>
 80008b2:	3204      	adds	r2, #4
 80008b4:	0153      	lsls	r3, r2, #5
 80008b6:	d537      	bpl.n	8000928 <__aeabi_fmul+0x254>
 80008b8:	2001      	movs	r0, #1
 80008ba:	2200      	movs	r2, #0
 80008bc:	e747      	b.n	800074e <__aeabi_fmul+0x7a>
 80008be:	0c21      	lsrs	r1, r4, #16
 80008c0:	464a      	mov	r2, r9
 80008c2:	0424      	lsls	r4, r4, #16
 80008c4:	0c24      	lsrs	r4, r4, #16
 80008c6:	0027      	movs	r7, r4
 80008c8:	0c10      	lsrs	r0, r2, #16
 80008ca:	0412      	lsls	r2, r2, #16
 80008cc:	0c12      	lsrs	r2, r2, #16
 80008ce:	4344      	muls	r4, r0
 80008d0:	4357      	muls	r7, r2
 80008d2:	4348      	muls	r0, r1
 80008d4:	4351      	muls	r1, r2
 80008d6:	0c3a      	lsrs	r2, r7, #16
 80008d8:	1909      	adds	r1, r1, r4
 80008da:	1852      	adds	r2, r2, r1
 80008dc:	4294      	cmp	r4, r2
 80008de:	d903      	bls.n	80008e8 <__aeabi_fmul+0x214>
 80008e0:	2180      	movs	r1, #128	@ 0x80
 80008e2:	0249      	lsls	r1, r1, #9
 80008e4:	468c      	mov	ip, r1
 80008e6:	4460      	add	r0, ip
 80008e8:	043f      	lsls	r7, r7, #16
 80008ea:	0411      	lsls	r1, r2, #16
 80008ec:	0c3f      	lsrs	r7, r7, #16
 80008ee:	19c9      	adds	r1, r1, r7
 80008f0:	018c      	lsls	r4, r1, #6
 80008f2:	1e67      	subs	r7, r4, #1
 80008f4:	41bc      	sbcs	r4, r7
 80008f6:	0c12      	lsrs	r2, r2, #16
 80008f8:	0e89      	lsrs	r1, r1, #26
 80008fa:	1812      	adds	r2, r2, r0
 80008fc:	430c      	orrs	r4, r1
 80008fe:	0192      	lsls	r2, r2, #6
 8000900:	4314      	orrs	r4, r2
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	d50e      	bpl.n	8000924 <__aeabi_fmul+0x250>
 8000906:	2301      	movs	r3, #1
 8000908:	0862      	lsrs	r2, r4, #1
 800090a:	401c      	ands	r4, r3
 800090c:	4314      	orrs	r4, r2
 800090e:	e749      	b.n	80007a4 <__aeabi_fmul+0xd0>
 8000910:	003e      	movs	r6, r7
 8000912:	46a1      	mov	r9, r4
 8000914:	2280      	movs	r2, #128	@ 0x80
 8000916:	464b      	mov	r3, r9
 8000918:	03d2      	lsls	r2, r2, #15
 800091a:	431a      	orrs	r2, r3
 800091c:	0252      	lsls	r2, r2, #9
 800091e:	20ff      	movs	r0, #255	@ 0xff
 8000920:	0a52      	lsrs	r2, r2, #9
 8000922:	e714      	b.n	800074e <__aeabi_fmul+0x7a>
 8000924:	001d      	movs	r5, r3
 8000926:	e73d      	b.n	80007a4 <__aeabi_fmul+0xd0>
 8000928:	0192      	lsls	r2, r2, #6
 800092a:	2000      	movs	r0, #0
 800092c:	0a52      	lsrs	r2, r2, #9
 800092e:	e70e      	b.n	800074e <__aeabi_fmul+0x7a>
 8000930:	290f      	cmp	r1, #15
 8000932:	d1ed      	bne.n	8000910 <__aeabi_fmul+0x23c>
 8000934:	2280      	movs	r2, #128	@ 0x80
 8000936:	464b      	mov	r3, r9
 8000938:	03d2      	lsls	r2, r2, #15
 800093a:	4213      	tst	r3, r2
 800093c:	d0ea      	beq.n	8000914 <__aeabi_fmul+0x240>
 800093e:	4214      	tst	r4, r2
 8000940:	d1e8      	bne.n	8000914 <__aeabi_fmul+0x240>
 8000942:	003e      	movs	r6, r7
 8000944:	20ff      	movs	r0, #255	@ 0xff
 8000946:	4322      	orrs	r2, r4
 8000948:	e701      	b.n	800074e <__aeabi_fmul+0x7a>
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	f7ffffff 	.word	0xf7ffffff

08000950 <__aeabi_fsub>:
 8000950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000952:	4647      	mov	r7, r8
 8000954:	46ce      	mov	lr, r9
 8000956:	024e      	lsls	r6, r1, #9
 8000958:	0243      	lsls	r3, r0, #9
 800095a:	0045      	lsls	r5, r0, #1
 800095c:	0a72      	lsrs	r2, r6, #9
 800095e:	0fc4      	lsrs	r4, r0, #31
 8000960:	0048      	lsls	r0, r1, #1
 8000962:	b580      	push	{r7, lr}
 8000964:	4694      	mov	ip, r2
 8000966:	0a5f      	lsrs	r7, r3, #9
 8000968:	0e2d      	lsrs	r5, r5, #24
 800096a:	099b      	lsrs	r3, r3, #6
 800096c:	0e00      	lsrs	r0, r0, #24
 800096e:	0fc9      	lsrs	r1, r1, #31
 8000970:	09b6      	lsrs	r6, r6, #6
 8000972:	28ff      	cmp	r0, #255	@ 0xff
 8000974:	d024      	beq.n	80009c0 <__aeabi_fsub+0x70>
 8000976:	2201      	movs	r2, #1
 8000978:	4051      	eors	r1, r2
 800097a:	1a2a      	subs	r2, r5, r0
 800097c:	428c      	cmp	r4, r1
 800097e:	d00f      	beq.n	80009a0 <__aeabi_fsub+0x50>
 8000980:	2a00      	cmp	r2, #0
 8000982:	dc00      	bgt.n	8000986 <__aeabi_fsub+0x36>
 8000984:	e16a      	b.n	8000c5c <__aeabi_fsub+0x30c>
 8000986:	2800      	cmp	r0, #0
 8000988:	d135      	bne.n	80009f6 <__aeabi_fsub+0xa6>
 800098a:	2e00      	cmp	r6, #0
 800098c:	d100      	bne.n	8000990 <__aeabi_fsub+0x40>
 800098e:	e0a2      	b.n	8000ad6 <__aeabi_fsub+0x186>
 8000990:	1e51      	subs	r1, r2, #1
 8000992:	2a01      	cmp	r2, #1
 8000994:	d100      	bne.n	8000998 <__aeabi_fsub+0x48>
 8000996:	e124      	b.n	8000be2 <__aeabi_fsub+0x292>
 8000998:	2aff      	cmp	r2, #255	@ 0xff
 800099a:	d021      	beq.n	80009e0 <__aeabi_fsub+0x90>
 800099c:	000a      	movs	r2, r1
 800099e:	e02f      	b.n	8000a00 <__aeabi_fsub+0xb0>
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	dc00      	bgt.n	80009a6 <__aeabi_fsub+0x56>
 80009a4:	e167      	b.n	8000c76 <__aeabi_fsub+0x326>
 80009a6:	2800      	cmp	r0, #0
 80009a8:	d05e      	beq.n	8000a68 <__aeabi_fsub+0x118>
 80009aa:	2dff      	cmp	r5, #255	@ 0xff
 80009ac:	d018      	beq.n	80009e0 <__aeabi_fsub+0x90>
 80009ae:	2180      	movs	r1, #128	@ 0x80
 80009b0:	04c9      	lsls	r1, r1, #19
 80009b2:	430e      	orrs	r6, r1
 80009b4:	2a1b      	cmp	r2, #27
 80009b6:	dc00      	bgt.n	80009ba <__aeabi_fsub+0x6a>
 80009b8:	e076      	b.n	8000aa8 <__aeabi_fsub+0x158>
 80009ba:	002a      	movs	r2, r5
 80009bc:	3301      	adds	r3, #1
 80009be:	e032      	b.n	8000a26 <__aeabi_fsub+0xd6>
 80009c0:	002a      	movs	r2, r5
 80009c2:	3aff      	subs	r2, #255	@ 0xff
 80009c4:	4691      	mov	r9, r2
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d042      	beq.n	8000a50 <__aeabi_fsub+0x100>
 80009ca:	428c      	cmp	r4, r1
 80009cc:	d055      	beq.n	8000a7a <__aeabi_fsub+0x12a>
 80009ce:	464a      	mov	r2, r9
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fsub+0x86>
 80009d4:	e09c      	b.n	8000b10 <__aeabi_fsub+0x1c0>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	d100      	bne.n	80009dc <__aeabi_fsub+0x8c>
 80009da:	e077      	b.n	8000acc <__aeabi_fsub+0x17c>
 80009dc:	000c      	movs	r4, r1
 80009de:	0033      	movs	r3, r6
 80009e0:	08db      	lsrs	r3, r3, #3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fsub+0x98>
 80009e6:	e06e      	b.n	8000ac6 <__aeabi_fsub+0x176>
 80009e8:	2280      	movs	r2, #128	@ 0x80
 80009ea:	03d2      	lsls	r2, r2, #15
 80009ec:	4313      	orrs	r3, r2
 80009ee:	025b      	lsls	r3, r3, #9
 80009f0:	20ff      	movs	r0, #255	@ 0xff
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	e024      	b.n	8000a40 <__aeabi_fsub+0xf0>
 80009f6:	2dff      	cmp	r5, #255	@ 0xff
 80009f8:	d0f2      	beq.n	80009e0 <__aeabi_fsub+0x90>
 80009fa:	2180      	movs	r1, #128	@ 0x80
 80009fc:	04c9      	lsls	r1, r1, #19
 80009fe:	430e      	orrs	r6, r1
 8000a00:	2101      	movs	r1, #1
 8000a02:	2a1b      	cmp	r2, #27
 8000a04:	dc08      	bgt.n	8000a18 <__aeabi_fsub+0xc8>
 8000a06:	0031      	movs	r1, r6
 8000a08:	2020      	movs	r0, #32
 8000a0a:	40d1      	lsrs	r1, r2
 8000a0c:	1a82      	subs	r2, r0, r2
 8000a0e:	4096      	lsls	r6, r2
 8000a10:	0032      	movs	r2, r6
 8000a12:	1e50      	subs	r0, r2, #1
 8000a14:	4182      	sbcs	r2, r0
 8000a16:	4311      	orrs	r1, r2
 8000a18:	1a5b      	subs	r3, r3, r1
 8000a1a:	015a      	lsls	r2, r3, #5
 8000a1c:	d460      	bmi.n	8000ae0 <__aeabi_fsub+0x190>
 8000a1e:	2107      	movs	r1, #7
 8000a20:	002a      	movs	r2, r5
 8000a22:	4019      	ands	r1, r3
 8000a24:	d057      	beq.n	8000ad6 <__aeabi_fsub+0x186>
 8000a26:	210f      	movs	r1, #15
 8000a28:	4019      	ands	r1, r3
 8000a2a:	2904      	cmp	r1, #4
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_fsub+0xe0>
 8000a2e:	3304      	adds	r3, #4
 8000a30:	0159      	lsls	r1, r3, #5
 8000a32:	d550      	bpl.n	8000ad6 <__aeabi_fsub+0x186>
 8000a34:	1c50      	adds	r0, r2, #1
 8000a36:	2afe      	cmp	r2, #254	@ 0xfe
 8000a38:	d045      	beq.n	8000ac6 <__aeabi_fsub+0x176>
 8000a3a:	019b      	lsls	r3, r3, #6
 8000a3c:	b2c0      	uxtb	r0, r0
 8000a3e:	0a5b      	lsrs	r3, r3, #9
 8000a40:	05c0      	lsls	r0, r0, #23
 8000a42:	4318      	orrs	r0, r3
 8000a44:	07e4      	lsls	r4, r4, #31
 8000a46:	4320      	orrs	r0, r4
 8000a48:	bcc0      	pop	{r6, r7}
 8000a4a:	46b9      	mov	r9, r7
 8000a4c:	46b0      	mov	r8, r6
 8000a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a50:	2201      	movs	r2, #1
 8000a52:	4051      	eors	r1, r2
 8000a54:	428c      	cmp	r4, r1
 8000a56:	d1ba      	bne.n	80009ce <__aeabi_fsub+0x7e>
 8000a58:	464a      	mov	r2, r9
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	d010      	beq.n	8000a80 <__aeabi_fsub+0x130>
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_fsub+0x114>
 8000a62:	e098      	b.n	8000b96 <__aeabi_fsub+0x246>
 8000a64:	2300      	movs	r3, #0
 8000a66:	e7bb      	b.n	80009e0 <__aeabi_fsub+0x90>
 8000a68:	2e00      	cmp	r6, #0
 8000a6a:	d034      	beq.n	8000ad6 <__aeabi_fsub+0x186>
 8000a6c:	1e51      	subs	r1, r2, #1
 8000a6e:	2a01      	cmp	r2, #1
 8000a70:	d06e      	beq.n	8000b50 <__aeabi_fsub+0x200>
 8000a72:	2aff      	cmp	r2, #255	@ 0xff
 8000a74:	d0b4      	beq.n	80009e0 <__aeabi_fsub+0x90>
 8000a76:	000a      	movs	r2, r1
 8000a78:	e79c      	b.n	80009b4 <__aeabi_fsub+0x64>
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d000      	beq.n	8000a80 <__aeabi_fsub+0x130>
 8000a7e:	e088      	b.n	8000b92 <__aeabi_fsub+0x242>
 8000a80:	20fe      	movs	r0, #254	@ 0xfe
 8000a82:	1c6a      	adds	r2, r5, #1
 8000a84:	4210      	tst	r0, r2
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fsub+0x13a>
 8000a88:	e092      	b.n	8000bb0 <__aeabi_fsub+0x260>
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	d000      	beq.n	8000a90 <__aeabi_fsub+0x140>
 8000a8e:	e0a4      	b.n	8000bda <__aeabi_fsub+0x28a>
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d100      	bne.n	8000a96 <__aeabi_fsub+0x146>
 8000a94:	e0cb      	b.n	8000c2e <__aeabi_fsub+0x2de>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d000      	beq.n	8000a9c <__aeabi_fsub+0x14c>
 8000a9a:	e0ca      	b.n	8000c32 <__aeabi_fsub+0x2e2>
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	025b      	lsls	r3, r3, #9
 8000aa2:	0a5b      	lsrs	r3, r3, #9
 8000aa4:	b2d0      	uxtb	r0, r2
 8000aa6:	e7cb      	b.n	8000a40 <__aeabi_fsub+0xf0>
 8000aa8:	0031      	movs	r1, r6
 8000aaa:	2020      	movs	r0, #32
 8000aac:	40d1      	lsrs	r1, r2
 8000aae:	1a82      	subs	r2, r0, r2
 8000ab0:	4096      	lsls	r6, r2
 8000ab2:	0032      	movs	r2, r6
 8000ab4:	1e50      	subs	r0, r2, #1
 8000ab6:	4182      	sbcs	r2, r0
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	189b      	adds	r3, r3, r2
 8000abc:	015a      	lsls	r2, r3, #5
 8000abe:	d5ae      	bpl.n	8000a1e <__aeabi_fsub+0xce>
 8000ac0:	1c6a      	adds	r2, r5, #1
 8000ac2:	2dfe      	cmp	r5, #254	@ 0xfe
 8000ac4:	d14a      	bne.n	8000b5c <__aeabi_fsub+0x20c>
 8000ac6:	20ff      	movs	r0, #255	@ 0xff
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e7b9      	b.n	8000a40 <__aeabi_fsub+0xf0>
 8000acc:	22ff      	movs	r2, #255	@ 0xff
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d14b      	bne.n	8000b6a <__aeabi_fsub+0x21a>
 8000ad2:	000c      	movs	r4, r1
 8000ad4:	0033      	movs	r3, r6
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	2aff      	cmp	r2, #255	@ 0xff
 8000ada:	d100      	bne.n	8000ade <__aeabi_fsub+0x18e>
 8000adc:	e781      	b.n	80009e2 <__aeabi_fsub+0x92>
 8000ade:	e7df      	b.n	8000aa0 <__aeabi_fsub+0x150>
 8000ae0:	019f      	lsls	r7, r3, #6
 8000ae2:	09bf      	lsrs	r7, r7, #6
 8000ae4:	0038      	movs	r0, r7
 8000ae6:	f000 f9bf 	bl	8000e68 <__clzsi2>
 8000aea:	3805      	subs	r0, #5
 8000aec:	4087      	lsls	r7, r0
 8000aee:	4285      	cmp	r5, r0
 8000af0:	dc21      	bgt.n	8000b36 <__aeabi_fsub+0x1e6>
 8000af2:	003b      	movs	r3, r7
 8000af4:	2120      	movs	r1, #32
 8000af6:	1b42      	subs	r2, r0, r5
 8000af8:	3201      	adds	r2, #1
 8000afa:	40d3      	lsrs	r3, r2
 8000afc:	1a8a      	subs	r2, r1, r2
 8000afe:	4097      	lsls	r7, r2
 8000b00:	1e7a      	subs	r2, r7, #1
 8000b02:	4197      	sbcs	r7, r2
 8000b04:	2200      	movs	r2, #0
 8000b06:	433b      	orrs	r3, r7
 8000b08:	0759      	lsls	r1, r3, #29
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_fsub+0x1be>
 8000b0c:	e78b      	b.n	8000a26 <__aeabi_fsub+0xd6>
 8000b0e:	e78f      	b.n	8000a30 <__aeabi_fsub+0xe0>
 8000b10:	20fe      	movs	r0, #254	@ 0xfe
 8000b12:	1c6a      	adds	r2, r5, #1
 8000b14:	4210      	tst	r0, r2
 8000b16:	d112      	bne.n	8000b3e <__aeabi_fsub+0x1ee>
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d152      	bne.n	8000bc2 <__aeabi_fsub+0x272>
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d07c      	beq.n	8000c1a <__aeabi_fsub+0x2ca>
 8000b20:	2e00      	cmp	r6, #0
 8000b22:	d0bb      	beq.n	8000a9c <__aeabi_fsub+0x14c>
 8000b24:	1b9a      	subs	r2, r3, r6
 8000b26:	0150      	lsls	r0, r2, #5
 8000b28:	d400      	bmi.n	8000b2c <__aeabi_fsub+0x1dc>
 8000b2a:	e08b      	b.n	8000c44 <__aeabi_fsub+0x2f4>
 8000b2c:	2401      	movs	r4, #1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	1af3      	subs	r3, r6, r3
 8000b32:	400c      	ands	r4, r1
 8000b34:	e7e8      	b.n	8000b08 <__aeabi_fsub+0x1b8>
 8000b36:	4b56      	ldr	r3, [pc, #344]	@ (8000c90 <__aeabi_fsub+0x340>)
 8000b38:	1a2a      	subs	r2, r5, r0
 8000b3a:	403b      	ands	r3, r7
 8000b3c:	e7e4      	b.n	8000b08 <__aeabi_fsub+0x1b8>
 8000b3e:	1b9f      	subs	r7, r3, r6
 8000b40:	017a      	lsls	r2, r7, #5
 8000b42:	d446      	bmi.n	8000bd2 <__aeabi_fsub+0x282>
 8000b44:	2f00      	cmp	r7, #0
 8000b46:	d1cd      	bne.n	8000ae4 <__aeabi_fsub+0x194>
 8000b48:	2400      	movs	r4, #0
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e777      	b.n	8000a40 <__aeabi_fsub+0xf0>
 8000b50:	199b      	adds	r3, r3, r6
 8000b52:	2501      	movs	r5, #1
 8000b54:	3201      	adds	r2, #1
 8000b56:	0159      	lsls	r1, r3, #5
 8000b58:	d400      	bmi.n	8000b5c <__aeabi_fsub+0x20c>
 8000b5a:	e760      	b.n	8000a1e <__aeabi_fsub+0xce>
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	484d      	ldr	r0, [pc, #308]	@ (8000c94 <__aeabi_fsub+0x344>)
 8000b60:	4019      	ands	r1, r3
 8000b62:	085b      	lsrs	r3, r3, #1
 8000b64:	4003      	ands	r3, r0
 8000b66:	430b      	orrs	r3, r1
 8000b68:	e7ce      	b.n	8000b08 <__aeabi_fsub+0x1b8>
 8000b6a:	1e57      	subs	r7, r2, #1
 8000b6c:	2a01      	cmp	r2, #1
 8000b6e:	d05a      	beq.n	8000c26 <__aeabi_fsub+0x2d6>
 8000b70:	000c      	movs	r4, r1
 8000b72:	2aff      	cmp	r2, #255	@ 0xff
 8000b74:	d033      	beq.n	8000bde <__aeabi_fsub+0x28e>
 8000b76:	2201      	movs	r2, #1
 8000b78:	2f1b      	cmp	r7, #27
 8000b7a:	dc07      	bgt.n	8000b8c <__aeabi_fsub+0x23c>
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	1bc9      	subs	r1, r1, r7
 8000b80:	001a      	movs	r2, r3
 8000b82:	408b      	lsls	r3, r1
 8000b84:	40fa      	lsrs	r2, r7
 8000b86:	1e59      	subs	r1, r3, #1
 8000b88:	418b      	sbcs	r3, r1
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	0005      	movs	r5, r0
 8000b8e:	1ab3      	subs	r3, r6, r2
 8000b90:	e743      	b.n	8000a1a <__aeabi_fsub+0xca>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d123      	bne.n	8000bde <__aeabi_fsub+0x28e>
 8000b96:	22ff      	movs	r2, #255	@ 0xff
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d09b      	beq.n	8000ad4 <__aeabi_fsub+0x184>
 8000b9c:	1e51      	subs	r1, r2, #1
 8000b9e:	2a01      	cmp	r2, #1
 8000ba0:	d0d6      	beq.n	8000b50 <__aeabi_fsub+0x200>
 8000ba2:	2aff      	cmp	r2, #255	@ 0xff
 8000ba4:	d01b      	beq.n	8000bde <__aeabi_fsub+0x28e>
 8000ba6:	291b      	cmp	r1, #27
 8000ba8:	dd2c      	ble.n	8000c04 <__aeabi_fsub+0x2b4>
 8000baa:	0002      	movs	r2, r0
 8000bac:	1c73      	adds	r3, r6, #1
 8000bae:	e73a      	b.n	8000a26 <__aeabi_fsub+0xd6>
 8000bb0:	2aff      	cmp	r2, #255	@ 0xff
 8000bb2:	d088      	beq.n	8000ac6 <__aeabi_fsub+0x176>
 8000bb4:	199b      	adds	r3, r3, r6
 8000bb6:	085b      	lsrs	r3, r3, #1
 8000bb8:	0759      	lsls	r1, r3, #29
 8000bba:	d000      	beq.n	8000bbe <__aeabi_fsub+0x26e>
 8000bbc:	e733      	b.n	8000a26 <__aeabi_fsub+0xd6>
 8000bbe:	08db      	lsrs	r3, r3, #3
 8000bc0:	e76e      	b.n	8000aa0 <__aeabi_fsub+0x150>
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d110      	bne.n	8000be8 <__aeabi_fsub+0x298>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d043      	beq.n	8000c52 <__aeabi_fsub+0x302>
 8000bca:	2401      	movs	r4, #1
 8000bcc:	0033      	movs	r3, r6
 8000bce:	400c      	ands	r4, r1
 8000bd0:	e706      	b.n	80009e0 <__aeabi_fsub+0x90>
 8000bd2:	2401      	movs	r4, #1
 8000bd4:	1af7      	subs	r7, r6, r3
 8000bd6:	400c      	ands	r4, r1
 8000bd8:	e784      	b.n	8000ae4 <__aeabi_fsub+0x194>
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d104      	bne.n	8000be8 <__aeabi_fsub+0x298>
 8000bde:	0033      	movs	r3, r6
 8000be0:	e6fe      	b.n	80009e0 <__aeabi_fsub+0x90>
 8000be2:	2501      	movs	r5, #1
 8000be4:	1b9b      	subs	r3, r3, r6
 8000be6:	e718      	b.n	8000a1a <__aeabi_fsub+0xca>
 8000be8:	2e00      	cmp	r6, #0
 8000bea:	d100      	bne.n	8000bee <__aeabi_fsub+0x29e>
 8000bec:	e6f8      	b.n	80009e0 <__aeabi_fsub+0x90>
 8000bee:	2280      	movs	r2, #128	@ 0x80
 8000bf0:	03d2      	lsls	r2, r2, #15
 8000bf2:	4297      	cmp	r7, r2
 8000bf4:	d304      	bcc.n	8000c00 <__aeabi_fsub+0x2b0>
 8000bf6:	4594      	cmp	ip, r2
 8000bf8:	d202      	bcs.n	8000c00 <__aeabi_fsub+0x2b0>
 8000bfa:	2401      	movs	r4, #1
 8000bfc:	0033      	movs	r3, r6
 8000bfe:	400c      	ands	r4, r1
 8000c00:	08db      	lsrs	r3, r3, #3
 8000c02:	e6f1      	b.n	80009e8 <__aeabi_fsub+0x98>
 8000c04:	001a      	movs	r2, r3
 8000c06:	2520      	movs	r5, #32
 8000c08:	40ca      	lsrs	r2, r1
 8000c0a:	1a69      	subs	r1, r5, r1
 8000c0c:	408b      	lsls	r3, r1
 8000c0e:	1e59      	subs	r1, r3, #1
 8000c10:	418b      	sbcs	r3, r1
 8000c12:	4313      	orrs	r3, r2
 8000c14:	0005      	movs	r5, r0
 8000c16:	199b      	adds	r3, r3, r6
 8000c18:	e750      	b.n	8000abc <__aeabi_fsub+0x16c>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d094      	beq.n	8000b48 <__aeabi_fsub+0x1f8>
 8000c1e:	2401      	movs	r4, #1
 8000c20:	0033      	movs	r3, r6
 8000c22:	400c      	ands	r4, r1
 8000c24:	e73a      	b.n	8000a9c <__aeabi_fsub+0x14c>
 8000c26:	000c      	movs	r4, r1
 8000c28:	2501      	movs	r5, #1
 8000c2a:	1af3      	subs	r3, r6, r3
 8000c2c:	e6f5      	b.n	8000a1a <__aeabi_fsub+0xca>
 8000c2e:	0033      	movs	r3, r6
 8000c30:	e734      	b.n	8000a9c <__aeabi_fsub+0x14c>
 8000c32:	199b      	adds	r3, r3, r6
 8000c34:	2200      	movs	r2, #0
 8000c36:	0159      	lsls	r1, r3, #5
 8000c38:	d5c1      	bpl.n	8000bbe <__aeabi_fsub+0x26e>
 8000c3a:	4a15      	ldr	r2, [pc, #84]	@ (8000c90 <__aeabi_fsub+0x340>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	08db      	lsrs	r3, r3, #3
 8000c40:	2201      	movs	r2, #1
 8000c42:	e72d      	b.n	8000aa0 <__aeabi_fsub+0x150>
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	d100      	bne.n	8000c4a <__aeabi_fsub+0x2fa>
 8000c48:	e77e      	b.n	8000b48 <__aeabi_fsub+0x1f8>
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	08db      	lsrs	r3, r3, #3
 8000c50:	e726      	b.n	8000aa0 <__aeabi_fsub+0x150>
 8000c52:	2380      	movs	r3, #128	@ 0x80
 8000c54:	2400      	movs	r4, #0
 8000c56:	20ff      	movs	r0, #255	@ 0xff
 8000c58:	03db      	lsls	r3, r3, #15
 8000c5a:	e6f1      	b.n	8000a40 <__aeabi_fsub+0xf0>
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_fsub+0x312>
 8000c60:	e756      	b.n	8000b10 <__aeabi_fsub+0x1c0>
 8000c62:	1b47      	subs	r7, r0, r5
 8000c64:	003a      	movs	r2, r7
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fsub+0x31c>
 8000c6a:	e730      	b.n	8000ace <__aeabi_fsub+0x17e>
 8000c6c:	2280      	movs	r2, #128	@ 0x80
 8000c6e:	04d2      	lsls	r2, r2, #19
 8000c70:	000c      	movs	r4, r1
 8000c72:	4313      	orrs	r3, r2
 8000c74:	e77f      	b.n	8000b76 <__aeabi_fsub+0x226>
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fsub+0x32c>
 8000c7a:	e701      	b.n	8000a80 <__aeabi_fsub+0x130>
 8000c7c:	1b41      	subs	r1, r0, r5
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d101      	bne.n	8000c86 <__aeabi_fsub+0x336>
 8000c82:	000a      	movs	r2, r1
 8000c84:	e788      	b.n	8000b98 <__aeabi_fsub+0x248>
 8000c86:	2280      	movs	r2, #128	@ 0x80
 8000c88:	04d2      	lsls	r2, r2, #19
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	e78b      	b.n	8000ba6 <__aeabi_fsub+0x256>
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	fbffffff 	.word	0xfbffffff
 8000c94:	7dffffff 	.word	0x7dffffff

08000c98 <__aeabi_f2iz>:
 8000c98:	0241      	lsls	r1, r0, #9
 8000c9a:	0042      	lsls	r2, r0, #1
 8000c9c:	0fc3      	lsrs	r3, r0, #31
 8000c9e:	0a49      	lsrs	r1, r1, #9
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	0e12      	lsrs	r2, r2, #24
 8000ca4:	2a7e      	cmp	r2, #126	@ 0x7e
 8000ca6:	dd03      	ble.n	8000cb0 <__aeabi_f2iz+0x18>
 8000ca8:	2a9d      	cmp	r2, #157	@ 0x9d
 8000caa:	dd02      	ble.n	8000cb2 <__aeabi_f2iz+0x1a>
 8000cac:	4a09      	ldr	r2, [pc, #36]	@ (8000cd4 <__aeabi_f2iz+0x3c>)
 8000cae:	1898      	adds	r0, r3, r2
 8000cb0:	4770      	bx	lr
 8000cb2:	2080      	movs	r0, #128	@ 0x80
 8000cb4:	0400      	lsls	r0, r0, #16
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	2a95      	cmp	r2, #149	@ 0x95
 8000cba:	dc07      	bgt.n	8000ccc <__aeabi_f2iz+0x34>
 8000cbc:	2096      	movs	r0, #150	@ 0x96
 8000cbe:	1a82      	subs	r2, r0, r2
 8000cc0:	40d1      	lsrs	r1, r2
 8000cc2:	4248      	negs	r0, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_f2iz+0x18>
 8000cc8:	0008      	movs	r0, r1
 8000cca:	e7f1      	b.n	8000cb0 <__aeabi_f2iz+0x18>
 8000ccc:	3a96      	subs	r2, #150	@ 0x96
 8000cce:	4091      	lsls	r1, r2
 8000cd0:	e7f7      	b.n	8000cc2 <__aeabi_f2iz+0x2a>
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	7fffffff 	.word	0x7fffffff

08000cd8 <__aeabi_i2f>:
 8000cd8:	b570      	push	{r4, r5, r6, lr}
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	d013      	beq.n	8000d06 <__aeabi_i2f+0x2e>
 8000cde:	17c3      	asrs	r3, r0, #31
 8000ce0:	18c5      	adds	r5, r0, r3
 8000ce2:	405d      	eors	r5, r3
 8000ce4:	0fc4      	lsrs	r4, r0, #31
 8000ce6:	0028      	movs	r0, r5
 8000ce8:	f000 f8be 	bl	8000e68 <__clzsi2>
 8000cec:	239e      	movs	r3, #158	@ 0x9e
 8000cee:	0001      	movs	r1, r0
 8000cf0:	1a1b      	subs	r3, r3, r0
 8000cf2:	2b96      	cmp	r3, #150	@ 0x96
 8000cf4:	dc0f      	bgt.n	8000d16 <__aeabi_i2f+0x3e>
 8000cf6:	2808      	cmp	r0, #8
 8000cf8:	d034      	beq.n	8000d64 <__aeabi_i2f+0x8c>
 8000cfa:	3908      	subs	r1, #8
 8000cfc:	408d      	lsls	r5, r1
 8000cfe:	026d      	lsls	r5, r5, #9
 8000d00:	0a6d      	lsrs	r5, r5, #9
 8000d02:	b2d8      	uxtb	r0, r3
 8000d04:	e002      	b.n	8000d0c <__aeabi_i2f+0x34>
 8000d06:	2400      	movs	r4, #0
 8000d08:	2000      	movs	r0, #0
 8000d0a:	2500      	movs	r5, #0
 8000d0c:	05c0      	lsls	r0, r0, #23
 8000d0e:	4328      	orrs	r0, r5
 8000d10:	07e4      	lsls	r4, r4, #31
 8000d12:	4320      	orrs	r0, r4
 8000d14:	bd70      	pop	{r4, r5, r6, pc}
 8000d16:	2b99      	cmp	r3, #153	@ 0x99
 8000d18:	dc16      	bgt.n	8000d48 <__aeabi_i2f+0x70>
 8000d1a:	1f42      	subs	r2, r0, #5
 8000d1c:	2805      	cmp	r0, #5
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_i2f+0x4a>
 8000d20:	4095      	lsls	r5, r2
 8000d22:	002a      	movs	r2, r5
 8000d24:	4811      	ldr	r0, [pc, #68]	@ (8000d6c <__aeabi_i2f+0x94>)
 8000d26:	4002      	ands	r2, r0
 8000d28:	076e      	lsls	r6, r5, #29
 8000d2a:	d009      	beq.n	8000d40 <__aeabi_i2f+0x68>
 8000d2c:	260f      	movs	r6, #15
 8000d2e:	4035      	ands	r5, r6
 8000d30:	2d04      	cmp	r5, #4
 8000d32:	d005      	beq.n	8000d40 <__aeabi_i2f+0x68>
 8000d34:	3204      	adds	r2, #4
 8000d36:	0155      	lsls	r5, r2, #5
 8000d38:	d502      	bpl.n	8000d40 <__aeabi_i2f+0x68>
 8000d3a:	239f      	movs	r3, #159	@ 0x9f
 8000d3c:	4002      	ands	r2, r0
 8000d3e:	1a5b      	subs	r3, r3, r1
 8000d40:	0192      	lsls	r2, r2, #6
 8000d42:	0a55      	lsrs	r5, r2, #9
 8000d44:	b2d8      	uxtb	r0, r3
 8000d46:	e7e1      	b.n	8000d0c <__aeabi_i2f+0x34>
 8000d48:	2205      	movs	r2, #5
 8000d4a:	1a12      	subs	r2, r2, r0
 8000d4c:	0028      	movs	r0, r5
 8000d4e:	40d0      	lsrs	r0, r2
 8000d50:	0002      	movs	r2, r0
 8000d52:	0008      	movs	r0, r1
 8000d54:	301b      	adds	r0, #27
 8000d56:	4085      	lsls	r5, r0
 8000d58:	0028      	movs	r0, r5
 8000d5a:	1e45      	subs	r5, r0, #1
 8000d5c:	41a8      	sbcs	r0, r5
 8000d5e:	4302      	orrs	r2, r0
 8000d60:	0015      	movs	r5, r2
 8000d62:	e7de      	b.n	8000d22 <__aeabi_i2f+0x4a>
 8000d64:	026d      	lsls	r5, r5, #9
 8000d66:	2096      	movs	r0, #150	@ 0x96
 8000d68:	0a6d      	lsrs	r5, r5, #9
 8000d6a:	e7cf      	b.n	8000d0c <__aeabi_i2f+0x34>
 8000d6c:	fbffffff 	.word	0xfbffffff

08000d70 <__aeabi_ui2f>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	1e04      	subs	r4, r0, #0
 8000d74:	d00e      	beq.n	8000d94 <__aeabi_ui2f+0x24>
 8000d76:	f000 f877 	bl	8000e68 <__clzsi2>
 8000d7a:	239e      	movs	r3, #158	@ 0x9e
 8000d7c:	0001      	movs	r1, r0
 8000d7e:	1a1b      	subs	r3, r3, r0
 8000d80:	2b96      	cmp	r3, #150	@ 0x96
 8000d82:	dc0c      	bgt.n	8000d9e <__aeabi_ui2f+0x2e>
 8000d84:	2808      	cmp	r0, #8
 8000d86:	d02f      	beq.n	8000de8 <__aeabi_ui2f+0x78>
 8000d88:	3908      	subs	r1, #8
 8000d8a:	408c      	lsls	r4, r1
 8000d8c:	0264      	lsls	r4, r4, #9
 8000d8e:	0a64      	lsrs	r4, r4, #9
 8000d90:	b2d8      	uxtb	r0, r3
 8000d92:	e001      	b.n	8000d98 <__aeabi_ui2f+0x28>
 8000d94:	2000      	movs	r0, #0
 8000d96:	2400      	movs	r4, #0
 8000d98:	05c0      	lsls	r0, r0, #23
 8000d9a:	4320      	orrs	r0, r4
 8000d9c:	bd70      	pop	{r4, r5, r6, pc}
 8000d9e:	2b99      	cmp	r3, #153	@ 0x99
 8000da0:	dc16      	bgt.n	8000dd0 <__aeabi_ui2f+0x60>
 8000da2:	1f42      	subs	r2, r0, #5
 8000da4:	2805      	cmp	r0, #5
 8000da6:	d000      	beq.n	8000daa <__aeabi_ui2f+0x3a>
 8000da8:	4094      	lsls	r4, r2
 8000daa:	0022      	movs	r2, r4
 8000dac:	4810      	ldr	r0, [pc, #64]	@ (8000df0 <__aeabi_ui2f+0x80>)
 8000dae:	4002      	ands	r2, r0
 8000db0:	0765      	lsls	r5, r4, #29
 8000db2:	d009      	beq.n	8000dc8 <__aeabi_ui2f+0x58>
 8000db4:	250f      	movs	r5, #15
 8000db6:	402c      	ands	r4, r5
 8000db8:	2c04      	cmp	r4, #4
 8000dba:	d005      	beq.n	8000dc8 <__aeabi_ui2f+0x58>
 8000dbc:	3204      	adds	r2, #4
 8000dbe:	0154      	lsls	r4, r2, #5
 8000dc0:	d502      	bpl.n	8000dc8 <__aeabi_ui2f+0x58>
 8000dc2:	239f      	movs	r3, #159	@ 0x9f
 8000dc4:	4002      	ands	r2, r0
 8000dc6:	1a5b      	subs	r3, r3, r1
 8000dc8:	0192      	lsls	r2, r2, #6
 8000dca:	0a54      	lsrs	r4, r2, #9
 8000dcc:	b2d8      	uxtb	r0, r3
 8000dce:	e7e3      	b.n	8000d98 <__aeabi_ui2f+0x28>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	321b      	adds	r2, #27
 8000dd6:	4090      	lsls	r0, r2
 8000dd8:	0002      	movs	r2, r0
 8000dda:	1e50      	subs	r0, r2, #1
 8000ddc:	4182      	sbcs	r2, r0
 8000dde:	2005      	movs	r0, #5
 8000de0:	1a40      	subs	r0, r0, r1
 8000de2:	40c4      	lsrs	r4, r0
 8000de4:	4314      	orrs	r4, r2
 8000de6:	e7e0      	b.n	8000daa <__aeabi_ui2f+0x3a>
 8000de8:	0264      	lsls	r4, r4, #9
 8000dea:	2096      	movs	r0, #150	@ 0x96
 8000dec:	0a64      	lsrs	r4, r4, #9
 8000dee:	e7d3      	b.n	8000d98 <__aeabi_ui2f+0x28>
 8000df0:	fbffffff 	.word	0xfbffffff

08000df4 <__aeabi_cfrcmple>:
 8000df4:	4684      	mov	ip, r0
 8000df6:	0008      	movs	r0, r1
 8000df8:	4661      	mov	r1, ip
 8000dfa:	e7ff      	b.n	8000dfc <__aeabi_cfcmpeq>

08000dfc <__aeabi_cfcmpeq>:
 8000dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000dfe:	f000 f8c9 	bl	8000f94 <__lesf2>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d401      	bmi.n	8000e0a <__aeabi_cfcmpeq+0xe>
 8000e06:	2100      	movs	r1, #0
 8000e08:	42c8      	cmn	r0, r1
 8000e0a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000e0c <__aeabi_fcmpeq>:
 8000e0c:	b510      	push	{r4, lr}
 8000e0e:	f000 f849 	bl	8000ea4 <__eqsf2>
 8000e12:	4240      	negs	r0, r0
 8000e14:	3001      	adds	r0, #1
 8000e16:	bd10      	pop	{r4, pc}

08000e18 <__aeabi_fcmplt>:
 8000e18:	b510      	push	{r4, lr}
 8000e1a:	f000 f8bb 	bl	8000f94 <__lesf2>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	db01      	blt.n	8000e26 <__aeabi_fcmplt+0xe>
 8000e22:	2000      	movs	r0, #0
 8000e24:	bd10      	pop	{r4, pc}
 8000e26:	2001      	movs	r0, #1
 8000e28:	bd10      	pop	{r4, pc}
 8000e2a:	46c0      	nop			@ (mov r8, r8)

08000e2c <__aeabi_fcmple>:
 8000e2c:	b510      	push	{r4, lr}
 8000e2e:	f000 f8b1 	bl	8000f94 <__lesf2>
 8000e32:	2800      	cmp	r0, #0
 8000e34:	dd01      	ble.n	8000e3a <__aeabi_fcmple+0xe>
 8000e36:	2000      	movs	r0, #0
 8000e38:	bd10      	pop	{r4, pc}
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	bd10      	pop	{r4, pc}
 8000e3e:	46c0      	nop			@ (mov r8, r8)

08000e40 <__aeabi_fcmpgt>:
 8000e40:	b510      	push	{r4, lr}
 8000e42:	f000 f857 	bl	8000ef4 <__gesf2>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	dc01      	bgt.n	8000e4e <__aeabi_fcmpgt+0xe>
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	bd10      	pop	{r4, pc}
 8000e4e:	2001      	movs	r0, #1
 8000e50:	bd10      	pop	{r4, pc}
 8000e52:	46c0      	nop			@ (mov r8, r8)

08000e54 <__aeabi_fcmpge>:
 8000e54:	b510      	push	{r4, lr}
 8000e56:	f000 f84d 	bl	8000ef4 <__gesf2>
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	da01      	bge.n	8000e62 <__aeabi_fcmpge+0xe>
 8000e5e:	2000      	movs	r0, #0
 8000e60:	bd10      	pop	{r4, pc}
 8000e62:	2001      	movs	r0, #1
 8000e64:	bd10      	pop	{r4, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)

08000e68 <__clzsi2>:
 8000e68:	211c      	movs	r1, #28
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	041b      	lsls	r3, r3, #16
 8000e6e:	4298      	cmp	r0, r3
 8000e70:	d301      	bcc.n	8000e76 <__clzsi2+0xe>
 8000e72:	0c00      	lsrs	r0, r0, #16
 8000e74:	3910      	subs	r1, #16
 8000e76:	0a1b      	lsrs	r3, r3, #8
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	d301      	bcc.n	8000e80 <__clzsi2+0x18>
 8000e7c:	0a00      	lsrs	r0, r0, #8
 8000e7e:	3908      	subs	r1, #8
 8000e80:	091b      	lsrs	r3, r3, #4
 8000e82:	4298      	cmp	r0, r3
 8000e84:	d301      	bcc.n	8000e8a <__clzsi2+0x22>
 8000e86:	0900      	lsrs	r0, r0, #4
 8000e88:	3904      	subs	r1, #4
 8000e8a:	a202      	add	r2, pc, #8	@ (adr r2, 8000e94 <__clzsi2+0x2c>)
 8000e8c:	5c10      	ldrb	r0, [r2, r0]
 8000e8e:	1840      	adds	r0, r0, r1
 8000e90:	4770      	bx	lr
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	02020304 	.word	0x02020304
 8000e98:	01010101 	.word	0x01010101
	...

08000ea4 <__eqsf2>:
 8000ea4:	b570      	push	{r4, r5, r6, lr}
 8000ea6:	0042      	lsls	r2, r0, #1
 8000ea8:	024e      	lsls	r6, r1, #9
 8000eaa:	004c      	lsls	r4, r1, #1
 8000eac:	0245      	lsls	r5, r0, #9
 8000eae:	0a6d      	lsrs	r5, r5, #9
 8000eb0:	0e12      	lsrs	r2, r2, #24
 8000eb2:	0fc3      	lsrs	r3, r0, #31
 8000eb4:	0a76      	lsrs	r6, r6, #9
 8000eb6:	0e24      	lsrs	r4, r4, #24
 8000eb8:	0fc9      	lsrs	r1, r1, #31
 8000eba:	2aff      	cmp	r2, #255	@ 0xff
 8000ebc:	d010      	beq.n	8000ee0 <__eqsf2+0x3c>
 8000ebe:	2cff      	cmp	r4, #255	@ 0xff
 8000ec0:	d00c      	beq.n	8000edc <__eqsf2+0x38>
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	42a2      	cmp	r2, r4
 8000ec6:	d10a      	bne.n	8000ede <__eqsf2+0x3a>
 8000ec8:	42b5      	cmp	r5, r6
 8000eca:	d108      	bne.n	8000ede <__eqsf2+0x3a>
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d00f      	beq.n	8000ef0 <__eqsf2+0x4c>
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	d104      	bne.n	8000ede <__eqsf2+0x3a>
 8000ed4:	0028      	movs	r0, r5
 8000ed6:	1e43      	subs	r3, r0, #1
 8000ed8:	4198      	sbcs	r0, r3
 8000eda:	e000      	b.n	8000ede <__eqsf2+0x3a>
 8000edc:	2001      	movs	r0, #1
 8000ede:	bd70      	pop	{r4, r5, r6, pc}
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	2cff      	cmp	r4, #255	@ 0xff
 8000ee4:	d1fb      	bne.n	8000ede <__eqsf2+0x3a>
 8000ee6:	4335      	orrs	r5, r6
 8000ee8:	d1f9      	bne.n	8000ede <__eqsf2+0x3a>
 8000eea:	404b      	eors	r3, r1
 8000eec:	0018      	movs	r0, r3
 8000eee:	e7f6      	b.n	8000ede <__eqsf2+0x3a>
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	e7f4      	b.n	8000ede <__eqsf2+0x3a>

08000ef4 <__gesf2>:
 8000ef4:	b530      	push	{r4, r5, lr}
 8000ef6:	0042      	lsls	r2, r0, #1
 8000ef8:	0244      	lsls	r4, r0, #9
 8000efa:	024d      	lsls	r5, r1, #9
 8000efc:	0fc3      	lsrs	r3, r0, #31
 8000efe:	0048      	lsls	r0, r1, #1
 8000f00:	0a64      	lsrs	r4, r4, #9
 8000f02:	0e12      	lsrs	r2, r2, #24
 8000f04:	0a6d      	lsrs	r5, r5, #9
 8000f06:	0e00      	lsrs	r0, r0, #24
 8000f08:	0fc9      	lsrs	r1, r1, #31
 8000f0a:	2aff      	cmp	r2, #255	@ 0xff
 8000f0c:	d019      	beq.n	8000f42 <__gesf2+0x4e>
 8000f0e:	28ff      	cmp	r0, #255	@ 0xff
 8000f10:	d00b      	beq.n	8000f2a <__gesf2+0x36>
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	d11e      	bne.n	8000f54 <__gesf2+0x60>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d10b      	bne.n	8000f32 <__gesf2+0x3e>
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	d027      	beq.n	8000f6e <__gesf2+0x7a>
 8000f1e:	2c00      	cmp	r4, #0
 8000f20:	d134      	bne.n	8000f8c <__gesf2+0x98>
 8000f22:	2900      	cmp	r1, #0
 8000f24:	d02f      	beq.n	8000f86 <__gesf2+0x92>
 8000f26:	0008      	movs	r0, r1
 8000f28:	bd30      	pop	{r4, r5, pc}
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d128      	bne.n	8000f80 <__gesf2+0x8c>
 8000f2e:	2a00      	cmp	r2, #0
 8000f30:	d101      	bne.n	8000f36 <__gesf2+0x42>
 8000f32:	2c00      	cmp	r4, #0
 8000f34:	d0f5      	beq.n	8000f22 <__gesf2+0x2e>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d107      	bne.n	8000f4a <__gesf2+0x56>
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d023      	beq.n	8000f86 <__gesf2+0x92>
 8000f3e:	0018      	movs	r0, r3
 8000f40:	e7f2      	b.n	8000f28 <__gesf2+0x34>
 8000f42:	2c00      	cmp	r4, #0
 8000f44:	d11c      	bne.n	8000f80 <__gesf2+0x8c>
 8000f46:	28ff      	cmp	r0, #255	@ 0xff
 8000f48:	d014      	beq.n	8000f74 <__gesf2+0x80>
 8000f4a:	1e58      	subs	r0, r3, #1
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	4018      	ands	r0, r3
 8000f50:	3801      	subs	r0, #1
 8000f52:	e7e9      	b.n	8000f28 <__gesf2+0x34>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d0f8      	beq.n	8000f4a <__gesf2+0x56>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d1f6      	bne.n	8000f4a <__gesf2+0x56>
 8000f5c:	4282      	cmp	r2, r0
 8000f5e:	dcf4      	bgt.n	8000f4a <__gesf2+0x56>
 8000f60:	dbeb      	blt.n	8000f3a <__gesf2+0x46>
 8000f62:	42ac      	cmp	r4, r5
 8000f64:	d8f1      	bhi.n	8000f4a <__gesf2+0x56>
 8000f66:	2000      	movs	r0, #0
 8000f68:	42ac      	cmp	r4, r5
 8000f6a:	d2dd      	bcs.n	8000f28 <__gesf2+0x34>
 8000f6c:	e7e5      	b.n	8000f3a <__gesf2+0x46>
 8000f6e:	2c00      	cmp	r4, #0
 8000f70:	d0da      	beq.n	8000f28 <__gesf2+0x34>
 8000f72:	e7ea      	b.n	8000f4a <__gesf2+0x56>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d103      	bne.n	8000f80 <__gesf2+0x8c>
 8000f78:	428b      	cmp	r3, r1
 8000f7a:	d1e6      	bne.n	8000f4a <__gesf2+0x56>
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	e7d3      	b.n	8000f28 <__gesf2+0x34>
 8000f80:	2002      	movs	r0, #2
 8000f82:	4240      	negs	r0, r0
 8000f84:	e7d0      	b.n	8000f28 <__gesf2+0x34>
 8000f86:	2001      	movs	r0, #1
 8000f88:	4240      	negs	r0, r0
 8000f8a:	e7cd      	b.n	8000f28 <__gesf2+0x34>
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d0e8      	beq.n	8000f62 <__gesf2+0x6e>
 8000f90:	e7db      	b.n	8000f4a <__gesf2+0x56>
 8000f92:	46c0      	nop			@ (mov r8, r8)

08000f94 <__lesf2>:
 8000f94:	b530      	push	{r4, r5, lr}
 8000f96:	0042      	lsls	r2, r0, #1
 8000f98:	0244      	lsls	r4, r0, #9
 8000f9a:	024d      	lsls	r5, r1, #9
 8000f9c:	0fc3      	lsrs	r3, r0, #31
 8000f9e:	0048      	lsls	r0, r1, #1
 8000fa0:	0a64      	lsrs	r4, r4, #9
 8000fa2:	0e12      	lsrs	r2, r2, #24
 8000fa4:	0a6d      	lsrs	r5, r5, #9
 8000fa6:	0e00      	lsrs	r0, r0, #24
 8000fa8:	0fc9      	lsrs	r1, r1, #31
 8000faa:	2aff      	cmp	r2, #255	@ 0xff
 8000fac:	d01a      	beq.n	8000fe4 <__lesf2+0x50>
 8000fae:	28ff      	cmp	r0, #255	@ 0xff
 8000fb0:	d00e      	beq.n	8000fd0 <__lesf2+0x3c>
 8000fb2:	2a00      	cmp	r2, #0
 8000fb4:	d11e      	bne.n	8000ff4 <__lesf2+0x60>
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	d10e      	bne.n	8000fd8 <__lesf2+0x44>
 8000fba:	2d00      	cmp	r5, #0
 8000fbc:	d02a      	beq.n	8001014 <__lesf2+0x80>
 8000fbe:	2c00      	cmp	r4, #0
 8000fc0:	d00c      	beq.n	8000fdc <__lesf2+0x48>
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d01d      	beq.n	8001002 <__lesf2+0x6e>
 8000fc6:	1e58      	subs	r0, r3, #1
 8000fc8:	2302      	movs	r3, #2
 8000fca:	4018      	ands	r0, r3
 8000fcc:	3801      	subs	r0, #1
 8000fce:	e010      	b.n	8000ff2 <__lesf2+0x5e>
 8000fd0:	2d00      	cmp	r5, #0
 8000fd2:	d10d      	bne.n	8000ff0 <__lesf2+0x5c>
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	d120      	bne.n	800101a <__lesf2+0x86>
 8000fd8:	2c00      	cmp	r4, #0
 8000fda:	d11e      	bne.n	800101a <__lesf2+0x86>
 8000fdc:	2900      	cmp	r1, #0
 8000fde:	d023      	beq.n	8001028 <__lesf2+0x94>
 8000fe0:	0008      	movs	r0, r1
 8000fe2:	e006      	b.n	8000ff2 <__lesf2+0x5e>
 8000fe4:	2c00      	cmp	r4, #0
 8000fe6:	d103      	bne.n	8000ff0 <__lesf2+0x5c>
 8000fe8:	28ff      	cmp	r0, #255	@ 0xff
 8000fea:	d1ec      	bne.n	8000fc6 <__lesf2+0x32>
 8000fec:	2d00      	cmp	r5, #0
 8000fee:	d017      	beq.n	8001020 <__lesf2+0x8c>
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	bd30      	pop	{r4, r5, pc}
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d0e6      	beq.n	8000fc6 <__lesf2+0x32>
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d1e4      	bne.n	8000fc6 <__lesf2+0x32>
 8000ffc:	4282      	cmp	r2, r0
 8000ffe:	dce2      	bgt.n	8000fc6 <__lesf2+0x32>
 8001000:	db04      	blt.n	800100c <__lesf2+0x78>
 8001002:	42ac      	cmp	r4, r5
 8001004:	d8df      	bhi.n	8000fc6 <__lesf2+0x32>
 8001006:	2000      	movs	r0, #0
 8001008:	42ac      	cmp	r4, r5
 800100a:	d2f2      	bcs.n	8000ff2 <__lesf2+0x5e>
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00b      	beq.n	8001028 <__lesf2+0x94>
 8001010:	0018      	movs	r0, r3
 8001012:	e7ee      	b.n	8000ff2 <__lesf2+0x5e>
 8001014:	2c00      	cmp	r4, #0
 8001016:	d0ec      	beq.n	8000ff2 <__lesf2+0x5e>
 8001018:	e7d5      	b.n	8000fc6 <__lesf2+0x32>
 800101a:	428b      	cmp	r3, r1
 800101c:	d1d3      	bne.n	8000fc6 <__lesf2+0x32>
 800101e:	e7f5      	b.n	800100c <__lesf2+0x78>
 8001020:	2000      	movs	r0, #0
 8001022:	428b      	cmp	r3, r1
 8001024:	d0e5      	beq.n	8000ff2 <__lesf2+0x5e>
 8001026:	e7ce      	b.n	8000fc6 <__lesf2+0x32>
 8001028:	2001      	movs	r0, #1
 800102a:	4240      	negs	r0, r0
 800102c:	e7e1      	b.n	8000ff2 <__lesf2+0x5e>
 800102e:	46c0      	nop			@ (mov r8, r8)

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f001 f86f 	bl	8002118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f983 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f000 fb3b 	bl	80016b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001042:	f000 fb1b 	bl	800167c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001046:	f000 fae9 	bl	800161c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800104a:	f000 f9db 	bl	8001404 <MX_TIM3_Init>
  MX_TIM15_Init();
 800104e:	f000 fa2f 	bl	80014b0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim3); // IR Receiver timer start
 8001052:	4ba8      	ldr	r3, [pc, #672]	@ (80012f4 <main+0x2c4>)
 8001054:	0018      	movs	r0, r3
 8001056:	f002 fabb 	bl	80035d0 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim3, 0); // IR Receiver timer cnt set
 800105a:	4ba6      	ldr	r3, [pc, #664]	@ (80012f4 <main+0x2c4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24

	WS28XX_Init(&ws, &htim15, 48, TIM_CHANNEL_1, 3);
 8001062:	49a5      	ldr	r1, [pc, #660]	@ (80012f8 <main+0x2c8>)
 8001064:	48a5      	ldr	r0, [pc, #660]	@ (80012fc <main+0x2cc>)
 8001066:	2303      	movs	r3, #3
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2300      	movs	r3, #0
 800106c:	2230      	movs	r2, #48	@ 0x30
 800106e:	f004 f803 	bl	8005078 <WS28XX_Init>

	uint32_t tmheartbeat = 0, tm = 0; // Timestamp variable
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
	bool heartbeat = 0;
 800107a:	230f      	movs	r3, #15
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001082:	2380      	movs	r3, #128	@ 0x80
 8001084:	019b      	lsls	r3, r3, #6
 8001086:	489e      	ldr	r0, [pc, #632]	@ (8001300 <main+0x2d0>)
 8001088:	2201      	movs	r2, #1
 800108a:	0019      	movs	r1, r3
 800108c:	f001 fccf 	bl	8002a2e <HAL_GPIO_WritePin>

	uint8_t ledsON = 0;
 8001090:	230e      	movs	r3, #14
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
	uint32_t tmboostON = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
	bool boostONswitch = 0;
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]

	WS28XX_SetPixel_RGBW_565(&ws, 0, COLOR_RGB565_BLUE, 50);
 80010a2:	4896      	ldr	r0, [pc, #600]	@ (80012fc <main+0x2cc>)
 80010a4:	2332      	movs	r3, #50	@ 0x32
 80010a6:	221f      	movs	r2, #31
 80010a8:	2100      	movs	r1, #0
 80010aa:	f004 f895 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB565_CRIMSON, 50);
 80010ae:	4a95      	ldr	r2, [pc, #596]	@ (8001304 <main+0x2d4>)
 80010b0:	4892      	ldr	r0, [pc, #584]	@ (80012fc <main+0x2cc>)
 80010b2:	2332      	movs	r3, #50	@ 0x32
 80010b4:	2101      	movs	r1, #1
 80010b6:	f004 f88f 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 2, COLOR_RGB565_ORANGE, 50);
 80010ba:	4a93      	ldr	r2, [pc, #588]	@ (8001308 <main+0x2d8>)
 80010bc:	488f      	ldr	r0, [pc, #572]	@ (80012fc <main+0x2cc>)
 80010be:	2332      	movs	r3, #50	@ 0x32
 80010c0:	2102      	movs	r1, #2
 80010c2:	f004 f889 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_Update(&ws);
 80010c6:	4b8d      	ldr	r3, [pc, #564]	@ (80012fc <main+0x2cc>)
 80010c8:	0018      	movs	r0, r3
 80010ca:	f004 f913 	bl	80052f4 <WS28XX_Update>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (tmheartbeat < HAL_GetTick()) { //heartbeat LED
 80010ce:	f001 f87d 	bl	80021cc <HAL_GetTick>
 80010d2:	0002      	movs	r2, r0
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d228      	bcs.n	800112c <main+0xfc>
			if (heartbeat)
 80010da:	230f      	movs	r3, #15
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d007      	beq.n	80010f4 <main+0xc4>
				tmheartbeat = HAL_GetTick() + 950;
 80010e4:	f001 f872 	bl	80021cc <HAL_GetTick>
 80010e8:	0003      	movs	r3, r0
 80010ea:	4a88      	ldr	r2, [pc, #544]	@ (800130c <main+0x2dc>)
 80010ec:	4694      	mov	ip, r2
 80010ee:	4463      	add	r3, ip
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	e004      	b.n	80010fe <main+0xce>
			else
				tmheartbeat = HAL_GetTick() + 50;
 80010f4:	f001 f86a 	bl	80021cc <HAL_GetTick>
 80010f8:	0003      	movs	r3, r0
 80010fa:	3332      	adds	r3, #50	@ 0x32
 80010fc:	617b      	str	r3, [r7, #20]

			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //heartbeat LED
 80010fe:	2380      	movs	r3, #128	@ 0x80
 8001100:	019b      	lsls	r3, r3, #6
 8001102:	4a7f      	ldr	r2, [pc, #508]	@ (8001300 <main+0x2d0>)
 8001104:	0019      	movs	r1, r3
 8001106:	0010      	movs	r0, r2
 8001108:	f001 fcae 	bl	8002a68 <HAL_GPIO_TogglePin>

			heartbeat = !heartbeat;
 800110c:	210f      	movs	r1, #15
 800110e:	187b      	adds	r3, r7, r1
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	1e5a      	subs	r2, r3, #1
 8001114:	4193      	sbcs	r3, r2
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2201      	movs	r2, #1
 800111a:	4053      	eors	r3, r2
 800111c:	b2db      	uxtb	r3, r3
 800111e:	001a      	movs	r2, r3
 8001120:	187b      	adds	r3, r7, r1
 8001122:	701a      	strb	r2, [r3, #0]
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	2101      	movs	r1, #1
 8001128:	400a      	ands	r2, r1
 800112a:	701a      	strb	r2, [r3, #0]
		}

		if (processIR == 1) { //Command received from IR decoding
 800112c:	4b78      	ldr	r3, [pc, #480]	@ (8001310 <main+0x2e0>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d100      	bne.n	8001138 <main+0x108>
 8001136:	e07a      	b.n	800122e <main+0x1fe>
			processIR = 0; //reset flag
 8001138:	4b75      	ldr	r3, [pc, #468]	@ (8001310 <main+0x2e0>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]

			printf("Data: %X\r\n", code); //debug terminal text
 800113e:	4b75      	ldr	r3, [pc, #468]	@ (8001314 <main+0x2e4>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b75      	ldr	r3, [pc, #468]	@ (8001318 <main+0x2e8>)
 8001144:	0011      	movs	r1, r2
 8001146:	0018      	movs	r0, r3
 8001148:	f004 fa56 	bl	80055f8 <iprintf>

			//uint8_t ledsONprev = ledsON;

			switch (code) {
 800114c:	4b71      	ldr	r3, [pc, #452]	@ (8001314 <main+0x2e4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a72      	ldr	r2, [pc, #456]	@ (800131c <main+0x2ec>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d02b      	beq.n	80011ae <main+0x17e>
 8001156:	4a71      	ldr	r2, [pc, #452]	@ (800131c <main+0x2ec>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d848      	bhi.n	80011ee <main+0x1be>
 800115c:	4a70      	ldr	r2, [pc, #448]	@ (8001320 <main+0x2f0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d035      	beq.n	80011ce <main+0x19e>
 8001162:	4a6f      	ldr	r2, [pc, #444]	@ (8001320 <main+0x2f0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d842      	bhi.n	80011ee <main+0x1be>
 8001168:	4a6e      	ldr	r2, [pc, #440]	@ (8001324 <main+0x2f4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00f      	beq.n	800118e <main+0x15e>
 800116e:	4a6d      	ldr	r2, [pc, #436]	@ (8001324 <main+0x2f4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d83c      	bhi.n	80011ee <main+0x1be>
 8001174:	4a6c      	ldr	r2, [pc, #432]	@ (8001328 <main+0x2f8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d031      	beq.n	80011de <main+0x1ae>
 800117a:	4a6b      	ldr	r2, [pc, #428]	@ (8001328 <main+0x2f8>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d836      	bhi.n	80011ee <main+0x1be>
 8001180:	4a6a      	ldr	r2, [pc, #424]	@ (800132c <main+0x2fc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d01b      	beq.n	80011be <main+0x18e>
 8001186:	4a6a      	ldr	r2, [pc, #424]	@ (8001330 <main+0x300>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d008      	beq.n	800119e <main+0x16e>
			case 0xFF58A7: // "0"
				animationCode = 0;
				ledsON = 0;
				break;
			default:
				break;
 800118c:	e02f      	b.n	80011ee <main+0x1be>
				animationCode = 1;
 800118e:	4b69      	ldr	r3, [pc, #420]	@ (8001334 <main+0x304>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 8001194:	230e      	movs	r3, #14
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
				break;
 800119c:	e028      	b.n	80011f0 <main+0x1c0>
				animationCode = 2;
 800119e:	4b65      	ldr	r3, [pc, #404]	@ (8001334 <main+0x304>)
 80011a0:	2202      	movs	r2, #2
 80011a2:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 80011a4:	230e      	movs	r3, #14
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
				break;
 80011ac:	e020      	b.n	80011f0 <main+0x1c0>
				animationCode = 3;
 80011ae:	4b61      	ldr	r3, [pc, #388]	@ (8001334 <main+0x304>)
 80011b0:	2203      	movs	r2, #3
 80011b2:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 80011b4:	230e      	movs	r3, #14
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
				break;
 80011bc:	e018      	b.n	80011f0 <main+0x1c0>
				animationCode = 4;
 80011be:	4b5d      	ldr	r3, [pc, #372]	@ (8001334 <main+0x304>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 80011c4:	230e      	movs	r3, #14
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
				break;
 80011cc:	e010      	b.n	80011f0 <main+0x1c0>
				animationCode = 5;
 80011ce:	4b59      	ldr	r3, [pc, #356]	@ (8001334 <main+0x304>)
 80011d0:	2205      	movs	r2, #5
 80011d2:	701a      	strb	r2, [r3, #0]
				ledsON = 1;
 80011d4:	230e      	movs	r3, #14
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
				break;
 80011dc:	e008      	b.n	80011f0 <main+0x1c0>
				animationCode = 0;
 80011de:	4b55      	ldr	r3, [pc, #340]	@ (8001334 <main+0x304>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
				ledsON = 0;
 80011e4:	230e      	movs	r3, #14
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
				break;
 80011ec:	e000      	b.n	80011f0 <main+0x1c0>
				break;
 80011ee:	46c0      	nop			@ (mov r8, r8)
			}

			//if (ledsONprev != ledsON && ledsON == 1) //LEDs were off
			if (HAL_GPIO_ReadPin(sense5V_GPIO_Port, sense5V_Pin)==0 && ledsON == 1) //output OFF, but leds should be on
 80011f0:	2380      	movs	r3, #128	@ 0x80
 80011f2:	015b      	lsls	r3, r3, #5
 80011f4:	4a50      	ldr	r2, [pc, #320]	@ (8001338 <main+0x308>)
 80011f6:	0019      	movs	r1, r3
 80011f8:	0010      	movs	r0, r2
 80011fa:	f001 fbfb 	bl	80029f4 <HAL_GPIO_ReadPin>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d115      	bne.n	800122e <main+0x1fe>
 8001202:	230e      	movs	r3, #14
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d110      	bne.n	800122e <main+0x1fe>
					{
				HAL_GPIO_WritePin(boost_WKUP_GPIO_Port, boost_WKUP_Pin, GPIO_PIN_RESET); //turn the boost on (100ms LOW pulse)
 800120c:	2390      	movs	r3, #144	@ 0x90
 800120e:	05db      	lsls	r3, r3, #23
 8001210:	2200      	movs	r2, #0
 8001212:	2102      	movs	r1, #2
 8001214:	0018      	movs	r0, r3
 8001216:	f001 fc0a 	bl	8002a2e <HAL_GPIO_WritePin>
				HAL_Delay(100);
 800121a:	2064      	movs	r0, #100	@ 0x64
 800121c:	f000 ffe0 	bl	80021e0 <HAL_Delay>
				HAL_GPIO_WritePin(boost_WKUP_GPIO_Port, boost_WKUP_Pin,	GPIO_PIN_SET);
 8001220:	2390      	movs	r3, #144	@ 0x90
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	2201      	movs	r2, #1
 8001226:	2102      	movs	r1, #2
 8001228:	0018      	movs	r0, r3
 800122a:	f001 fc00 	bl	8002a2e <HAL_GPIO_WritePin>
				//HAL_Delay(500);
			}

		}

		if (tm < HAL_GetTick()) { //routine for effects
 800122e:	f000 ffcd 	bl	80021cc <HAL_GetTick>
 8001232:	0002      	movs	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4293      	cmp	r3, r2
 8001238:	d220      	bcs.n	800127c <main+0x24c>
			tm = HAL_GetTick() + 10;
 800123a:	f000 ffc7 	bl	80021cc <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	330a      	adds	r3, #10
 8001242:	613b      	str	r3, [r7, #16]

			switch (animationCode) {
 8001244:	4b3b      	ldr	r3, [pc, #236]	@ (8001334 <main+0x304>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b05      	cmp	r3, #5
 800124a:	d816      	bhi.n	800127a <main+0x24a>
 800124c:	009a      	lsls	r2, r3, #2
 800124e:	4b3b      	ldr	r3, [pc, #236]	@ (800133c <main+0x30c>)
 8001250:	18d3      	adds	r3, r2, r3
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	469f      	mov	pc, r3
			case 0: // "0"
				turnAllOff();
 8001256:	f000 fb95 	bl	8001984 <turnAllOff>
				break;
 800125a:	e00f      	b.n	800127c <main+0x24c>
			case 1: // "1"
				setAllBlue();
 800125c:	f000 fb72 	bl	8001944 <setAllBlue>
				break;
 8001260:	e00c      	b.n	800127c <main+0x24c>
			case 2: // "2"
				GlitteringWavesEffect();
 8001262:	f000 fbad 	bl	80019c0 <GlitteringWavesEffect>
				break;
 8001266:	e009      	b.n	800127c <main+0x24c>
			case 3: // "3"
				EnchantedRippleEffect();
 8001268:	f000 fc0a 	bl	8001a80 <EnchantedRippleEffect>
				break;
 800126c:	e006      	b.n	800127c <main+0x24c>
			case 4: // "4"
				TwinklingGlowEffect();
 800126e:	f000 fc61 	bl	8001b34 <TwinklingGlowEffect>
				break;
 8001272:	e003      	b.n	800127c <main+0x24c>
			case 5: // "5"
				CarTurnSignalEffect();
 8001274:	f000 fcd6 	bl	8001c24 <CarTurnSignalEffect>
				break;
 8001278:	e000      	b.n	800127c <main+0x24c>
			default:
				break;
 800127a:	46c0      	nop			@ (mov r8, r8)

			}
		}

		if (tmboostON < HAL_GetTick() && ledsON == 1) { //routine for waking up boost
 800127c:	f000 ffa6 	bl	80021cc <HAL_GetTick>
 8001280:	0002      	movs	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	4293      	cmp	r3, r2
 8001286:	d300      	bcc.n	800128a <main+0x25a>
 8001288:	e721      	b.n	80010ce <main+0x9e>
 800128a:	230e      	movs	r3, #14
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d000      	beq.n	8001296 <main+0x266>
 8001294:	e71b      	b.n	80010ce <main+0x9e>

			if (boostONswitch) { //100ms low pulse every 20s, if LEDs are running
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00c      	beq.n	80012b8 <main+0x288>
				tmboostON = HAL_GetTick() + 100;
 800129e:	f000 ff95 	bl	80021cc <HAL_GetTick>
 80012a2:	0003      	movs	r3, r0
 80012a4:	3364      	adds	r3, #100	@ 0x64
 80012a6:	60bb      	str	r3, [r7, #8]
				HAL_GPIO_WritePin(boost_WKUP_GPIO_Port, boost_WKUP_Pin,
 80012a8:	2390      	movs	r3, #144	@ 0x90
 80012aa:	05db      	lsls	r3, r3, #23
 80012ac:	2200      	movs	r2, #0
 80012ae:	2102      	movs	r1, #2
 80012b0:	0018      	movs	r0, r3
 80012b2:	f001 fbbc 	bl	8002a2e <HAL_GPIO_WritePin>
 80012b6:	e00d      	b.n	80012d4 <main+0x2a4>
						GPIO_PIN_RESET);
			} else {
				tmboostON = HAL_GetTick() + 20000;
 80012b8:	f000 ff88 	bl	80021cc <HAL_GetTick>
 80012bc:	0003      	movs	r3, r0
 80012be:	4a20      	ldr	r2, [pc, #128]	@ (8001340 <main+0x310>)
 80012c0:	4694      	mov	ip, r2
 80012c2:	4463      	add	r3, ip
 80012c4:	60bb      	str	r3, [r7, #8]
				HAL_GPIO_WritePin(boost_WKUP_GPIO_Port, boost_WKUP_Pin,
 80012c6:	2390      	movs	r3, #144	@ 0x90
 80012c8:	05db      	lsls	r3, r3, #23
 80012ca:	2201      	movs	r2, #1
 80012cc:	2102      	movs	r1, #2
 80012ce:	0018      	movs	r0, r3
 80012d0:	f001 fbad 	bl	8002a2e <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
			}
			boostONswitch = !boostONswitch;
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	4193      	sbcs	r3, r2
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2201      	movs	r2, #1
 80012e0:	4053      	eors	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	001a      	movs	r2, r3
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	2101      	movs	r1, #1
 80012ee:	400a      	ands	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]
		if (tmheartbeat < HAL_GetTick()) { //heartbeat LED
 80012f2:	e6ec      	b.n	80010ce <main+0x9e>
 80012f4:	20000094 	.word	0x20000094
 80012f8:	200000dc 	.word	0x200000dc
 80012fc:	20000200 	.word	0x20000200
 8001300:	48000800 	.word	0x48000800
 8001304:	0000d8a7 	.word	0x0000d8a7
 8001308:	0000fd20 	.word	0x0000fd20
 800130c:	000003b6 	.word	0x000003b6
 8001310:	200001fc 	.word	0x200001fc
 8001314:	200001f8 	.word	0x200001f8
 8001318:	08006458 	.word	0x08006458
 800131c:	00ffc837 	.word	0x00ffc837
 8001320:	00ffa857 	.word	0x00ffa857
 8001324:	00ff8877 	.word	0x00ff8877
 8001328:	00ff58a7 	.word	0x00ff58a7
 800132c:	00ff28d7 	.word	0x00ff28d7
 8001330:	00ff48b7 	.word	0x00ff48b7
 8001334:	200001fd 	.word	0x200001fd
 8001338:	48000400 	.word	0x48000400
 800133c:	080064e0 	.word	0x080064e0
 8001340:	00004e20 	.word	0x00004e20

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b095      	sub	sp, #84	@ 0x54
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	2420      	movs	r4, #32
 800134c:	193b      	adds	r3, r7, r4
 800134e:	0018      	movs	r0, r3
 8001350:	2330      	movs	r3, #48	@ 0x30
 8001352:	001a      	movs	r2, r3
 8001354:	2100      	movs	r1, #0
 8001356:	f004 f9ab 	bl	80056b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135a:	2310      	movs	r3, #16
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	0018      	movs	r0, r3
 8001360:	2310      	movs	r3, #16
 8001362:	001a      	movs	r2, r3
 8001364:	2100      	movs	r1, #0
 8001366:	f004 f9a3 	bl	80056b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136a:	003b      	movs	r3, r7
 800136c:	0018      	movs	r0, r3
 800136e:	2310      	movs	r3, #16
 8001370:	001a      	movs	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	f004 f99c 	bl	80056b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001378:	0021      	movs	r1, r4
 800137a:	187b      	adds	r3, r7, r1
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001380:	187b      	adds	r3, r7, r1
 8001382:	2201      	movs	r2, #1
 8001384:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	187b      	adds	r3, r7, r1
 8001388:	2202      	movs	r2, #2
 800138a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2280      	movs	r2, #128	@ 0x80
 8001390:	0252      	lsls	r2, r2, #9
 8001392:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001394:	187b      	adds	r3, r7, r1
 8001396:	2280      	movs	r2, #128	@ 0x80
 8001398:	0352      	lsls	r2, r2, #13
 800139a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2200      	movs	r2, #0
 80013a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	0018      	movs	r0, r3
 80013a6:	f001 fb97 	bl	8002ad8 <HAL_RCC_OscConfig>
 80013aa:	1e03      	subs	r3, r0, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013ae:	f000 fc8d 	bl	8001ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b2:	2110      	movs	r1, #16
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	2207      	movs	r2, #7
 80013b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ba:	187b      	adds	r3, r7, r1
 80013bc:	2202      	movs	r2, #2
 80013be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	2101      	movs	r1, #1
 80013d0:	0018      	movs	r0, r3
 80013d2:	f001 fe9b 	bl	800310c <HAL_RCC_ClockConfig>
 80013d6:	1e03      	subs	r3, r0, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013da:	f000 fc77 	bl	8001ccc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013de:	003b      	movs	r3, r7
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80013e4:	003b      	movs	r3, r7
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ea:	003b      	movs	r3, r7
 80013ec:	0018      	movs	r0, r3
 80013ee:	f001 ffd1 	bl	8003394 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	1e03      	subs	r3, r0, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80013f6:	f000 fc69 	bl	8001ccc <Error_Handler>
  }
}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b015      	add	sp, #84	@ 0x54
 8001400:	bd90      	pop	{r4, r7, pc}
	...

08001404 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140a:	2308      	movs	r3, #8
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	0018      	movs	r0, r3
 8001410:	2310      	movs	r3, #16
 8001412:	001a      	movs	r2, r3
 8001414:	2100      	movs	r1, #0
 8001416:	f004 f94b 	bl	80056b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141a:	003b      	movs	r3, r7
 800141c:	0018      	movs	r0, r3
 800141e:	2308      	movs	r3, #8
 8001420:	001a      	movs	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	f004 f944 	bl	80056b0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001428:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <MX_TIM3_Init+0xa0>)
 800142a:	4a1f      	ldr	r2, [pc, #124]	@ (80014a8 <MX_TIM3_Init+0xa4>)
 800142c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 800142e:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <MX_TIM3_Init+0xa0>)
 8001430:	2230      	movs	r2, #48	@ 0x30
 8001432:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <MX_TIM3_Init+0xa0>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_TIM3_Init+0xa0>)
 800143c:	4a1b      	ldr	r2, [pc, #108]	@ (80014ac <MX_TIM3_Init+0xa8>)
 800143e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <MX_TIM3_Init+0xa0>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <MX_TIM3_Init+0xa0>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <MX_TIM3_Init+0xa0>)
 800144e:	0018      	movs	r0, r3
 8001450:	f002 f86e 	bl	8003530 <HAL_TIM_Base_Init>
 8001454:	1e03      	subs	r3, r0, #0
 8001456:	d001      	beq.n	800145c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001458:	f000 fc38 	bl	8001ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145c:	2108      	movs	r1, #8
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2280      	movs	r2, #128	@ 0x80
 8001462:	0152      	lsls	r2, r2, #5
 8001464:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001466:	187a      	adds	r2, r7, r1
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <MX_TIM3_Init+0xa0>)
 800146a:	0011      	movs	r1, r2
 800146c:	0018      	movs	r0, r3
 800146e:	f002 fbc1 	bl	8003bf4 <HAL_TIM_ConfigClockSource>
 8001472:	1e03      	subs	r3, r0, #0
 8001474:	d001      	beq.n	800147a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001476:	f000 fc29 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147a:	003b      	movs	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001480:	003b      	movs	r3, r7
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001486:	003a      	movs	r2, r7
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <MX_TIM3_Init+0xa0>)
 800148a:	0011      	movs	r1, r2
 800148c:	0018      	movs	r0, r3
 800148e:	f003 f8af 	bl	80045f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	1e03      	subs	r3, r0, #0
 8001494:	d001      	beq.n	800149a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001496:	f000 fc19 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	b006      	add	sp, #24
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	20000094 	.word	0x20000094
 80014a8:	40000400 	.word	0x40000400
 80014ac:	0000ffff 	.word	0x0000ffff

080014b0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b096      	sub	sp, #88	@ 0x58
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */
//
  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b6:	2348      	movs	r3, #72	@ 0x48
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	0018      	movs	r0, r3
 80014bc:	2310      	movs	r3, #16
 80014be:	001a      	movs	r2, r3
 80014c0:	2100      	movs	r1, #0
 80014c2:	f004 f8f5 	bl	80056b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c6:	2340      	movs	r3, #64	@ 0x40
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	0018      	movs	r0, r3
 80014cc:	2308      	movs	r3, #8
 80014ce:	001a      	movs	r2, r3
 80014d0:	2100      	movs	r1, #0
 80014d2:	f004 f8ed 	bl	80056b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d6:	2324      	movs	r3, #36	@ 0x24
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	0018      	movs	r0, r3
 80014dc:	231c      	movs	r3, #28
 80014de:	001a      	movs	r2, r3
 80014e0:	2100      	movs	r1, #0
 80014e2:	f004 f8e5 	bl	80056b0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	0018      	movs	r0, r3
 80014ea:	2320      	movs	r3, #32
 80014ec:	001a      	movs	r2, r3
 80014ee:	2100      	movs	r1, #0
 80014f0:	f004 f8de 	bl	80056b0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */
//
  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80014f4:	4b46      	ldr	r3, [pc, #280]	@ (8001610 <MX_TIM15_Init+0x160>)
 80014f6:	4a47      	ldr	r2, [pc, #284]	@ (8001614 <MX_TIM15_Init+0x164>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80014fa:	4b45      	ldr	r3, [pc, #276]	@ (8001610 <MX_TIM15_Init+0x160>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b43      	ldr	r3, [pc, #268]	@ (8001610 <MX_TIM15_Init+0x160>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001506:	4b42      	ldr	r3, [pc, #264]	@ (8001610 <MX_TIM15_Init+0x160>)
 8001508:	4a43      	ldr	r2, [pc, #268]	@ (8001618 <MX_TIM15_Init+0x168>)
 800150a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b40      	ldr	r3, [pc, #256]	@ (8001610 <MX_TIM15_Init+0x160>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001512:	4b3f      	ldr	r3, [pc, #252]	@ (8001610 <MX_TIM15_Init+0x160>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b3d      	ldr	r3, [pc, #244]	@ (8001610 <MX_TIM15_Init+0x160>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800151e:	4b3c      	ldr	r3, [pc, #240]	@ (8001610 <MX_TIM15_Init+0x160>)
 8001520:	0018      	movs	r0, r3
 8001522:	f002 f805 	bl	8003530 <HAL_TIM_Base_Init>
 8001526:	1e03      	subs	r3, r0, #0
 8001528:	d001      	beq.n	800152e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800152a:	f000 fbcf 	bl	8001ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152e:	2148      	movs	r1, #72	@ 0x48
 8001530:	187b      	adds	r3, r7, r1
 8001532:	2280      	movs	r2, #128	@ 0x80
 8001534:	0152      	lsls	r2, r2, #5
 8001536:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001538:	187a      	adds	r2, r7, r1
 800153a:	4b35      	ldr	r3, [pc, #212]	@ (8001610 <MX_TIM15_Init+0x160>)
 800153c:	0011      	movs	r1, r2
 800153e:	0018      	movs	r0, r3
 8001540:	f002 fb58 	bl	8003bf4 <HAL_TIM_ConfigClockSource>
 8001544:	1e03      	subs	r3, r0, #0
 8001546:	d001      	beq.n	800154c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001548:	f000 fbc0 	bl	8001ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800154c:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <MX_TIM15_Init+0x160>)
 800154e:	0018      	movs	r0, r3
 8001550:	f002 f882 	bl	8003658 <HAL_TIM_PWM_Init>
 8001554:	1e03      	subs	r3, r0, #0
 8001556:	d001      	beq.n	800155c <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8001558:	f000 fbb8 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2140      	movs	r1, #64	@ 0x40
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	187b      	adds	r3, r7, r1
 8001566:	2200      	movs	r2, #0
 8001568:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800156a:	187a      	adds	r2, r7, r1
 800156c:	4b28      	ldr	r3, [pc, #160]	@ (8001610 <MX_TIM15_Init+0x160>)
 800156e:	0011      	movs	r1, r2
 8001570:	0018      	movs	r0, r3
 8001572:	f003 f83d 	bl	80045f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001576:	1e03      	subs	r3, r0, #0
 8001578:	d001      	beq.n	800157e <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800157a:	f000 fba7 	bl	8001ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157e:	2124      	movs	r1, #36	@ 0x24
 8001580:	187b      	adds	r3, r7, r1
 8001582:	2260      	movs	r2, #96	@ 0x60
 8001584:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158c:	187b      	adds	r3, r7, r1
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001592:	187b      	adds	r3, r7, r1
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001598:	187b      	adds	r3, r7, r1
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015aa:	1879      	adds	r1, r7, r1
 80015ac:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <MX_TIM15_Init+0x160>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	0018      	movs	r0, r3
 80015b2:	f002 fa59 	bl	8003a68 <HAL_TIM_PWM_ConfigChannel>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80015ba:	f000 fb87 	bl	8001ccc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2280      	movs	r2, #128	@ 0x80
 80015e0:	0192      	lsls	r2, r2, #6
 80015e2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80015ea:	1d3a      	adds	r2, r7, #4
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <MX_TIM15_Init+0x160>)
 80015ee:	0011      	movs	r1, r2
 80015f0:	0018      	movs	r0, r3
 80015f2:	f003 f855 	bl	80046a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM15_Init+0x14e>
  {
    Error_Handler();
 80015fa:	f000 fb67 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
//
  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80015fe:	4b04      	ldr	r3, [pc, #16]	@ (8001610 <MX_TIM15_Init+0x160>)
 8001600:	0018      	movs	r0, r3
 8001602:	f000 fbfd 	bl	8001e00 <HAL_TIM_MspPostInit>

}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b016      	add	sp, #88	@ 0x58
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	200000dc 	.word	0x200000dc
 8001614:	40014000 	.word	0x40014000
 8001618:	0000ffff 	.word	0x0000ffff

0800161c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001620:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <MX_USART1_UART_Init+0x58>)
 8001622:	4a15      	ldr	r2, [pc, #84]	@ (8001678 <MX_USART1_UART_Init+0x5c>)
 8001624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001626:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <MX_USART1_UART_Init+0x58>)
 8001628:	22e1      	movs	r2, #225	@ 0xe1
 800162a:	0252      	lsls	r2, r2, #9
 800162c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MX_USART1_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MX_USART1_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <MX_USART1_UART_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <MX_USART1_UART_Init+0x58>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <MX_USART1_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <MX_USART1_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <MX_USART1_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <MX_USART1_UART_Init+0x58>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800165e:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <MX_USART1_UART_Init+0x58>)
 8001660:	0018      	movs	r0, r3
 8001662:	f003 f87b 	bl	800475c <HAL_UART_Init>
 8001666:	1e03      	subs	r3, r0, #0
 8001668:	d001      	beq.n	800166e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800166a:	f000 fb2f 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000168 	.word	0x20000168
 8001678:	40013800 	.word	0x40013800

0800167c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <MX_DMA_Init+0x38>)
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <MX_DMA_Init+0x38>)
 8001688:	2101      	movs	r1, #1
 800168a:	430a      	orrs	r2, r1
 800168c:	615a      	str	r2, [r3, #20]
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <MX_DMA_Init+0x38>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	2201      	movs	r2, #1
 8001694:	4013      	ands	r3, r2
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	200b      	movs	r0, #11
 80016a0:	f000 fe6e 	bl	8002380 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80016a4:	200b      	movs	r0, #11
 80016a6:	f000 fe80 	bl	80023aa <HAL_NVIC_EnableIRQ>

}
 80016aa:	46c0      	nop			@ (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	40021000 	.word	0x40021000

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b08b      	sub	sp, #44	@ 0x2c
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	2414      	movs	r4, #20
 80016c0:	193b      	adds	r3, r7, r4
 80016c2:	0018      	movs	r0, r3
 80016c4:	2314      	movs	r3, #20
 80016c6:	001a      	movs	r2, r3
 80016c8:	2100      	movs	r1, #0
 80016ca:	f003 fff1 	bl	80056b0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001804 <MX_GPIO_Init+0x14c>)
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001804 <MX_GPIO_Init+0x14c>)
 80016d4:	2180      	movs	r1, #128	@ 0x80
 80016d6:	0309      	lsls	r1, r1, #12
 80016d8:	430a      	orrs	r2, r1
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	4b49      	ldr	r3, [pc, #292]	@ (8001804 <MX_GPIO_Init+0x14c>)
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	2380      	movs	r3, #128	@ 0x80
 80016e2:	031b      	lsls	r3, r3, #12
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ea:	4b46      	ldr	r3, [pc, #280]	@ (8001804 <MX_GPIO_Init+0x14c>)
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	4b45      	ldr	r3, [pc, #276]	@ (8001804 <MX_GPIO_Init+0x14c>)
 80016f0:	2180      	movs	r1, #128	@ 0x80
 80016f2:	03c9      	lsls	r1, r1, #15
 80016f4:	430a      	orrs	r2, r1
 80016f6:	615a      	str	r2, [r3, #20]
 80016f8:	4b42      	ldr	r3, [pc, #264]	@ (8001804 <MX_GPIO_Init+0x14c>)
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	03db      	lsls	r3, r3, #15
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b3f      	ldr	r3, [pc, #252]	@ (8001804 <MX_GPIO_Init+0x14c>)
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	4b3e      	ldr	r3, [pc, #248]	@ (8001804 <MX_GPIO_Init+0x14c>)
 800170c:	2180      	movs	r1, #128	@ 0x80
 800170e:	0289      	lsls	r1, r1, #10
 8001710:	430a      	orrs	r2, r1
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	4b3b      	ldr	r3, [pc, #236]	@ (8001804 <MX_GPIO_Init+0x14c>)
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	2380      	movs	r3, #128	@ 0x80
 800171a:	029b      	lsls	r3, r3, #10
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	4b38      	ldr	r3, [pc, #224]	@ (8001804 <MX_GPIO_Init+0x14c>)
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <MX_GPIO_Init+0x14c>)
 8001728:	2180      	movs	r1, #128	@ 0x80
 800172a:	02c9      	lsls	r1, r1, #11
 800172c:	430a      	orrs	r2, r1
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	4b34      	ldr	r3, [pc, #208]	@ (8001804 <MX_GPIO_Init+0x14c>)
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	02db      	lsls	r3, r3, #11
 8001738:	4013      	ands	r3, r2
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800173e:	2380      	movs	r3, #128	@ 0x80
 8001740:	019b      	lsls	r3, r3, #6
 8001742:	4831      	ldr	r0, [pc, #196]	@ (8001808 <MX_GPIO_Init+0x150>)
 8001744:	2200      	movs	r2, #0
 8001746:	0019      	movs	r1, r3
 8001748:	f001 f971 	bl	8002a2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(boost_WKUP_GPIO_Port, boost_WKUP_Pin, GPIO_PIN_RESET);
 800174c:	2390      	movs	r3, #144	@ 0x90
 800174e:	05db      	lsls	r3, r3, #23
 8001750:	2200      	movs	r2, #0
 8001752:	2102      	movs	r1, #2
 8001754:	0018      	movs	r0, r3
 8001756:	f001 f96a 	bl	8002a2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800175a:	193b      	adds	r3, r7, r4
 800175c:	2280      	movs	r2, #128	@ 0x80
 800175e:	0192      	lsls	r2, r2, #6
 8001760:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	193b      	adds	r3, r7, r4
 8001764:	2201      	movs	r2, #1
 8001766:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	193b      	adds	r3, r7, r4
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	193b      	adds	r3, r7, r4
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001774:	193b      	adds	r3, r7, r4
 8001776:	4a24      	ldr	r2, [pc, #144]	@ (8001808 <MX_GPIO_Init+0x150>)
 8001778:	0019      	movs	r1, r3
 800177a:	0010      	movs	r0, r2
 800177c:	f000 ffca 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : boost_WKUP_Pin */
  GPIO_InitStruct.Pin = boost_WKUP_Pin;
 8001780:	193b      	adds	r3, r7, r4
 8001782:	2202      	movs	r2, #2
 8001784:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001786:	193b      	adds	r3, r7, r4
 8001788:	2211      	movs	r2, #17
 800178a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	193b      	adds	r3, r7, r4
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	193b      	adds	r3, r7, r4
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(boost_WKUP_GPIO_Port, &GPIO_InitStruct);
 8001798:	193a      	adds	r2, r7, r4
 800179a:	2390      	movs	r3, #144	@ 0x90
 800179c:	05db      	lsls	r3, r3, #23
 800179e:	0011      	movs	r1, r2
 80017a0:	0018      	movs	r0, r3
 80017a2:	f000 ffb7 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017a6:	193b      	adds	r3, r7, r4
 80017a8:	2240      	movs	r2, #64	@ 0x40
 80017aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ac:	193b      	adds	r3, r7, r4
 80017ae:	2284      	movs	r2, #132	@ 0x84
 80017b0:	0392      	lsls	r2, r2, #14
 80017b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	193a      	adds	r2, r7, r4
 80017bc:	2390      	movs	r3, #144	@ 0x90
 80017be:	05db      	lsls	r3, r3, #23
 80017c0:	0011      	movs	r1, r2
 80017c2:	0018      	movs	r0, r3
 80017c4:	f000 ffa6 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : sense5V_Pin */
  GPIO_InitStruct.Pin = sense5V_Pin;
 80017c8:	0021      	movs	r1, r4
 80017ca:	187b      	adds	r3, r7, r1
 80017cc:	2280      	movs	r2, #128	@ 0x80
 80017ce:	0152      	lsls	r2, r2, #5
 80017d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(sense5V_GPIO_Port, &GPIO_InitStruct);
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <MX_GPIO_Init+0x154>)
 80017e2:	0019      	movs	r1, r3
 80017e4:	0010      	movs	r0, r2
 80017e6:	f000 ff95 	bl	8002714 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2007      	movs	r0, #7
 80017f0:	f000 fdc6 	bl	8002380 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80017f4:	2007      	movs	r0, #7
 80017f6:	f000 fdd8 	bl	80023aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b00b      	add	sp, #44	@ 0x2c
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	40021000 	.word	0x40021000
 8001808:	48000800 	.word	0x48000800
 800180c:	48000400 	.word	0x48000400

08001810 <_write>:

/* USER CODE BEGIN 4 */

/* UART PRINTF MAP */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	b29a      	uxth	r2, r3
 8001820:	2301      	movs	r3, #1
 8001822:	425b      	negs	r3, r3
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	4804      	ldr	r0, [pc, #16]	@ (8001838 <_write+0x28>)
 8001828:	f002 ffec 	bl	8004804 <HAL_UART_Transmit>
	return len;
 800182c:	687b      	ldr	r3, [r7, #4]
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b004      	add	sp, #16
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	20000168 	.word	0x20000168

0800183c <HAL_GPIO_EXTI_Callback>:
//HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	return ch;
}

/* IR TIMER AND DECODING */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	0002      	movs	r2, r0
 8001844:	1dbb      	adds	r3, r7, #6
 8001846:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_6) {
 8001848:	1dbb      	adds	r3, r7, #6
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	2b40      	cmp	r3, #64	@ 0x40
 800184e:	d164      	bne.n	800191a <HAL_GPIO_EXTI_Callback+0xde>
		if (__HAL_TIM_GET_COUNTER(&htim3) > 8000) {
 8001850:	4b34      	ldr	r3, [pc, #208]	@ (8001924 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001856:	23fa      	movs	r3, #250	@ 0xfa
 8001858:	015b      	lsls	r3, r3, #5
 800185a:	429a      	cmp	r2, r3
 800185c:	d906      	bls.n	800186c <HAL_GPIO_EXTI_Callback+0x30>
			tempCode = 0;
 800185e:	4b32      	ldr	r3, [pc, #200]	@ (8001928 <HAL_GPIO_EXTI_Callback+0xec>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
			bitIndex = 0;
 8001864:	4b31      	ldr	r3, [pc, #196]	@ (800192c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e031      	b.n	80018d0 <HAL_GPIO_EXTI_Callback+0x94>
		} else if (__HAL_TIM_GET_COUNTER(&htim3) > 1700) {
 800186c:	4b2d      	ldr	r3, [pc, #180]	@ (8001924 <HAL_GPIO_EXTI_Callback+0xe8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001872:	4a2f      	ldr	r2, [pc, #188]	@ (8001930 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d912      	bls.n	800189e <HAL_GPIO_EXTI_Callback+0x62>
			tempCode |= (1UL << (31 - bitIndex));   // write 1
 8001878:	4b2c      	ldr	r3, [pc, #176]	@ (800192c <HAL_GPIO_EXTI_Callback+0xf0>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	001a      	movs	r2, r3
 800187e:	2380      	movs	r3, #128	@ 0x80
 8001880:	061b      	lsls	r3, r3, #24
 8001882:	40d3      	lsrs	r3, r2
 8001884:	001a      	movs	r2, r3
 8001886:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <HAL_GPIO_EXTI_Callback+0xec>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	431a      	orrs	r2, r3
 800188c:	4b26      	ldr	r3, [pc, #152]	@ (8001928 <HAL_GPIO_EXTI_Callback+0xec>)
 800188e:	601a      	str	r2, [r3, #0]
			bitIndex++;
 8001890:	4b26      	ldr	r3, [pc, #152]	@ (800192c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b24      	ldr	r3, [pc, #144]	@ (800192c <HAL_GPIO_EXTI_Callback+0xf0>)
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	e018      	b.n	80018d0 <HAL_GPIO_EXTI_Callback+0x94>
		} else if (__HAL_TIM_GET_COUNTER(&htim3) > 1000) {
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <HAL_GPIO_EXTI_Callback+0xe8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018a4:	23fa      	movs	r3, #250	@ 0xfa
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d911      	bls.n	80018d0 <HAL_GPIO_EXTI_Callback+0x94>
			tempCode &= ~(1UL << (31 - bitIndex));  // write 0
 80018ac:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <HAL_GPIO_EXTI_Callback+0xf0>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	001a      	movs	r2, r3
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	40d3      	lsrs	r3, r2
 80018b8:	43da      	mvns	r2, r3
 80018ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <HAL_GPIO_EXTI_Callback+0xec>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	401a      	ands	r2, r3
 80018c0:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <HAL_GPIO_EXTI_Callback+0xec>)
 80018c2:	601a      	str	r2, [r3, #0]
			bitIndex++;
 80018c4:	4b19      	ldr	r3, [pc, #100]	@ (800192c <HAL_GPIO_EXTI_Callback+0xf0>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	4b17      	ldr	r3, [pc, #92]	@ (800192c <HAL_GPIO_EXTI_Callback+0xf0>)
 80018ce:	701a      	strb	r2, [r3, #0]
		}
		if (bitIndex == 32) {
 80018d0:	4b16      	ldr	r3, [pc, #88]	@ (800192c <HAL_GPIO_EXTI_Callback+0xf0>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b20      	cmp	r3, #32
 80018d6:	d11c      	bne.n	8001912 <HAL_GPIO_EXTI_Callback+0xd6>
			cmdli = ~tempCode; // Logical inverted last 8 bits
 80018d8:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <HAL_GPIO_EXTI_Callback+0xec>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <HAL_GPIO_EXTI_Callback+0xf8>)
 80018e4:	701a      	strb	r2, [r3, #0]
			cmd = tempCode >> 8; // Second last 8 bits
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <HAL_GPIO_EXTI_Callback+0xec>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_GPIO_EXTI_Callback+0xfc>)
 80018f0:	701a      	strb	r2, [r3, #0]
			if (cmdli == cmd) // Check for errors
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <HAL_GPIO_EXTI_Callback+0xf8>)
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <HAL_GPIO_EXTI_Callback+0xfc>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d106      	bne.n	800190c <HAL_GPIO_EXTI_Callback+0xd0>
					{
				code = tempCode; // If no bit errors
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_GPIO_EXTI_Callback+0xec>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <HAL_GPIO_EXTI_Callback+0x100>)
 8001904:	601a      	str	r2, [r3, #0]
				// Do your main work HERE
				//printf("Data: %X\r\n",code);
				processIR = 1;
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <HAL_GPIO_EXTI_Callback+0x104>)
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
			}
			bitIndex = 0;
 800190c:	4b07      	ldr	r3, [pc, #28]	@ (800192c <HAL_GPIO_EXTI_Callback+0xf0>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
		}
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001912:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b002      	add	sp, #8
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	20000094 	.word	0x20000094
 8001928:	200001f0 	.word	0x200001f0
 800192c:	200001f4 	.word	0x200001f4
 8001930:	000006a4 	.word	0x000006a4
 8001934:	200001f6 	.word	0x200001f6
 8001938:	200001f5 	.word	0x200001f5
 800193c:	200001f8 	.word	0x200001f8
 8001940:	200001fc 	.word	0x200001fc

08001944 <setAllBlue>:

/* LED EFFECTS */

void setAllBlue(void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	WS28XX_SetPixel_RGBW_565(&ws, 0, COLOR_RGB565_CYAN, 100);
 8001948:	4a0c      	ldr	r2, [pc, #48]	@ (800197c <setAllBlue+0x38>)
 800194a:	480d      	ldr	r0, [pc, #52]	@ (8001980 <setAllBlue+0x3c>)
 800194c:	2364      	movs	r3, #100	@ 0x64
 800194e:	2100      	movs	r1, #0
 8001950:	f003 fc42 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB565_CYAN, 100);
 8001954:	4a09      	ldr	r2, [pc, #36]	@ (800197c <setAllBlue+0x38>)
 8001956:	480a      	ldr	r0, [pc, #40]	@ (8001980 <setAllBlue+0x3c>)
 8001958:	2364      	movs	r3, #100	@ 0x64
 800195a:	2101      	movs	r1, #1
 800195c:	f003 fc3c 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 2, COLOR_RGB565_CYAN, 100);
 8001960:	4a06      	ldr	r2, [pc, #24]	@ (800197c <setAllBlue+0x38>)
 8001962:	4807      	ldr	r0, [pc, #28]	@ (8001980 <setAllBlue+0x3c>)
 8001964:	2364      	movs	r3, #100	@ 0x64
 8001966:	2102      	movs	r1, #2
 8001968:	f003 fc36 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_Update(&ws);
 800196c:	4b04      	ldr	r3, [pc, #16]	@ (8001980 <setAllBlue+0x3c>)
 800196e:	0018      	movs	r0, r3
 8001970:	f003 fcc0 	bl	80052f4 <WS28XX_Update>
}
 8001974:	46c0      	nop			@ (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	000007ff 	.word	0x000007ff
 8001980:	20000200 	.word	0x20000200

08001984 <turnAllOff>:

void turnAllOff(void) {
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	WS28XX_SetPixel_RGBW_565(&ws, 0, COLOR_RGB888_BLACK, 0);
 8001988:	480c      	ldr	r0, [pc, #48]	@ (80019bc <turnAllOff+0x38>)
 800198a:	2300      	movs	r3, #0
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	f003 fc22 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB888_BLACK, 0);
 8001994:	4809      	ldr	r0, [pc, #36]	@ (80019bc <turnAllOff+0x38>)
 8001996:	2300      	movs	r3, #0
 8001998:	2200      	movs	r2, #0
 800199a:	2101      	movs	r1, #1
 800199c:	f003 fc1c 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_SetPixel_RGBW_565(&ws, 2, COLOR_RGB888_BLACK, 0);
 80019a0:	4806      	ldr	r0, [pc, #24]	@ (80019bc <turnAllOff+0x38>)
 80019a2:	2300      	movs	r3, #0
 80019a4:	2200      	movs	r2, #0
 80019a6:	2102      	movs	r1, #2
 80019a8:	f003 fc16 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
	WS28XX_Update(&ws);
 80019ac:	4b03      	ldr	r3, [pc, #12]	@ (80019bc <turnAllOff+0x38>)
 80019ae:	0018      	movs	r0, r3
 80019b0:	f003 fca0 	bl	80052f4 <WS28XX_Update>
}
 80019b4:	46c0      	nop			@ (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	20000200 	.word	0x20000200

080019c0 <GlitteringWavesEffect>:

void GlitteringWavesEffect(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
	static uint32_t next_update = 0;
	static uint8_t brightness[3] = { 100, 120, 140 }; // Initial brightness for each LED
	static int8_t delta[3] = { 10, -15, 20 }; // Change in brightness for each LED

	if (HAL_GetTick() >= next_update) {
 80019c6:	f000 fc01 	bl	80021cc <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	4b27      	ldr	r3, [pc, #156]	@ (8001a6c <GlitteringWavesEffect+0xac>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d347      	bcc.n	8001a64 <GlitteringWavesEffect+0xa4>
		next_update = HAL_GetTick() + 5; // 5ms periodic update
 80019d4:	f000 fbfa 	bl	80021cc <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	1d5a      	adds	r2, r3, #5
 80019dc:	4b23      	ldr	r3, [pc, #140]	@ (8001a6c <GlitteringWavesEffect+0xac>)
 80019de:	601a      	str	r2, [r3, #0]

		for (int i = 0; i < 3; i++) {
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	e037      	b.n	8001a56 <GlitteringWavesEffect+0x96>
			brightness[i] += delta[i];
 80019e6:	4a22      	ldr	r2, [pc, #136]	@ (8001a70 <GlitteringWavesEffect+0xb0>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	18d3      	adds	r3, r2, r3
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	4921      	ldr	r1, [pc, #132]	@ (8001a74 <GlitteringWavesEffect+0xb4>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	18cb      	adds	r3, r1, r3
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	18d3      	adds	r3, r2, r3
 80019fc:	b2d9      	uxtb	r1, r3
 80019fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001a70 <GlitteringWavesEffect+0xb0>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	18d3      	adds	r3, r2, r3
 8001a04:	1c0a      	adds	r2, r1, #0
 8001a06:	701a      	strb	r2, [r3, #0]
			if (brightness[i] >= 255 || brightness[i] <= 100) {
 8001a08:	4a19      	ldr	r2, [pc, #100]	@ (8001a70 <GlitteringWavesEffect+0xb0>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	18d3      	adds	r3, r2, r3
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2bff      	cmp	r3, #255	@ 0xff
 8001a12:	d005      	beq.n	8001a20 <GlitteringWavesEffect+0x60>
 8001a14:	4a16      	ldr	r2, [pc, #88]	@ (8001a70 <GlitteringWavesEffect+0xb0>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	18d3      	adds	r3, r2, r3
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b64      	cmp	r3, #100	@ 0x64
 8001a1e:	d80d      	bhi.n	8001a3c <GlitteringWavesEffect+0x7c>
				delta[i] = -delta[i]; // Reverse direction at boundaries
 8001a20:	4a14      	ldr	r2, [pc, #80]	@ (8001a74 <GlitteringWavesEffect+0xb4>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	18d3      	adds	r3, r2, r3
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	425b      	negs	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	b259      	sxtb	r1, r3
 8001a32:	4a10      	ldr	r2, [pc, #64]	@ (8001a74 <GlitteringWavesEffect+0xb4>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	18d3      	adds	r3, r2, r3
 8001a38:	1c0a      	adds	r2, r1, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
			}
			WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_CYAN, brightness[i]);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	b299      	uxth	r1, r3
 8001a40:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <GlitteringWavesEffect+0xb0>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	18d3      	adds	r3, r2, r3
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4a0b      	ldr	r2, [pc, #44]	@ (8001a78 <GlitteringWavesEffect+0xb8>)
 8001a4a:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <GlitteringWavesEffect+0xbc>)
 8001a4c:	f003 fbc4 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
		for (int i = 0; i < 3; i++) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3301      	adds	r3, #1
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	ddc4      	ble.n	80019e6 <GlitteringWavesEffect+0x26>
		}
		WS28XX_Update(&ws);
 8001a5c:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <GlitteringWavesEffect+0xbc>)
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f003 fc48 	bl	80052f4 <WS28XX_Update>
	}
}
 8001a64:	46c0      	nop			@ (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000320 	.word	0x20000320
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004
 8001a78:	000007ff 	.word	0x000007ff
 8001a7c:	20000200 	.word	0x20000200

08001a80 <EnchantedRippleEffect>:
void EnchantedRippleEffect(void) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	static uint32_t next_update = 0;
	static uint8_t brightness = 0;
	static int8_t direction = 1; // 1 for increasing, -1 for decreasing

	if (HAL_GetTick() >= next_update) {
 8001a84:	f000 fba2 	bl	80021cc <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <EnchantedRippleEffect+0xa0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d342      	bcc.n	8001b18 <EnchantedRippleEffect+0x98>
		next_update = HAL_GetTick() + 5; // 5ms periodic update
 8001a92:	f000 fb9b 	bl	80021cc <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	1d5a      	adds	r2, r3, #5
 8001a9a:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <EnchantedRippleEffect+0xa0>)
 8001a9c:	601a      	str	r2, [r3, #0]

		brightness += 5 * direction;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <EnchantedRippleEffect+0xa4>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	1c1a      	adds	r2, r3, #0
 8001aa8:	0092      	lsls	r2, r2, #2
 8001aaa:	18d3      	adds	r3, r2, r3
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b1e      	ldr	r3, [pc, #120]	@ (8001b28 <EnchantedRippleEffect+0xa8>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	18d3      	adds	r3, r2, r3
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <EnchantedRippleEffect+0xa8>)
 8001ab8:	701a      	strb	r2, [r3, #0]
		if (brightness >= 255 || brightness <= 0) {
 8001aba:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <EnchantedRippleEffect+0xa8>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2bff      	cmp	r3, #255	@ 0xff
 8001ac0:	d003      	beq.n	8001aca <EnchantedRippleEffect+0x4a>
 8001ac2:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <EnchantedRippleEffect+0xa8>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d108      	bne.n	8001adc <EnchantedRippleEffect+0x5c>
			direction = -direction; // Reverse at boundaries
 8001aca:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <EnchantedRippleEffect+0xa4>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b25b      	sxtb	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	425b      	negs	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <EnchantedRippleEffect+0xa4>)
 8001ada:	701a      	strb	r2, [r3, #0]
		}

		WS28XX_SetPixel_RGBW_565(&ws, 0, COLOR_RGB565_BLUE, brightness);
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <EnchantedRippleEffect+0xa8>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4812      	ldr	r0, [pc, #72]	@ (8001b2c <EnchantedRippleEffect+0xac>)
 8001ae2:	221f      	movs	r2, #31
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f003 fb77 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
		WS28XX_SetPixel_RGBW_565(&ws, 1, COLOR_RGB565_GREEN, brightness / 2);
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <EnchantedRippleEffect+0xa8>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	085b      	lsrs	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	22fc      	movs	r2, #252	@ 0xfc
 8001af4:	00d2      	lsls	r2, r2, #3
 8001af6:	480d      	ldr	r0, [pc, #52]	@ (8001b2c <EnchantedRippleEffect+0xac>)
 8001af8:	2101      	movs	r1, #1
 8001afa:	f003 fb6d 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
		WS28XX_SetPixel_RGBW_565(&ws, 2, COLOR_RGB565_PURPLE, 255 - brightness);
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <EnchantedRippleEffect+0xa8>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <EnchantedRippleEffect+0xb0>)
 8001b08:	4808      	ldr	r0, [pc, #32]	@ (8001b2c <EnchantedRippleEffect+0xac>)
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	f003 fb64 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
		WS28XX_Update(&ws);
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <EnchantedRippleEffect+0xac>)
 8001b12:	0018      	movs	r0, r3
 8001b14:	f003 fbee 	bl	80052f4 <WS28XX_Update>

	}
}
 8001b18:	46c0      	nop			@ (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	20000324 	.word	0x20000324
 8001b24:	20000007 	.word	0x20000007
 8001b28:	20000328 	.word	0x20000328
 8001b2c:	20000200 	.word	0x20000200
 8001b30:	0000780f 	.word	0x0000780f

08001b34 <TwinklingGlowEffect>:
void TwinklingGlowEffect(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
	static uint32_t next_update = 0;
	static uint8_t brightness[3] = { 50, 100, 150 }; // Initial brightness for each LED
	static int8_t delta[3] = { 5, -3, 4 }; // Change rate for each LED

	if (HAL_GetTick() >= next_update) {
 8001b3a:	f000 fb47 	bl	80021cc <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	4b33      	ldr	r3, [pc, #204]	@ (8001c10 <TwinklingGlowEffect+0xdc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d35e      	bcc.n	8001c06 <TwinklingGlowEffect+0xd2>
		next_update = HAL_GetTick() + 5; // 5ms periodic update
 8001b48:	f000 fb40 	bl	80021cc <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	1d5a      	adds	r2, r3, #5
 8001b50:	4b2f      	ldr	r3, [pc, #188]	@ (8001c10 <TwinklingGlowEffect+0xdc>)
 8001b52:	601a      	str	r2, [r3, #0]

		for (int i = 0; i < 3; i++) {
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	e04e      	b.n	8001bf8 <TwinklingGlowEffect+0xc4>
			brightness[i] += delta[i];
 8001b5a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c14 <TwinklingGlowEffect+0xe0>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	18d3      	adds	r3, r2, r3
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	492d      	ldr	r1, [pc, #180]	@ (8001c18 <TwinklingGlowEffect+0xe4>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	18cb      	adds	r3, r1, r3
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b25b      	sxtb	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	18d3      	adds	r3, r2, r3
 8001b70:	b2d9      	uxtb	r1, r3
 8001b72:	4a28      	ldr	r2, [pc, #160]	@ (8001c14 <TwinklingGlowEffect+0xe0>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	18d3      	adds	r3, r2, r3
 8001b78:	1c0a      	adds	r2, r1, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
			if (brightness[i] >= 255 || brightness[i] <= 50) {
 8001b7c:	4a25      	ldr	r2, [pc, #148]	@ (8001c14 <TwinklingGlowEffect+0xe0>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	18d3      	adds	r3, r2, r3
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2bff      	cmp	r3, #255	@ 0xff
 8001b86:	d005      	beq.n	8001b94 <TwinklingGlowEffect+0x60>
 8001b88:	4a22      	ldr	r2, [pc, #136]	@ (8001c14 <TwinklingGlowEffect+0xe0>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	18d3      	adds	r3, r2, r3
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b32      	cmp	r3, #50	@ 0x32
 8001b92:	d824      	bhi.n	8001bde <TwinklingGlowEffect+0xaa>
				delta[i] = -delta[i]; // Reverse direction at boundaries
 8001b94:	4a20      	ldr	r2, [pc, #128]	@ (8001c18 <TwinklingGlowEffect+0xe4>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	18d3      	adds	r3, r2, r3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	425b      	negs	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	b259      	sxtb	r1, r3
 8001ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c18 <TwinklingGlowEffect+0xe4>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	18d3      	adds	r3, r2, r3
 8001bac:	1c0a      	adds	r2, r1, #0
 8001bae:	701a      	strb	r2, [r3, #0]
				// Add randomness for a twinkle effect
				if (brightness[i] <= 50) {
 8001bb0:	4a18      	ldr	r2, [pc, #96]	@ (8001c14 <TwinklingGlowEffect+0xe0>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	18d3      	adds	r3, r2, r3
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b32      	cmp	r3, #50	@ 0x32
 8001bba:	d810      	bhi.n	8001bde <TwinklingGlowEffect+0xaa>
					delta[i] = (rand() % 5) + 3; // Randomize twinkle speed
 8001bbc:	f003 fc1a 	bl	80053f4 <rand>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	2105      	movs	r1, #5
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7fe fc19 	bl	80003fc <__aeabi_idivmod>
 8001bca:	000b      	movs	r3, r1
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3303      	adds	r3, #3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	b259      	sxtb	r1, r3
 8001bd4:	4a10      	ldr	r2, [pc, #64]	@ (8001c18 <TwinklingGlowEffect+0xe4>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	18d3      	adds	r3, r2, r3
 8001bda:	1c0a      	adds	r2, r1, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
				}
			}
			WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_AQUA, brightness[i]);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	b299      	uxth	r1, r3
 8001be2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c14 <TwinklingGlowEffect+0xe0>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	18d3      	adds	r3, r2, r3
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	4a0c      	ldr	r2, [pc, #48]	@ (8001c1c <TwinklingGlowEffect+0xe8>)
 8001bec:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <TwinklingGlowEffect+0xec>)
 8001bee:	f003 faf3 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
		for (int i = 0; i < 3; i++) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	ddad      	ble.n	8001b5a <TwinklingGlowEffect+0x26>
		}
		WS28XX_Update(&ws);
 8001bfe:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <TwinklingGlowEffect+0xec>)
 8001c00:	0018      	movs	r0, r3
 8001c02:	f003 fb77 	bl	80052f4 <WS28XX_Update>
	}
}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b002      	add	sp, #8
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	2000032c 	.word	0x2000032c
 8001c14:	20000008 	.word	0x20000008
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	00005d1c 	.word	0x00005d1c
 8001c20:	20000200 	.word	0x20000200

08001c24 <CarTurnSignalEffect>:

void CarTurnSignalEffect(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
	static uint32_t next_update = 0;
	static bool leds_on = false; // State to track whether the LEDs are on or off

	if (HAL_GetTick() >= next_update) {
 8001c2a:	f000 facf 	bl	80021cc <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	4b22      	ldr	r3, [pc, #136]	@ (8001cbc <CarTurnSignalEffect+0x98>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d33d      	bcc.n	8001cb4 <CarTurnSignalEffect+0x90>
		next_update = HAL_GetTick() + (leds_on ? 300 : 700); // 300ms ON, 700ms OFF for classic timing
 8001c38:	f000 fac8 	bl	80021cc <HAL_GetTick>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <CarTurnSignalEffect+0x9c>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <CarTurnSignalEffect+0x28>
 8001c46:	2396      	movs	r3, #150	@ 0x96
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	e001      	b.n	8001c50 <CarTurnSignalEffect+0x2c>
 8001c4c:	23af      	movs	r3, #175	@ 0xaf
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	189a      	adds	r2, r3, r2
 8001c52:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <CarTurnSignalEffect+0x98>)
 8001c54:	601a      	str	r2, [r3, #0]

		if (leds_on) {
 8001c56:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <CarTurnSignalEffect+0x9c>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d013      	beq.n	8001c86 <CarTurnSignalEffect+0x62>
			// Turn off all LEDs
			for (int i = 0; i < 3; i++) {
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	e009      	b.n	8001c78 <CarTurnSignalEffect+0x54>
				WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_BLACK, 0);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	b299      	uxth	r1, r3
 8001c68:	4816      	ldr	r0, [pc, #88]	@ (8001cc4 <CarTurnSignalEffect+0xa0>)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f003 fab3 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
			for (int i = 0; i < 3; i++) {
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3301      	adds	r3, #1
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	ddf2      	ble.n	8001c64 <CarTurnSignalEffect+0x40>
			}
			leds_on = false;
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <CarTurnSignalEffect+0x9c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
 8001c84:	e012      	b.n	8001cac <CarTurnSignalEffect+0x88>
		} else {
			// Turn on all LEDs with Amber
			for (int i = 0; i < 3; i++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	e009      	b.n	8001ca0 <CarTurnSignalEffect+0x7c>
				WS28XX_SetPixel_RGBW_565(&ws, i, COLOR_RGB565_ORANGE, 255);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b299      	uxth	r1, r3
 8001c90:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <CarTurnSignalEffect+0xa4>)
 8001c92:	480c      	ldr	r0, [pc, #48]	@ (8001cc4 <CarTurnSignalEffect+0xa0>)
 8001c94:	23ff      	movs	r3, #255	@ 0xff
 8001c96:	f003 fa9f 	bl	80051d8 <WS28XX_SetPixel_RGBW_565>
			for (int i = 0; i < 3; i++) {
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	ddf2      	ble.n	8001c8c <CarTurnSignalEffect+0x68>
			}
			leds_on = true;
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <CarTurnSignalEffect+0x9c>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
		}
		WS28XX_Update(&ws);
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <CarTurnSignalEffect+0xa0>)
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f003 fb20 	bl	80052f4 <WS28XX_Update>
	}
}
 8001cb4:	46c0      	nop			@ (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000330 	.word	0x20000330
 8001cc0:	20000334 	.word	0x20000334
 8001cc4:	20000200 	.word	0x20000200
 8001cc8:	0000fd20 	.word	0x0000fd20

08001ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cd4:	46c0      	nop			@ (mov r8, r8)
 8001cd6:	e7fd      	b.n	8001cd4 <Error_Handler+0x8>

08001cd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	4b0f      	ldr	r3, [pc, #60]	@ (8001d1c <HAL_MspInit+0x44>)
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <HAL_MspInit+0x44>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	619a      	str	r2, [r3, #24]
 8001cea:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <HAL_MspInit+0x44>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <HAL_MspInit+0x44>)
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <HAL_MspInit+0x44>)
 8001cfc:	2180      	movs	r1, #128	@ 0x80
 8001cfe:	0549      	lsls	r1, r1, #21
 8001d00:	430a      	orrs	r2, r1
 8001d02:	61da      	str	r2, [r3, #28]
 8001d04:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <HAL_MspInit+0x44>)
 8001d06:	69da      	ldr	r2, [r3, #28]
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	055b      	lsls	r3, r3, #21
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b002      	add	sp, #8
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8001dec <HAL_TIM_Base_MspInit+0xcc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d10c      	bne.n	8001d4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d32:	4b2f      	ldr	r3, [pc, #188]	@ (8001df0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d34:	69da      	ldr	r2, [r3, #28]
 8001d36:	4b2e      	ldr	r3, [pc, #184]	@ (8001df0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d38:	2102      	movs	r1, #2
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	61da      	str	r2, [r3, #28]
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001df0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	2202      	movs	r2, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001d4a:	e04b      	b.n	8001de4 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM15)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a28      	ldr	r2, [pc, #160]	@ (8001df4 <HAL_TIM_Base_MspInit+0xd4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d146      	bne.n	8001de4 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001d56:	4b26      	ldr	r3, [pc, #152]	@ (8001df0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	4b25      	ldr	r3, [pc, #148]	@ (8001df0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d5c:	2180      	movs	r1, #128	@ 0x80
 8001d5e:	0249      	lsls	r1, r1, #9
 8001d60:	430a      	orrs	r2, r1
 8001d62:	619a      	str	r2, [r3, #24]
 8001d64:	4b22      	ldr	r3, [pc, #136]	@ (8001df0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d66:	699a      	ldr	r2, [r3, #24]
 8001d68:	2380      	movs	r3, #128	@ 0x80
 8001d6a:	025b      	lsls	r3, r3, #9
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8001d72:	4b21      	ldr	r3, [pc, #132]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001d74:	4a21      	ldr	r2, [pc, #132]	@ (8001dfc <HAL_TIM_Base_MspInit+0xdc>)
 8001d76:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d78:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001d86:	2280      	movs	r2, #128	@ 0x80
 8001d88:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001d8c:	2280      	movs	r2, #128	@ 0x80
 8001d8e:	0052      	lsls	r2, r2, #1
 8001d90:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d92:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 8001d98:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8001d9e:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8001da4:	4b14      	ldr	r3, [pc, #80]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 fb1c 	bl	80023e4 <HAL_DMA_Init>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_TIM_Base_MspInit+0x94>
      Error_Handler();
 8001db0:	f7ff ff8c 	bl	8001ccc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a10      	ldr	r2, [pc, #64]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24
 8001dba:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001dc4:	621a      	str	r2, [r3, #32]
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001dd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001ddc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_TIM_Base_MspInit+0xd8>)
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001de4:	46c0      	nop			@ (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b004      	add	sp, #16
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40014000 	.word	0x40014000
 8001df8:	20000124 	.word	0x20000124
 8001dfc:	40020058 	.word	0x40020058

08001e00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b089      	sub	sp, #36	@ 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	240c      	movs	r4, #12
 8001e0a:	193b      	adds	r3, r7, r4
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	2314      	movs	r3, #20
 8001e10:	001a      	movs	r2, r3
 8001e12:	2100      	movs	r1, #0
 8001e14:	f003 fc4c 	bl	80056b0 <memset>
  if(htim->Instance==TIM15)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a15      	ldr	r2, [pc, #84]	@ (8001e74 <HAL_TIM_MspPostInit+0x74>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d124      	bne.n	8001e6c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_TIM_MspPostInit+0x78>)
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <HAL_TIM_MspPostInit+0x78>)
 8001e28:	2180      	movs	r1, #128	@ 0x80
 8001e2a:	0289      	lsls	r1, r1, #10
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	615a      	str	r2, [r3, #20]
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_TIM_MspPostInit+0x78>)
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	029b      	lsls	r3, r3, #10
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e3e:	0021      	movs	r1, r4
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	2204      	movs	r2, #4
 8001e44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	2202      	movs	r2, #2
 8001e4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	187b      	adds	r3, r7, r1
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	187a      	adds	r2, r7, r1
 8001e60:	2390      	movs	r3, #144	@ 0x90
 8001e62:	05db      	lsls	r3, r3, #23
 8001e64:	0011      	movs	r1, r2
 8001e66:	0018      	movs	r0, r3
 8001e68:	f000 fc54 	bl	8002714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001e6c:	46c0      	nop			@ (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b009      	add	sp, #36	@ 0x24
 8001e72:	bd90      	pop	{r4, r7, pc}
 8001e74:	40014000 	.word	0x40014000
 8001e78:	40021000 	.word	0x40021000

08001e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b08b      	sub	sp, #44	@ 0x2c
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	2414      	movs	r4, #20
 8001e86:	193b      	adds	r3, r7, r4
 8001e88:	0018      	movs	r0, r3
 8001e8a:	2314      	movs	r3, #20
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	2100      	movs	r1, #0
 8001e90:	f003 fc0e 	bl	80056b0 <memset>
  if(huart->Instance==USART1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1d      	ldr	r2, [pc, #116]	@ (8001f10 <HAL_UART_MspInit+0x94>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d133      	bne.n	8001f06 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <HAL_UART_MspInit+0x98>)
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f14 <HAL_UART_MspInit+0x98>)
 8001ea4:	2180      	movs	r1, #128	@ 0x80
 8001ea6:	01c9      	lsls	r1, r1, #7
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	619a      	str	r2, [r3, #24]
 8001eac:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <HAL_UART_MspInit+0x98>)
 8001eae:	699a      	ldr	r2, [r3, #24]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	01db      	lsls	r3, r3, #7
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <HAL_UART_MspInit+0x98>)
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_UART_MspInit+0x98>)
 8001ec0:	2180      	movs	r1, #128	@ 0x80
 8001ec2:	0289      	lsls	r1, r1, #10
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	615a      	str	r2, [r3, #20]
 8001ec8:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <HAL_UART_MspInit+0x98>)
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	029b      	lsls	r3, r3, #10
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ed6:	193b      	adds	r3, r7, r4
 8001ed8:	22c0      	movs	r2, #192	@ 0xc0
 8001eda:	00d2      	lsls	r2, r2, #3
 8001edc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	0021      	movs	r1, r4
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	187a      	adds	r2, r7, r1
 8001efa:	2390      	movs	r3, #144	@ 0x90
 8001efc:	05db      	lsls	r3, r3, #23
 8001efe:	0011      	movs	r1, r2
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 fc07 	bl	8002714 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f06:	46c0      	nop			@ (mov r8, r8)
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b00b      	add	sp, #44	@ 0x2c
 8001f0c:	bd90      	pop	{r4, r7, pc}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	40013800 	.word	0x40013800
 8001f14:	40021000 	.word	0x40021000

08001f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f1c:	46c0      	nop			@ (mov r8, r8)
 8001f1e:	e7fd      	b.n	8001f1c <NMI_Handler+0x4>

08001f20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f24:	46c0      	nop			@ (mov r8, r8)
 8001f26:	e7fd      	b.n	8001f24 <HardFault_Handler+0x4>

08001f28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f2c:	46c0      	nop			@ (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f40:	f000 f932 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f44:	46c0      	nop			@ (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001f4e:	2040      	movs	r0, #64	@ 0x40
 8001f50:	f000 fda6 	bl	8002aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001f54:	46c0      	nop			@ (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8001f60:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <DMA1_Channel4_5_IRQHandler+0x14>)
 8001f62:	0018      	movs	r0, r3
 8001f64:	f000 faec 	bl	8002540 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001f68:	46c0      	nop			@ (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	20000124 	.word	0x20000124

08001f74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  return 1;
 8001f78:	2301      	movs	r3, #1
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_kill>:

int _kill(int pid, int sig)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f8a:	f003 fbe7 	bl	800575c <__errno>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	2216      	movs	r2, #22
 8001f92:	601a      	str	r2, [r3, #0]
  return -1;
 8001f94:	2301      	movs	r3, #1
 8001f96:	425b      	negs	r3, r3
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_exit>:

void _exit (int status)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fa8:	2301      	movs	r3, #1
 8001faa:	425a      	negs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0011      	movs	r1, r2
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f7ff ffe5 	bl	8001f80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fb6:	46c0      	nop			@ (mov r8, r8)
 8001fb8:	e7fd      	b.n	8001fb6 <_exit+0x16>

08001fba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e00a      	b.n	8001fe2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fcc:	e000      	b.n	8001fd0 <_read+0x16>
 8001fce:	bf00      	nop
 8001fd0:	0001      	movs	r1, r0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	60ba      	str	r2, [r7, #8]
 8001fd8:	b2ca      	uxtb	r2, r1
 8001fda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	dbf0      	blt.n	8001fcc <_read+0x12>
  }

  return len;
 8001fea:	687b      	ldr	r3, [r7, #4]
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b006      	add	sp, #24
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	425b      	negs	r3, r3
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2280      	movs	r2, #128	@ 0x80
 8002016:	0192      	lsls	r2, r2, #6
 8002018:	605a      	str	r2, [r3, #4]
  return 0;
 800201a:	2300      	movs	r3, #0
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	b002      	add	sp, #8
 8002022:	bd80      	pop	{r7, pc}

08002024 <_isatty>:

int _isatty(int file)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800202c:	2301      	movs	r3, #1
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}

08002036 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002042:	2300      	movs	r3, #0
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b004      	add	sp, #16
 800204a:	bd80      	pop	{r7, pc}

0800204c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002054:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <_sbrk+0x5c>)
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <_sbrk+0x60>)
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002060:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <_sbrk+0x64>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002068:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <_sbrk+0x64>)
 800206a:	4a12      	ldr	r2, [pc, #72]	@ (80020b4 <_sbrk+0x68>)
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	18d3      	adds	r3, r2, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	429a      	cmp	r2, r3
 800207a:	d207      	bcs.n	800208c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800207c:	f003 fb6e 	bl	800575c <__errno>
 8002080:	0003      	movs	r3, r0
 8002082:	220c      	movs	r2, #12
 8002084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002086:	2301      	movs	r3, #1
 8002088:	425b      	negs	r3, r3
 800208a:	e009      	b.n	80020a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800208c:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002092:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <_sbrk+0x64>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	18d2      	adds	r2, r2, r3
 800209a:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <_sbrk+0x64>)
 800209c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800209e:	68fb      	ldr	r3, [r7, #12]
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b006      	add	sp, #24
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20002000 	.word	0x20002000
 80020ac:	00000400 	.word	0x00000400
 80020b0:	20000338 	.word	0x20000338
 80020b4:	20000490 	.word	0x20000490

080020b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */

}
 80020bc:	46c0      	nop			@ (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020c4:	480d      	ldr	r0, [pc, #52]	@ (80020fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020c8:	f7ff fff6 	bl	80020b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020cc:	480c      	ldr	r0, [pc, #48]	@ (8002100 <LoopForever+0x6>)
  ldr r1, =_edata
 80020ce:	490d      	ldr	r1, [pc, #52]	@ (8002104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002108 <LoopForever+0xe>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d4:	e002      	b.n	80020dc <LoopCopyDataInit>

080020d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020da:	3304      	adds	r3, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e0:	d3f9      	bcc.n	80020d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e2:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002110 <LoopForever+0x16>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e8:	e001      	b.n	80020ee <LoopFillZerobss>

080020ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ec:	3204      	adds	r2, #4

080020ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f0:	d3fb      	bcc.n	80020ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020f2:	f003 fb39 	bl	8005768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020f6:	f7fe ff9b 	bl	8001030 <main>

080020fa <LoopForever>:

LoopForever:
    b LoopForever
 80020fa:	e7fe      	b.n	80020fa <LoopForever>
  ldr   r0, =_estack
 80020fc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002108:	08006718 	.word	0x08006718
  ldr r2, =_sbss
 800210c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002110:	2000048c 	.word	0x2000048c

08002114 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC1_IRQHandler>
	...

08002118 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800211c:	4b07      	ldr	r3, [pc, #28]	@ (800213c <HAL_Init+0x24>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b06      	ldr	r3, [pc, #24]	@ (800213c <HAL_Init+0x24>)
 8002122:	2110      	movs	r1, #16
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002128:	2003      	movs	r0, #3
 800212a:	f000 f809 	bl	8002140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800212e:	f7ff fdd3 	bl	8001cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			@ (mov r8, r8)
 800213c:	40022000 	.word	0x40022000

08002140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <HAL_InitTick+0x5c>)
 800214a:	681c      	ldr	r4, [r3, #0]
 800214c:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <HAL_InitTick+0x60>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	0019      	movs	r1, r3
 8002152:	23fa      	movs	r3, #250	@ 0xfa
 8002154:	0098      	lsls	r0, r3, #2
 8002156:	f7fd ffe1 	bl	800011c <__udivsi3>
 800215a:	0003      	movs	r3, r0
 800215c:	0019      	movs	r1, r3
 800215e:	0020      	movs	r0, r4
 8002160:	f7fd ffdc 	bl	800011c <__udivsi3>
 8002164:	0003      	movs	r3, r0
 8002166:	0018      	movs	r0, r3
 8002168:	f000 f92f 	bl	80023ca <HAL_SYSTICK_Config>
 800216c:	1e03      	subs	r3, r0, #0
 800216e:	d001      	beq.n	8002174 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e00f      	b.n	8002194 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d80b      	bhi.n	8002192 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	2301      	movs	r3, #1
 800217e:	425b      	negs	r3, r3
 8002180:	2200      	movs	r2, #0
 8002182:	0018      	movs	r0, r3
 8002184:	f000 f8fc 	bl	8002380 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_InitTick+0x64>)
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b003      	add	sp, #12
 800219a:	bd90      	pop	{r4, r7, pc}
 800219c:	20000010 	.word	0x20000010
 80021a0:	20000018 	.word	0x20000018
 80021a4:	20000014 	.word	0x20000014

080021a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_IncTick+0x1c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	001a      	movs	r2, r3
 80021b2:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_IncTick+0x20>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	18d2      	adds	r2, r2, r3
 80021b8:	4b03      	ldr	r3, [pc, #12]	@ (80021c8 <HAL_IncTick+0x20>)
 80021ba:	601a      	str	r2, [r3, #0]
}
 80021bc:	46c0      	nop			@ (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			@ (mov r8, r8)
 80021c4:	20000018 	.word	0x20000018
 80021c8:	2000033c 	.word	0x2000033c

080021cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b02      	ldr	r3, [pc, #8]	@ (80021dc <HAL_GetTick+0x10>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	2000033c 	.word	0x2000033c

080021e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff fff0 	bl	80021cc <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3301      	adds	r3, #1
 80021f8:	d005      	beq.n	8002206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <HAL_Delay+0x44>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	001a      	movs	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	189b      	adds	r3, r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002206:	46c0      	nop			@ (mov r8, r8)
 8002208:	f7ff ffe0 	bl	80021cc <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d8f7      	bhi.n	8002208 <HAL_Delay+0x28>
  {
  }
}
 8002218:	46c0      	nop			@ (mov r8, r8)
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b004      	add	sp, #16
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	20000018 	.word	0x20000018

08002228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	0002      	movs	r2, r0
 8002230:	1dfb      	adds	r3, r7, #7
 8002232:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b7f      	cmp	r3, #127	@ 0x7f
 800223a:	d809      	bhi.n	8002250 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223c:	1dfb      	adds	r3, r7, #7
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	001a      	movs	r2, r3
 8002242:	231f      	movs	r3, #31
 8002244:	401a      	ands	r2, r3
 8002246:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <__NVIC_EnableIRQ+0x30>)
 8002248:	2101      	movs	r1, #1
 800224a:	4091      	lsls	r1, r2
 800224c:	000a      	movs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]
  }
}
 8002250:	46c0      	nop			@ (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}
 8002258:	e000e100 	.word	0xe000e100

0800225c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800225c:	b590      	push	{r4, r7, lr}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	0002      	movs	r2, r0
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800226a:	1dfb      	adds	r3, r7, #7
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002270:	d828      	bhi.n	80022c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002272:	4a2f      	ldr	r2, [pc, #188]	@ (8002330 <__NVIC_SetPriority+0xd4>)
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b25b      	sxtb	r3, r3
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	33c0      	adds	r3, #192	@ 0xc0
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	589b      	ldr	r3, [r3, r2]
 8002282:	1dfa      	adds	r2, r7, #7
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	0011      	movs	r1, r2
 8002288:	2203      	movs	r2, #3
 800228a:	400a      	ands	r2, r1
 800228c:	00d2      	lsls	r2, r2, #3
 800228e:	21ff      	movs	r1, #255	@ 0xff
 8002290:	4091      	lsls	r1, r2
 8002292:	000a      	movs	r2, r1
 8002294:	43d2      	mvns	r2, r2
 8002296:	401a      	ands	r2, r3
 8002298:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	22ff      	movs	r2, #255	@ 0xff
 80022a0:	401a      	ands	r2, r3
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	0018      	movs	r0, r3
 80022a8:	2303      	movs	r3, #3
 80022aa:	4003      	ands	r3, r0
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022b0:	481f      	ldr	r0, [pc, #124]	@ (8002330 <__NVIC_SetPriority+0xd4>)
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	430a      	orrs	r2, r1
 80022bc:	33c0      	adds	r3, #192	@ 0xc0
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022c2:	e031      	b.n	8002328 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002334 <__NVIC_SetPriority+0xd8>)
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	0019      	movs	r1, r3
 80022cc:	230f      	movs	r3, #15
 80022ce:	400b      	ands	r3, r1
 80022d0:	3b08      	subs	r3, #8
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3306      	adds	r3, #6
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	18d3      	adds	r3, r2, r3
 80022da:	3304      	adds	r3, #4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	1dfa      	adds	r2, r7, #7
 80022e0:	7812      	ldrb	r2, [r2, #0]
 80022e2:	0011      	movs	r1, r2
 80022e4:	2203      	movs	r2, #3
 80022e6:	400a      	ands	r2, r1
 80022e8:	00d2      	lsls	r2, r2, #3
 80022ea:	21ff      	movs	r1, #255	@ 0xff
 80022ec:	4091      	lsls	r1, r2
 80022ee:	000a      	movs	r2, r1
 80022f0:	43d2      	mvns	r2, r2
 80022f2:	401a      	ands	r2, r3
 80022f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	019b      	lsls	r3, r3, #6
 80022fa:	22ff      	movs	r2, #255	@ 0xff
 80022fc:	401a      	ands	r2, r3
 80022fe:	1dfb      	adds	r3, r7, #7
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	0018      	movs	r0, r3
 8002304:	2303      	movs	r3, #3
 8002306:	4003      	ands	r3, r0
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800230c:	4809      	ldr	r0, [pc, #36]	@ (8002334 <__NVIC_SetPriority+0xd8>)
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	001c      	movs	r4, r3
 8002314:	230f      	movs	r3, #15
 8002316:	4023      	ands	r3, r4
 8002318:	3b08      	subs	r3, #8
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	430a      	orrs	r2, r1
 800231e:	3306      	adds	r3, #6
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	18c3      	adds	r3, r0, r3
 8002324:	3304      	adds	r3, #4
 8002326:	601a      	str	r2, [r3, #0]
}
 8002328:	46c0      	nop			@ (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b003      	add	sp, #12
 800232e:	bd90      	pop	{r4, r7, pc}
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	1e5a      	subs	r2, r3, #1
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	045b      	lsls	r3, r3, #17
 8002348:	429a      	cmp	r2, r3
 800234a:	d301      	bcc.n	8002350 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234c:	2301      	movs	r3, #1
 800234e:	e010      	b.n	8002372 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002350:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <SysTick_Config+0x44>)
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	3a01      	subs	r2, #1
 8002356:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002358:	2301      	movs	r3, #1
 800235a:	425b      	negs	r3, r3
 800235c:	2103      	movs	r1, #3
 800235e:	0018      	movs	r0, r3
 8002360:	f7ff ff7c 	bl	800225c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	@ (800237c <SysTick_Config+0x44>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	@ (800237c <SysTick_Config+0x44>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	0018      	movs	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	b002      	add	sp, #8
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	210f      	movs	r1, #15
 800238c:	187b      	adds	r3, r7, r1
 800238e:	1c02      	adds	r2, r0, #0
 8002390:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	187b      	adds	r3, r7, r1
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b25b      	sxtb	r3, r3
 800239a:	0011      	movs	r1, r2
 800239c:	0018      	movs	r0, r3
 800239e:	f7ff ff5d 	bl	800225c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	0002      	movs	r2, r0
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	b25b      	sxtb	r3, r3
 80023bc:	0018      	movs	r0, r3
 80023be:	f7ff ff33 	bl	8002228 <__NVIC_EnableIRQ>
}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b002      	add	sp, #8
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f7ff ffaf 	bl	8002338 <SysTick_Config>
 80023da:	0003      	movs	r3, r0
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	b002      	add	sp, #8
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e036      	b.n	8002468 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2221      	movs	r2, #33	@ 0x21
 80023fe:	2102      	movs	r1, #2
 8002400:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a18      	ldr	r2, [pc, #96]	@ (8002470 <HAL_DMA_Init+0x8c>)
 800240e:	4013      	ands	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800241a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f946 	bl	80026dc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2221      	movs	r2, #33	@ 0x21
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	2100      	movs	r1, #0
 8002464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b004      	add	sp, #16
 800246e:	bd80      	pop	{r7, pc}
 8002470:	ffffc00f 	.word	0xffffc00f

08002474 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002482:	2317      	movs	r3, #23
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2220      	movs	r2, #32
 800248e:	5c9b      	ldrb	r3, [r3, r2]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_DMA_Start_IT+0x24>
 8002494:	2302      	movs	r3, #2
 8002496:	e04f      	b.n	8002538 <HAL_DMA_Start_IT+0xc4>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	2101      	movs	r1, #1
 800249e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2221      	movs	r2, #33	@ 0x21
 80024a4:	5c9b      	ldrb	r3, [r3, r2]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d13a      	bne.n	8002522 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2221      	movs	r2, #33	@ 0x21
 80024b0:	2102      	movs	r1, #2
 80024b2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2101      	movs	r1, #1
 80024c6:	438a      	bics	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f8d7 	bl	8002684 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	210e      	movs	r1, #14
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e00f      	b.n	8002510 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	210a      	movs	r1, #10
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2104      	movs	r1, #4
 800250c:	438a      	bics	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2101      	movs	r1, #1
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e007      	b.n	8002532 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2220      	movs	r2, #32
 8002526:	2100      	movs	r1, #0
 8002528:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800252a:	2317      	movs	r3, #23
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2202      	movs	r2, #2
 8002530:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002532:	2317      	movs	r3, #23
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	781b      	ldrb	r3, [r3, #0]
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b006      	add	sp, #24
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	2204      	movs	r2, #4
 800255e:	409a      	lsls	r2, r3
 8002560:	0013      	movs	r3, r2
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4013      	ands	r3, r2
 8002566:	d024      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x72>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2204      	movs	r2, #4
 800256c:	4013      	ands	r3, r2
 800256e:	d020      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2220      	movs	r2, #32
 8002578:	4013      	ands	r3, r2
 800257a:	d107      	bne.n	800258c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2104      	movs	r1, #4
 8002588:	438a      	bics	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002594:	2104      	movs	r1, #4
 8002596:	4091      	lsls	r1, r2
 8002598:	000a      	movs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d100      	bne.n	80025a6 <HAL_DMA_IRQHandler+0x66>
 80025a4:	e06a      	b.n	800267c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	0010      	movs	r0, r2
 80025ae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80025b0:	e064      	b.n	800267c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	2202      	movs	r2, #2
 80025b8:	409a      	lsls	r2, r3
 80025ba:	0013      	movs	r3, r2
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	d02b      	beq.n	800261a <HAL_DMA_IRQHandler+0xda>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2202      	movs	r2, #2
 80025c6:	4013      	ands	r3, r2
 80025c8:	d027      	beq.n	800261a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2220      	movs	r2, #32
 80025d2:	4013      	ands	r3, r2
 80025d4:	d10b      	bne.n	80025ee <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	210a      	movs	r1, #10
 80025e2:	438a      	bics	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2221      	movs	r2, #33	@ 0x21
 80025ea:	2101      	movs	r1, #1
 80025ec:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f6:	2102      	movs	r1, #2
 80025f8:	4091      	lsls	r1, r2
 80025fa:	000a      	movs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	2100      	movs	r1, #0
 8002604:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	2b00      	cmp	r3, #0
 800260c:	d036      	beq.n	800267c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	0010      	movs	r0, r2
 8002616:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002618:	e030      	b.n	800267c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	2208      	movs	r2, #8
 8002620:	409a      	lsls	r2, r3
 8002622:	0013      	movs	r3, r2
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4013      	ands	r3, r2
 8002628:	d028      	beq.n	800267c <HAL_DMA_IRQHandler+0x13c>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2208      	movs	r2, #8
 800262e:	4013      	ands	r3, r2
 8002630:	d024      	beq.n	800267c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	210e      	movs	r1, #14
 800263e:	438a      	bics	r2, r1
 8002640:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264a:	2101      	movs	r1, #1
 800264c:	4091      	lsls	r1, r2
 800264e:	000a      	movs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2221      	movs	r2, #33	@ 0x21
 800265c:	2101      	movs	r1, #1
 800265e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	2100      	movs	r1, #0
 8002666:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	0010      	movs	r0, r2
 8002678:	4798      	blx	r3
    }
  }
}
 800267a:	e7ff      	b.n	800267c <HAL_DMA_IRQHandler+0x13c>
 800267c:	46c0      	nop			@ (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b004      	add	sp, #16
 8002682:	bd80      	pop	{r7, pc}

08002684 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269a:	2101      	movs	r1, #1
 800269c:	4091      	lsls	r1, r2
 800269e:	000a      	movs	r2, r1
 80026a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d108      	bne.n	80026c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026c2:	e007      	b.n	80026d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	60da      	str	r2, [r3, #12]
}
 80026d4:	46c0      	nop			@ (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b004      	add	sp, #16
 80026da:	bd80      	pop	{r7, pc}

080026dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a08      	ldr	r2, [pc, #32]	@ (800270c <DMA_CalcBaseAndBitshift+0x30>)
 80026ea:	4694      	mov	ip, r2
 80026ec:	4463      	add	r3, ip
 80026ee:	2114      	movs	r1, #20
 80026f0:	0018      	movs	r0, r3
 80026f2:	f7fd fd13 	bl	800011c <__udivsi3>
 80026f6:	0003      	movs	r3, r0
 80026f8:	009a      	lsls	r2, r3, #2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a03      	ldr	r2, [pc, #12]	@ (8002710 <DMA_CalcBaseAndBitshift+0x34>)
 8002702:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002704:	46c0      	nop			@ (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}
 800270c:	bffdfff8 	.word	0xbffdfff8
 8002710:	40020000 	.word	0x40020000

08002714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002722:	e14f      	b.n	80029c4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2101      	movs	r1, #1
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4091      	lsls	r1, r2
 800272e:	000a      	movs	r2, r1
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d100      	bne.n	800273c <HAL_GPIO_Init+0x28>
 800273a:	e140      	b.n	80029be <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2203      	movs	r2, #3
 8002742:	4013      	ands	r3, r2
 8002744:	2b01      	cmp	r3, #1
 8002746:	d005      	beq.n	8002754 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2203      	movs	r2, #3
 800274e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002750:	2b02      	cmp	r3, #2
 8002752:	d130      	bne.n	80027b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	409a      	lsls	r2, r3
 8002762:	0013      	movs	r3, r2
 8002764:	43da      	mvns	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	409a      	lsls	r2, r3
 8002776:	0013      	movs	r3, r2
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800278a:	2201      	movs	r2, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	409a      	lsls	r2, r3
 8002790:	0013      	movs	r3, r2
 8002792:	43da      	mvns	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	2201      	movs	r2, #1
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
 80027a8:	0013      	movs	r3, r2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2203      	movs	r2, #3
 80027bc:	4013      	ands	r3, r2
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d017      	beq.n	80027f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2203      	movs	r2, #3
 80027ce:	409a      	lsls	r2, r3
 80027d0:	0013      	movs	r3, r2
 80027d2:	43da      	mvns	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	409a      	lsls	r2, r3
 80027e4:	0013      	movs	r3, r2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2203      	movs	r2, #3
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d123      	bne.n	8002846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	58d3      	ldr	r3, [r2, r3]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2207      	movs	r2, #7
 8002810:	4013      	ands	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	220f      	movs	r2, #15
 8002816:	409a      	lsls	r2, r3
 8002818:	0013      	movs	r3, r2
 800281a:	43da      	mvns	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2107      	movs	r1, #7
 800282a:	400b      	ands	r3, r1
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	409a      	lsls	r2, r3
 8002830:	0013      	movs	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	08da      	lsrs	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3208      	adds	r2, #8
 8002840:	0092      	lsls	r2, r2, #2
 8002842:	6939      	ldr	r1, [r7, #16]
 8002844:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	409a      	lsls	r2, r3
 8002854:	0013      	movs	r3, r2
 8002856:	43da      	mvns	r2, r3
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2203      	movs	r2, #3
 8002864:	401a      	ands	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	409a      	lsls	r2, r3
 800286c:	0013      	movs	r3, r2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	23c0      	movs	r3, #192	@ 0xc0
 8002880:	029b      	lsls	r3, r3, #10
 8002882:	4013      	ands	r3, r2
 8002884:	d100      	bne.n	8002888 <HAL_GPIO_Init+0x174>
 8002886:	e09a      	b.n	80029be <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002888:	4b54      	ldr	r3, [pc, #336]	@ (80029dc <HAL_GPIO_Init+0x2c8>)
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	4b53      	ldr	r3, [pc, #332]	@ (80029dc <HAL_GPIO_Init+0x2c8>)
 800288e:	2101      	movs	r1, #1
 8002890:	430a      	orrs	r2, r1
 8002892:	619a      	str	r2, [r3, #24]
 8002894:	4b51      	ldr	r3, [pc, #324]	@ (80029dc <HAL_GPIO_Init+0x2c8>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2201      	movs	r2, #1
 800289a:	4013      	ands	r3, r2
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028a0:	4a4f      	ldr	r2, [pc, #316]	@ (80029e0 <HAL_GPIO_Init+0x2cc>)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	589b      	ldr	r3, [r3, r2]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2203      	movs	r2, #3
 80028b2:	4013      	ands	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	220f      	movs	r2, #15
 80028b8:	409a      	lsls	r2, r3
 80028ba:	0013      	movs	r3, r2
 80028bc:	43da      	mvns	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	2390      	movs	r3, #144	@ 0x90
 80028c8:	05db      	lsls	r3, r3, #23
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d013      	beq.n	80028f6 <HAL_GPIO_Init+0x1e2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a44      	ldr	r2, [pc, #272]	@ (80029e4 <HAL_GPIO_Init+0x2d0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00d      	beq.n	80028f2 <HAL_GPIO_Init+0x1de>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a43      	ldr	r2, [pc, #268]	@ (80029e8 <HAL_GPIO_Init+0x2d4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <HAL_GPIO_Init+0x1da>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a42      	ldr	r2, [pc, #264]	@ (80029ec <HAL_GPIO_Init+0x2d8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d101      	bne.n	80028ea <HAL_GPIO_Init+0x1d6>
 80028e6:	2303      	movs	r3, #3
 80028e8:	e006      	b.n	80028f8 <HAL_GPIO_Init+0x1e4>
 80028ea:	2305      	movs	r3, #5
 80028ec:	e004      	b.n	80028f8 <HAL_GPIO_Init+0x1e4>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e002      	b.n	80028f8 <HAL_GPIO_Init+0x1e4>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_GPIO_Init+0x1e4>
 80028f6:	2300      	movs	r3, #0
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	2103      	movs	r1, #3
 80028fc:	400a      	ands	r2, r1
 80028fe:	0092      	lsls	r2, r2, #2
 8002900:	4093      	lsls	r3, r2
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002908:	4935      	ldr	r1, [pc, #212]	@ (80029e0 <HAL_GPIO_Init+0x2cc>)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	3302      	adds	r3, #2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002916:	4b36      	ldr	r3, [pc, #216]	@ (80029f0 <HAL_GPIO_Init+0x2dc>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	43da      	mvns	r2, r3
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	035b      	lsls	r3, r3, #13
 800292e:	4013      	ands	r3, r2
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800293a:	4b2d      	ldr	r3, [pc, #180]	@ (80029f0 <HAL_GPIO_Init+0x2dc>)
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002940:	4b2b      	ldr	r3, [pc, #172]	@ (80029f0 <HAL_GPIO_Init+0x2dc>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	43da      	mvns	r2, r3
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	2380      	movs	r3, #128	@ 0x80
 8002956:	039b      	lsls	r3, r3, #14
 8002958:	4013      	ands	r3, r2
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002964:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <HAL_GPIO_Init+0x2dc>)
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800296a:	4b21      	ldr	r3, [pc, #132]	@ (80029f0 <HAL_GPIO_Init+0x2dc>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	43da      	mvns	r2, r3
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	029b      	lsls	r3, r3, #10
 8002982:	4013      	ands	r3, r2
 8002984:	d003      	beq.n	800298e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800298e:	4b18      	ldr	r3, [pc, #96]	@ (80029f0 <HAL_GPIO_Init+0x2dc>)
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002994:	4b16      	ldr	r3, [pc, #88]	@ (80029f0 <HAL_GPIO_Init+0x2dc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	43da      	mvns	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	025b      	lsls	r3, r3, #9
 80029ac:	4013      	ands	r3, r2
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029b8:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_GPIO_Init+0x2dc>)
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3301      	adds	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	40da      	lsrs	r2, r3
 80029cc:	1e13      	subs	r3, r2, #0
 80029ce:	d000      	beq.n	80029d2 <HAL_GPIO_Init+0x2be>
 80029d0:	e6a8      	b.n	8002724 <HAL_GPIO_Init+0x10>
  } 
}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	46c0      	nop			@ (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b006      	add	sp, #24
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40010000 	.word	0x40010000
 80029e4:	48000400 	.word	0x48000400
 80029e8:	48000800 	.word	0x48000800
 80029ec:	48000c00 	.word	0x48000c00
 80029f0:	40010400 	.word	0x40010400

080029f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	000a      	movs	r2, r1
 80029fe:	1cbb      	adds	r3, r7, #2
 8002a00:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	1cba      	adds	r2, r7, #2
 8002a08:	8812      	ldrh	r2, [r2, #0]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002a0e:	230f      	movs	r3, #15
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e003      	b.n	8002a20 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a18:	230f      	movs	r3, #15
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002a20:	230f      	movs	r3, #15
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	781b      	ldrb	r3, [r3, #0]
  }
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b004      	add	sp, #16
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	0008      	movs	r0, r1
 8002a38:	0011      	movs	r1, r2
 8002a3a:	1cbb      	adds	r3, r7, #2
 8002a3c:	1c02      	adds	r2, r0, #0
 8002a3e:	801a      	strh	r2, [r3, #0]
 8002a40:	1c7b      	adds	r3, r7, #1
 8002a42:	1c0a      	adds	r2, r1, #0
 8002a44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a46:	1c7b      	adds	r3, r7, #1
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d004      	beq.n	8002a58 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a4e:	1cbb      	adds	r3, r7, #2
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a56:	e003      	b.n	8002a60 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a58:	1cbb      	adds	r3, r7, #2
 8002a5a:	881a      	ldrh	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a60:	46c0      	nop			@ (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	000a      	movs	r2, r1
 8002a72:	1cbb      	adds	r3, r7, #2
 8002a74:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a7c:	1cbb      	adds	r3, r7, #2
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4013      	ands	r3, r2
 8002a84:	041a      	lsls	r2, r3, #16
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	1cb9      	adds	r1, r7, #2
 8002a8c:	8809      	ldrh	r1, [r1, #0]
 8002a8e:	400b      	ands	r3, r1
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	619a      	str	r2, [r3, #24]
}
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b004      	add	sp, #16
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	1dbb      	adds	r3, r7, #6
 8002aaa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aac:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	1dba      	adds	r2, r7, #6
 8002ab2:	8812      	ldrh	r2, [r2, #0]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d008      	beq.n	8002aca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002aba:	1dba      	adds	r2, r7, #6
 8002abc:	8812      	ldrh	r2, [r2, #0]
 8002abe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ac0:	1dbb      	adds	r3, r7, #6
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7fe feb9 	bl	800183c <HAL_GPIO_EXTI_Callback>
  }
}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b002      	add	sp, #8
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	40010400 	.word	0x40010400

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e301      	b.n	80030ee <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2201      	movs	r2, #1
 8002af0:	4013      	ands	r3, r2
 8002af2:	d100      	bne.n	8002af6 <HAL_RCC_OscConfig+0x1e>
 8002af4:	e08d      	b.n	8002c12 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002af6:	4bc3      	ldr	r3, [pc, #780]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	220c      	movs	r2, #12
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d00e      	beq.n	8002b20 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b02:	4bc0      	ldr	r3, [pc, #768]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	220c      	movs	r2, #12
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d116      	bne.n	8002b3c <HAL_RCC_OscConfig+0x64>
 8002b0e:	4bbd      	ldr	r3, [pc, #756]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	025b      	lsls	r3, r3, #9
 8002b16:	401a      	ands	r2, r3
 8002b18:	2380      	movs	r3, #128	@ 0x80
 8002b1a:	025b      	lsls	r3, r3, #9
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d10d      	bne.n	8002b3c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	4bb8      	ldr	r3, [pc, #736]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2380      	movs	r3, #128	@ 0x80
 8002b26:	029b      	lsls	r3, r3, #10
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d100      	bne.n	8002b2e <HAL_RCC_OscConfig+0x56>
 8002b2c:	e070      	b.n	8002c10 <HAL_RCC_OscConfig+0x138>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d000      	beq.n	8002b38 <HAL_RCC_OscConfig+0x60>
 8002b36:	e06b      	b.n	8002c10 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e2d8      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d107      	bne.n	8002b54 <HAL_RCC_OscConfig+0x7c>
 8002b44:	4baf      	ldr	r3, [pc, #700]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4bae      	ldr	r3, [pc, #696]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b4a:	2180      	movs	r1, #128	@ 0x80
 8002b4c:	0249      	lsls	r1, r1, #9
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e02f      	b.n	8002bb4 <HAL_RCC_OscConfig+0xdc>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10c      	bne.n	8002b76 <HAL_RCC_OscConfig+0x9e>
 8002b5c:	4ba9      	ldr	r3, [pc, #676]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4ba8      	ldr	r3, [pc, #672]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b62:	49a9      	ldr	r1, [pc, #676]	@ (8002e08 <HAL_RCC_OscConfig+0x330>)
 8002b64:	400a      	ands	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	4ba6      	ldr	r3, [pc, #664]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4ba5      	ldr	r3, [pc, #660]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b6e:	49a7      	ldr	r1, [pc, #668]	@ (8002e0c <HAL_RCC_OscConfig+0x334>)
 8002b70:	400a      	ands	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e01e      	b.n	8002bb4 <HAL_RCC_OscConfig+0xdc>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d10e      	bne.n	8002b9c <HAL_RCC_OscConfig+0xc4>
 8002b7e:	4ba1      	ldr	r3, [pc, #644]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4ba0      	ldr	r3, [pc, #640]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b84:	2180      	movs	r1, #128	@ 0x80
 8002b86:	02c9      	lsls	r1, r1, #11
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	4b9d      	ldr	r3, [pc, #628]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b9c      	ldr	r3, [pc, #624]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b92:	2180      	movs	r1, #128	@ 0x80
 8002b94:	0249      	lsls	r1, r1, #9
 8002b96:	430a      	orrs	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_OscConfig+0xdc>
 8002b9c:	4b99      	ldr	r3, [pc, #612]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b98      	ldr	r3, [pc, #608]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002ba2:	4999      	ldr	r1, [pc, #612]	@ (8002e08 <HAL_RCC_OscConfig+0x330>)
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	4b96      	ldr	r3, [pc, #600]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b95      	ldr	r3, [pc, #596]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002bae:	4997      	ldr	r1, [pc, #604]	@ (8002e0c <HAL_RCC_OscConfig+0x334>)
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d014      	beq.n	8002be6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7ff fb06 	bl	80021cc <HAL_GetTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc6:	f7ff fb01 	bl	80021cc <HAL_GetTick>
 8002bca:	0002      	movs	r2, r0
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b64      	cmp	r3, #100	@ 0x64
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e28a      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd8:	4b8a      	ldr	r3, [pc, #552]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	029b      	lsls	r3, r3, #10
 8002be0:	4013      	ands	r3, r2
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0xee>
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7ff faf1 	bl	80021cc <HAL_GetTick>
 8002bea:	0003      	movs	r3, r0
 8002bec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7ff faec 	bl	80021cc <HAL_GetTick>
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	@ 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e275      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c02:	4b80      	ldr	r3, [pc, #512]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	029b      	lsls	r3, r3, #10
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x118>
 8002c0e:	e000      	b.n	8002c12 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c10:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2202      	movs	r2, #2
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d100      	bne.n	8002c1e <HAL_RCC_OscConfig+0x146>
 8002c1c:	e069      	b.n	8002cf2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c1e:	4b79      	ldr	r3, [pc, #484]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	220c      	movs	r2, #12
 8002c24:	4013      	ands	r3, r2
 8002c26:	d00b      	beq.n	8002c40 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c28:	4b76      	ldr	r3, [pc, #472]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	220c      	movs	r2, #12
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d11c      	bne.n	8002c6e <HAL_RCC_OscConfig+0x196>
 8002c34:	4b73      	ldr	r3, [pc, #460]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	025b      	lsls	r3, r3, #9
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d116      	bne.n	8002c6e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c40:	4b70      	ldr	r3, [pc, #448]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2202      	movs	r2, #2
 8002c46:	4013      	ands	r3, r2
 8002c48:	d005      	beq.n	8002c56 <HAL_RCC_OscConfig+0x17e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d001      	beq.n	8002c56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e24b      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c56:	4b6b      	ldr	r3, [pc, #428]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	22f8      	movs	r2, #248	@ 0xf8
 8002c5c:	4393      	bics	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	00da      	lsls	r2, r3, #3
 8002c66:	4b67      	ldr	r3, [pc, #412]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6c:	e041      	b.n	8002cf2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d024      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c76:	4b63      	ldr	r3, [pc, #396]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b62      	ldr	r3, [pc, #392]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7ff faa3 	bl	80021cc <HAL_GetTick>
 8002c86:	0003      	movs	r3, r0
 8002c88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c8c:	f7ff fa9e 	bl	80021cc <HAL_GetTick>
 8002c90:	0002      	movs	r2, r0
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e227      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9e:	4b59      	ldr	r3, [pc, #356]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d0f1      	beq.n	8002c8c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b56      	ldr	r3, [pc, #344]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	22f8      	movs	r2, #248	@ 0xf8
 8002cae:	4393      	bics	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00da      	lsls	r2, r3, #3
 8002cb8:	4b52      	ldr	r3, [pc, #328]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e018      	b.n	8002cf2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc0:	4b50      	ldr	r3, [pc, #320]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	438a      	bics	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7ff fa7e 	bl	80021cc <HAL_GetTick>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd6:	f7ff fa79 	bl	80021cc <HAL_GetTick>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e202      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce8:	4b46      	ldr	r3, [pc, #280]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2202      	movs	r2, #2
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d1f1      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2208      	movs	r2, #8
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d036      	beq.n	8002d6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d019      	beq.n	8002d38 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d04:	4b3f      	ldr	r3, [pc, #252]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002d06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d08:	4b3e      	ldr	r3, [pc, #248]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d10:	f7ff fa5c 	bl	80021cc <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d1a:	f7ff fa57 	bl	80021cc <HAL_GetTick>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e1e0      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2c:	4b35      	ldr	r3, [pc, #212]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	2202      	movs	r2, #2
 8002d32:	4013      	ands	r3, r2
 8002d34:	d0f1      	beq.n	8002d1a <HAL_RCC_OscConfig+0x242>
 8002d36:	e018      	b.n	8002d6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d38:	4b32      	ldr	r3, [pc, #200]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002d3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d3c:	4b31      	ldr	r3, [pc, #196]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002d3e:	2101      	movs	r1, #1
 8002d40:	438a      	bics	r2, r1
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d44:	f7ff fa42 	bl	80021cc <HAL_GetTick>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4e:	f7ff fa3d 	bl	80021cc <HAL_GetTick>
 8002d52:	0002      	movs	r2, r0
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e1c6      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	4b28      	ldr	r3, [pc, #160]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	2202      	movs	r2, #2
 8002d66:	4013      	ands	r3, r2
 8002d68:	d1f1      	bne.n	8002d4e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	4013      	ands	r3, r2
 8002d72:	d100      	bne.n	8002d76 <HAL_RCC_OscConfig+0x29e>
 8002d74:	e0b4      	b.n	8002ee0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d76:	201f      	movs	r0, #31
 8002d78:	183b      	adds	r3, r7, r0
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7e:	4b21      	ldr	r3, [pc, #132]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	2380      	movs	r3, #128	@ 0x80
 8002d84:	055b      	lsls	r3, r3, #21
 8002d86:	4013      	ands	r3, r2
 8002d88:	d110      	bne.n	8002dac <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002d90:	2180      	movs	r1, #128	@ 0x80
 8002d92:	0549      	lsls	r1, r1, #21
 8002d94:	430a      	orrs	r2, r1
 8002d96:	61da      	str	r2, [r3, #28]
 8002d98:	4b1a      	ldr	r3, [pc, #104]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	055b      	lsls	r3, r3, #21
 8002da0:	4013      	ands	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002da6:	183b      	adds	r3, r7, r0
 8002da8:	2201      	movs	r2, #1
 8002daa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	4b18      	ldr	r3, [pc, #96]	@ (8002e10 <HAL_RCC_OscConfig+0x338>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	d11a      	bne.n	8002dee <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db8:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <HAL_RCC_OscConfig+0x338>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <HAL_RCC_OscConfig+0x338>)
 8002dbe:	2180      	movs	r1, #128	@ 0x80
 8002dc0:	0049      	lsls	r1, r1, #1
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc6:	f7ff fa01 	bl	80021cc <HAL_GetTick>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd0:	f7ff f9fc 	bl	80021cc <HAL_GetTick>
 8002dd4:	0002      	movs	r2, r0
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	@ 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e185      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_RCC_OscConfig+0x338>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	2380      	movs	r3, #128	@ 0x80
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4013      	ands	r3, r2
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10e      	bne.n	8002e14 <HAL_RCC_OscConfig+0x33c>
 8002df6:	4b03      	ldr	r3, [pc, #12]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002df8:	6a1a      	ldr	r2, [r3, #32]
 8002dfa:	4b02      	ldr	r3, [pc, #8]	@ (8002e04 <HAL_RCC_OscConfig+0x32c>)
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	621a      	str	r2, [r3, #32]
 8002e02:	e035      	b.n	8002e70 <HAL_RCC_OscConfig+0x398>
 8002e04:	40021000 	.word	0x40021000
 8002e08:	fffeffff 	.word	0xfffeffff
 8002e0c:	fffbffff 	.word	0xfffbffff
 8002e10:	40007000 	.word	0x40007000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10c      	bne.n	8002e36 <HAL_RCC_OscConfig+0x35e>
 8002e1c:	4bb6      	ldr	r3, [pc, #728]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002e1e:	6a1a      	ldr	r2, [r3, #32]
 8002e20:	4bb5      	ldr	r3, [pc, #724]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002e22:	2101      	movs	r1, #1
 8002e24:	438a      	bics	r2, r1
 8002e26:	621a      	str	r2, [r3, #32]
 8002e28:	4bb3      	ldr	r3, [pc, #716]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	4bb2      	ldr	r3, [pc, #712]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002e2e:	2104      	movs	r1, #4
 8002e30:	438a      	bics	r2, r1
 8002e32:	621a      	str	r2, [r3, #32]
 8002e34:	e01c      	b.n	8002e70 <HAL_RCC_OscConfig+0x398>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x380>
 8002e3e:	4bae      	ldr	r3, [pc, #696]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002e40:	6a1a      	ldr	r2, [r3, #32]
 8002e42:	4bad      	ldr	r3, [pc, #692]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002e44:	2104      	movs	r1, #4
 8002e46:	430a      	orrs	r2, r1
 8002e48:	621a      	str	r2, [r3, #32]
 8002e4a:	4bab      	ldr	r3, [pc, #684]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002e4c:	6a1a      	ldr	r2, [r3, #32]
 8002e4e:	4baa      	ldr	r3, [pc, #680]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002e50:	2101      	movs	r1, #1
 8002e52:	430a      	orrs	r2, r1
 8002e54:	621a      	str	r2, [r3, #32]
 8002e56:	e00b      	b.n	8002e70 <HAL_RCC_OscConfig+0x398>
 8002e58:	4ba7      	ldr	r3, [pc, #668]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	4ba6      	ldr	r3, [pc, #664]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002e5e:	2101      	movs	r1, #1
 8002e60:	438a      	bics	r2, r1
 8002e62:	621a      	str	r2, [r3, #32]
 8002e64:	4ba4      	ldr	r3, [pc, #656]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002e66:	6a1a      	ldr	r2, [r3, #32]
 8002e68:	4ba3      	ldr	r3, [pc, #652]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d014      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e78:	f7ff f9a8 	bl	80021cc <HAL_GetTick>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e80:	e009      	b.n	8002e96 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e82:	f7ff f9a3 	bl	80021cc <HAL_GetTick>
 8002e86:	0002      	movs	r2, r0
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	4a9b      	ldr	r2, [pc, #620]	@ (80030fc <HAL_RCC_OscConfig+0x624>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e12b      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	4b98      	ldr	r3, [pc, #608]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x3aa>
 8002ea0:	e013      	b.n	8002eca <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea2:	f7ff f993 	bl	80021cc <HAL_GetTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eaa:	e009      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eac:	f7ff f98e 	bl	80021cc <HAL_GetTick>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	4a91      	ldr	r2, [pc, #580]	@ (80030fc <HAL_RCC_OscConfig+0x624>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e116      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec0:	4b8d      	ldr	r3, [pc, #564]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eca:	231f      	movs	r3, #31
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed4:	4b88      	ldr	r3, [pc, #544]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	4b87      	ldr	r3, [pc, #540]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002eda:	4989      	ldr	r1, [pc, #548]	@ (8003100 <HAL_RCC_OscConfig+0x628>)
 8002edc:	400a      	ands	r2, r1
 8002ede:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d063      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d12a      	bne.n	8002f48 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ef2:	4b81      	ldr	r3, [pc, #516]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ef6:	4b80      	ldr	r3, [pc, #512]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002ef8:	2104      	movs	r1, #4
 8002efa:	430a      	orrs	r2, r1
 8002efc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002efe:	4b7e      	ldr	r3, [pc, #504]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f02:	4b7d      	ldr	r3, [pc, #500]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002f04:	2101      	movs	r1, #1
 8002f06:	430a      	orrs	r2, r1
 8002f08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0a:	f7ff f95f 	bl	80021cc <HAL_GetTick>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f14:	f7ff f95a 	bl	80021cc <HAL_GetTick>
 8002f18:	0002      	movs	r2, r0
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0e3      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f26:	4b74      	ldr	r3, [pc, #464]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d0f1      	beq.n	8002f14 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f30:	4b71      	ldr	r3, [pc, #452]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f34:	22f8      	movs	r2, #248	@ 0xf8
 8002f36:	4393      	bics	r3, r2
 8002f38:	0019      	movs	r1, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	00da      	lsls	r2, r3, #3
 8002f40:	4b6d      	ldr	r3, [pc, #436]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002f42:	430a      	orrs	r2, r1
 8002f44:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f46:	e034      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	3305      	adds	r3, #5
 8002f4e:	d111      	bne.n	8002f74 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002f50:	4b69      	ldr	r3, [pc, #420]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002f52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f54:	4b68      	ldr	r3, [pc, #416]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002f56:	2104      	movs	r1, #4
 8002f58:	438a      	bics	r2, r1
 8002f5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f5c:	4b66      	ldr	r3, [pc, #408]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f60:	22f8      	movs	r2, #248	@ 0xf8
 8002f62:	4393      	bics	r3, r2
 8002f64:	0019      	movs	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	00da      	lsls	r2, r3, #3
 8002f6c:	4b62      	ldr	r3, [pc, #392]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f72:	e01e      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f74:	4b60      	ldr	r3, [pc, #384]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f78:	4b5f      	ldr	r3, [pc, #380]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002f80:	4b5d      	ldr	r3, [pc, #372]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f84:	4b5c      	ldr	r3, [pc, #368]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002f86:	2101      	movs	r1, #1
 8002f88:	438a      	bics	r2, r1
 8002f8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8c:	f7ff f91e 	bl	80021cc <HAL_GetTick>
 8002f90:	0003      	movs	r3, r0
 8002f92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f96:	f7ff f919 	bl	80021cc <HAL_GetTick>
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e0a2      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002fa8:	4b53      	ldr	r3, [pc, #332]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fac:	2202      	movs	r2, #2
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d1f1      	bne.n	8002f96 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d100      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4e4>
 8002fba:	e097      	b.n	80030ec <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fbc:	4b4e      	ldr	r3, [pc, #312]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	220c      	movs	r2, #12
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d100      	bne.n	8002fca <HAL_RCC_OscConfig+0x4f2>
 8002fc8:	e06b      	b.n	80030a2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d14c      	bne.n	800306c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd2:	4b49      	ldr	r3, [pc, #292]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4b48      	ldr	r3, [pc, #288]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002fd8:	494a      	ldr	r1, [pc, #296]	@ (8003104 <HAL_RCC_OscConfig+0x62c>)
 8002fda:	400a      	ands	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7ff f8f5 	bl	80021cc <HAL_GetTick>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe8:	f7ff f8f0 	bl	80021cc <HAL_GetTick>
 8002fec:	0002      	movs	r2, r0
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e079      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffa:	4b3f      	ldr	r3, [pc, #252]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	049b      	lsls	r3, r3, #18
 8003002:	4013      	ands	r3, r2
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003006:	4b3c      	ldr	r3, [pc, #240]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8003008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300a:	220f      	movs	r2, #15
 800300c:	4393      	bics	r3, r2
 800300e:	0019      	movs	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003014:	4b38      	ldr	r3, [pc, #224]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8003016:	430a      	orrs	r2, r1
 8003018:	62da      	str	r2, [r3, #44]	@ 0x2c
 800301a:	4b37      	ldr	r3, [pc, #220]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a3a      	ldr	r2, [pc, #232]	@ (8003108 <HAL_RCC_OscConfig+0x630>)
 8003020:	4013      	ands	r3, r2
 8003022:	0019      	movs	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	431a      	orrs	r2, r3
 800302e:	4b32      	ldr	r3, [pc, #200]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8003030:	430a      	orrs	r2, r1
 8003032:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003034:	4b30      	ldr	r3, [pc, #192]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b2f      	ldr	r3, [pc, #188]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 800303a:	2180      	movs	r1, #128	@ 0x80
 800303c:	0449      	lsls	r1, r1, #17
 800303e:	430a      	orrs	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7ff f8c3 	bl	80021cc <HAL_GetTick>
 8003046:	0003      	movs	r3, r0
 8003048:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304c:	f7ff f8be 	bl	80021cc <HAL_GetTick>
 8003050:	0002      	movs	r2, r0
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e047      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800305e:	4b26      	ldr	r3, [pc, #152]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	049b      	lsls	r3, r3, #18
 8003066:	4013      	ands	r3, r2
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x574>
 800306a:	e03f      	b.n	80030ec <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306c:	4b22      	ldr	r3, [pc, #136]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b21      	ldr	r3, [pc, #132]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8003072:	4924      	ldr	r1, [pc, #144]	@ (8003104 <HAL_RCC_OscConfig+0x62c>)
 8003074:	400a      	ands	r2, r1
 8003076:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7ff f8a8 	bl	80021cc <HAL_GetTick>
 800307c:	0003      	movs	r3, r0
 800307e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003082:	f7ff f8a3 	bl	80021cc <HAL_GetTick>
 8003086:	0002      	movs	r2, r0
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e02c      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003094:	4b18      	ldr	r3, [pc, #96]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	@ 0x80
 800309a:	049b      	lsls	r3, r3, #18
 800309c:	4013      	ands	r3, r2
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x5aa>
 80030a0:	e024      	b.n	80030ec <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e01f      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80030ae:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80030b4:	4b10      	ldr	r3, [pc, #64]	@ (80030f8 <HAL_RCC_OscConfig+0x620>)
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	025b      	lsls	r3, r3, #9
 80030c0:	401a      	ands	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d10e      	bne.n	80030e8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	220f      	movs	r2, #15
 80030ce:	401a      	ands	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d107      	bne.n	80030e8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	23f0      	movs	r3, #240	@ 0xf0
 80030dc:	039b      	lsls	r3, r3, #14
 80030de:	401a      	ands	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b008      	add	sp, #32
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	40021000 	.word	0x40021000
 80030fc:	00001388 	.word	0x00001388
 8003100:	efffffff 	.word	0xefffffff
 8003104:	feffffff 	.word	0xfeffffff
 8003108:	ffc2ffff 	.word	0xffc2ffff

0800310c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0b3      	b.n	8003288 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b5b      	ldr	r3, [pc, #364]	@ (8003290 <HAL_RCC_ClockConfig+0x184>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2201      	movs	r2, #1
 8003126:	4013      	ands	r3, r2
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d911      	bls.n	8003152 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b58      	ldr	r3, [pc, #352]	@ (8003290 <HAL_RCC_ClockConfig+0x184>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2201      	movs	r2, #1
 8003134:	4393      	bics	r3, r2
 8003136:	0019      	movs	r1, r3
 8003138:	4b55      	ldr	r3, [pc, #340]	@ (8003290 <HAL_RCC_ClockConfig+0x184>)
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003140:	4b53      	ldr	r3, [pc, #332]	@ (8003290 <HAL_RCC_ClockConfig+0x184>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2201      	movs	r2, #1
 8003146:	4013      	ands	r3, r2
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d001      	beq.n	8003152 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e09a      	b.n	8003288 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	d015      	beq.n	8003188 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2204      	movs	r2, #4
 8003162:	4013      	ands	r3, r2
 8003164:	d006      	beq.n	8003174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003166:	4b4b      	ldr	r3, [pc, #300]	@ (8003294 <HAL_RCC_ClockConfig+0x188>)
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4b4a      	ldr	r3, [pc, #296]	@ (8003294 <HAL_RCC_ClockConfig+0x188>)
 800316c:	21e0      	movs	r1, #224	@ 0xe0
 800316e:	00c9      	lsls	r1, r1, #3
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003174:	4b47      	ldr	r3, [pc, #284]	@ (8003294 <HAL_RCC_ClockConfig+0x188>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	22f0      	movs	r2, #240	@ 0xf0
 800317a:	4393      	bics	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	4b44      	ldr	r3, [pc, #272]	@ (8003294 <HAL_RCC_ClockConfig+0x188>)
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2201      	movs	r2, #1
 800318e:	4013      	ands	r3, r2
 8003190:	d040      	beq.n	8003214 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d107      	bne.n	80031aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	4b3e      	ldr	r3, [pc, #248]	@ (8003294 <HAL_RCC_ClockConfig+0x188>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	2380      	movs	r3, #128	@ 0x80
 80031a0:	029b      	lsls	r3, r3, #10
 80031a2:	4013      	ands	r3, r2
 80031a4:	d114      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e06e      	b.n	8003288 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	4b38      	ldr	r3, [pc, #224]	@ (8003294 <HAL_RCC_ClockConfig+0x188>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	2380      	movs	r3, #128	@ 0x80
 80031b8:	049b      	lsls	r3, r3, #18
 80031ba:	4013      	ands	r3, r2
 80031bc:	d108      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e062      	b.n	8003288 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c2:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <HAL_RCC_ClockConfig+0x188>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2202      	movs	r2, #2
 80031c8:	4013      	ands	r3, r2
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e05b      	b.n	8003288 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d0:	4b30      	ldr	r3, [pc, #192]	@ (8003294 <HAL_RCC_ClockConfig+0x188>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2203      	movs	r2, #3
 80031d6:	4393      	bics	r3, r2
 80031d8:	0019      	movs	r1, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	4b2d      	ldr	r3, [pc, #180]	@ (8003294 <HAL_RCC_ClockConfig+0x188>)
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e4:	f7fe fff2 	bl	80021cc <HAL_GetTick>
 80031e8:	0003      	movs	r3, r0
 80031ea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ec:	e009      	b.n	8003202 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ee:	f7fe ffed 	bl	80021cc <HAL_GetTick>
 80031f2:	0002      	movs	r2, r0
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	4a27      	ldr	r2, [pc, #156]	@ (8003298 <HAL_RCC_ClockConfig+0x18c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e042      	b.n	8003288 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	4b24      	ldr	r3, [pc, #144]	@ (8003294 <HAL_RCC_ClockConfig+0x188>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	220c      	movs	r2, #12
 8003208:	401a      	ands	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	429a      	cmp	r2, r3
 8003212:	d1ec      	bne.n	80031ee <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003214:	4b1e      	ldr	r3, [pc, #120]	@ (8003290 <HAL_RCC_ClockConfig+0x184>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	4013      	ands	r3, r2
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d211      	bcs.n	8003246 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_RCC_ClockConfig+0x184>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2201      	movs	r2, #1
 8003228:	4393      	bics	r3, r2
 800322a:	0019      	movs	r1, r3
 800322c:	4b18      	ldr	r3, [pc, #96]	@ (8003290 <HAL_RCC_ClockConfig+0x184>)
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003234:	4b16      	ldr	r3, [pc, #88]	@ (8003290 <HAL_RCC_ClockConfig+0x184>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2201      	movs	r2, #1
 800323a:	4013      	ands	r3, r2
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e020      	b.n	8003288 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2204      	movs	r2, #4
 800324c:	4013      	ands	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003250:	4b10      	ldr	r3, [pc, #64]	@ (8003294 <HAL_RCC_ClockConfig+0x188>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a11      	ldr	r2, [pc, #68]	@ (800329c <HAL_RCC_ClockConfig+0x190>)
 8003256:	4013      	ands	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	4b0d      	ldr	r3, [pc, #52]	@ (8003294 <HAL_RCC_ClockConfig+0x188>)
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003264:	f000 f820 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8003268:	0001      	movs	r1, r0
 800326a:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <HAL_RCC_ClockConfig+0x188>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	220f      	movs	r2, #15
 8003272:	4013      	ands	r3, r2
 8003274:	4a0a      	ldr	r2, [pc, #40]	@ (80032a0 <HAL_RCC_ClockConfig+0x194>)
 8003276:	5cd3      	ldrb	r3, [r2, r3]
 8003278:	000a      	movs	r2, r1
 800327a:	40da      	lsrs	r2, r3
 800327c:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <HAL_RCC_ClockConfig+0x198>)
 800327e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003280:	2003      	movs	r0, #3
 8003282:	f7fe ff5d 	bl	8002140 <HAL_InitTick>
  
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	0018      	movs	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	b004      	add	sp, #16
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40022000 	.word	0x40022000
 8003294:	40021000 	.word	0x40021000
 8003298:	00001388 	.word	0x00001388
 800329c:	fffff8ff 	.word	0xfffff8ff
 80032a0:	080064f8 	.word	0x080064f8
 80032a4:	20000010 	.word	0x20000010

080032a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80032c2:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	220c      	movs	r2, #12
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d002      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x30>
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d003      	beq.n	80032de <HAL_RCC_GetSysClockFreq+0x36>
 80032d6:	e02c      	b.n	8003332 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003348 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032da:	613b      	str	r3, [r7, #16]
      break;
 80032dc:	e02c      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	0c9b      	lsrs	r3, r3, #18
 80032e2:	220f      	movs	r2, #15
 80032e4:	4013      	ands	r3, r2
 80032e6:	4a19      	ldr	r2, [pc, #100]	@ (800334c <HAL_RCC_GetSysClockFreq+0xa4>)
 80032e8:	5cd3      	ldrb	r3, [r2, r3]
 80032ea:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80032ec:	4b15      	ldr	r3, [pc, #84]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	220f      	movs	r2, #15
 80032f2:	4013      	ands	r3, r2
 80032f4:	4a16      	ldr	r2, [pc, #88]	@ (8003350 <HAL_RCC_GetSysClockFreq+0xa8>)
 80032f6:	5cd3      	ldrb	r3, [r2, r3]
 80032f8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	2380      	movs	r3, #128	@ 0x80
 80032fe:	025b      	lsls	r3, r3, #9
 8003300:	4013      	ands	r3, r2
 8003302:	d009      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	4810      	ldr	r0, [pc, #64]	@ (8003348 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003308:	f7fc ff08 	bl	800011c <__udivsi3>
 800330c:	0003      	movs	r3, r0
 800330e:	001a      	movs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4353      	muls	r3, r2
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e009      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	000a      	movs	r2, r1
 800331c:	0152      	lsls	r2, r2, #5
 800331e:	1a52      	subs	r2, r2, r1
 8003320:	0193      	lsls	r3, r2, #6
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	185b      	adds	r3, r3, r1
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	613b      	str	r3, [r7, #16]
      break;
 8003330:	e002      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003332:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003334:	613b      	str	r3, [r7, #16]
      break;
 8003336:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003338:	693b      	ldr	r3, [r7, #16]
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b006      	add	sp, #24
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	40021000 	.word	0x40021000
 8003348:	007a1200 	.word	0x007a1200
 800334c:	08006510 	.word	0x08006510
 8003350:	08006520 	.word	0x08006520

08003354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b02      	ldr	r3, [pc, #8]	@ (8003364 <HAL_RCC_GetHCLKFreq+0x10>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	20000010 	.word	0x20000010

08003368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800336c:	f7ff fff2 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003370:	0001      	movs	r1, r0
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	2207      	movs	r2, #7
 800337a:	4013      	ands	r3, r2
 800337c:	4a04      	ldr	r2, [pc, #16]	@ (8003390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	40d9      	lsrs	r1, r3
 8003382:	000b      	movs	r3, r1
}    
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	40021000 	.word	0x40021000
 8003390:	08006508 	.word	0x08006508

08003394 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	025b      	lsls	r3, r3, #9
 80033ac:	4013      	ands	r3, r2
 80033ae:	d100      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80033b0:	e08e      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80033b2:	2017      	movs	r0, #23
 80033b4:	183b      	adds	r3, r7, r0
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ba:	4b57      	ldr	r3, [pc, #348]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033bc:	69da      	ldr	r2, [r3, #28]
 80033be:	2380      	movs	r3, #128	@ 0x80
 80033c0:	055b      	lsls	r3, r3, #21
 80033c2:	4013      	ands	r3, r2
 80033c4:	d110      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	4b54      	ldr	r3, [pc, #336]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	4b53      	ldr	r3, [pc, #332]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033cc:	2180      	movs	r1, #128	@ 0x80
 80033ce:	0549      	lsls	r1, r1, #21
 80033d0:	430a      	orrs	r2, r1
 80033d2:	61da      	str	r2, [r3, #28]
 80033d4:	4b50      	ldr	r3, [pc, #320]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	2380      	movs	r3, #128	@ 0x80
 80033da:	055b      	lsls	r3, r3, #21
 80033dc:	4013      	ands	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e2:	183b      	adds	r3, r7, r0
 80033e4:	2201      	movs	r2, #1
 80033e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	4b4c      	ldr	r3, [pc, #304]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	d11a      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f4:	4b49      	ldr	r3, [pc, #292]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b48      	ldr	r3, [pc, #288]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033fa:	2180      	movs	r1, #128	@ 0x80
 80033fc:	0049      	lsls	r1, r1, #1
 80033fe:	430a      	orrs	r2, r1
 8003400:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003402:	f7fe fee3 	bl	80021cc <HAL_GetTick>
 8003406:	0003      	movs	r3, r0
 8003408:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	e008      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340c:	f7fe fede 	bl	80021cc <HAL_GetTick>
 8003410:	0002      	movs	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	@ 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e077      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	4b3f      	ldr	r3, [pc, #252]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	2380      	movs	r3, #128	@ 0x80
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4013      	ands	r3, r2
 8003428:	d0f0      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800342a:	4b3b      	ldr	r3, [pc, #236]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800342c:	6a1a      	ldr	r2, [r3, #32]
 800342e:	23c0      	movs	r3, #192	@ 0xc0
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4013      	ands	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d034      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	23c0      	movs	r3, #192	@ 0xc0
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4013      	ands	r3, r2
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	429a      	cmp	r2, r3
 800344a:	d02c      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800344c:	4b32      	ldr	r3, [pc, #200]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4a33      	ldr	r2, [pc, #204]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003452:	4013      	ands	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003456:	4b30      	ldr	r3, [pc, #192]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003458:	6a1a      	ldr	r2, [r3, #32]
 800345a:	4b2f      	ldr	r3, [pc, #188]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800345c:	2180      	movs	r1, #128	@ 0x80
 800345e:	0249      	lsls	r1, r1, #9
 8003460:	430a      	orrs	r2, r1
 8003462:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003464:	4b2c      	ldr	r3, [pc, #176]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003466:	6a1a      	ldr	r2, [r3, #32]
 8003468:	4b2b      	ldr	r3, [pc, #172]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800346a:	492e      	ldr	r1, [pc, #184]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800346c:	400a      	ands	r2, r1
 800346e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003470:	4b29      	ldr	r3, [pc, #164]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	4013      	ands	r3, r2
 800347c:	d013      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347e:	f7fe fea5 	bl	80021cc <HAL_GetTick>
 8003482:	0003      	movs	r3, r0
 8003484:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003486:	e009      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003488:	f7fe fea0 	bl	80021cc <HAL_GetTick>
 800348c:	0002      	movs	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	4a25      	ldr	r2, [pc, #148]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e038      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	4b1e      	ldr	r3, [pc, #120]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	2202      	movs	r2, #2
 80034a2:	4013      	ands	r3, r2
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4b18      	ldr	r3, [pc, #96]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034b6:	430a      	orrs	r2, r1
 80034b8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034ba:	2317      	movs	r3, #23
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b14      	ldr	r3, [pc, #80]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034c6:	69da      	ldr	r2, [r3, #28]
 80034c8:	4b13      	ldr	r3, [pc, #76]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034ca:	4918      	ldr	r1, [pc, #96]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80034cc:	400a      	ands	r2, r1
 80034ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2201      	movs	r2, #1
 80034d6:	4013      	ands	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034da:	4b0f      	ldr	r3, [pc, #60]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	2203      	movs	r2, #3
 80034e0:	4393      	bics	r3, r2
 80034e2:	0019      	movs	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034ea:	430a      	orrs	r2, r1
 80034ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2220      	movs	r2, #32
 80034f4:	4013      	ands	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034f8:	4b07      	ldr	r3, [pc, #28]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fc:	2210      	movs	r2, #16
 80034fe:	4393      	bics	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	4b04      	ldr	r3, [pc, #16]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003508:	430a      	orrs	r2, r1
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b006      	add	sp, #24
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			@ (mov r8, r8)
 8003518:	40021000 	.word	0x40021000
 800351c:	40007000 	.word	0x40007000
 8003520:	fffffcff 	.word	0xfffffcff
 8003524:	fffeffff 	.word	0xfffeffff
 8003528:	00001388 	.word	0x00001388
 800352c:	efffffff 	.word	0xefffffff

08003530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e042      	b.n	80035c8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	223d      	movs	r2, #61	@ 0x3d
 8003546:	5c9b      	ldrb	r3, [r3, r2]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	223c      	movs	r2, #60	@ 0x3c
 8003552:	2100      	movs	r1, #0
 8003554:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	0018      	movs	r0, r3
 800355a:	f7fe fbe1 	bl	8001d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	223d      	movs	r2, #61	@ 0x3d
 8003562:	2102      	movs	r1, #2
 8003564:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3304      	adds	r3, #4
 800356e:	0019      	movs	r1, r3
 8003570:	0010      	movs	r0, r2
 8003572:	f000 fcff 	bl	8003f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2246      	movs	r2, #70	@ 0x46
 800357a:	2101      	movs	r1, #1
 800357c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	223e      	movs	r2, #62	@ 0x3e
 8003582:	2101      	movs	r1, #1
 8003584:	5499      	strb	r1, [r3, r2]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	223f      	movs	r2, #63	@ 0x3f
 800358a:	2101      	movs	r1, #1
 800358c:	5499      	strb	r1, [r3, r2]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2240      	movs	r2, #64	@ 0x40
 8003592:	2101      	movs	r1, #1
 8003594:	5499      	strb	r1, [r3, r2]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2241      	movs	r2, #65	@ 0x41
 800359a:	2101      	movs	r1, #1
 800359c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2242      	movs	r2, #66	@ 0x42
 80035a2:	2101      	movs	r1, #1
 80035a4:	5499      	strb	r1, [r3, r2]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2243      	movs	r2, #67	@ 0x43
 80035aa:	2101      	movs	r1, #1
 80035ac:	5499      	strb	r1, [r3, r2]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2244      	movs	r2, #68	@ 0x44
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2245      	movs	r2, #69	@ 0x45
 80035ba:	2101      	movs	r1, #1
 80035bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	223d      	movs	r2, #61	@ 0x3d
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b002      	add	sp, #8
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	223d      	movs	r2, #61	@ 0x3d
 80035dc:	5c9b      	ldrb	r3, [r3, r2]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d001      	beq.n	80035e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e02d      	b.n	8003644 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	223d      	movs	r2, #61	@ 0x3d
 80035ec:	2102      	movs	r1, #2
 80035ee:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a15      	ldr	r2, [pc, #84]	@ (800364c <HAL_TIM_Base_Start+0x7c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_TIM_Base_Start+0x3e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a14      	ldr	r2, [pc, #80]	@ (8003650 <HAL_TIM_Base_Start+0x80>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_TIM_Base_Start+0x3e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a12      	ldr	r2, [pc, #72]	@ (8003654 <HAL_TIM_Base_Start+0x84>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d111      	bne.n	8003632 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2207      	movs	r2, #7
 8003616:	4013      	ands	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b06      	cmp	r3, #6
 800361e:	d010      	beq.n	8003642 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2101      	movs	r1, #1
 800362c:	430a      	orrs	r2, r1
 800362e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003630:	e007      	b.n	8003642 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2101      	movs	r1, #1
 800363e:	430a      	orrs	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b004      	add	sp, #16
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40012c00 	.word	0x40012c00
 8003650:	40000400 	.word	0x40000400
 8003654:	40014000 	.word	0x40014000

08003658 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e042      	b.n	80036f0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	223d      	movs	r2, #61	@ 0x3d
 800366e:	5c9b      	ldrb	r3, [r3, r2]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	223c      	movs	r2, #60	@ 0x3c
 800367a:	2100      	movs	r1, #0
 800367c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f000 f839 	bl	80036f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	223d      	movs	r2, #61	@ 0x3d
 800368a:	2102      	movs	r1, #2
 800368c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	0019      	movs	r1, r3
 8003698:	0010      	movs	r0, r2
 800369a:	f000 fc6b 	bl	8003f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2246      	movs	r2, #70	@ 0x46
 80036a2:	2101      	movs	r1, #1
 80036a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	223e      	movs	r2, #62	@ 0x3e
 80036aa:	2101      	movs	r1, #1
 80036ac:	5499      	strb	r1, [r3, r2]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	223f      	movs	r2, #63	@ 0x3f
 80036b2:	2101      	movs	r1, #1
 80036b4:	5499      	strb	r1, [r3, r2]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2240      	movs	r2, #64	@ 0x40
 80036ba:	2101      	movs	r1, #1
 80036bc:	5499      	strb	r1, [r3, r2]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2241      	movs	r2, #65	@ 0x41
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2242      	movs	r2, #66	@ 0x42
 80036ca:	2101      	movs	r1, #1
 80036cc:	5499      	strb	r1, [r3, r2]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2243      	movs	r2, #67	@ 0x43
 80036d2:	2101      	movs	r1, #1
 80036d4:	5499      	strb	r1, [r3, r2]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2244      	movs	r2, #68	@ 0x44
 80036da:	2101      	movs	r1, #1
 80036dc:	5499      	strb	r1, [r3, r2]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2245      	movs	r2, #69	@ 0x45
 80036e2:	2101      	movs	r1, #1
 80036e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	223d      	movs	r2, #61	@ 0x3d
 80036ea:	2101      	movs	r1, #1
 80036ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b002      	add	sp, #8
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003700:	46c0      	nop			@ (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	b002      	add	sp, #8
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	001a      	movs	r2, r3
 8003716:	1cbb      	adds	r3, r7, #2
 8003718:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371a:	2317      	movs	r3, #23
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d108      	bne.n	800373a <HAL_TIM_PWM_Start_DMA+0x32>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	223e      	movs	r2, #62	@ 0x3e
 800372c:	5c9b      	ldrb	r3, [r3, r2]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	3b02      	subs	r3, #2
 8003732:	425a      	negs	r2, r3
 8003734:	4153      	adcs	r3, r2
 8003736:	b2db      	uxtb	r3, r3
 8003738:	e01f      	b.n	800377a <HAL_TIM_PWM_Start_DMA+0x72>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d108      	bne.n	8003752 <HAL_TIM_PWM_Start_DMA+0x4a>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	223f      	movs	r2, #63	@ 0x3f
 8003744:	5c9b      	ldrb	r3, [r3, r2]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	3b02      	subs	r3, #2
 800374a:	425a      	negs	r2, r3
 800374c:	4153      	adcs	r3, r2
 800374e:	b2db      	uxtb	r3, r3
 8003750:	e013      	b.n	800377a <HAL_TIM_PWM_Start_DMA+0x72>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b08      	cmp	r3, #8
 8003756:	d108      	bne.n	800376a <HAL_TIM_PWM_Start_DMA+0x62>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2240      	movs	r2, #64	@ 0x40
 800375c:	5c9b      	ldrb	r3, [r3, r2]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	3b02      	subs	r3, #2
 8003762:	425a      	negs	r2, r3
 8003764:	4153      	adcs	r3, r2
 8003766:	b2db      	uxtb	r3, r3
 8003768:	e007      	b.n	800377a <HAL_TIM_PWM_Start_DMA+0x72>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2241      	movs	r2, #65	@ 0x41
 800376e:	5c9b      	ldrb	r3, [r3, r2]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	3b02      	subs	r3, #2
 8003774:	425a      	negs	r2, r3
 8003776:	4153      	adcs	r3, r2
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800377e:	2302      	movs	r3, #2
 8003780:	e15e      	b.n	8003a40 <HAL_TIM_PWM_Start_DMA+0x338>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d108      	bne.n	800379a <HAL_TIM_PWM_Start_DMA+0x92>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	223e      	movs	r2, #62	@ 0x3e
 800378c:	5c9b      	ldrb	r3, [r3, r2]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	425a      	negs	r2, r3
 8003794:	4153      	adcs	r3, r2
 8003796:	b2db      	uxtb	r3, r3
 8003798:	e01f      	b.n	80037da <HAL_TIM_PWM_Start_DMA+0xd2>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b04      	cmp	r3, #4
 800379e:	d108      	bne.n	80037b2 <HAL_TIM_PWM_Start_DMA+0xaa>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	223f      	movs	r2, #63	@ 0x3f
 80037a4:	5c9b      	ldrb	r3, [r3, r2]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	425a      	negs	r2, r3
 80037ac:	4153      	adcs	r3, r2
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	e013      	b.n	80037da <HAL_TIM_PWM_Start_DMA+0xd2>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d108      	bne.n	80037ca <HAL_TIM_PWM_Start_DMA+0xc2>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2240      	movs	r2, #64	@ 0x40
 80037bc:	5c9b      	ldrb	r3, [r3, r2]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	425a      	negs	r2, r3
 80037c4:	4153      	adcs	r3, r2
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	e007      	b.n	80037da <HAL_TIM_PWM_Start_DMA+0xd2>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2241      	movs	r2, #65	@ 0x41
 80037ce:	5c9b      	ldrb	r3, [r3, r2]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	425a      	negs	r2, r3
 80037d6:	4153      	adcs	r3, r2
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d025      	beq.n	800382a <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_TIM_PWM_Start_DMA+0xe4>
 80037e4:	1cbb      	adds	r3, r7, #2
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e127      	b.n	8003a40 <HAL_TIM_PWM_Start_DMA+0x338>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <HAL_TIM_PWM_Start_DMA+0xf8>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	223e      	movs	r2, #62	@ 0x3e
 80037fa:	2102      	movs	r1, #2
 80037fc:	5499      	strb	r1, [r3, r2]
 80037fe:	e016      	b.n	800382e <HAL_TIM_PWM_Start_DMA+0x126>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b04      	cmp	r3, #4
 8003804:	d104      	bne.n	8003810 <HAL_TIM_PWM_Start_DMA+0x108>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	223f      	movs	r2, #63	@ 0x3f
 800380a:	2102      	movs	r1, #2
 800380c:	5499      	strb	r1, [r3, r2]
 800380e:	e00e      	b.n	800382e <HAL_TIM_PWM_Start_DMA+0x126>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b08      	cmp	r3, #8
 8003814:	d104      	bne.n	8003820 <HAL_TIM_PWM_Start_DMA+0x118>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2240      	movs	r2, #64	@ 0x40
 800381a:	2102      	movs	r1, #2
 800381c:	5499      	strb	r1, [r3, r2]
 800381e:	e006      	b.n	800382e <HAL_TIM_PWM_Start_DMA+0x126>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2241      	movs	r2, #65	@ 0x41
 8003824:	2102      	movs	r1, #2
 8003826:	5499      	strb	r1, [r3, r2]
 8003828:	e001      	b.n	800382e <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e108      	b.n	8003a40 <HAL_TIM_PWM_Start_DMA+0x338>
  }

  switch (Channel)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b0c      	cmp	r3, #12
 8003832:	d100      	bne.n	8003836 <HAL_TIM_PWM_Start_DMA+0x12e>
 8003834:	e080      	b.n	8003938 <HAL_TIM_PWM_Start_DMA+0x230>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b0c      	cmp	r3, #12
 800383a:	d900      	bls.n	800383e <HAL_TIM_PWM_Start_DMA+0x136>
 800383c:	e0a1      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x27a>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d054      	beq.n	80038ee <HAL_TIM_PWM_Start_DMA+0x1e6>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b08      	cmp	r3, #8
 8003848:	d900      	bls.n	800384c <HAL_TIM_PWM_Start_DMA+0x144>
 800384a:	e09a      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x27a>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_PWM_Start_DMA+0x152>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d025      	beq.n	80038a4 <HAL_TIM_PWM_Start_DMA+0x19c>
 8003858:	e093      	b.n	8003982 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385e:	4a7a      	ldr	r2, [pc, #488]	@ (8003a48 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003860:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	4a79      	ldr	r2, [pc, #484]	@ (8003a4c <HAL_TIM_PWM_Start_DMA+0x344>)
 8003868:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	4a78      	ldr	r2, [pc, #480]	@ (8003a50 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003870:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3334      	adds	r3, #52	@ 0x34
 800387e:	001a      	movs	r2, r3
 8003880:	1cbb      	adds	r3, r7, #2
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	f7fe fdf6 	bl	8002474 <HAL_DMA_Start_IT>
 8003888:	1e03      	subs	r3, r0, #0
 800388a:	d001      	beq.n	8003890 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0d7      	b.n	8003a40 <HAL_TIM_PWM_Start_DMA+0x338>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2180      	movs	r1, #128	@ 0x80
 800389c:	0089      	lsls	r1, r1, #2
 800389e:	430a      	orrs	r2, r1
 80038a0:	60da      	str	r2, [r3, #12]
      break;
 80038a2:	e073      	b.n	800398c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a8:	4a67      	ldr	r2, [pc, #412]	@ (8003a48 <HAL_TIM_PWM_Start_DMA+0x340>)
 80038aa:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b0:	4a66      	ldr	r2, [pc, #408]	@ (8003a4c <HAL_TIM_PWM_Start_DMA+0x344>)
 80038b2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b8:	4a65      	ldr	r2, [pc, #404]	@ (8003a50 <HAL_TIM_PWM_Start_DMA+0x348>)
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3338      	adds	r3, #56	@ 0x38
 80038c8:	001a      	movs	r2, r3
 80038ca:	1cbb      	adds	r3, r7, #2
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	f7fe fdd1 	bl	8002474 <HAL_DMA_Start_IT>
 80038d2:	1e03      	subs	r3, r0, #0
 80038d4:	d001      	beq.n	80038da <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e0b2      	b.n	8003a40 <HAL_TIM_PWM_Start_DMA+0x338>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2180      	movs	r1, #128	@ 0x80
 80038e6:	00c9      	lsls	r1, r1, #3
 80038e8:	430a      	orrs	r2, r1
 80038ea:	60da      	str	r2, [r3, #12]
      break;
 80038ec:	e04e      	b.n	800398c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f2:	4a55      	ldr	r2, [pc, #340]	@ (8003a48 <HAL_TIM_PWM_Start_DMA+0x340>)
 80038f4:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	4a54      	ldr	r2, [pc, #336]	@ (8003a4c <HAL_TIM_PWM_Start_DMA+0x344>)
 80038fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	4a53      	ldr	r2, [pc, #332]	@ (8003a50 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003904:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	333c      	adds	r3, #60	@ 0x3c
 8003912:	001a      	movs	r2, r3
 8003914:	1cbb      	adds	r3, r7, #2
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	f7fe fdac 	bl	8002474 <HAL_DMA_Start_IT>
 800391c:	1e03      	subs	r3, r0, #0
 800391e:	d001      	beq.n	8003924 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e08d      	b.n	8003a40 <HAL_TIM_PWM_Start_DMA+0x338>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2180      	movs	r1, #128	@ 0x80
 8003930:	0109      	lsls	r1, r1, #4
 8003932:	430a      	orrs	r2, r1
 8003934:	60da      	str	r2, [r3, #12]
      break;
 8003936:	e029      	b.n	800398c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393c:	4a42      	ldr	r2, [pc, #264]	@ (8003a48 <HAL_TIM_PWM_Start_DMA+0x340>)
 800393e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	4a41      	ldr	r2, [pc, #260]	@ (8003a4c <HAL_TIM_PWM_Start_DMA+0x344>)
 8003946:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394c:	4a40      	ldr	r2, [pc, #256]	@ (8003a50 <HAL_TIM_PWM_Start_DMA+0x348>)
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3340      	adds	r3, #64	@ 0x40
 800395c:	001a      	movs	r2, r3
 800395e:	1cbb      	adds	r3, r7, #2
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	f7fe fd87 	bl	8002474 <HAL_DMA_Start_IT>
 8003966:	1e03      	subs	r3, r0, #0
 8003968:	d001      	beq.n	800396e <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e068      	b.n	8003a40 <HAL_TIM_PWM_Start_DMA+0x338>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2180      	movs	r1, #128	@ 0x80
 800397a:	0149      	lsls	r1, r1, #5
 800397c:	430a      	orrs	r2, r1
 800397e:	60da      	str	r2, [r3, #12]
      break;
 8003980:	e004      	b.n	800398c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8003982:	2317      	movs	r3, #23
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
      break;
 800398a:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800398c:	2317      	movs	r3, #23
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d151      	bne.n	8003a3a <HAL_TIM_PWM_Start_DMA+0x332>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	2201      	movs	r2, #1
 800399e:	0018      	movs	r0, r3
 80039a0:	f000 fe02 	bl	80045a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003a54 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00e      	beq.n	80039cc <HAL_TIM_PWM_Start_DMA+0x2c4>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a29      	ldr	r2, [pc, #164]	@ (8003a58 <HAL_TIM_PWM_Start_DMA+0x350>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d009      	beq.n	80039cc <HAL_TIM_PWM_Start_DMA+0x2c4>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a27      	ldr	r2, [pc, #156]	@ (8003a5c <HAL_TIM_PWM_Start_DMA+0x354>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <HAL_TIM_PWM_Start_DMA+0x2c4>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a26      	ldr	r2, [pc, #152]	@ (8003a60 <HAL_TIM_PWM_Start_DMA+0x358>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <HAL_TIM_PWM_Start_DMA+0x2c8>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_TIM_PWM_Start_DMA+0x2ca>
 80039d0:	2300      	movs	r3, #0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2180      	movs	r1, #128	@ 0x80
 80039e2:	0209      	lsls	r1, r1, #8
 80039e4:	430a      	orrs	r2, r1
 80039e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a19      	ldr	r2, [pc, #100]	@ (8003a54 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d009      	beq.n	8003a06 <HAL_TIM_PWM_Start_DMA+0x2fe>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a64 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d004      	beq.n	8003a06 <HAL_TIM_PWM_Start_DMA+0x2fe>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a15      	ldr	r2, [pc, #84]	@ (8003a58 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d111      	bne.n	8003a2a <HAL_TIM_PWM_Start_DMA+0x322>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2207      	movs	r2, #7
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b06      	cmp	r3, #6
 8003a16:	d010      	beq.n	8003a3a <HAL_TIM_PWM_Start_DMA+0x332>
      {
        __HAL_TIM_ENABLE(htim);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2101      	movs	r1, #1
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a28:	e007      	b.n	8003a3a <HAL_TIM_PWM_Start_DMA+0x332>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2101      	movs	r1, #1
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003a3a:	2317      	movs	r3, #23
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	781b      	ldrb	r3, [r3, #0]
}
 8003a40:	0018      	movs	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b006      	add	sp, #24
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	08003e61 	.word	0x08003e61
 8003a4c:	08003f0b 	.word	0x08003f0b
 8003a50:	08003dcd 	.word	0x08003dcd
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40014400 	.word	0x40014400
 8003a60:	40014800 	.word	0x40014800
 8003a64:	40000400 	.word	0x40000400

08003a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a74:	2317      	movs	r3, #23
 8003a76:	18fb      	adds	r3, r7, r3
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	223c      	movs	r2, #60	@ 0x3c
 8003a80:	5c9b      	ldrb	r3, [r3, r2]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e0ad      	b.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	223c      	movs	r2, #60	@ 0x3c
 8003a8e:	2101      	movs	r1, #1
 8003a90:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	d100      	bne.n	8003a9a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a98:	e076      	b.n	8003b88 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b0c      	cmp	r3, #12
 8003a9e:	d900      	bls.n	8003aa2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003aa0:	e095      	b.n	8003bce <HAL_TIM_PWM_ConfigChannel+0x166>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d04e      	beq.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d900      	bls.n	8003ab0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003aae:	e08e      	b.n	8003bce <HAL_TIM_PWM_ConfigChannel+0x166>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_TIM_PWM_ConfigChannel+0x56>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d021      	beq.n	8003b00 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003abc:	e087      	b.n	8003bce <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	0011      	movs	r1, r2
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 fad8 	bl	800407c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2108      	movs	r1, #8
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2104      	movs	r1, #4
 8003ae8:	438a      	bics	r2, r1
 8003aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6999      	ldr	r1, [r3, #24]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	619a      	str	r2, [r3, #24]
      break;
 8003afe:	e06b      	b.n	8003bd8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	0011      	movs	r1, r2
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f000 fb3f 	bl	800418c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2180      	movs	r1, #128	@ 0x80
 8003b1a:	0109      	lsls	r1, r1, #4
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4931      	ldr	r1, [pc, #196]	@ (8003bf0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6999      	ldr	r1, [r3, #24]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	021a      	lsls	r2, r3, #8
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	619a      	str	r2, [r3, #24]
      break;
 8003b44:	e048      	b.n	8003bd8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	0011      	movs	r1, r2
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 fba0 	bl	8004294 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2108      	movs	r1, #8
 8003b60:	430a      	orrs	r2, r1
 8003b62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2104      	movs	r1, #4
 8003b70:	438a      	bics	r2, r1
 8003b72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69d9      	ldr	r1, [r3, #28]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	61da      	str	r2, [r3, #28]
      break;
 8003b86:	e027      	b.n	8003bd8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	0011      	movs	r1, r2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f000 fc05 	bl	80043a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2180      	movs	r1, #128	@ 0x80
 8003ba2:	0109      	lsls	r1, r1, #4
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	490f      	ldr	r1, [pc, #60]	@ (8003bf0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69d9      	ldr	r1, [r3, #28]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	021a      	lsls	r2, r3, #8
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	61da      	str	r2, [r3, #28]
      break;
 8003bcc:	e004      	b.n	8003bd8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003bce:	2317      	movs	r3, #23
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
      break;
 8003bd6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	223c      	movs	r2, #60	@ 0x3c
 8003bdc:	2100      	movs	r1, #0
 8003bde:	5499      	strb	r1, [r3, r2]

  return status;
 8003be0:	2317      	movs	r3, #23
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	781b      	ldrb	r3, [r3, #0]
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b006      	add	sp, #24
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	46c0      	nop			@ (mov r8, r8)
 8003bf0:	fffffbff 	.word	0xfffffbff

08003bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfe:	230f      	movs	r3, #15
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	223c      	movs	r2, #60	@ 0x3c
 8003c0a:	5c9b      	ldrb	r3, [r3, r2]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_TIM_ConfigClockSource+0x20>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e0bc      	b.n	8003d8e <HAL_TIM_ConfigClockSource+0x19a>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	223c      	movs	r2, #60	@ 0x3c
 8003c18:	2101      	movs	r1, #1
 8003c1a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	223d      	movs	r2, #61	@ 0x3d
 8003c20:	2102      	movs	r1, #2
 8003c22:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2277      	movs	r2, #119	@ 0x77
 8003c30:	4393      	bics	r3, r2
 8003c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4a58      	ldr	r2, [pc, #352]	@ (8003d98 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2280      	movs	r2, #128	@ 0x80
 8003c4a:	0192      	lsls	r2, r2, #6
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d040      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0xde>
 8003c50:	2280      	movs	r2, #128	@ 0x80
 8003c52:	0192      	lsls	r2, r2, #6
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d900      	bls.n	8003c5a <HAL_TIM_ConfigClockSource+0x66>
 8003c58:	e088      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x178>
 8003c5a:	2280      	movs	r2, #128	@ 0x80
 8003c5c:	0152      	lsls	r2, r2, #5
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d100      	bne.n	8003c64 <HAL_TIM_ConfigClockSource+0x70>
 8003c62:	e088      	b.n	8003d76 <HAL_TIM_ConfigClockSource+0x182>
 8003c64:	2280      	movs	r2, #128	@ 0x80
 8003c66:	0152      	lsls	r2, r2, #5
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d900      	bls.n	8003c6e <HAL_TIM_ConfigClockSource+0x7a>
 8003c6c:	e07e      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x178>
 8003c6e:	2b70      	cmp	r3, #112	@ 0x70
 8003c70:	d018      	beq.n	8003ca4 <HAL_TIM_ConfigClockSource+0xb0>
 8003c72:	d900      	bls.n	8003c76 <HAL_TIM_ConfigClockSource+0x82>
 8003c74:	e07a      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x178>
 8003c76:	2b60      	cmp	r3, #96	@ 0x60
 8003c78:	d04f      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0x126>
 8003c7a:	d900      	bls.n	8003c7e <HAL_TIM_ConfigClockSource+0x8a>
 8003c7c:	e076      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x178>
 8003c7e:	2b50      	cmp	r3, #80	@ 0x50
 8003c80:	d03b      	beq.n	8003cfa <HAL_TIM_ConfigClockSource+0x106>
 8003c82:	d900      	bls.n	8003c86 <HAL_TIM_ConfigClockSource+0x92>
 8003c84:	e072      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x178>
 8003c86:	2b40      	cmp	r3, #64	@ 0x40
 8003c88:	d057      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0x146>
 8003c8a:	d900      	bls.n	8003c8e <HAL_TIM_ConfigClockSource+0x9a>
 8003c8c:	e06e      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x178>
 8003c8e:	2b30      	cmp	r3, #48	@ 0x30
 8003c90:	d063      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x166>
 8003c92:	d86b      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x178>
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d060      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x166>
 8003c98:	d868      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x178>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d05d      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x166>
 8003c9e:	2b10      	cmp	r3, #16
 8003ca0:	d05b      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x166>
 8003ca2:	e063      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cb4:	f000 fc58 	bl	8004568 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2277      	movs	r2, #119	@ 0x77
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	609a      	str	r2, [r3, #8]
      break;
 8003cd0:	e052      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ce2:	f000 fc41 	bl	8004568 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2180      	movs	r1, #128	@ 0x80
 8003cf2:	01c9      	lsls	r1, r1, #7
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	609a      	str	r2, [r3, #8]
      break;
 8003cf8:	e03e      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d06:	001a      	movs	r2, r3
 8003d08:	f000 fbb4 	bl	8004474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2150      	movs	r1, #80	@ 0x50
 8003d12:	0018      	movs	r0, r3
 8003d14:	f000 fc0e 	bl	8004534 <TIM_ITRx_SetConfig>
      break;
 8003d18:	e02e      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d26:	001a      	movs	r2, r3
 8003d28:	f000 fbd2 	bl	80044d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2160      	movs	r1, #96	@ 0x60
 8003d32:	0018      	movs	r0, r3
 8003d34:	f000 fbfe 	bl	8004534 <TIM_ITRx_SetConfig>
      break;
 8003d38:	e01e      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d46:	001a      	movs	r2, r3
 8003d48:	f000 fb94 	bl	8004474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2140      	movs	r1, #64	@ 0x40
 8003d52:	0018      	movs	r0, r3
 8003d54:	f000 fbee 	bl	8004534 <TIM_ITRx_SetConfig>
      break;
 8003d58:	e00e      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	0019      	movs	r1, r3
 8003d64:	0010      	movs	r0, r2
 8003d66:	f000 fbe5 	bl	8004534 <TIM_ITRx_SetConfig>
      break;
 8003d6a:	e005      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003d6c:	230f      	movs	r3, #15
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	2201      	movs	r2, #1
 8003d72:	701a      	strb	r2, [r3, #0]
      break;
 8003d74:	e000      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003d76:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	223d      	movs	r2, #61	@ 0x3d
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	223c      	movs	r2, #60	@ 0x3c
 8003d84:	2100      	movs	r1, #0
 8003d86:	5499      	strb	r1, [r3, r2]

  return status;
 8003d88:	230f      	movs	r3, #15
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	781b      	ldrb	r3, [r3, #0]
}
 8003d8e:	0018      	movs	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b004      	add	sp, #16
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	ffff00ff 	.word	0xffff00ff

08003d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003da4:	46c0      	nop			@ (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b002      	add	sp, #8
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003db4:	46c0      	nop			@ (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b002      	add	sp, #8
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003dc4:	46c0      	nop			@ (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b002      	add	sp, #8
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d107      	bne.n	8003df4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	223e      	movs	r2, #62	@ 0x3e
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]
 8003df2:	e02a      	b.n	8003e4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d107      	bne.n	8003e0e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2202      	movs	r2, #2
 8003e02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	223f      	movs	r2, #63	@ 0x3f
 8003e08:	2101      	movs	r1, #1
 8003e0a:	5499      	strb	r1, [r3, r2]
 8003e0c:	e01d      	b.n	8003e4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d107      	bne.n	8003e28 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2240      	movs	r2, #64	@ 0x40
 8003e22:	2101      	movs	r1, #1
 8003e24:	5499      	strb	r1, [r3, r2]
 8003e26:	e010      	b.n	8003e4a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d107      	bne.n	8003e42 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2208      	movs	r2, #8
 8003e36:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2241      	movs	r2, #65	@ 0x41
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	5499      	strb	r1, [r3, r2]
 8003e40:	e003      	b.n	8003e4a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	223d      	movs	r2, #61	@ 0x3d
 8003e46:	2101      	movs	r1, #1
 8003e48:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7ff ffb5 	bl	8003dbc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
}
 8003e58:	46c0      	nop			@ (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b004      	add	sp, #16
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d10b      	bne.n	8003e90 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d136      	bne.n	8003ef4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	223e      	movs	r2, #62	@ 0x3e
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	5499      	strb	r1, [r3, r2]
 8003e8e:	e031      	b.n	8003ef4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d10b      	bne.n	8003eb2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d125      	bne.n	8003ef4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	223f      	movs	r2, #63	@ 0x3f
 8003eac:	2101      	movs	r1, #1
 8003eae:	5499      	strb	r1, [r3, r2]
 8003eb0:	e020      	b.n	8003ef4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d10b      	bne.n	8003ed4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d114      	bne.n	8003ef4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2240      	movs	r2, #64	@ 0x40
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]
 8003ed2:	e00f      	b.n	8003ef4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d10a      	bne.n	8003ef4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d103      	bne.n	8003ef4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2241      	movs	r2, #65	@ 0x41
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f7ff ff50 	bl	8003d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	771a      	strb	r2, [r3, #28]
}
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b004      	add	sp, #16
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d103      	bne.n	8003f2a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	771a      	strb	r2, [r3, #28]
 8003f28:	e019      	b.n	8003f5e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d103      	bne.n	8003f3c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2202      	movs	r2, #2
 8003f38:	771a      	strb	r2, [r3, #28]
 8003f3a:	e010      	b.n	8003f5e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d103      	bne.n	8003f4e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	771a      	strb	r2, [r3, #28]
 8003f4c:	e007      	b.n	8003f5e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d102      	bne.n	8003f5e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2208      	movs	r2, #8
 8003f5c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7ff ff23 	bl	8003dac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	771a      	strb	r2, [r3, #28]
}
 8003f6c:	46c0      	nop			@ (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b004      	add	sp, #16
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a36      	ldr	r2, [pc, #216]	@ (8004060 <TIM_Base_SetConfig+0xec>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <TIM_Base_SetConfig+0x20>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a35      	ldr	r2, [pc, #212]	@ (8004064 <TIM_Base_SetConfig+0xf0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d108      	bne.n	8003fa6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2270      	movs	r2, #112	@ 0x70
 8003f98:	4393      	bics	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8004060 <TIM_Base_SetConfig+0xec>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <TIM_Base_SetConfig+0x62>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8004064 <TIM_Base_SetConfig+0xf0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00f      	beq.n	8003fd6 <TIM_Base_SetConfig+0x62>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8004068 <TIM_Base_SetConfig+0xf4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00b      	beq.n	8003fd6 <TIM_Base_SetConfig+0x62>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800406c <TIM_Base_SetConfig+0xf8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <TIM_Base_SetConfig+0x62>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a29      	ldr	r2, [pc, #164]	@ (8004070 <TIM_Base_SetConfig+0xfc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d003      	beq.n	8003fd6 <TIM_Base_SetConfig+0x62>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a28      	ldr	r2, [pc, #160]	@ (8004074 <TIM_Base_SetConfig+0x100>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d108      	bne.n	8003fe8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a27      	ldr	r2, [pc, #156]	@ (8004078 <TIM_Base_SetConfig+0x104>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2280      	movs	r2, #128	@ 0x80
 8003fec:	4393      	bics	r3, r2
 8003fee:	001a      	movs	r2, r3
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a13      	ldr	r2, [pc, #76]	@ (8004060 <TIM_Base_SetConfig+0xec>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00b      	beq.n	800402e <TIM_Base_SetConfig+0xba>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a14      	ldr	r2, [pc, #80]	@ (800406c <TIM_Base_SetConfig+0xf8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <TIM_Base_SetConfig+0xba>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a13      	ldr	r2, [pc, #76]	@ (8004070 <TIM_Base_SetConfig+0xfc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_Base_SetConfig+0xba>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a12      	ldr	r2, [pc, #72]	@ (8004074 <TIM_Base_SetConfig+0x100>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d103      	bne.n	8004036 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2201      	movs	r2, #1
 8004042:	4013      	ands	r3, r2
 8004044:	2b01      	cmp	r3, #1
 8004046:	d106      	bne.n	8004056 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2201      	movs	r2, #1
 800404e:	4393      	bics	r3, r2
 8004050:	001a      	movs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	611a      	str	r2, [r3, #16]
  }
}
 8004056:	46c0      	nop			@ (mov r8, r8)
 8004058:	46bd      	mov	sp, r7
 800405a:	b004      	add	sp, #16
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40000400 	.word	0x40000400
 8004068:	40002000 	.word	0x40002000
 800406c:	40014000 	.word	0x40014000
 8004070:	40014400 	.word	0x40014400
 8004074:	40014800 	.word	0x40014800
 8004078:	fffffcff 	.word	0xfffffcff

0800407c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	2201      	movs	r2, #1
 8004092:	4393      	bics	r3, r2
 8004094:	001a      	movs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2270      	movs	r2, #112	@ 0x70
 80040aa:	4393      	bics	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2203      	movs	r2, #3
 80040b2:	4393      	bics	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2202      	movs	r2, #2
 80040c4:	4393      	bics	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a27      	ldr	r2, [pc, #156]	@ (8004174 <TIM_OC1_SetConfig+0xf8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00b      	beq.n	80040f2 <TIM_OC1_SetConfig+0x76>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a26      	ldr	r2, [pc, #152]	@ (8004178 <TIM_OC1_SetConfig+0xfc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d007      	beq.n	80040f2 <TIM_OC1_SetConfig+0x76>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a25      	ldr	r2, [pc, #148]	@ (800417c <TIM_OC1_SetConfig+0x100>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d003      	beq.n	80040f2 <TIM_OC1_SetConfig+0x76>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a24      	ldr	r2, [pc, #144]	@ (8004180 <TIM_OC1_SetConfig+0x104>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10c      	bne.n	800410c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2208      	movs	r2, #8
 80040f6:	4393      	bics	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2204      	movs	r2, #4
 8004108:	4393      	bics	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a19      	ldr	r2, [pc, #100]	@ (8004174 <TIM_OC1_SetConfig+0xf8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00b      	beq.n	800412c <TIM_OC1_SetConfig+0xb0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a18      	ldr	r2, [pc, #96]	@ (8004178 <TIM_OC1_SetConfig+0xfc>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <TIM_OC1_SetConfig+0xb0>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a17      	ldr	r2, [pc, #92]	@ (800417c <TIM_OC1_SetConfig+0x100>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_OC1_SetConfig+0xb0>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a16      	ldr	r2, [pc, #88]	@ (8004180 <TIM_OC1_SetConfig+0x104>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d111      	bne.n	8004150 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4a15      	ldr	r2, [pc, #84]	@ (8004184 <TIM_OC1_SetConfig+0x108>)
 8004130:	4013      	ands	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4a14      	ldr	r2, [pc, #80]	@ (8004188 <TIM_OC1_SetConfig+0x10c>)
 8004138:	4013      	ands	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	b006      	add	sp, #24
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40014000 	.word	0x40014000
 800417c:	40014400 	.word	0x40014400
 8004180:	40014800 	.word	0x40014800
 8004184:	fffffeff 	.word	0xfffffeff
 8004188:	fffffdff 	.word	0xfffffdff

0800418c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	2210      	movs	r2, #16
 80041a2:	4393      	bics	r3, r2
 80041a4:	001a      	movs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004274 <TIM_OC2_SetConfig+0xe8>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004278 <TIM_OC2_SetConfig+0xec>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2220      	movs	r2, #32
 80041d6:	4393      	bics	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a24      	ldr	r2, [pc, #144]	@ (800427c <TIM_OC2_SetConfig+0xf0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10d      	bne.n	800420a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2280      	movs	r2, #128	@ 0x80
 80041f2:	4393      	bics	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2240      	movs	r2, #64	@ 0x40
 8004206:	4393      	bics	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a1b      	ldr	r2, [pc, #108]	@ (800427c <TIM_OC2_SetConfig+0xf0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00b      	beq.n	800422a <TIM_OC2_SetConfig+0x9e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a1a      	ldr	r2, [pc, #104]	@ (8004280 <TIM_OC2_SetConfig+0xf4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d007      	beq.n	800422a <TIM_OC2_SetConfig+0x9e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a19      	ldr	r2, [pc, #100]	@ (8004284 <TIM_OC2_SetConfig+0xf8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d003      	beq.n	800422a <TIM_OC2_SetConfig+0x9e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a18      	ldr	r2, [pc, #96]	@ (8004288 <TIM_OC2_SetConfig+0xfc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d113      	bne.n	8004252 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4a17      	ldr	r2, [pc, #92]	@ (800428c <TIM_OC2_SetConfig+0x100>)
 800422e:	4013      	ands	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4a16      	ldr	r2, [pc, #88]	@ (8004290 <TIM_OC2_SetConfig+0x104>)
 8004236:	4013      	ands	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	621a      	str	r2, [r3, #32]
}
 800426c:	46c0      	nop			@ (mov r8, r8)
 800426e:	46bd      	mov	sp, r7
 8004270:	b006      	add	sp, #24
 8004272:	bd80      	pop	{r7, pc}
 8004274:	ffff8fff 	.word	0xffff8fff
 8004278:	fffffcff 	.word	0xfffffcff
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40014000 	.word	0x40014000
 8004284:	40014400 	.word	0x40014400
 8004288:	40014800 	.word	0x40014800
 800428c:	fffffbff 	.word	0xfffffbff
 8004290:	fffff7ff 	.word	0xfffff7ff

08004294 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	4a33      	ldr	r2, [pc, #204]	@ (8004378 <TIM_OC3_SetConfig+0xe4>)
 80042aa:	401a      	ands	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2270      	movs	r2, #112	@ 0x70
 80042c0:	4393      	bics	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2203      	movs	r2, #3
 80042c8:	4393      	bics	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	4a28      	ldr	r2, [pc, #160]	@ (800437c <TIM_OC3_SetConfig+0xe8>)
 80042da:	4013      	ands	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a24      	ldr	r2, [pc, #144]	@ (8004380 <TIM_OC3_SetConfig+0xec>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d10d      	bne.n	800430e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	4a23      	ldr	r2, [pc, #140]	@ (8004384 <TIM_OC3_SetConfig+0xf0>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	021b      	lsls	r3, r3, #8
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	4a1f      	ldr	r2, [pc, #124]	@ (8004388 <TIM_OC3_SetConfig+0xf4>)
 800430a:	4013      	ands	r3, r2
 800430c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1b      	ldr	r2, [pc, #108]	@ (8004380 <TIM_OC3_SetConfig+0xec>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00b      	beq.n	800432e <TIM_OC3_SetConfig+0x9a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1c      	ldr	r2, [pc, #112]	@ (800438c <TIM_OC3_SetConfig+0xf8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d007      	beq.n	800432e <TIM_OC3_SetConfig+0x9a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a1b      	ldr	r2, [pc, #108]	@ (8004390 <TIM_OC3_SetConfig+0xfc>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d003      	beq.n	800432e <TIM_OC3_SetConfig+0x9a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a1a      	ldr	r2, [pc, #104]	@ (8004394 <TIM_OC3_SetConfig+0x100>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d113      	bne.n	8004356 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4a19      	ldr	r2, [pc, #100]	@ (8004398 <TIM_OC3_SetConfig+0x104>)
 8004332:	4013      	ands	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4a18      	ldr	r2, [pc, #96]	@ (800439c <TIM_OC3_SetConfig+0x108>)
 800433a:	4013      	ands	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	621a      	str	r2, [r3, #32]
}
 8004370:	46c0      	nop			@ (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b006      	add	sp, #24
 8004376:	bd80      	pop	{r7, pc}
 8004378:	fffffeff 	.word	0xfffffeff
 800437c:	fffffdff 	.word	0xfffffdff
 8004380:	40012c00 	.word	0x40012c00
 8004384:	fffff7ff 	.word	0xfffff7ff
 8004388:	fffffbff 	.word	0xfffffbff
 800438c:	40014000 	.word	0x40014000
 8004390:	40014400 	.word	0x40014400
 8004394:	40014800 	.word	0x40014800
 8004398:	ffffefff 	.word	0xffffefff
 800439c:	ffffdfff 	.word	0xffffdfff

080043a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	4a26      	ldr	r2, [pc, #152]	@ (8004450 <TIM_OC4_SetConfig+0xb0>)
 80043b6:	401a      	ands	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4a22      	ldr	r2, [pc, #136]	@ (8004454 <TIM_OC4_SetConfig+0xb4>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a21      	ldr	r2, [pc, #132]	@ (8004458 <TIM_OC4_SetConfig+0xb8>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4a1d      	ldr	r2, [pc, #116]	@ (800445c <TIM_OC4_SetConfig+0xbc>)
 80043e8:	4013      	ands	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	031b      	lsls	r3, r3, #12
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a19      	ldr	r2, [pc, #100]	@ (8004460 <TIM_OC4_SetConfig+0xc0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00b      	beq.n	8004418 <TIM_OC4_SetConfig+0x78>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a18      	ldr	r2, [pc, #96]	@ (8004464 <TIM_OC4_SetConfig+0xc4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d007      	beq.n	8004418 <TIM_OC4_SetConfig+0x78>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a17      	ldr	r2, [pc, #92]	@ (8004468 <TIM_OC4_SetConfig+0xc8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_OC4_SetConfig+0x78>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a16      	ldr	r2, [pc, #88]	@ (800446c <TIM_OC4_SetConfig+0xcc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d109      	bne.n	800442c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	4a15      	ldr	r2, [pc, #84]	@ (8004470 <TIM_OC4_SetConfig+0xd0>)
 800441c:	4013      	ands	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	019b      	lsls	r3, r3, #6
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	621a      	str	r2, [r3, #32]
}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	46bd      	mov	sp, r7
 800444a:	b006      	add	sp, #24
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	ffffefff 	.word	0xffffefff
 8004454:	ffff8fff 	.word	0xffff8fff
 8004458:	fffffcff 	.word	0xfffffcff
 800445c:	ffffdfff 	.word	0xffffdfff
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40014000 	.word	0x40014000
 8004468:	40014400 	.word	0x40014400
 800446c:	40014800 	.word	0x40014800
 8004470:	ffffbfff 	.word	0xffffbfff

08004474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	2201      	movs	r2, #1
 800448c:	4393      	bics	r3, r2
 800448e:	001a      	movs	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	22f0      	movs	r2, #240	@ 0xf0
 800449e:	4393      	bics	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	220a      	movs	r2, #10
 80044b0:	4393      	bics	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	621a      	str	r2, [r3, #32]
}
 80044c8:	46c0      	nop			@ (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b006      	add	sp, #24
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	2210      	movs	r2, #16
 80044e8:	4393      	bics	r3, r2
 80044ea:	001a      	movs	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004530 <TIM_TI2_ConfigInputStage+0x60>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	031b      	lsls	r3, r3, #12
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	22a0      	movs	r2, #160	@ 0xa0
 800450c:	4393      	bics	r3, r2
 800450e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	46c0      	nop			@ (mov r8, r8)
 8004528:	46bd      	mov	sp, r7
 800452a:	b006      	add	sp, #24
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			@ (mov r8, r8)
 8004530:	ffff0fff 	.word	0xffff0fff

08004534 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2270      	movs	r2, #112	@ 0x70
 8004548:	4393      	bics	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	2207      	movs	r2, #7
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	609a      	str	r2, [r3, #8]
}
 800455e:	46c0      	nop			@ (mov r8, r8)
 8004560:	46bd      	mov	sp, r7
 8004562:	b004      	add	sp, #16
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	4a09      	ldr	r2, [pc, #36]	@ (80045a4 <TIM_ETR_SetConfig+0x3c>)
 8004580:	4013      	ands	r3, r2
 8004582:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	021a      	lsls	r2, r3, #8
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	431a      	orrs	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	609a      	str	r2, [r3, #8]
}
 800459c:	46c0      	nop			@ (mov r8, r8)
 800459e:	46bd      	mov	sp, r7
 80045a0:	b006      	add	sp, #24
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	ffff00ff 	.word	0xffff00ff

080045a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	221f      	movs	r2, #31
 80045b8:	4013      	ands	r3, r2
 80045ba:	2201      	movs	r2, #1
 80045bc:	409a      	lsls	r2, r3
 80045be:	0013      	movs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	43d2      	mvns	r2, r2
 80045ca:	401a      	ands	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1a      	ldr	r2, [r3, #32]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	211f      	movs	r1, #31
 80045d8:	400b      	ands	r3, r1
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4099      	lsls	r1, r3
 80045de:	000b      	movs	r3, r1
 80045e0:	431a      	orrs	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	621a      	str	r2, [r3, #32]
}
 80045e6:	46c0      	nop			@ (mov r8, r8)
 80045e8:	46bd      	mov	sp, r7
 80045ea:	b006      	add	sp, #24
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	223c      	movs	r2, #60	@ 0x3c
 80045fe:	5c9b      	ldrb	r3, [r3, r2]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004604:	2302      	movs	r3, #2
 8004606:	e041      	b.n	800468c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	223c      	movs	r2, #60	@ 0x3c
 800460c:	2101      	movs	r1, #1
 800460e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	223d      	movs	r2, #61	@ 0x3d
 8004614:	2102      	movs	r1, #2
 8004616:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2270      	movs	r2, #112	@ 0x70
 800462c:	4393      	bics	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a13      	ldr	r2, [pc, #76]	@ (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d009      	beq.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a11      	ldr	r2, [pc, #68]	@ (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a10      	ldr	r2, [pc, #64]	@ (800469c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d10c      	bne.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2280      	movs	r2, #128	@ 0x80
 8004664:	4393      	bics	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	4313      	orrs	r3, r2
 8004670:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	223d      	movs	r2, #61	@ 0x3d
 800467e:	2101      	movs	r1, #1
 8004680:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	223c      	movs	r2, #60	@ 0x3c
 8004686:	2100      	movs	r1, #0
 8004688:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	0018      	movs	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	b004      	add	sp, #16
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40000400 	.word	0x40000400
 800469c:	40014000 	.word	0x40014000

080046a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	223c      	movs	r2, #60	@ 0x3c
 80046b2:	5c9b      	ldrb	r3, [r3, r2]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e03e      	b.n	800473a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	223c      	movs	r2, #60	@ 0x3c
 80046c0:	2101      	movs	r1, #1
 80046c2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	22ff      	movs	r2, #255	@ 0xff
 80046c8:	4393      	bics	r3, r2
 80046ca:	001a      	movs	r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004744 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80046d8:	401a      	ands	r2, r3
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4a18      	ldr	r2, [pc, #96]	@ (8004748 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80046e6:	401a      	ands	r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a16      	ldr	r2, [pc, #88]	@ (800474c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80046f4:	401a      	ands	r2, r3
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4a13      	ldr	r2, [pc, #76]	@ (8004750 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004702:	401a      	ands	r2, r3
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a11      	ldr	r2, [pc, #68]	@ (8004754 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004710:	401a      	ands	r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4a0e      	ldr	r2, [pc, #56]	@ (8004758 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800471e:	401a      	ands	r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	223c      	movs	r2, #60	@ 0x3c
 8004734:	2100      	movs	r1, #0
 8004736:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	0018      	movs	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	b004      	add	sp, #16
 8004740:	bd80      	pop	{r7, pc}
 8004742:	46c0      	nop			@ (mov r8, r8)
 8004744:	fffffcff 	.word	0xfffffcff
 8004748:	fffffbff 	.word	0xfffffbff
 800474c:	fffff7ff 	.word	0xfffff7ff
 8004750:	ffffefff 	.word	0xffffefff
 8004754:	ffffdfff 	.word	0xffffdfff
 8004758:	ffffbfff 	.word	0xffffbfff

0800475c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e044      	b.n	80047f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d107      	bne.n	8004786 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2278      	movs	r2, #120	@ 0x78
 800477a:	2100      	movs	r1, #0
 800477c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0018      	movs	r0, r3
 8004782:	f7fd fb7b 	bl	8001e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2224      	movs	r2, #36	@ 0x24
 800478a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2101      	movs	r1, #1
 8004798:	438a      	bics	r2, r1
 800479a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	0018      	movs	r0, r3
 80047a8:	f000 fa0c 	bl	8004bc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 f8c8 	bl	8004944 <UART_SetConfig>
 80047b4:	0003      	movs	r3, r0
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e01c      	b.n	80047f8 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	490d      	ldr	r1, [pc, #52]	@ (8004800 <HAL_UART_Init+0xa4>)
 80047ca:	400a      	ands	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2108      	movs	r1, #8
 80047da:	438a      	bics	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2101      	movs	r1, #1
 80047ea:	430a      	orrs	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 fa9b 	bl	8004d2c <UART_CheckIdleState>
 80047f6:	0003      	movs	r3, r0
}
 80047f8:	0018      	movs	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b002      	add	sp, #8
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	fffff7ff 	.word	0xfffff7ff

08004804 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	@ 0x28
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	1dbb      	adds	r3, r7, #6
 8004812:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004818:	2b20      	cmp	r3, #32
 800481a:	d000      	beq.n	800481e <HAL_UART_Transmit+0x1a>
 800481c:	e08c      	b.n	8004938 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_UART_Transmit+0x28>
 8004824:	1dbb      	adds	r3, r7, #6
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e084      	b.n	800493a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	2380      	movs	r3, #128	@ 0x80
 8004836:	015b      	lsls	r3, r3, #5
 8004838:	429a      	cmp	r2, r3
 800483a:	d109      	bne.n	8004850 <HAL_UART_Transmit+0x4c>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d105      	bne.n	8004850 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2201      	movs	r2, #1
 8004848:	4013      	ands	r3, r2
 800484a:	d001      	beq.n	8004850 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e074      	b.n	800493a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2284      	movs	r2, #132	@ 0x84
 8004854:	2100      	movs	r1, #0
 8004856:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2221      	movs	r2, #33	@ 0x21
 800485c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800485e:	f7fd fcb5 	bl	80021cc <HAL_GetTick>
 8004862:	0003      	movs	r3, r0
 8004864:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1dba      	adds	r2, r7, #6
 800486a:	2150      	movs	r1, #80	@ 0x50
 800486c:	8812      	ldrh	r2, [r2, #0]
 800486e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	1dba      	adds	r2, r7, #6
 8004874:	2152      	movs	r1, #82	@ 0x52
 8004876:	8812      	ldrh	r2, [r2, #0]
 8004878:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	2380      	movs	r3, #128	@ 0x80
 8004880:	015b      	lsls	r3, r3, #5
 8004882:	429a      	cmp	r2, r3
 8004884:	d108      	bne.n	8004898 <HAL_UART_Transmit+0x94>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d104      	bne.n	8004898 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	e003      	b.n	80048a0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800489c:	2300      	movs	r3, #0
 800489e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048a0:	e02f      	b.n	8004902 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	0013      	movs	r3, r2
 80048ac:	2200      	movs	r2, #0
 80048ae:	2180      	movs	r1, #128	@ 0x80
 80048b0:	f000 fae4 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 80048b4:	1e03      	subs	r3, r0, #0
 80048b6:	d004      	beq.n	80048c2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e03b      	b.n	800493a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	881a      	ldrh	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	05d2      	lsls	r2, r2, #23
 80048d2:	0dd2      	lsrs	r2, r2, #23
 80048d4:	b292      	uxth	r2, r2
 80048d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	3302      	adds	r3, #2
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	e007      	b.n	80048f0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	781a      	ldrb	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	3301      	adds	r3, #1
 80048ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2252      	movs	r2, #82	@ 0x52
 80048f4:	5a9b      	ldrh	r3, [r3, r2]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b299      	uxth	r1, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2252      	movs	r2, #82	@ 0x52
 8004900:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2252      	movs	r2, #82	@ 0x52
 8004906:	5a9b      	ldrh	r3, [r3, r2]
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1c9      	bne.n	80048a2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	0013      	movs	r3, r2
 8004918:	2200      	movs	r2, #0
 800491a:	2140      	movs	r1, #64	@ 0x40
 800491c:	f000 faae 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004920:	1e03      	subs	r3, r0, #0
 8004922:	d004      	beq.n	800492e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e005      	b.n	800493a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	e000      	b.n	800493a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004938:	2302      	movs	r3, #2
  }
}
 800493a:	0018      	movs	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	b008      	add	sp, #32
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800494c:	231e      	movs	r3, #30
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a8d      	ldr	r2, [pc, #564]	@ (8004ba8 <UART_SetConfig+0x264>)
 8004974:	4013      	ands	r3, r2
 8004976:	0019      	movs	r1, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	430a      	orrs	r2, r1
 8004980:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4a88      	ldr	r2, [pc, #544]	@ (8004bac <UART_SetConfig+0x268>)
 800498a:	4013      	ands	r3, r2
 800498c:	0019      	movs	r1, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a7f      	ldr	r2, [pc, #508]	@ (8004bb0 <UART_SetConfig+0x26c>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	0019      	movs	r1, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	430a      	orrs	r2, r1
 80049be:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a7b      	ldr	r2, [pc, #492]	@ (8004bb4 <UART_SetConfig+0x270>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d127      	bne.n	8004a1a <UART_SetConfig+0xd6>
 80049ca:	4b7b      	ldr	r3, [pc, #492]	@ (8004bb8 <UART_SetConfig+0x274>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ce:	2203      	movs	r2, #3
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d00d      	beq.n	80049f2 <UART_SetConfig+0xae>
 80049d6:	d81b      	bhi.n	8004a10 <UART_SetConfig+0xcc>
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d014      	beq.n	8004a06 <UART_SetConfig+0xc2>
 80049dc:	d818      	bhi.n	8004a10 <UART_SetConfig+0xcc>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <UART_SetConfig+0xa4>
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d00a      	beq.n	80049fc <UART_SetConfig+0xb8>
 80049e6:	e013      	b.n	8004a10 <UART_SetConfig+0xcc>
 80049e8:	231f      	movs	r3, #31
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e021      	b.n	8004a36 <UART_SetConfig+0xf2>
 80049f2:	231f      	movs	r3, #31
 80049f4:	18fb      	adds	r3, r7, r3
 80049f6:	2202      	movs	r2, #2
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	e01c      	b.n	8004a36 <UART_SetConfig+0xf2>
 80049fc:	231f      	movs	r3, #31
 80049fe:	18fb      	adds	r3, r7, r3
 8004a00:	2204      	movs	r2, #4
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	e017      	b.n	8004a36 <UART_SetConfig+0xf2>
 8004a06:	231f      	movs	r3, #31
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	2208      	movs	r2, #8
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	e012      	b.n	8004a36 <UART_SetConfig+0xf2>
 8004a10:	231f      	movs	r3, #31
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	2210      	movs	r2, #16
 8004a16:	701a      	strb	r2, [r3, #0]
 8004a18:	e00d      	b.n	8004a36 <UART_SetConfig+0xf2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a67      	ldr	r2, [pc, #412]	@ (8004bbc <UART_SetConfig+0x278>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d104      	bne.n	8004a2e <UART_SetConfig+0xea>
 8004a24:	231f      	movs	r3, #31
 8004a26:	18fb      	adds	r3, r7, r3
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	e003      	b.n	8004a36 <UART_SetConfig+0xf2>
 8004a2e:	231f      	movs	r3, #31
 8004a30:	18fb      	adds	r3, r7, r3
 8004a32:	2210      	movs	r2, #16
 8004a34:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	2380      	movs	r3, #128	@ 0x80
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d15c      	bne.n	8004afc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004a42:	231f      	movs	r3, #31
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d015      	beq.n	8004a78 <UART_SetConfig+0x134>
 8004a4c:	dc18      	bgt.n	8004a80 <UART_SetConfig+0x13c>
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d00d      	beq.n	8004a6e <UART_SetConfig+0x12a>
 8004a52:	dc15      	bgt.n	8004a80 <UART_SetConfig+0x13c>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <UART_SetConfig+0x11a>
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d005      	beq.n	8004a68 <UART_SetConfig+0x124>
 8004a5c:	e010      	b.n	8004a80 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a5e:	f7fe fc83 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 8004a62:	0003      	movs	r3, r0
 8004a64:	61bb      	str	r3, [r7, #24]
        break;
 8004a66:	e012      	b.n	8004a8e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a68:	4b55      	ldr	r3, [pc, #340]	@ (8004bc0 <UART_SetConfig+0x27c>)
 8004a6a:	61bb      	str	r3, [r7, #24]
        break;
 8004a6c:	e00f      	b.n	8004a8e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a6e:	f7fe fc1b 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8004a72:	0003      	movs	r3, r0
 8004a74:	61bb      	str	r3, [r7, #24]
        break;
 8004a76:	e00a      	b.n	8004a8e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a78:	2380      	movs	r3, #128	@ 0x80
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	61bb      	str	r3, [r7, #24]
        break;
 8004a7e:	e006      	b.n	8004a8e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a84:	231e      	movs	r3, #30
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	2201      	movs	r2, #1
 8004a8a:	701a      	strb	r2, [r3, #0]
        break;
 8004a8c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d100      	bne.n	8004a96 <UART_SetConfig+0x152>
 8004a94:	e07a      	b.n	8004b8c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	005a      	lsls	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	18d2      	adds	r2, r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	0010      	movs	r0, r2
 8004aaa:	f7fb fb37 	bl	800011c <__udivsi3>
 8004aae:	0003      	movs	r3, r0
 8004ab0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b0f      	cmp	r3, #15
 8004ab6:	d91c      	bls.n	8004af2 <UART_SetConfig+0x1ae>
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	2380      	movs	r3, #128	@ 0x80
 8004abc:	025b      	lsls	r3, r3, #9
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d217      	bcs.n	8004af2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	200e      	movs	r0, #14
 8004ac8:	183b      	adds	r3, r7, r0
 8004aca:	210f      	movs	r1, #15
 8004acc:	438a      	bics	r2, r1
 8004ace:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2207      	movs	r2, #7
 8004ad8:	4013      	ands	r3, r2
 8004ada:	b299      	uxth	r1, r3
 8004adc:	183b      	adds	r3, r7, r0
 8004ade:	183a      	adds	r2, r7, r0
 8004ae0:	8812      	ldrh	r2, [r2, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	183a      	adds	r2, r7, r0
 8004aec:	8812      	ldrh	r2, [r2, #0]
 8004aee:	60da      	str	r2, [r3, #12]
 8004af0:	e04c      	b.n	8004b8c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004af2:	231e      	movs	r3, #30
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	2201      	movs	r2, #1
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	e047      	b.n	8004b8c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004afc:	231f      	movs	r3, #31
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d015      	beq.n	8004b32 <UART_SetConfig+0x1ee>
 8004b06:	dc18      	bgt.n	8004b3a <UART_SetConfig+0x1f6>
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d00d      	beq.n	8004b28 <UART_SetConfig+0x1e4>
 8004b0c:	dc15      	bgt.n	8004b3a <UART_SetConfig+0x1f6>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <UART_SetConfig+0x1d4>
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d005      	beq.n	8004b22 <UART_SetConfig+0x1de>
 8004b16:	e010      	b.n	8004b3a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b18:	f7fe fc26 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 8004b1c:	0003      	movs	r3, r0
 8004b1e:	61bb      	str	r3, [r7, #24]
        break;
 8004b20:	e012      	b.n	8004b48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b22:	4b27      	ldr	r3, [pc, #156]	@ (8004bc0 <UART_SetConfig+0x27c>)
 8004b24:	61bb      	str	r3, [r7, #24]
        break;
 8004b26:	e00f      	b.n	8004b48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b28:	f7fe fbbe 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	61bb      	str	r3, [r7, #24]
        break;
 8004b30:	e00a      	b.n	8004b48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b32:	2380      	movs	r3, #128	@ 0x80
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	61bb      	str	r3, [r7, #24]
        break;
 8004b38:	e006      	b.n	8004b48 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b3e:	231e      	movs	r3, #30
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	2201      	movs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
        break;
 8004b46:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01e      	beq.n	8004b8c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	085a      	lsrs	r2, r3, #1
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	18d2      	adds	r2, r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	0019      	movs	r1, r3
 8004b5e:	0010      	movs	r0, r2
 8004b60:	f7fb fadc 	bl	800011c <__udivsi3>
 8004b64:	0003      	movs	r3, r0
 8004b66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b0f      	cmp	r3, #15
 8004b6c:	d90a      	bls.n	8004b84 <UART_SetConfig+0x240>
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	2380      	movs	r3, #128	@ 0x80
 8004b72:	025b      	lsls	r3, r3, #9
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d205      	bcs.n	8004b84 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	e003      	b.n	8004b8c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004b84:	231e      	movs	r3, #30
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2201      	movs	r2, #1
 8004b8a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b98:	231e      	movs	r3, #30
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	781b      	ldrb	r3, [r3, #0]
}
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	b008      	add	sp, #32
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	46c0      	nop			@ (mov r8, r8)
 8004ba8:	ffff69f3 	.word	0xffff69f3
 8004bac:	ffffcfff 	.word	0xffffcfff
 8004bb0:	fffff4ff 	.word	0xfffff4ff
 8004bb4:	40013800 	.word	0x40013800
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	40004400 	.word	0x40004400
 8004bc0:	007a1200 	.word	0x007a1200

08004bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d00b      	beq.n	8004bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8004d08 <UART_AdvFeatureConfig+0x144>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	0019      	movs	r1, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d00b      	beq.n	8004c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	4a43      	ldr	r2, [pc, #268]	@ (8004d0c <UART_AdvFeatureConfig+0x148>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	0019      	movs	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c14:	2202      	movs	r2, #2
 8004c16:	4013      	ands	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a3b      	ldr	r2, [pc, #236]	@ (8004d10 <UART_AdvFeatureConfig+0x14c>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	0019      	movs	r1, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	2204      	movs	r2, #4
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d00b      	beq.n	8004c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	4a34      	ldr	r2, [pc, #208]	@ (8004d14 <UART_AdvFeatureConfig+0x150>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	0019      	movs	r1, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	2210      	movs	r2, #16
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d00b      	beq.n	8004c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a2c      	ldr	r2, [pc, #176]	@ (8004d18 <UART_AdvFeatureConfig+0x154>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	0019      	movs	r1, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d00b      	beq.n	8004c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	4a25      	ldr	r2, [pc, #148]	@ (8004d1c <UART_AdvFeatureConfig+0x158>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	0019      	movs	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	2240      	movs	r2, #64	@ 0x40
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d01d      	beq.n	8004cde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d20 <UART_AdvFeatureConfig+0x15c>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	0019      	movs	r1, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cbe:	2380      	movs	r3, #128	@ 0x80
 8004cc0:	035b      	lsls	r3, r3, #13
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d10b      	bne.n	8004cde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	4a15      	ldr	r2, [pc, #84]	@ (8004d24 <UART_AdvFeatureConfig+0x160>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	0019      	movs	r1, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce2:	2280      	movs	r2, #128	@ 0x80
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4a0e      	ldr	r2, [pc, #56]	@ (8004d28 <UART_AdvFeatureConfig+0x164>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	0019      	movs	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	605a      	str	r2, [r3, #4]
  }
}
 8004d00:	46c0      	nop			@ (mov r8, r8)
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b002      	add	sp, #8
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	ffff7fff 	.word	0xffff7fff
 8004d0c:	fffdffff 	.word	0xfffdffff
 8004d10:	fffeffff 	.word	0xfffeffff
 8004d14:	fffbffff 	.word	0xfffbffff
 8004d18:	ffffefff 	.word	0xffffefff
 8004d1c:	ffffdfff 	.word	0xffffdfff
 8004d20:	ffefffff 	.word	0xffefffff
 8004d24:	ff9fffff 	.word	0xff9fffff
 8004d28:	fff7ffff 	.word	0xfff7ffff

08004d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b092      	sub	sp, #72	@ 0x48
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2284      	movs	r2, #132	@ 0x84
 8004d38:	2100      	movs	r1, #0
 8004d3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d3c:	f7fd fa46 	bl	80021cc <HAL_GetTick>
 8004d40:	0003      	movs	r3, r0
 8004d42:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d12c      	bne.n	8004dac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d54:	2280      	movs	r2, #128	@ 0x80
 8004d56:	0391      	lsls	r1, r2, #14
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4a46      	ldr	r2, [pc, #280]	@ (8004e74 <UART_CheckIdleState+0x148>)
 8004d5c:	9200      	str	r2, [sp, #0]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f000 f88c 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004d64:	1e03      	subs	r3, r0, #0
 8004d66:	d021      	beq.n	8004dac <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d68:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d72:	2301      	movs	r3, #1
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d78:	f383 8810 	msr	PRIMASK, r3
}
 8004d7c:	46c0      	nop			@ (mov r8, r8)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2180      	movs	r1, #128	@ 0x80
 8004d8a:	438a      	bics	r2, r1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d94:	f383 8810 	msr	PRIMASK, r3
}
 8004d98:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2278      	movs	r2, #120	@ 0x78
 8004da4:	2100      	movs	r1, #0
 8004da6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e05f      	b.n	8004e6c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2204      	movs	r2, #4
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d146      	bne.n	8004e48 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dbc:	2280      	movs	r2, #128	@ 0x80
 8004dbe:	03d1      	lsls	r1, r2, #15
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e74 <UART_CheckIdleState+0x148>)
 8004dc4:	9200      	str	r2, [sp, #0]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f000 f858 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004dcc:	1e03      	subs	r3, r0, #0
 8004dce:	d03b      	beq.n	8004e48 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dda:	2301      	movs	r3, #1
 8004ddc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f383 8810 	msr	PRIMASK, r3
}
 8004de4:	46c0      	nop			@ (mov r8, r8)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4921      	ldr	r1, [pc, #132]	@ (8004e78 <UART_CheckIdleState+0x14c>)
 8004df2:	400a      	ands	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f383 8810 	msr	PRIMASK, r3
}
 8004e00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e02:	f3ef 8310 	mrs	r3, PRIMASK
 8004e06:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e08:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f383 8810 	msr	PRIMASK, r3
}
 8004e16:	46c0      	nop			@ (mov r8, r8)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2101      	movs	r1, #1
 8004e24:	438a      	bics	r2, r1
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	f383 8810 	msr	PRIMASK, r3
}
 8004e32:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2280      	movs	r2, #128	@ 0x80
 8004e38:	2120      	movs	r1, #32
 8004e3a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2278      	movs	r2, #120	@ 0x78
 8004e40:	2100      	movs	r1, #0
 8004e42:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e011      	b.n	8004e6c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2280      	movs	r2, #128	@ 0x80
 8004e52:	2120      	movs	r1, #32
 8004e54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2278      	movs	r2, #120	@ 0x78
 8004e66:	2100      	movs	r1, #0
 8004e68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b010      	add	sp, #64	@ 0x40
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	01ffffff 	.word	0x01ffffff
 8004e78:	fffffedf 	.word	0xfffffedf

08004e7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	1dfb      	adds	r3, r7, #7
 8004e8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8c:	e051      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	3301      	adds	r3, #1
 8004e92:	d04e      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e94:	f7fd f99a 	bl	80021cc <HAL_GetTick>
 8004e98:	0002      	movs	r2, r0
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d302      	bcc.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e051      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d03b      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b80      	cmp	r3, #128	@ 0x80
 8004ebe:	d038      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b40      	cmp	r3, #64	@ 0x40
 8004ec4:	d035      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d111      	bne.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2208      	movs	r2, #8
 8004eda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f000 f83c 	bl	8004f5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2284      	movs	r2, #132	@ 0x84
 8004ee8:	2108      	movs	r1, #8
 8004eea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2278      	movs	r2, #120	@ 0x78
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e02c      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69da      	ldr	r2, [r3, #28]
 8004efe:	2380      	movs	r3, #128	@ 0x80
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	401a      	ands	r2, r3
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d112      	bne.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2280      	movs	r2, #128	@ 0x80
 8004f12:	0112      	lsls	r2, r2, #4
 8004f14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 f81f 	bl	8004f5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2284      	movs	r2, #132	@ 0x84
 8004f22:	2120      	movs	r1, #32
 8004f24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2278      	movs	r2, #120	@ 0x78
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e00f      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	425a      	negs	r2, r3
 8004f42:	4153      	adcs	r3, r2
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	001a      	movs	r2, r3
 8004f48:	1dfb      	adds	r3, r7, #7
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d09e      	beq.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	0018      	movs	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b004      	add	sp, #16
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08e      	sub	sp, #56	@ 0x38
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f64:	f3ef 8310 	mrs	r3, PRIMASK
 8004f68:	617b      	str	r3, [r7, #20]
  return(result);
 8004f6a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f6e:	2301      	movs	r3, #1
 8004f70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	f383 8810 	msr	PRIMASK, r3
}
 8004f78:	46c0      	nop			@ (mov r8, r8)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4926      	ldr	r1, [pc, #152]	@ (8005020 <UART_EndRxTransfer+0xc4>)
 8004f86:	400a      	ands	r2, r1
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f383 8810 	msr	PRIMASK, r3
}
 8004f94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f96:	f3ef 8310 	mrs	r3, PRIMASK
 8004f9a:	623b      	str	r3, [r7, #32]
  return(result);
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	f383 8810 	msr	PRIMASK, r3
}
 8004faa:	46c0      	nop			@ (mov r8, r8)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	438a      	bics	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc2:	f383 8810 	msr	PRIMASK, r3
}
 8004fc6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d118      	bne.n	8005002 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fda:	2301      	movs	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f383 8810 	msr	PRIMASK, r3
}
 8004fe4:	46c0      	nop			@ (mov r8, r8)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2110      	movs	r1, #16
 8004ff2:	438a      	bics	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2280      	movs	r2, #128	@ 0x80
 8005006:	2120      	movs	r1, #32
 8005008:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005016:	46c0      	nop			@ (mov r8, r8)
 8005018:	46bd      	mov	sp, r7
 800501a:	b00e      	add	sp, #56	@ 0x38
 800501c:	bd80      	pop	{r7, pc}
 800501e:	46c0      	nop			@ (mov r8, r8)
 8005020:	fffffedf 	.word	0xfffffedf

08005024 <WS28XX_Delay>:
void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed);

/***********************************************************************************************************/

void WS28XX_Delay(uint32_t Delay)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
#if WS28XX_RTOS == WS28XX_RTOS_DISABLE
  HAL_Delay(Delay);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	0018      	movs	r0, r3
 8005030:	f7fd f8d6 	bl	80021e0 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8005034:	46c0      	nop			@ (mov r8, r8)
 8005036:	46bd      	mov	sp, r7
 8005038:	b002      	add	sp, #8
 800503a:	bd80      	pop	{r7, pc}

0800503c <WS28XX_Lock>:

/***********************************************************************************************************/

void WS28XX_Lock(WS28XX_HandleTypeDef *hLed)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  while (hLed->Lock)
 8005044:	e002      	b.n	800504c <WS28XX_Lock+0x10>
  {
    WS28XX_Delay(1);
 8005046:	2001      	movs	r0, #1
 8005048:	f7ff ffec 	bl	8005024 <WS28XX_Delay>
  while (hLed->Lock)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	795b      	ldrb	r3, [r3, #5]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f8      	bne.n	8005046 <WS28XX_Lock+0xa>
  }
  hLed->Lock = 1;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	715a      	strb	r2, [r3, #5]
}
 800505a:	46c0      	nop			@ (mov r8, r8)
 800505c:	46bd      	mov	sp, r7
 800505e:	b002      	add	sp, #8
 8005060:	bd80      	pop	{r7, pc}

08005062 <WS28XX_UnLock>:

/***********************************************************************************************************/

void WS28XX_UnLock(WS28XX_HandleTypeDef *hLed)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  hLed->Lock = 0;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	715a      	strb	r2, [r3, #5]
}
 8005070:	46c0      	nop			@ (mov r8, r8)
 8005072:	46bd      	mov	sp, r7
 8005074:	b002      	add	sp, #8
 8005076:	bd80      	pop	{r7, pc}

08005078 <WS28XX_Init>:
  *
  * @retval bool: true or false
  */
bool WS28XX_Init(WS28XX_HandleTypeDef *hLed, TIM_HandleTypeDef *hTim,
      uint16_t TimerBusFrequencyMHz, uint8_t Channel, uint16_t Pixel)
{
 8005078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	0019      	movs	r1, r3
 8005084:	1dbb      	adds	r3, r7, #6
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	1d7b      	adds	r3, r7, #5
 800508a:	1c0a      	adds	r2, r1, #0
 800508c:	701a      	strb	r2, [r3, #0]
  bool answer = false;
 800508e:	2517      	movs	r5, #23
 8005090:	197b      	adds	r3, r7, r5
 8005092:	2200      	movs	r2, #0
 8005094:	701a      	strb	r2, [r3, #0]
  uint32_t aar_value;
  do
  {
    if (hLed == NULL || hTim == NULL)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d100      	bne.n	800509e <WS28XX_Init+0x26>
 800509c:	e08e      	b.n	80051bc <WS28XX_Init+0x144>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d100      	bne.n	80050a6 <WS28XX_Init+0x2e>
 80050a4:	e08a      	b.n	80051bc <WS28XX_Init+0x144>
    {
      break;
    }
    if (Pixel > WS28XX_PIXEL_MAX)
 80050a6:	2420      	movs	r4, #32
 80050a8:	2608      	movs	r6, #8
 80050aa:	19a3      	adds	r3, r4, r6
 80050ac:	2208      	movs	r2, #8
 80050ae:	4694      	mov	ip, r2
 80050b0:	44bc      	add	ip, r7
 80050b2:	4463      	add	r3, ip
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	2b0a      	cmp	r3, #10
 80050b8:	d900      	bls.n	80050bc <WS28XX_Init+0x44>
 80050ba:	e07e      	b.n	80051ba <WS28XX_Init+0x142>
    {
      break;
    }
    hLed->Channel = Channel;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1d7a      	adds	r2, r7, #5
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	711a      	strb	r2, [r3, #4]
    hLed->MaxPixel = Pixel;
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	19a3      	adds	r3, r4, r6
 80050c8:	2108      	movs	r1, #8
 80050ca:	468c      	mov	ip, r1
 80050cc:	44bc      	add	ip, r7
 80050ce:	4463      	add	r3, ip
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	8153      	strh	r3, [r2, #10]
    hLed->hTim = hTim;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	601a      	str	r2, [r3, #0]
    aar_value = (TimerBusFrequencyMHz / (1.0f / (WS28XX_PULSE_LENGTH_NS / 1000.0f))) - 1;
 80050da:	1dbb      	adds	r3, r7, #6
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	0018      	movs	r0, r3
 80050e0:	f7fb fdfa 	bl	8000cd8 <__aeabi_i2f>
 80050e4:	1c03      	adds	r3, r0, #0
 80050e6:	4939      	ldr	r1, [pc, #228]	@ (80051cc <WS28XX_Init+0x154>)
 80050e8:	1c18      	adds	r0, r3, #0
 80050ea:	f7fb f9d3 	bl	8000494 <__aeabi_fdiv>
 80050ee:	1c03      	adds	r3, r0, #0
 80050f0:	21fe      	movs	r1, #254	@ 0xfe
 80050f2:	0589      	lsls	r1, r1, #22
 80050f4:	1c18      	adds	r0, r3, #0
 80050f6:	f7fb fc2b 	bl	8000950 <__aeabi_fsub>
 80050fa:	1c03      	adds	r3, r0, #0
 80050fc:	1c18      	adds	r0, r3, #0
 80050fe:	f7fb f9b1 	bl	8000464 <__aeabi_f2uiz>
 8005102:	0003      	movs	r3, r0
 8005104:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_AUTORELOAD(hLed->hTim ,aar_value);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_PRESCALER(hLed->hTim, 0);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2200      	movs	r2, #0
 8005120:	629a      	str	r2, [r3, #40]	@ 0x28
    hLed->Pulse0 = ((WS28XX_PULSE_0_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 8005122:	6938      	ldr	r0, [r7, #16]
 8005124:	f7fb fe24 	bl	8000d70 <__aeabi_ui2f>
 8005128:	1c03      	adds	r3, r0, #0
 800512a:	4929      	ldr	r1, [pc, #164]	@ (80051d0 <WS28XX_Init+0x158>)
 800512c:	1c18      	adds	r0, r3, #0
 800512e:	f7fb fad1 	bl	80006d4 <__aeabi_fmul>
 8005132:	1c03      	adds	r3, r0, #0
 8005134:	4927      	ldr	r1, [pc, #156]	@ (80051d4 <WS28XX_Init+0x15c>)
 8005136:	1c18      	adds	r0, r3, #0
 8005138:	f7fb f9ac 	bl	8000494 <__aeabi_fdiv>
 800513c:	1c03      	adds	r3, r0, #0
 800513e:	1c18      	adds	r0, r3, #0
 8005140:	f7fb f990 	bl	8000464 <__aeabi_f2uiz>
 8005144:	0003      	movs	r3, r0
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	80da      	strh	r2, [r3, #6]
    hLed->Pulse1 = ((WS28XX_PULSE_1_NS / 1000.0f) * aar_value) / (WS28XX_PULSE_LENGTH_NS / 1000.0f);
 800514c:	6938      	ldr	r0, [r7, #16]
 800514e:	f7fb fe0f 	bl	8000d70 <__aeabi_ui2f>
 8005152:	1c03      	adds	r3, r0, #0
 8005154:	491d      	ldr	r1, [pc, #116]	@ (80051cc <WS28XX_Init+0x154>)
 8005156:	1c18      	adds	r0, r3, #0
 8005158:	f7fb fabc 	bl	80006d4 <__aeabi_fmul>
 800515c:	1c03      	adds	r3, r0, #0
 800515e:	491d      	ldr	r1, [pc, #116]	@ (80051d4 <WS28XX_Init+0x15c>)
 8005160:	1c18      	adds	r0, r3, #0
 8005162:	f7fb f997 	bl	8000494 <__aeabi_fdiv>
 8005166:	1c03      	adds	r3, r0, #0
 8005168:	1c18      	adds	r0, r3, #0
 800516a:	f7fb f97b 	bl	8000464 <__aeabi_f2uiz>
 800516e:	0003      	movs	r3, r0
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	811a      	strh	r2, [r3, #8]
    memset(hLed->Pixel, 0, sizeof(hLed->Pixel));
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	330c      	adds	r3, #12
 800517a:	221e      	movs	r2, #30
 800517c:	2100      	movs	r1, #0
 800517e:	0018      	movs	r0, r3
 8005180:	f000 fa96 	bl	80056b0 <memset>
    memset(hLed->Buffer, 0, sizeof(hLed->Buffer));
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	332a      	adds	r3, #42	@ 0x2a
 8005188:	22f4      	movs	r2, #244	@ 0xf4
 800518a:	2100      	movs	r1, #0
 800518c:	0018      	movs	r0, r3
 800518e:	f000 fa8f 	bl	80056b0 <memset>
    HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, Pixel);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	791b      	ldrb	r3, [r3, #4]
 800519a:	0019      	movs	r1, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	332a      	adds	r3, #42	@ 0x2a
 80051a0:	001a      	movs	r2, r3
 80051a2:	19a3      	adds	r3, r4, r6
 80051a4:	2408      	movs	r4, #8
 80051a6:	46a4      	mov	ip, r4
 80051a8:	44bc      	add	ip, r7
 80051aa:	4463      	add	r3, ip
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	f7fe faab 	bl	8003708 <HAL_TIM_PWM_Start_DMA>
    answer = true;
 80051b2:	197b      	adds	r3, r7, r5
 80051b4:	2201      	movs	r2, #1
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	e000      	b.n	80051bc <WS28XX_Init+0x144>
      break;
 80051ba:	46c0      	nop			@ (mov r8, r8)
  }
  while (0);

  return answer;
 80051bc:	2317      	movs	r3, #23
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	781b      	ldrb	r3, [r3, #0]
}
 80051c2:	0018      	movs	r0, r3
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b007      	add	sp, #28
 80051c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ca:	46c0      	nop			@ (mov r8, r8)
 80051cc:	3f4ccccd 	.word	0x3f4ccccd
 80051d0:	3ecccccd 	.word	0x3ecccccd
 80051d4:	3fa00000 	.word	0x3fa00000

080051d8 <WS28XX_SetPixel_RGBW_565>:
  * @param  Brightness: Brightness level, 0 to 255
  *
  * @retval bool: true or false
  */
bool WS28XX_SetPixel_RGBW_565(WS28XX_HandleTypeDef *hLed, uint16_t Pixel, uint16_t Color, uint8_t Brightness)
{
 80051d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	000c      	movs	r4, r1
 80051e2:	0010      	movs	r0, r2
 80051e4:	0019      	movs	r1, r3
 80051e6:	250a      	movs	r5, #10
 80051e8:	197b      	adds	r3, r7, r5
 80051ea:	1c22      	adds	r2, r4, #0
 80051ec:	801a      	strh	r2, [r3, #0]
 80051ee:	2308      	movs	r3, #8
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	1c02      	adds	r2, r0, #0
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	1dfb      	adds	r3, r7, #7
 80051f8:	1c0a      	adds	r2, r1, #0
 80051fa:	701a      	strb	r2, [r3, #0]
  bool answer = true;
 80051fc:	2117      	movs	r1, #23
 80051fe:	187b      	adds	r3, r7, r1
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
  uint8_t Red, Green, Blue;
  do
  {
    if (Pixel >= hLed->MaxPixel)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	895b      	ldrh	r3, [r3, #10]
 8005208:	197a      	adds	r2, r7, r5
 800520a:	8812      	ldrh	r2, [r2, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d303      	bcc.n	8005218 <WS28XX_SetPixel_RGBW_565+0x40>
    {
      answer = false;
 8005210:	187b      	adds	r3, r7, r1
 8005212:	2200      	movs	r2, #0
 8005214:	701a      	strb	r2, [r3, #0]
      break;
 8005216:	e063      	b.n	80052e0 <WS28XX_SetPixel_RGBW_565+0x108>
    }
    Red = ((Color >> 8) & 0xF8) * Brightness / 255;
 8005218:	2408      	movs	r4, #8
 800521a:	193b      	adds	r3, r7, r4
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	0a1b      	lsrs	r3, r3, #8
 8005220:	b29b      	uxth	r3, r3
 8005222:	001a      	movs	r2, r3
 8005224:	23f8      	movs	r3, #248	@ 0xf8
 8005226:	4013      	ands	r3, r2
 8005228:	1dfa      	adds	r2, r7, #7
 800522a:	7812      	ldrb	r2, [r2, #0]
 800522c:	4353      	muls	r3, r2
 800522e:	21ff      	movs	r1, #255	@ 0xff
 8005230:	0018      	movs	r0, r3
 8005232:	f7fa fffd 	bl	8000230 <__divsi3>
 8005236:	0003      	movs	r3, r0
 8005238:	001a      	movs	r2, r3
 800523a:	2516      	movs	r5, #22
 800523c:	197b      	adds	r3, r7, r5
 800523e:	701a      	strb	r2, [r3, #0]
    Green = ((Color >> 3) & 0xFC)* Brightness / 255;
 8005240:	193b      	adds	r3, r7, r4
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	08db      	lsrs	r3, r3, #3
 8005246:	b29b      	uxth	r3, r3
 8005248:	001a      	movs	r2, r3
 800524a:	23fc      	movs	r3, #252	@ 0xfc
 800524c:	4013      	ands	r3, r2
 800524e:	1dfa      	adds	r2, r7, #7
 8005250:	7812      	ldrb	r2, [r2, #0]
 8005252:	4353      	muls	r3, r2
 8005254:	21ff      	movs	r1, #255	@ 0xff
 8005256:	0018      	movs	r0, r3
 8005258:	f7fa ffea 	bl	8000230 <__divsi3>
 800525c:	0003      	movs	r3, r0
 800525e:	001a      	movs	r2, r3
 8005260:	2615      	movs	r6, #21
 8005262:	19bb      	adds	r3, r7, r6
 8005264:	701a      	strb	r2, [r3, #0]
    Blue = ((Color << 3) & 0xF8) * Brightness / 255;
 8005266:	193b      	adds	r3, r7, r4
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	22ff      	movs	r2, #255	@ 0xff
 800526e:	4013      	ands	r3, r2
 8005270:	1dfa      	adds	r2, r7, #7
 8005272:	7812      	ldrb	r2, [r2, #0]
 8005274:	4353      	muls	r3, r2
 8005276:	21ff      	movs	r1, #255	@ 0xff
 8005278:	0018      	movs	r0, r3
 800527a:	f7fa ffd9 	bl	8000230 <__divsi3>
 800527e:	0003      	movs	r3, r0
 8005280:	001a      	movs	r2, r3
 8005282:	2314      	movs	r3, #20
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	701a      	strb	r2, [r3, #0]
#elif WS28XX_ORDER == WS28XX_ORDER_BGR
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Blue];
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Green];
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Red];
#elif WS28XX_ORDER == WS28XX_ORDER_GRB
    hLed->Pixel[Pixel][0] = WS28XX_GammaTable[Green];
 8005288:	19bb      	adds	r3, r7, r6
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	240a      	movs	r4, #10
 800528e:	193a      	adds	r2, r7, r4
 8005290:	8812      	ldrh	r2, [r2, #0]
 8005292:	4917      	ldr	r1, [pc, #92]	@ (80052f0 <WS28XX_SetPixel_RGBW_565+0x118>)
 8005294:	5cc8      	ldrb	r0, [r1, r3]
 8005296:	68f9      	ldr	r1, [r7, #12]
 8005298:	0013      	movs	r3, r2
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	189b      	adds	r3, r3, r2
 800529e:	18cb      	adds	r3, r1, r3
 80052a0:	330c      	adds	r3, #12
 80052a2:	1c02      	adds	r2, r0, #0
 80052a4:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][1] = WS28XX_GammaTable[Red];
 80052a6:	197b      	adds	r3, r7, r5
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	193a      	adds	r2, r7, r4
 80052ac:	8812      	ldrh	r2, [r2, #0]
 80052ae:	4910      	ldr	r1, [pc, #64]	@ (80052f0 <WS28XX_SetPixel_RGBW_565+0x118>)
 80052b0:	5cc8      	ldrb	r0, [r1, r3]
 80052b2:	68f9      	ldr	r1, [r7, #12]
 80052b4:	0013      	movs	r3, r2
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	189b      	adds	r3, r3, r2
 80052ba:	18cb      	adds	r3, r1, r3
 80052bc:	330d      	adds	r3, #13
 80052be:	1c02      	adds	r2, r0, #0
 80052c0:	701a      	strb	r2, [r3, #0]
    hLed->Pixel[Pixel][2] = WS28XX_GammaTable[Blue];
 80052c2:	2314      	movs	r3, #20
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	193a      	adds	r2, r7, r4
 80052ca:	8812      	ldrh	r2, [r2, #0]
 80052cc:	4908      	ldr	r1, [pc, #32]	@ (80052f0 <WS28XX_SetPixel_RGBW_565+0x118>)
 80052ce:	5cc8      	ldrb	r0, [r1, r3]
 80052d0:	68f9      	ldr	r1, [r7, #12]
 80052d2:	0013      	movs	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	189b      	adds	r3, r3, r2
 80052d8:	18cb      	adds	r3, r1, r3
 80052da:	330e      	adds	r3, #14
 80052dc:	1c02      	adds	r2, r0, #0
 80052de:	701a      	strb	r2, [r3, #0]
#endif
  }

  while (0);

  return answer;
 80052e0:	2317      	movs	r3, #23
 80052e2:	18fb      	adds	r3, r7, r3
 80052e4:	781b      	ldrb	r3, [r3, #0]
}
 80052e6:	0018      	movs	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b007      	add	sp, #28
 80052ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ee:	46c0      	nop			@ (mov r8, r8)
 80052f0:	08006530 	.word	0x08006530

080052f4 <WS28XX_Update>:
  * @param  *hLed: Pointer to WS28XX_hLedTypeDef structure
  *
  * @retval bool: true or false
  */
bool WS28XX_Update(WS28XX_HandleTypeDef *hLed)
{
 80052f4:	b590      	push	{r4, r7, lr}
 80052f6:	b089      	sub	sp, #36	@ 0x24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  bool answer = true;
 80052fc:	231f      	movs	r3, #31
 80052fe:	18fb      	adds	r3, r7, r3
 8005300:	2201      	movs	r2, #1
 8005302:	701a      	strb	r2, [r3, #0]
  uint32_t i = 2;
 8005304:	2302      	movs	r3, #2
 8005306:	61bb      	str	r3, [r7, #24]
  WS28XX_Lock(hLed);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	0018      	movs	r0, r3
 800530c:	f7ff fe96 	bl	800503c <WS28XX_Lock>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8005310:	2316      	movs	r3, #22
 8005312:	18fb      	adds	r3, r7, r3
 8005314:	2200      	movs	r2, #0
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e042      	b.n	80053a0 <WS28XX_Update+0xac>
  {
    for (int rgb = 0; rgb < 3; rgb ++)
 800531a:	2300      	movs	r3, #0
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	e036      	b.n	800538e <WS28XX_Update+0x9a>
    {
      for (int b = 7; b >= 0 ; b--)
 8005320:	2307      	movs	r3, #7
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e02d      	b.n	8005382 <WS28XX_Update+0x8e>
      {
        if ((hLed->Pixel[pixel][rgb] & (1 << b)) == 0)
 8005326:	2316      	movs	r3, #22
 8005328:	18fb      	adds	r3, r7, r3
 800532a:	881a      	ldrh	r2, [r3, #0]
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	0013      	movs	r3, r2
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	189b      	adds	r3, r3, r2
 8005334:	18ca      	adds	r2, r1, r3
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	18d3      	adds	r3, r2, r3
 800533a:	330c      	adds	r3, #12
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	001a      	movs	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	411a      	asrs	r2, r3
 8005344:	0013      	movs	r3, r2
 8005346:	2201      	movs	r2, #1
 8005348:	4013      	ands	r3, r2
 800534a:	d10a      	bne.n	8005362 <WS28XX_Update+0x6e>
        {
          hLed->Buffer[i] = hLed->Pulse0;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	88db      	ldrh	r3, [r3, #6]
 8005350:	b2d8      	uxtb	r0, r3
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	212a      	movs	r1, #42	@ 0x2a
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	18d3      	adds	r3, r2, r3
 800535a:	185b      	adds	r3, r3, r1
 800535c:	1c02      	adds	r2, r0, #0
 800535e:	701a      	strb	r2, [r3, #0]
 8005360:	e009      	b.n	8005376 <WS28XX_Update+0x82>
        }
        else
        {
          hLed->Buffer[i] = hLed->Pulse1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	891b      	ldrh	r3, [r3, #8]
 8005366:	b2d8      	uxtb	r0, r3
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	212a      	movs	r1, #42	@ 0x2a
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	18d3      	adds	r3, r2, r3
 8005370:	185b      	adds	r3, r3, r1
 8005372:	1c02      	adds	r2, r0, #0
 8005374:	701a      	strb	r2, [r3, #0]
        }
        i++;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	3301      	adds	r3, #1
 800537a:	61bb      	str	r3, [r7, #24]
      for (int b = 7; b >= 0 ; b--)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3b01      	subs	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	dace      	bge.n	8005326 <WS28XX_Update+0x32>
    for (int rgb = 0; rgb < 3; rgb ++)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	3301      	adds	r3, #1
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b02      	cmp	r3, #2
 8005392:	ddc5      	ble.n	8005320 <WS28XX_Update+0x2c>
  for (uint16_t pixel = 0; pixel < hLed->MaxPixel; pixel++)
 8005394:	2116      	movs	r1, #22
 8005396:	187b      	adds	r3, r7, r1
 8005398:	881a      	ldrh	r2, [r3, #0]
 800539a:	187b      	adds	r3, r7, r1
 800539c:	3201      	adds	r2, #1
 800539e:	801a      	strh	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	895b      	ldrh	r3, [r3, #10]
 80053a4:	2216      	movs	r2, #22
 80053a6:	18ba      	adds	r2, r7, r2
 80053a8:	8812      	ldrh	r2, [r2, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d3b5      	bcc.n	800531a <WS28XX_Update+0x26>
      }
    }
  }
  if (HAL_TIM_PWM_Start_DMA(hLed->hTim, hLed->Channel, (const uint32_t*)hLed->Buffer, (hLed->MaxPixel * 24) + 4) != HAL_OK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	791b      	ldrb	r3, [r3, #4]
 80053b6:	001c      	movs	r4, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	332a      	adds	r3, #42	@ 0x2a
 80053bc:	001a      	movs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	895b      	ldrh	r3, [r3, #10]
 80053c2:	2118      	movs	r1, #24
 80053c4:	434b      	muls	r3, r1
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3304      	adds	r3, #4
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	0021      	movs	r1, r4
 80053ce:	f7fe f99b 	bl	8003708 <HAL_TIM_PWM_Start_DMA>
 80053d2:	1e03      	subs	r3, r0, #0
 80053d4:	d003      	beq.n	80053de <WS28XX_Update+0xea>
  {
    answer = false;
 80053d6:	231f      	movs	r3, #31
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	2200      	movs	r2, #0
 80053dc:	701a      	strb	r2, [r3, #0]
  }
  WS28XX_UnLock(hLed);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7ff fe3e 	bl	8005062 <WS28XX_UnLock>
  return answer;
 80053e6:	231f      	movs	r3, #31
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	781b      	ldrb	r3, [r3, #0]
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b009      	add	sp, #36	@ 0x24
 80053f2:	bd90      	pop	{r4, r7, pc}

080053f4 <rand>:
 80053f4:	4b16      	ldr	r3, [pc, #88]	@ (8005450 <rand+0x5c>)
 80053f6:	b510      	push	{r4, lr}
 80053f8:	681c      	ldr	r4, [r3, #0]
 80053fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d116      	bne.n	800542e <rand+0x3a>
 8005400:	2018      	movs	r0, #24
 8005402:	f000 fa41 	bl	8005888 <malloc>
 8005406:	1e02      	subs	r2, r0, #0
 8005408:	6320      	str	r0, [r4, #48]	@ 0x30
 800540a:	d104      	bne.n	8005416 <rand+0x22>
 800540c:	2152      	movs	r1, #82	@ 0x52
 800540e:	4b11      	ldr	r3, [pc, #68]	@ (8005454 <rand+0x60>)
 8005410:	4811      	ldr	r0, [pc, #68]	@ (8005458 <rand+0x64>)
 8005412:	f000 f9d1 	bl	80057b8 <__assert_func>
 8005416:	4b11      	ldr	r3, [pc, #68]	@ (800545c <rand+0x68>)
 8005418:	2100      	movs	r1, #0
 800541a:	6003      	str	r3, [r0, #0]
 800541c:	4b10      	ldr	r3, [pc, #64]	@ (8005460 <rand+0x6c>)
 800541e:	6043      	str	r3, [r0, #4]
 8005420:	4b10      	ldr	r3, [pc, #64]	@ (8005464 <rand+0x70>)
 8005422:	6083      	str	r3, [r0, #8]
 8005424:	230b      	movs	r3, #11
 8005426:	8183      	strh	r3, [r0, #12]
 8005428:	2001      	movs	r0, #1
 800542a:	6110      	str	r0, [r2, #16]
 800542c:	6151      	str	r1, [r2, #20]
 800542e:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8005430:	4a0d      	ldr	r2, [pc, #52]	@ (8005468 <rand+0x74>)
 8005432:	6920      	ldr	r0, [r4, #16]
 8005434:	6961      	ldr	r1, [r4, #20]
 8005436:	4b0d      	ldr	r3, [pc, #52]	@ (800546c <rand+0x78>)
 8005438:	f7fa ffe6 	bl	8000408 <__aeabi_lmul>
 800543c:	2201      	movs	r2, #1
 800543e:	2300      	movs	r3, #0
 8005440:	1880      	adds	r0, r0, r2
 8005442:	4159      	adcs	r1, r3
 8005444:	6120      	str	r0, [r4, #16]
 8005446:	6161      	str	r1, [r4, #20]
 8005448:	0048      	lsls	r0, r1, #1
 800544a:	0840      	lsrs	r0, r0, #1
 800544c:	bd10      	pop	{r4, pc}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	20000028 	.word	0x20000028
 8005454:	08006630 	.word	0x08006630
 8005458:	08006647 	.word	0x08006647
 800545c:	abcd330e 	.word	0xabcd330e
 8005460:	e66d1234 	.word	0xe66d1234
 8005464:	0005deec 	.word	0x0005deec
 8005468:	4c957f2d 	.word	0x4c957f2d
 800546c:	5851f42d 	.word	0x5851f42d

08005470 <std>:
 8005470:	2300      	movs	r3, #0
 8005472:	b510      	push	{r4, lr}
 8005474:	0004      	movs	r4, r0
 8005476:	6003      	str	r3, [r0, #0]
 8005478:	6043      	str	r3, [r0, #4]
 800547a:	6083      	str	r3, [r0, #8]
 800547c:	8181      	strh	r1, [r0, #12]
 800547e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005480:	81c2      	strh	r2, [r0, #14]
 8005482:	6103      	str	r3, [r0, #16]
 8005484:	6143      	str	r3, [r0, #20]
 8005486:	6183      	str	r3, [r0, #24]
 8005488:	0019      	movs	r1, r3
 800548a:	2208      	movs	r2, #8
 800548c:	305c      	adds	r0, #92	@ 0x5c
 800548e:	f000 f90f 	bl	80056b0 <memset>
 8005492:	4b0b      	ldr	r3, [pc, #44]	@ (80054c0 <std+0x50>)
 8005494:	6224      	str	r4, [r4, #32]
 8005496:	6263      	str	r3, [r4, #36]	@ 0x24
 8005498:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <std+0x54>)
 800549a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800549c:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <std+0x58>)
 800549e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054a0:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <std+0x5c>)
 80054a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80054a4:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <std+0x60>)
 80054a6:	429c      	cmp	r4, r3
 80054a8:	d005      	beq.n	80054b6 <std+0x46>
 80054aa:	4b0a      	ldr	r3, [pc, #40]	@ (80054d4 <std+0x64>)
 80054ac:	429c      	cmp	r4, r3
 80054ae:	d002      	beq.n	80054b6 <std+0x46>
 80054b0:	4b09      	ldr	r3, [pc, #36]	@ (80054d8 <std+0x68>)
 80054b2:	429c      	cmp	r4, r3
 80054b4:	d103      	bne.n	80054be <std+0x4e>
 80054b6:	0020      	movs	r0, r4
 80054b8:	3058      	adds	r0, #88	@ 0x58
 80054ba:	f000 f979 	bl	80057b0 <__retarget_lock_init_recursive>
 80054be:	bd10      	pop	{r4, pc}
 80054c0:	08005619 	.word	0x08005619
 80054c4:	08005641 	.word	0x08005641
 80054c8:	08005679 	.word	0x08005679
 80054cc:	080056a5 	.word	0x080056a5
 80054d0:	20000340 	.word	0x20000340
 80054d4:	200003a8 	.word	0x200003a8
 80054d8:	20000410 	.word	0x20000410

080054dc <stdio_exit_handler>:
 80054dc:	b510      	push	{r4, lr}
 80054de:	4a03      	ldr	r2, [pc, #12]	@ (80054ec <stdio_exit_handler+0x10>)
 80054e0:	4903      	ldr	r1, [pc, #12]	@ (80054f0 <stdio_exit_handler+0x14>)
 80054e2:	4804      	ldr	r0, [pc, #16]	@ (80054f4 <stdio_exit_handler+0x18>)
 80054e4:	f000 f86c 	bl	80055c0 <_fwalk_sglue>
 80054e8:	bd10      	pop	{r4, pc}
 80054ea:	46c0      	nop			@ (mov r8, r8)
 80054ec:	2000001c 	.word	0x2000001c
 80054f0:	08006091 	.word	0x08006091
 80054f4:	2000002c 	.word	0x2000002c

080054f8 <cleanup_stdio>:
 80054f8:	6841      	ldr	r1, [r0, #4]
 80054fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005528 <cleanup_stdio+0x30>)
 80054fc:	b510      	push	{r4, lr}
 80054fe:	0004      	movs	r4, r0
 8005500:	4299      	cmp	r1, r3
 8005502:	d001      	beq.n	8005508 <cleanup_stdio+0x10>
 8005504:	f000 fdc4 	bl	8006090 <_fflush_r>
 8005508:	68a1      	ldr	r1, [r4, #8]
 800550a:	4b08      	ldr	r3, [pc, #32]	@ (800552c <cleanup_stdio+0x34>)
 800550c:	4299      	cmp	r1, r3
 800550e:	d002      	beq.n	8005516 <cleanup_stdio+0x1e>
 8005510:	0020      	movs	r0, r4
 8005512:	f000 fdbd 	bl	8006090 <_fflush_r>
 8005516:	68e1      	ldr	r1, [r4, #12]
 8005518:	4b05      	ldr	r3, [pc, #20]	@ (8005530 <cleanup_stdio+0x38>)
 800551a:	4299      	cmp	r1, r3
 800551c:	d002      	beq.n	8005524 <cleanup_stdio+0x2c>
 800551e:	0020      	movs	r0, r4
 8005520:	f000 fdb6 	bl	8006090 <_fflush_r>
 8005524:	bd10      	pop	{r4, pc}
 8005526:	46c0      	nop			@ (mov r8, r8)
 8005528:	20000340 	.word	0x20000340
 800552c:	200003a8 	.word	0x200003a8
 8005530:	20000410 	.word	0x20000410

08005534 <global_stdio_init.part.0>:
 8005534:	b510      	push	{r4, lr}
 8005536:	4b09      	ldr	r3, [pc, #36]	@ (800555c <global_stdio_init.part.0+0x28>)
 8005538:	4a09      	ldr	r2, [pc, #36]	@ (8005560 <global_stdio_init.part.0+0x2c>)
 800553a:	2104      	movs	r1, #4
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	4809      	ldr	r0, [pc, #36]	@ (8005564 <global_stdio_init.part.0+0x30>)
 8005540:	2200      	movs	r2, #0
 8005542:	f7ff ff95 	bl	8005470 <std>
 8005546:	2201      	movs	r2, #1
 8005548:	2109      	movs	r1, #9
 800554a:	4807      	ldr	r0, [pc, #28]	@ (8005568 <global_stdio_init.part.0+0x34>)
 800554c:	f7ff ff90 	bl	8005470 <std>
 8005550:	2202      	movs	r2, #2
 8005552:	2112      	movs	r1, #18
 8005554:	4805      	ldr	r0, [pc, #20]	@ (800556c <global_stdio_init.part.0+0x38>)
 8005556:	f7ff ff8b 	bl	8005470 <std>
 800555a:	bd10      	pop	{r4, pc}
 800555c:	20000478 	.word	0x20000478
 8005560:	080054dd 	.word	0x080054dd
 8005564:	20000340 	.word	0x20000340
 8005568:	200003a8 	.word	0x200003a8
 800556c:	20000410 	.word	0x20000410

08005570 <__sfp_lock_acquire>:
 8005570:	b510      	push	{r4, lr}
 8005572:	4802      	ldr	r0, [pc, #8]	@ (800557c <__sfp_lock_acquire+0xc>)
 8005574:	f000 f91d 	bl	80057b2 <__retarget_lock_acquire_recursive>
 8005578:	bd10      	pop	{r4, pc}
 800557a:	46c0      	nop			@ (mov r8, r8)
 800557c:	20000481 	.word	0x20000481

08005580 <__sfp_lock_release>:
 8005580:	b510      	push	{r4, lr}
 8005582:	4802      	ldr	r0, [pc, #8]	@ (800558c <__sfp_lock_release+0xc>)
 8005584:	f000 f916 	bl	80057b4 <__retarget_lock_release_recursive>
 8005588:	bd10      	pop	{r4, pc}
 800558a:	46c0      	nop			@ (mov r8, r8)
 800558c:	20000481 	.word	0x20000481

08005590 <__sinit>:
 8005590:	b510      	push	{r4, lr}
 8005592:	0004      	movs	r4, r0
 8005594:	f7ff ffec 	bl	8005570 <__sfp_lock_acquire>
 8005598:	6a23      	ldr	r3, [r4, #32]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <__sinit+0x14>
 800559e:	f7ff ffef 	bl	8005580 <__sfp_lock_release>
 80055a2:	bd10      	pop	{r4, pc}
 80055a4:	4b04      	ldr	r3, [pc, #16]	@ (80055b8 <__sinit+0x28>)
 80055a6:	6223      	str	r3, [r4, #32]
 80055a8:	4b04      	ldr	r3, [pc, #16]	@ (80055bc <__sinit+0x2c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1f6      	bne.n	800559e <__sinit+0xe>
 80055b0:	f7ff ffc0 	bl	8005534 <global_stdio_init.part.0>
 80055b4:	e7f3      	b.n	800559e <__sinit+0xe>
 80055b6:	46c0      	nop			@ (mov r8, r8)
 80055b8:	080054f9 	.word	0x080054f9
 80055bc:	20000478 	.word	0x20000478

080055c0 <_fwalk_sglue>:
 80055c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055c2:	0014      	movs	r4, r2
 80055c4:	2600      	movs	r6, #0
 80055c6:	9000      	str	r0, [sp, #0]
 80055c8:	9101      	str	r1, [sp, #4]
 80055ca:	68a5      	ldr	r5, [r4, #8]
 80055cc:	6867      	ldr	r7, [r4, #4]
 80055ce:	3f01      	subs	r7, #1
 80055d0:	d504      	bpl.n	80055dc <_fwalk_sglue+0x1c>
 80055d2:	6824      	ldr	r4, [r4, #0]
 80055d4:	2c00      	cmp	r4, #0
 80055d6:	d1f8      	bne.n	80055ca <_fwalk_sglue+0xa>
 80055d8:	0030      	movs	r0, r6
 80055da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055dc:	89ab      	ldrh	r3, [r5, #12]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d908      	bls.n	80055f4 <_fwalk_sglue+0x34>
 80055e2:	220e      	movs	r2, #14
 80055e4:	5eab      	ldrsh	r3, [r5, r2]
 80055e6:	3301      	adds	r3, #1
 80055e8:	d004      	beq.n	80055f4 <_fwalk_sglue+0x34>
 80055ea:	0029      	movs	r1, r5
 80055ec:	9800      	ldr	r0, [sp, #0]
 80055ee:	9b01      	ldr	r3, [sp, #4]
 80055f0:	4798      	blx	r3
 80055f2:	4306      	orrs	r6, r0
 80055f4:	3568      	adds	r5, #104	@ 0x68
 80055f6:	e7ea      	b.n	80055ce <_fwalk_sglue+0xe>

080055f8 <iprintf>:
 80055f8:	b40f      	push	{r0, r1, r2, r3}
 80055fa:	b507      	push	{r0, r1, r2, lr}
 80055fc:	4905      	ldr	r1, [pc, #20]	@ (8005614 <iprintf+0x1c>)
 80055fe:	ab04      	add	r3, sp, #16
 8005600:	6808      	ldr	r0, [r1, #0]
 8005602:	cb04      	ldmia	r3!, {r2}
 8005604:	6881      	ldr	r1, [r0, #8]
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	f000 fa22 	bl	8005a50 <_vfiprintf_r>
 800560c:	b003      	add	sp, #12
 800560e:	bc08      	pop	{r3}
 8005610:	b004      	add	sp, #16
 8005612:	4718      	bx	r3
 8005614:	20000028 	.word	0x20000028

08005618 <__sread>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	000c      	movs	r4, r1
 800561c:	250e      	movs	r5, #14
 800561e:	5f49      	ldrsh	r1, [r1, r5]
 8005620:	f000 f874 	bl	800570c <_read_r>
 8005624:	2800      	cmp	r0, #0
 8005626:	db03      	blt.n	8005630 <__sread+0x18>
 8005628:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800562a:	181b      	adds	r3, r3, r0
 800562c:	6563      	str	r3, [r4, #84]	@ 0x54
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	4a02      	ldr	r2, [pc, #8]	@ (800563c <__sread+0x24>)
 8005634:	4013      	ands	r3, r2
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	e7f9      	b.n	800562e <__sread+0x16>
 800563a:	46c0      	nop			@ (mov r8, r8)
 800563c:	ffffefff 	.word	0xffffefff

08005640 <__swrite>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	001f      	movs	r7, r3
 8005644:	898b      	ldrh	r3, [r1, #12]
 8005646:	0005      	movs	r5, r0
 8005648:	000c      	movs	r4, r1
 800564a:	0016      	movs	r6, r2
 800564c:	05db      	lsls	r3, r3, #23
 800564e:	d505      	bpl.n	800565c <__swrite+0x1c>
 8005650:	230e      	movs	r3, #14
 8005652:	5ec9      	ldrsh	r1, [r1, r3]
 8005654:	2200      	movs	r2, #0
 8005656:	2302      	movs	r3, #2
 8005658:	f000 f844 	bl	80056e4 <_lseek_r>
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	4a05      	ldr	r2, [pc, #20]	@ (8005674 <__swrite+0x34>)
 8005660:	0028      	movs	r0, r5
 8005662:	4013      	ands	r3, r2
 8005664:	81a3      	strh	r3, [r4, #12]
 8005666:	0032      	movs	r2, r6
 8005668:	230e      	movs	r3, #14
 800566a:	5ee1      	ldrsh	r1, [r4, r3]
 800566c:	003b      	movs	r3, r7
 800566e:	f000 f861 	bl	8005734 <_write_r>
 8005672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005674:	ffffefff 	.word	0xffffefff

08005678 <__sseek>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	000c      	movs	r4, r1
 800567c:	250e      	movs	r5, #14
 800567e:	5f49      	ldrsh	r1, [r1, r5]
 8005680:	f000 f830 	bl	80056e4 <_lseek_r>
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	1c42      	adds	r2, r0, #1
 8005688:	d103      	bne.n	8005692 <__sseek+0x1a>
 800568a:	4a05      	ldr	r2, [pc, #20]	@ (80056a0 <__sseek+0x28>)
 800568c:	4013      	ands	r3, r2
 800568e:	81a3      	strh	r3, [r4, #12]
 8005690:	bd70      	pop	{r4, r5, r6, pc}
 8005692:	2280      	movs	r2, #128	@ 0x80
 8005694:	0152      	lsls	r2, r2, #5
 8005696:	4313      	orrs	r3, r2
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	6560      	str	r0, [r4, #84]	@ 0x54
 800569c:	e7f8      	b.n	8005690 <__sseek+0x18>
 800569e:	46c0      	nop			@ (mov r8, r8)
 80056a0:	ffffefff 	.word	0xffffefff

080056a4 <__sclose>:
 80056a4:	b510      	push	{r4, lr}
 80056a6:	230e      	movs	r3, #14
 80056a8:	5ec9      	ldrsh	r1, [r1, r3]
 80056aa:	f000 f809 	bl	80056c0 <_close_r>
 80056ae:	bd10      	pop	{r4, pc}

080056b0 <memset>:
 80056b0:	0003      	movs	r3, r0
 80056b2:	1882      	adds	r2, r0, r2
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d100      	bne.n	80056ba <memset+0xa>
 80056b8:	4770      	bx	lr
 80056ba:	7019      	strb	r1, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	e7f9      	b.n	80056b4 <memset+0x4>

080056c0 <_close_r>:
 80056c0:	2300      	movs	r3, #0
 80056c2:	b570      	push	{r4, r5, r6, lr}
 80056c4:	4d06      	ldr	r5, [pc, #24]	@ (80056e0 <_close_r+0x20>)
 80056c6:	0004      	movs	r4, r0
 80056c8:	0008      	movs	r0, r1
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	f7fc fc92 	bl	8001ff4 <_close>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d103      	bne.n	80056dc <_close_r+0x1c>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d000      	beq.n	80056dc <_close_r+0x1c>
 80056da:	6023      	str	r3, [r4, #0]
 80056dc:	bd70      	pop	{r4, r5, r6, pc}
 80056de:	46c0      	nop			@ (mov r8, r8)
 80056e0:	2000047c 	.word	0x2000047c

080056e4 <_lseek_r>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	0004      	movs	r4, r0
 80056e8:	0008      	movs	r0, r1
 80056ea:	0011      	movs	r1, r2
 80056ec:	001a      	movs	r2, r3
 80056ee:	2300      	movs	r3, #0
 80056f0:	4d05      	ldr	r5, [pc, #20]	@ (8005708 <_lseek_r+0x24>)
 80056f2:	602b      	str	r3, [r5, #0]
 80056f4:	f7fc fc9f 	bl	8002036 <_lseek>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d103      	bne.n	8005704 <_lseek_r+0x20>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d000      	beq.n	8005704 <_lseek_r+0x20>
 8005702:	6023      	str	r3, [r4, #0]
 8005704:	bd70      	pop	{r4, r5, r6, pc}
 8005706:	46c0      	nop			@ (mov r8, r8)
 8005708:	2000047c 	.word	0x2000047c

0800570c <_read_r>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	0004      	movs	r4, r0
 8005710:	0008      	movs	r0, r1
 8005712:	0011      	movs	r1, r2
 8005714:	001a      	movs	r2, r3
 8005716:	2300      	movs	r3, #0
 8005718:	4d05      	ldr	r5, [pc, #20]	@ (8005730 <_read_r+0x24>)
 800571a:	602b      	str	r3, [r5, #0]
 800571c:	f7fc fc4d 	bl	8001fba <_read>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d103      	bne.n	800572c <_read_r+0x20>
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d000      	beq.n	800572c <_read_r+0x20>
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	bd70      	pop	{r4, r5, r6, pc}
 800572e:	46c0      	nop			@ (mov r8, r8)
 8005730:	2000047c 	.word	0x2000047c

08005734 <_write_r>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	0004      	movs	r4, r0
 8005738:	0008      	movs	r0, r1
 800573a:	0011      	movs	r1, r2
 800573c:	001a      	movs	r2, r3
 800573e:	2300      	movs	r3, #0
 8005740:	4d05      	ldr	r5, [pc, #20]	@ (8005758 <_write_r+0x24>)
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	f7fc f864 	bl	8001810 <_write>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d103      	bne.n	8005754 <_write_r+0x20>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d000      	beq.n	8005754 <_write_r+0x20>
 8005752:	6023      	str	r3, [r4, #0]
 8005754:	bd70      	pop	{r4, r5, r6, pc}
 8005756:	46c0      	nop			@ (mov r8, r8)
 8005758:	2000047c 	.word	0x2000047c

0800575c <__errno>:
 800575c:	4b01      	ldr	r3, [pc, #4]	@ (8005764 <__errno+0x8>)
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	4770      	bx	lr
 8005762:	46c0      	nop			@ (mov r8, r8)
 8005764:	20000028 	.word	0x20000028

08005768 <__libc_init_array>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	2600      	movs	r6, #0
 800576c:	4c0c      	ldr	r4, [pc, #48]	@ (80057a0 <__libc_init_array+0x38>)
 800576e:	4d0d      	ldr	r5, [pc, #52]	@ (80057a4 <__libc_init_array+0x3c>)
 8005770:	1b64      	subs	r4, r4, r5
 8005772:	10a4      	asrs	r4, r4, #2
 8005774:	42a6      	cmp	r6, r4
 8005776:	d109      	bne.n	800578c <__libc_init_array+0x24>
 8005778:	2600      	movs	r6, #0
 800577a:	f000 fe61 	bl	8006440 <_init>
 800577e:	4c0a      	ldr	r4, [pc, #40]	@ (80057a8 <__libc_init_array+0x40>)
 8005780:	4d0a      	ldr	r5, [pc, #40]	@ (80057ac <__libc_init_array+0x44>)
 8005782:	1b64      	subs	r4, r4, r5
 8005784:	10a4      	asrs	r4, r4, #2
 8005786:	42a6      	cmp	r6, r4
 8005788:	d105      	bne.n	8005796 <__libc_init_array+0x2e>
 800578a:	bd70      	pop	{r4, r5, r6, pc}
 800578c:	00b3      	lsls	r3, r6, #2
 800578e:	58eb      	ldr	r3, [r5, r3]
 8005790:	4798      	blx	r3
 8005792:	3601      	adds	r6, #1
 8005794:	e7ee      	b.n	8005774 <__libc_init_array+0xc>
 8005796:	00b3      	lsls	r3, r6, #2
 8005798:	58eb      	ldr	r3, [r5, r3]
 800579a:	4798      	blx	r3
 800579c:	3601      	adds	r6, #1
 800579e:	e7f2      	b.n	8005786 <__libc_init_array+0x1e>
 80057a0:	08006710 	.word	0x08006710
 80057a4:	08006710 	.word	0x08006710
 80057a8:	08006714 	.word	0x08006714
 80057ac:	08006710 	.word	0x08006710

080057b0 <__retarget_lock_init_recursive>:
 80057b0:	4770      	bx	lr

080057b2 <__retarget_lock_acquire_recursive>:
 80057b2:	4770      	bx	lr

080057b4 <__retarget_lock_release_recursive>:
 80057b4:	4770      	bx	lr
	...

080057b8 <__assert_func>:
 80057b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80057ba:	0014      	movs	r4, r2
 80057bc:	001a      	movs	r2, r3
 80057be:	4b09      	ldr	r3, [pc, #36]	@ (80057e4 <__assert_func+0x2c>)
 80057c0:	0005      	movs	r5, r0
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	000e      	movs	r6, r1
 80057c6:	68d8      	ldr	r0, [r3, #12]
 80057c8:	4b07      	ldr	r3, [pc, #28]	@ (80057e8 <__assert_func+0x30>)
 80057ca:	2c00      	cmp	r4, #0
 80057cc:	d101      	bne.n	80057d2 <__assert_func+0x1a>
 80057ce:	4b07      	ldr	r3, [pc, #28]	@ (80057ec <__assert_func+0x34>)
 80057d0:	001c      	movs	r4, r3
 80057d2:	4907      	ldr	r1, [pc, #28]	@ (80057f0 <__assert_func+0x38>)
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	9402      	str	r4, [sp, #8]
 80057d8:	002b      	movs	r3, r5
 80057da:	9600      	str	r6, [sp, #0]
 80057dc:	f000 fc84 	bl	80060e8 <fiprintf>
 80057e0:	f000 fd4f 	bl	8006282 <abort>
 80057e4:	20000028 	.word	0x20000028
 80057e8:	0800669f 	.word	0x0800669f
 80057ec:	080066da 	.word	0x080066da
 80057f0:	080066ac 	.word	0x080066ac

080057f4 <_free_r>:
 80057f4:	b570      	push	{r4, r5, r6, lr}
 80057f6:	0005      	movs	r5, r0
 80057f8:	1e0c      	subs	r4, r1, #0
 80057fa:	d010      	beq.n	800581e <_free_r+0x2a>
 80057fc:	3c04      	subs	r4, #4
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	da00      	bge.n	8005806 <_free_r+0x12>
 8005804:	18e4      	adds	r4, r4, r3
 8005806:	0028      	movs	r0, r5
 8005808:	f000 f8ea 	bl	80059e0 <__malloc_lock>
 800580c:	4a1d      	ldr	r2, [pc, #116]	@ (8005884 <_free_r+0x90>)
 800580e:	6813      	ldr	r3, [r2, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d105      	bne.n	8005820 <_free_r+0x2c>
 8005814:	6063      	str	r3, [r4, #4]
 8005816:	6014      	str	r4, [r2, #0]
 8005818:	0028      	movs	r0, r5
 800581a:	f000 f8e9 	bl	80059f0 <__malloc_unlock>
 800581e:	bd70      	pop	{r4, r5, r6, pc}
 8005820:	42a3      	cmp	r3, r4
 8005822:	d908      	bls.n	8005836 <_free_r+0x42>
 8005824:	6820      	ldr	r0, [r4, #0]
 8005826:	1821      	adds	r1, r4, r0
 8005828:	428b      	cmp	r3, r1
 800582a:	d1f3      	bne.n	8005814 <_free_r+0x20>
 800582c:	6819      	ldr	r1, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	1809      	adds	r1, r1, r0
 8005832:	6021      	str	r1, [r4, #0]
 8005834:	e7ee      	b.n	8005814 <_free_r+0x20>
 8005836:	001a      	movs	r2, r3
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <_free_r+0x4e>
 800583e:	42a3      	cmp	r3, r4
 8005840:	d9f9      	bls.n	8005836 <_free_r+0x42>
 8005842:	6811      	ldr	r1, [r2, #0]
 8005844:	1850      	adds	r0, r2, r1
 8005846:	42a0      	cmp	r0, r4
 8005848:	d10b      	bne.n	8005862 <_free_r+0x6e>
 800584a:	6820      	ldr	r0, [r4, #0]
 800584c:	1809      	adds	r1, r1, r0
 800584e:	1850      	adds	r0, r2, r1
 8005850:	6011      	str	r1, [r2, #0]
 8005852:	4283      	cmp	r3, r0
 8005854:	d1e0      	bne.n	8005818 <_free_r+0x24>
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	1841      	adds	r1, r0, r1
 800585c:	6011      	str	r1, [r2, #0]
 800585e:	6053      	str	r3, [r2, #4]
 8005860:	e7da      	b.n	8005818 <_free_r+0x24>
 8005862:	42a0      	cmp	r0, r4
 8005864:	d902      	bls.n	800586c <_free_r+0x78>
 8005866:	230c      	movs	r3, #12
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	e7d5      	b.n	8005818 <_free_r+0x24>
 800586c:	6820      	ldr	r0, [r4, #0]
 800586e:	1821      	adds	r1, r4, r0
 8005870:	428b      	cmp	r3, r1
 8005872:	d103      	bne.n	800587c <_free_r+0x88>
 8005874:	6819      	ldr	r1, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	1809      	adds	r1, r1, r0
 800587a:	6021      	str	r1, [r4, #0]
 800587c:	6063      	str	r3, [r4, #4]
 800587e:	6054      	str	r4, [r2, #4]
 8005880:	e7ca      	b.n	8005818 <_free_r+0x24>
 8005882:	46c0      	nop			@ (mov r8, r8)
 8005884:	20000488 	.word	0x20000488

08005888 <malloc>:
 8005888:	b510      	push	{r4, lr}
 800588a:	4b03      	ldr	r3, [pc, #12]	@ (8005898 <malloc+0x10>)
 800588c:	0001      	movs	r1, r0
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	f000 f826 	bl	80058e0 <_malloc_r>
 8005894:	bd10      	pop	{r4, pc}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	20000028 	.word	0x20000028

0800589c <sbrk_aligned>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	4e0f      	ldr	r6, [pc, #60]	@ (80058dc <sbrk_aligned+0x40>)
 80058a0:	000d      	movs	r5, r1
 80058a2:	6831      	ldr	r1, [r6, #0]
 80058a4:	0004      	movs	r4, r0
 80058a6:	2900      	cmp	r1, #0
 80058a8:	d102      	bne.n	80058b0 <sbrk_aligned+0x14>
 80058aa:	f000 fccd 	bl	8006248 <_sbrk_r>
 80058ae:	6030      	str	r0, [r6, #0]
 80058b0:	0029      	movs	r1, r5
 80058b2:	0020      	movs	r0, r4
 80058b4:	f000 fcc8 	bl	8006248 <_sbrk_r>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d103      	bne.n	80058c4 <sbrk_aligned+0x28>
 80058bc:	2501      	movs	r5, #1
 80058be:	426d      	negs	r5, r5
 80058c0:	0028      	movs	r0, r5
 80058c2:	bd70      	pop	{r4, r5, r6, pc}
 80058c4:	2303      	movs	r3, #3
 80058c6:	1cc5      	adds	r5, r0, #3
 80058c8:	439d      	bics	r5, r3
 80058ca:	42a8      	cmp	r0, r5
 80058cc:	d0f8      	beq.n	80058c0 <sbrk_aligned+0x24>
 80058ce:	1a29      	subs	r1, r5, r0
 80058d0:	0020      	movs	r0, r4
 80058d2:	f000 fcb9 	bl	8006248 <_sbrk_r>
 80058d6:	3001      	adds	r0, #1
 80058d8:	d1f2      	bne.n	80058c0 <sbrk_aligned+0x24>
 80058da:	e7ef      	b.n	80058bc <sbrk_aligned+0x20>
 80058dc:	20000484 	.word	0x20000484

080058e0 <_malloc_r>:
 80058e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058e2:	2203      	movs	r2, #3
 80058e4:	1ccb      	adds	r3, r1, #3
 80058e6:	4393      	bics	r3, r2
 80058e8:	3308      	adds	r3, #8
 80058ea:	0005      	movs	r5, r0
 80058ec:	001f      	movs	r7, r3
 80058ee:	2b0c      	cmp	r3, #12
 80058f0:	d234      	bcs.n	800595c <_malloc_r+0x7c>
 80058f2:	270c      	movs	r7, #12
 80058f4:	42b9      	cmp	r1, r7
 80058f6:	d833      	bhi.n	8005960 <_malloc_r+0x80>
 80058f8:	0028      	movs	r0, r5
 80058fa:	f000 f871 	bl	80059e0 <__malloc_lock>
 80058fe:	4e37      	ldr	r6, [pc, #220]	@ (80059dc <_malloc_r+0xfc>)
 8005900:	6833      	ldr	r3, [r6, #0]
 8005902:	001c      	movs	r4, r3
 8005904:	2c00      	cmp	r4, #0
 8005906:	d12f      	bne.n	8005968 <_malloc_r+0x88>
 8005908:	0039      	movs	r1, r7
 800590a:	0028      	movs	r0, r5
 800590c:	f7ff ffc6 	bl	800589c <sbrk_aligned>
 8005910:	0004      	movs	r4, r0
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	d15f      	bne.n	80059d6 <_malloc_r+0xf6>
 8005916:	6834      	ldr	r4, [r6, #0]
 8005918:	9400      	str	r4, [sp, #0]
 800591a:	9b00      	ldr	r3, [sp, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d14a      	bne.n	80059b6 <_malloc_r+0xd6>
 8005920:	2c00      	cmp	r4, #0
 8005922:	d052      	beq.n	80059ca <_malloc_r+0xea>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	0028      	movs	r0, r5
 8005928:	18e3      	adds	r3, r4, r3
 800592a:	9900      	ldr	r1, [sp, #0]
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	f000 fc8b 	bl	8006248 <_sbrk_r>
 8005932:	9b01      	ldr	r3, [sp, #4]
 8005934:	4283      	cmp	r3, r0
 8005936:	d148      	bne.n	80059ca <_malloc_r+0xea>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	0028      	movs	r0, r5
 800593c:	1aff      	subs	r7, r7, r3
 800593e:	0039      	movs	r1, r7
 8005940:	f7ff ffac 	bl	800589c <sbrk_aligned>
 8005944:	3001      	adds	r0, #1
 8005946:	d040      	beq.n	80059ca <_malloc_r+0xea>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	19db      	adds	r3, r3, r7
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	6833      	ldr	r3, [r6, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	2a00      	cmp	r2, #0
 8005954:	d133      	bne.n	80059be <_malloc_r+0xde>
 8005956:	9b00      	ldr	r3, [sp, #0]
 8005958:	6033      	str	r3, [r6, #0]
 800595a:	e019      	b.n	8005990 <_malloc_r+0xb0>
 800595c:	2b00      	cmp	r3, #0
 800595e:	dac9      	bge.n	80058f4 <_malloc_r+0x14>
 8005960:	230c      	movs	r3, #12
 8005962:	602b      	str	r3, [r5, #0]
 8005964:	2000      	movs	r0, #0
 8005966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005968:	6821      	ldr	r1, [r4, #0]
 800596a:	1bc9      	subs	r1, r1, r7
 800596c:	d420      	bmi.n	80059b0 <_malloc_r+0xd0>
 800596e:	290b      	cmp	r1, #11
 8005970:	d90a      	bls.n	8005988 <_malloc_r+0xa8>
 8005972:	19e2      	adds	r2, r4, r7
 8005974:	6027      	str	r7, [r4, #0]
 8005976:	42a3      	cmp	r3, r4
 8005978:	d104      	bne.n	8005984 <_malloc_r+0xa4>
 800597a:	6032      	str	r2, [r6, #0]
 800597c:	6863      	ldr	r3, [r4, #4]
 800597e:	6011      	str	r1, [r2, #0]
 8005980:	6053      	str	r3, [r2, #4]
 8005982:	e005      	b.n	8005990 <_malloc_r+0xb0>
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	e7f9      	b.n	800597c <_malloc_r+0x9c>
 8005988:	6862      	ldr	r2, [r4, #4]
 800598a:	42a3      	cmp	r3, r4
 800598c:	d10e      	bne.n	80059ac <_malloc_r+0xcc>
 800598e:	6032      	str	r2, [r6, #0]
 8005990:	0028      	movs	r0, r5
 8005992:	f000 f82d 	bl	80059f0 <__malloc_unlock>
 8005996:	0020      	movs	r0, r4
 8005998:	2207      	movs	r2, #7
 800599a:	300b      	adds	r0, #11
 800599c:	1d23      	adds	r3, r4, #4
 800599e:	4390      	bics	r0, r2
 80059a0:	1ac2      	subs	r2, r0, r3
 80059a2:	4298      	cmp	r0, r3
 80059a4:	d0df      	beq.n	8005966 <_malloc_r+0x86>
 80059a6:	1a1b      	subs	r3, r3, r0
 80059a8:	50a3      	str	r3, [r4, r2]
 80059aa:	e7dc      	b.n	8005966 <_malloc_r+0x86>
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	e7ef      	b.n	8005990 <_malloc_r+0xb0>
 80059b0:	0023      	movs	r3, r4
 80059b2:	6864      	ldr	r4, [r4, #4]
 80059b4:	e7a6      	b.n	8005904 <_malloc_r+0x24>
 80059b6:	9c00      	ldr	r4, [sp, #0]
 80059b8:	6863      	ldr	r3, [r4, #4]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	e7ad      	b.n	800591a <_malloc_r+0x3a>
 80059be:	001a      	movs	r2, r3
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	42a3      	cmp	r3, r4
 80059c4:	d1fb      	bne.n	80059be <_malloc_r+0xde>
 80059c6:	2300      	movs	r3, #0
 80059c8:	e7da      	b.n	8005980 <_malloc_r+0xa0>
 80059ca:	230c      	movs	r3, #12
 80059cc:	0028      	movs	r0, r5
 80059ce:	602b      	str	r3, [r5, #0]
 80059d0:	f000 f80e 	bl	80059f0 <__malloc_unlock>
 80059d4:	e7c6      	b.n	8005964 <_malloc_r+0x84>
 80059d6:	6007      	str	r7, [r0, #0]
 80059d8:	e7da      	b.n	8005990 <_malloc_r+0xb0>
 80059da:	46c0      	nop			@ (mov r8, r8)
 80059dc:	20000488 	.word	0x20000488

080059e0 <__malloc_lock>:
 80059e0:	b510      	push	{r4, lr}
 80059e2:	4802      	ldr	r0, [pc, #8]	@ (80059ec <__malloc_lock+0xc>)
 80059e4:	f7ff fee5 	bl	80057b2 <__retarget_lock_acquire_recursive>
 80059e8:	bd10      	pop	{r4, pc}
 80059ea:	46c0      	nop			@ (mov r8, r8)
 80059ec:	20000480 	.word	0x20000480

080059f0 <__malloc_unlock>:
 80059f0:	b510      	push	{r4, lr}
 80059f2:	4802      	ldr	r0, [pc, #8]	@ (80059fc <__malloc_unlock+0xc>)
 80059f4:	f7ff fede 	bl	80057b4 <__retarget_lock_release_recursive>
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	46c0      	nop			@ (mov r8, r8)
 80059fc:	20000480 	.word	0x20000480

08005a00 <__sfputc_r>:
 8005a00:	6893      	ldr	r3, [r2, #8]
 8005a02:	b510      	push	{r4, lr}
 8005a04:	3b01      	subs	r3, #1
 8005a06:	6093      	str	r3, [r2, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	da04      	bge.n	8005a16 <__sfputc_r+0x16>
 8005a0c:	6994      	ldr	r4, [r2, #24]
 8005a0e:	42a3      	cmp	r3, r4
 8005a10:	db07      	blt.n	8005a22 <__sfputc_r+0x22>
 8005a12:	290a      	cmp	r1, #10
 8005a14:	d005      	beq.n	8005a22 <__sfputc_r+0x22>
 8005a16:	6813      	ldr	r3, [r2, #0]
 8005a18:	1c58      	adds	r0, r3, #1
 8005a1a:	6010      	str	r0, [r2, #0]
 8005a1c:	7019      	strb	r1, [r3, #0]
 8005a1e:	0008      	movs	r0, r1
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	f000 fb71 	bl	8006108 <__swbuf_r>
 8005a26:	0001      	movs	r1, r0
 8005a28:	e7f9      	b.n	8005a1e <__sfputc_r+0x1e>

08005a2a <__sfputs_r>:
 8005a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2c:	0006      	movs	r6, r0
 8005a2e:	000f      	movs	r7, r1
 8005a30:	0014      	movs	r4, r2
 8005a32:	18d5      	adds	r5, r2, r3
 8005a34:	42ac      	cmp	r4, r5
 8005a36:	d101      	bne.n	8005a3c <__sfputs_r+0x12>
 8005a38:	2000      	movs	r0, #0
 8005a3a:	e007      	b.n	8005a4c <__sfputs_r+0x22>
 8005a3c:	7821      	ldrb	r1, [r4, #0]
 8005a3e:	003a      	movs	r2, r7
 8005a40:	0030      	movs	r0, r6
 8005a42:	f7ff ffdd 	bl	8005a00 <__sfputc_r>
 8005a46:	3401      	adds	r4, #1
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d1f3      	bne.n	8005a34 <__sfputs_r+0xa>
 8005a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a50 <_vfiprintf_r>:
 8005a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a52:	b0a1      	sub	sp, #132	@ 0x84
 8005a54:	000f      	movs	r7, r1
 8005a56:	0015      	movs	r5, r2
 8005a58:	001e      	movs	r6, r3
 8005a5a:	9003      	str	r0, [sp, #12]
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d004      	beq.n	8005a6a <_vfiprintf_r+0x1a>
 8005a60:	6a03      	ldr	r3, [r0, #32]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <_vfiprintf_r+0x1a>
 8005a66:	f7ff fd93 	bl	8005590 <__sinit>
 8005a6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a6c:	07db      	lsls	r3, r3, #31
 8005a6e:	d405      	bmi.n	8005a7c <_vfiprintf_r+0x2c>
 8005a70:	89bb      	ldrh	r3, [r7, #12]
 8005a72:	059b      	lsls	r3, r3, #22
 8005a74:	d402      	bmi.n	8005a7c <_vfiprintf_r+0x2c>
 8005a76:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005a78:	f7ff fe9b 	bl	80057b2 <__retarget_lock_acquire_recursive>
 8005a7c:	89bb      	ldrh	r3, [r7, #12]
 8005a7e:	071b      	lsls	r3, r3, #28
 8005a80:	d502      	bpl.n	8005a88 <_vfiprintf_r+0x38>
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d113      	bne.n	8005ab0 <_vfiprintf_r+0x60>
 8005a88:	0039      	movs	r1, r7
 8005a8a:	9803      	ldr	r0, [sp, #12]
 8005a8c:	f000 fb7e 	bl	800618c <__swsetup_r>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	d00d      	beq.n	8005ab0 <_vfiprintf_r+0x60>
 8005a94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a96:	07db      	lsls	r3, r3, #31
 8005a98:	d503      	bpl.n	8005aa2 <_vfiprintf_r+0x52>
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	4240      	negs	r0, r0
 8005a9e:	b021      	add	sp, #132	@ 0x84
 8005aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aa2:	89bb      	ldrh	r3, [r7, #12]
 8005aa4:	059b      	lsls	r3, r3, #22
 8005aa6:	d4f8      	bmi.n	8005a9a <_vfiprintf_r+0x4a>
 8005aa8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005aaa:	f7ff fe83 	bl	80057b4 <__retarget_lock_release_recursive>
 8005aae:	e7f4      	b.n	8005a9a <_vfiprintf_r+0x4a>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	ac08      	add	r4, sp, #32
 8005ab4:	6163      	str	r3, [r4, #20]
 8005ab6:	3320      	adds	r3, #32
 8005ab8:	7663      	strb	r3, [r4, #25]
 8005aba:	3310      	adds	r3, #16
 8005abc:	76a3      	strb	r3, [r4, #26]
 8005abe:	9607      	str	r6, [sp, #28]
 8005ac0:	002e      	movs	r6, r5
 8005ac2:	7833      	ldrb	r3, [r6, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <_vfiprintf_r+0x7c>
 8005ac8:	2b25      	cmp	r3, #37	@ 0x25
 8005aca:	d148      	bne.n	8005b5e <_vfiprintf_r+0x10e>
 8005acc:	1b73      	subs	r3, r6, r5
 8005ace:	9305      	str	r3, [sp, #20]
 8005ad0:	42ae      	cmp	r6, r5
 8005ad2:	d00b      	beq.n	8005aec <_vfiprintf_r+0x9c>
 8005ad4:	002a      	movs	r2, r5
 8005ad6:	0039      	movs	r1, r7
 8005ad8:	9803      	ldr	r0, [sp, #12]
 8005ada:	f7ff ffa6 	bl	8005a2a <__sfputs_r>
 8005ade:	3001      	adds	r0, #1
 8005ae0:	d100      	bne.n	8005ae4 <_vfiprintf_r+0x94>
 8005ae2:	e0ae      	b.n	8005c42 <_vfiprintf_r+0x1f2>
 8005ae4:	6963      	ldr	r3, [r4, #20]
 8005ae6:	9a05      	ldr	r2, [sp, #20]
 8005ae8:	189b      	adds	r3, r3, r2
 8005aea:	6163      	str	r3, [r4, #20]
 8005aec:	7833      	ldrb	r3, [r6, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d100      	bne.n	8005af4 <_vfiprintf_r+0xa4>
 8005af2:	e0a6      	b.n	8005c42 <_vfiprintf_r+0x1f2>
 8005af4:	2201      	movs	r2, #1
 8005af6:	2300      	movs	r3, #0
 8005af8:	4252      	negs	r2, r2
 8005afa:	6062      	str	r2, [r4, #4]
 8005afc:	a904      	add	r1, sp, #16
 8005afe:	3254      	adds	r2, #84	@ 0x54
 8005b00:	1852      	adds	r2, r2, r1
 8005b02:	1c75      	adds	r5, r6, #1
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	60e3      	str	r3, [r4, #12]
 8005b08:	60a3      	str	r3, [r4, #8]
 8005b0a:	7013      	strb	r3, [r2, #0]
 8005b0c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005b0e:	4b59      	ldr	r3, [pc, #356]	@ (8005c74 <_vfiprintf_r+0x224>)
 8005b10:	2205      	movs	r2, #5
 8005b12:	0018      	movs	r0, r3
 8005b14:	7829      	ldrb	r1, [r5, #0]
 8005b16:	9305      	str	r3, [sp, #20]
 8005b18:	f000 fba8 	bl	800626c <memchr>
 8005b1c:	1c6e      	adds	r6, r5, #1
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d11f      	bne.n	8005b62 <_vfiprintf_r+0x112>
 8005b22:	6822      	ldr	r2, [r4, #0]
 8005b24:	06d3      	lsls	r3, r2, #27
 8005b26:	d504      	bpl.n	8005b32 <_vfiprintf_r+0xe2>
 8005b28:	2353      	movs	r3, #83	@ 0x53
 8005b2a:	a904      	add	r1, sp, #16
 8005b2c:	185b      	adds	r3, r3, r1
 8005b2e:	2120      	movs	r1, #32
 8005b30:	7019      	strb	r1, [r3, #0]
 8005b32:	0713      	lsls	r3, r2, #28
 8005b34:	d504      	bpl.n	8005b40 <_vfiprintf_r+0xf0>
 8005b36:	2353      	movs	r3, #83	@ 0x53
 8005b38:	a904      	add	r1, sp, #16
 8005b3a:	185b      	adds	r3, r3, r1
 8005b3c:	212b      	movs	r1, #43	@ 0x2b
 8005b3e:	7019      	strb	r1, [r3, #0]
 8005b40:	782b      	ldrb	r3, [r5, #0]
 8005b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b44:	d016      	beq.n	8005b74 <_vfiprintf_r+0x124>
 8005b46:	002e      	movs	r6, r5
 8005b48:	2100      	movs	r1, #0
 8005b4a:	200a      	movs	r0, #10
 8005b4c:	68e3      	ldr	r3, [r4, #12]
 8005b4e:	7832      	ldrb	r2, [r6, #0]
 8005b50:	1c75      	adds	r5, r6, #1
 8005b52:	3a30      	subs	r2, #48	@ 0x30
 8005b54:	2a09      	cmp	r2, #9
 8005b56:	d950      	bls.n	8005bfa <_vfiprintf_r+0x1aa>
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	d111      	bne.n	8005b80 <_vfiprintf_r+0x130>
 8005b5c:	e017      	b.n	8005b8e <_vfiprintf_r+0x13e>
 8005b5e:	3601      	adds	r6, #1
 8005b60:	e7af      	b.n	8005ac2 <_vfiprintf_r+0x72>
 8005b62:	9b05      	ldr	r3, [sp, #20]
 8005b64:	6822      	ldr	r2, [r4, #0]
 8005b66:	1ac0      	subs	r0, r0, r3
 8005b68:	2301      	movs	r3, #1
 8005b6a:	4083      	lsls	r3, r0
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	0035      	movs	r5, r6
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	e7cc      	b.n	8005b0e <_vfiprintf_r+0xbe>
 8005b74:	9b07      	ldr	r3, [sp, #28]
 8005b76:	1d19      	adds	r1, r3, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	9107      	str	r1, [sp, #28]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	db01      	blt.n	8005b84 <_vfiprintf_r+0x134>
 8005b80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b82:	e004      	b.n	8005b8e <_vfiprintf_r+0x13e>
 8005b84:	425b      	negs	r3, r3
 8005b86:	60e3      	str	r3, [r4, #12]
 8005b88:	2302      	movs	r3, #2
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	7833      	ldrb	r3, [r6, #0]
 8005b90:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b92:	d10c      	bne.n	8005bae <_vfiprintf_r+0x15e>
 8005b94:	7873      	ldrb	r3, [r6, #1]
 8005b96:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b98:	d134      	bne.n	8005c04 <_vfiprintf_r+0x1b4>
 8005b9a:	9b07      	ldr	r3, [sp, #28]
 8005b9c:	3602      	adds	r6, #2
 8005b9e:	1d1a      	adds	r2, r3, #4
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	9207      	str	r2, [sp, #28]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	da01      	bge.n	8005bac <_vfiprintf_r+0x15c>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	425b      	negs	r3, r3
 8005bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bae:	4d32      	ldr	r5, [pc, #200]	@ (8005c78 <_vfiprintf_r+0x228>)
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	0028      	movs	r0, r5
 8005bb4:	7831      	ldrb	r1, [r6, #0]
 8005bb6:	f000 fb59 	bl	800626c <memchr>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d006      	beq.n	8005bcc <_vfiprintf_r+0x17c>
 8005bbe:	2340      	movs	r3, #64	@ 0x40
 8005bc0:	1b40      	subs	r0, r0, r5
 8005bc2:	4083      	lsls	r3, r0
 8005bc4:	6822      	ldr	r2, [r4, #0]
 8005bc6:	3601      	adds	r6, #1
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	6023      	str	r3, [r4, #0]
 8005bcc:	7831      	ldrb	r1, [r6, #0]
 8005bce:	2206      	movs	r2, #6
 8005bd0:	482a      	ldr	r0, [pc, #168]	@ (8005c7c <_vfiprintf_r+0x22c>)
 8005bd2:	1c75      	adds	r5, r6, #1
 8005bd4:	7621      	strb	r1, [r4, #24]
 8005bd6:	f000 fb49 	bl	800626c <memchr>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d040      	beq.n	8005c60 <_vfiprintf_r+0x210>
 8005bde:	4b28      	ldr	r3, [pc, #160]	@ (8005c80 <_vfiprintf_r+0x230>)
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d122      	bne.n	8005c2a <_vfiprintf_r+0x1da>
 8005be4:	2207      	movs	r2, #7
 8005be6:	9b07      	ldr	r3, [sp, #28]
 8005be8:	3307      	adds	r3, #7
 8005bea:	4393      	bics	r3, r2
 8005bec:	3308      	adds	r3, #8
 8005bee:	9307      	str	r3, [sp, #28]
 8005bf0:	6963      	ldr	r3, [r4, #20]
 8005bf2:	9a04      	ldr	r2, [sp, #16]
 8005bf4:	189b      	adds	r3, r3, r2
 8005bf6:	6163      	str	r3, [r4, #20]
 8005bf8:	e762      	b.n	8005ac0 <_vfiprintf_r+0x70>
 8005bfa:	4343      	muls	r3, r0
 8005bfc:	002e      	movs	r6, r5
 8005bfe:	2101      	movs	r1, #1
 8005c00:	189b      	adds	r3, r3, r2
 8005c02:	e7a4      	b.n	8005b4e <_vfiprintf_r+0xfe>
 8005c04:	2300      	movs	r3, #0
 8005c06:	200a      	movs	r0, #10
 8005c08:	0019      	movs	r1, r3
 8005c0a:	3601      	adds	r6, #1
 8005c0c:	6063      	str	r3, [r4, #4]
 8005c0e:	7832      	ldrb	r2, [r6, #0]
 8005c10:	1c75      	adds	r5, r6, #1
 8005c12:	3a30      	subs	r2, #48	@ 0x30
 8005c14:	2a09      	cmp	r2, #9
 8005c16:	d903      	bls.n	8005c20 <_vfiprintf_r+0x1d0>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0c8      	beq.n	8005bae <_vfiprintf_r+0x15e>
 8005c1c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c1e:	e7c6      	b.n	8005bae <_vfiprintf_r+0x15e>
 8005c20:	4341      	muls	r1, r0
 8005c22:	002e      	movs	r6, r5
 8005c24:	2301      	movs	r3, #1
 8005c26:	1889      	adds	r1, r1, r2
 8005c28:	e7f1      	b.n	8005c0e <_vfiprintf_r+0x1be>
 8005c2a:	aa07      	add	r2, sp, #28
 8005c2c:	9200      	str	r2, [sp, #0]
 8005c2e:	0021      	movs	r1, r4
 8005c30:	003a      	movs	r2, r7
 8005c32:	4b14      	ldr	r3, [pc, #80]	@ (8005c84 <_vfiprintf_r+0x234>)
 8005c34:	9803      	ldr	r0, [sp, #12]
 8005c36:	e000      	b.n	8005c3a <_vfiprintf_r+0x1ea>
 8005c38:	bf00      	nop
 8005c3a:	9004      	str	r0, [sp, #16]
 8005c3c:	9b04      	ldr	r3, [sp, #16]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	d1d6      	bne.n	8005bf0 <_vfiprintf_r+0x1a0>
 8005c42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c44:	07db      	lsls	r3, r3, #31
 8005c46:	d405      	bmi.n	8005c54 <_vfiprintf_r+0x204>
 8005c48:	89bb      	ldrh	r3, [r7, #12]
 8005c4a:	059b      	lsls	r3, r3, #22
 8005c4c:	d402      	bmi.n	8005c54 <_vfiprintf_r+0x204>
 8005c4e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005c50:	f7ff fdb0 	bl	80057b4 <__retarget_lock_release_recursive>
 8005c54:	89bb      	ldrh	r3, [r7, #12]
 8005c56:	065b      	lsls	r3, r3, #25
 8005c58:	d500      	bpl.n	8005c5c <_vfiprintf_r+0x20c>
 8005c5a:	e71e      	b.n	8005a9a <_vfiprintf_r+0x4a>
 8005c5c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005c5e:	e71e      	b.n	8005a9e <_vfiprintf_r+0x4e>
 8005c60:	aa07      	add	r2, sp, #28
 8005c62:	9200      	str	r2, [sp, #0]
 8005c64:	0021      	movs	r1, r4
 8005c66:	003a      	movs	r2, r7
 8005c68:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <_vfiprintf_r+0x234>)
 8005c6a:	9803      	ldr	r0, [sp, #12]
 8005c6c:	f000 f87c 	bl	8005d68 <_printf_i>
 8005c70:	e7e3      	b.n	8005c3a <_vfiprintf_r+0x1ea>
 8005c72:	46c0      	nop			@ (mov r8, r8)
 8005c74:	080066db 	.word	0x080066db
 8005c78:	080066e1 	.word	0x080066e1
 8005c7c:	080066e5 	.word	0x080066e5
 8005c80:	00000000 	.word	0x00000000
 8005c84:	08005a2b 	.word	0x08005a2b

08005c88 <_printf_common>:
 8005c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c8a:	0016      	movs	r6, r2
 8005c8c:	9301      	str	r3, [sp, #4]
 8005c8e:	688a      	ldr	r2, [r1, #8]
 8005c90:	690b      	ldr	r3, [r1, #16]
 8005c92:	000c      	movs	r4, r1
 8005c94:	9000      	str	r0, [sp, #0]
 8005c96:	4293      	cmp	r3, r2
 8005c98:	da00      	bge.n	8005c9c <_printf_common+0x14>
 8005c9a:	0013      	movs	r3, r2
 8005c9c:	0022      	movs	r2, r4
 8005c9e:	6033      	str	r3, [r6, #0]
 8005ca0:	3243      	adds	r2, #67	@ 0x43
 8005ca2:	7812      	ldrb	r2, [r2, #0]
 8005ca4:	2a00      	cmp	r2, #0
 8005ca6:	d001      	beq.n	8005cac <_printf_common+0x24>
 8005ca8:	3301      	adds	r3, #1
 8005caa:	6033      	str	r3, [r6, #0]
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	069b      	lsls	r3, r3, #26
 8005cb0:	d502      	bpl.n	8005cb8 <_printf_common+0x30>
 8005cb2:	6833      	ldr	r3, [r6, #0]
 8005cb4:	3302      	adds	r3, #2
 8005cb6:	6033      	str	r3, [r6, #0]
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	2306      	movs	r3, #6
 8005cbc:	0015      	movs	r5, r2
 8005cbe:	401d      	ands	r5, r3
 8005cc0:	421a      	tst	r2, r3
 8005cc2:	d027      	beq.n	8005d14 <_printf_common+0x8c>
 8005cc4:	0023      	movs	r3, r4
 8005cc6:	3343      	adds	r3, #67	@ 0x43
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	1e5a      	subs	r2, r3, #1
 8005ccc:	4193      	sbcs	r3, r2
 8005cce:	6822      	ldr	r2, [r4, #0]
 8005cd0:	0692      	lsls	r2, r2, #26
 8005cd2:	d430      	bmi.n	8005d36 <_printf_common+0xae>
 8005cd4:	0022      	movs	r2, r4
 8005cd6:	9901      	ldr	r1, [sp, #4]
 8005cd8:	9800      	ldr	r0, [sp, #0]
 8005cda:	9d08      	ldr	r5, [sp, #32]
 8005cdc:	3243      	adds	r2, #67	@ 0x43
 8005cde:	47a8      	blx	r5
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d025      	beq.n	8005d30 <_printf_common+0xa8>
 8005ce4:	2206      	movs	r2, #6
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	2500      	movs	r5, #0
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d105      	bne.n	8005cfc <_printf_common+0x74>
 8005cf0:	6833      	ldr	r3, [r6, #0]
 8005cf2:	68e5      	ldr	r5, [r4, #12]
 8005cf4:	1aed      	subs	r5, r5, r3
 8005cf6:	43eb      	mvns	r3, r5
 8005cf8:	17db      	asrs	r3, r3, #31
 8005cfa:	401d      	ands	r5, r3
 8005cfc:	68a3      	ldr	r3, [r4, #8]
 8005cfe:	6922      	ldr	r2, [r4, #16]
 8005d00:	4293      	cmp	r3, r2
 8005d02:	dd01      	ble.n	8005d08 <_printf_common+0x80>
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	18ed      	adds	r5, r5, r3
 8005d08:	2600      	movs	r6, #0
 8005d0a:	42b5      	cmp	r5, r6
 8005d0c:	d120      	bne.n	8005d50 <_printf_common+0xc8>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e010      	b.n	8005d34 <_printf_common+0xac>
 8005d12:	3501      	adds	r5, #1
 8005d14:	68e3      	ldr	r3, [r4, #12]
 8005d16:	6832      	ldr	r2, [r6, #0]
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	42ab      	cmp	r3, r5
 8005d1c:	ddd2      	ble.n	8005cc4 <_printf_common+0x3c>
 8005d1e:	0022      	movs	r2, r4
 8005d20:	2301      	movs	r3, #1
 8005d22:	9901      	ldr	r1, [sp, #4]
 8005d24:	9800      	ldr	r0, [sp, #0]
 8005d26:	9f08      	ldr	r7, [sp, #32]
 8005d28:	3219      	adds	r2, #25
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d1f0      	bne.n	8005d12 <_printf_common+0x8a>
 8005d30:	2001      	movs	r0, #1
 8005d32:	4240      	negs	r0, r0
 8005d34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d36:	2030      	movs	r0, #48	@ 0x30
 8005d38:	18e1      	adds	r1, r4, r3
 8005d3a:	3143      	adds	r1, #67	@ 0x43
 8005d3c:	7008      	strb	r0, [r1, #0]
 8005d3e:	0021      	movs	r1, r4
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	3145      	adds	r1, #69	@ 0x45
 8005d44:	7809      	ldrb	r1, [r1, #0]
 8005d46:	18a2      	adds	r2, r4, r2
 8005d48:	3243      	adds	r2, #67	@ 0x43
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	7011      	strb	r1, [r2, #0]
 8005d4e:	e7c1      	b.n	8005cd4 <_printf_common+0x4c>
 8005d50:	0022      	movs	r2, r4
 8005d52:	2301      	movs	r3, #1
 8005d54:	9901      	ldr	r1, [sp, #4]
 8005d56:	9800      	ldr	r0, [sp, #0]
 8005d58:	9f08      	ldr	r7, [sp, #32]
 8005d5a:	321a      	adds	r2, #26
 8005d5c:	47b8      	blx	r7
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d0e6      	beq.n	8005d30 <_printf_common+0xa8>
 8005d62:	3601      	adds	r6, #1
 8005d64:	e7d1      	b.n	8005d0a <_printf_common+0x82>
	...

08005d68 <_printf_i>:
 8005d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d6a:	b08b      	sub	sp, #44	@ 0x2c
 8005d6c:	9206      	str	r2, [sp, #24]
 8005d6e:	000a      	movs	r2, r1
 8005d70:	3243      	adds	r2, #67	@ 0x43
 8005d72:	9307      	str	r3, [sp, #28]
 8005d74:	9005      	str	r0, [sp, #20]
 8005d76:	9203      	str	r2, [sp, #12]
 8005d78:	7e0a      	ldrb	r2, [r1, #24]
 8005d7a:	000c      	movs	r4, r1
 8005d7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d7e:	2a78      	cmp	r2, #120	@ 0x78
 8005d80:	d809      	bhi.n	8005d96 <_printf_i+0x2e>
 8005d82:	2a62      	cmp	r2, #98	@ 0x62
 8005d84:	d80b      	bhi.n	8005d9e <_printf_i+0x36>
 8005d86:	2a00      	cmp	r2, #0
 8005d88:	d100      	bne.n	8005d8c <_printf_i+0x24>
 8005d8a:	e0bc      	b.n	8005f06 <_printf_i+0x19e>
 8005d8c:	497b      	ldr	r1, [pc, #492]	@ (8005f7c <_printf_i+0x214>)
 8005d8e:	9104      	str	r1, [sp, #16]
 8005d90:	2a58      	cmp	r2, #88	@ 0x58
 8005d92:	d100      	bne.n	8005d96 <_printf_i+0x2e>
 8005d94:	e090      	b.n	8005eb8 <_printf_i+0x150>
 8005d96:	0025      	movs	r5, r4
 8005d98:	3542      	adds	r5, #66	@ 0x42
 8005d9a:	702a      	strb	r2, [r5, #0]
 8005d9c:	e022      	b.n	8005de4 <_printf_i+0x7c>
 8005d9e:	0010      	movs	r0, r2
 8005da0:	3863      	subs	r0, #99	@ 0x63
 8005da2:	2815      	cmp	r0, #21
 8005da4:	d8f7      	bhi.n	8005d96 <_printf_i+0x2e>
 8005da6:	f7fa f9af 	bl	8000108 <__gnu_thumb1_case_shi>
 8005daa:	0016      	.short	0x0016
 8005dac:	fff6001f 	.word	0xfff6001f
 8005db0:	fff6fff6 	.word	0xfff6fff6
 8005db4:	001ffff6 	.word	0x001ffff6
 8005db8:	fff6fff6 	.word	0xfff6fff6
 8005dbc:	fff6fff6 	.word	0xfff6fff6
 8005dc0:	003600a1 	.word	0x003600a1
 8005dc4:	fff60080 	.word	0xfff60080
 8005dc8:	00b2fff6 	.word	0x00b2fff6
 8005dcc:	0036fff6 	.word	0x0036fff6
 8005dd0:	fff6fff6 	.word	0xfff6fff6
 8005dd4:	0084      	.short	0x0084
 8005dd6:	0025      	movs	r5, r4
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	3542      	adds	r5, #66	@ 0x42
 8005ddc:	1d11      	adds	r1, r2, #4
 8005dde:	6019      	str	r1, [r3, #0]
 8005de0:	6813      	ldr	r3, [r2, #0]
 8005de2:	702b      	strb	r3, [r5, #0]
 8005de4:	2301      	movs	r3, #1
 8005de6:	e0a0      	b.n	8005f2a <_printf_i+0x1c2>
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	6809      	ldr	r1, [r1, #0]
 8005dec:	1d02      	adds	r2, r0, #4
 8005dee:	060d      	lsls	r5, r1, #24
 8005df0:	d50b      	bpl.n	8005e0a <_printf_i+0xa2>
 8005df2:	6806      	ldr	r6, [r0, #0]
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	2e00      	cmp	r6, #0
 8005df8:	da03      	bge.n	8005e02 <_printf_i+0x9a>
 8005dfa:	232d      	movs	r3, #45	@ 0x2d
 8005dfc:	9a03      	ldr	r2, [sp, #12]
 8005dfe:	4276      	negs	r6, r6
 8005e00:	7013      	strb	r3, [r2, #0]
 8005e02:	4b5e      	ldr	r3, [pc, #376]	@ (8005f7c <_printf_i+0x214>)
 8005e04:	270a      	movs	r7, #10
 8005e06:	9304      	str	r3, [sp, #16]
 8005e08:	e018      	b.n	8005e3c <_printf_i+0xd4>
 8005e0a:	6806      	ldr	r6, [r0, #0]
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	0649      	lsls	r1, r1, #25
 8005e10:	d5f1      	bpl.n	8005df6 <_printf_i+0x8e>
 8005e12:	b236      	sxth	r6, r6
 8005e14:	e7ef      	b.n	8005df6 <_printf_i+0x8e>
 8005e16:	6808      	ldr	r0, [r1, #0]
 8005e18:	6819      	ldr	r1, [r3, #0]
 8005e1a:	c940      	ldmia	r1!, {r6}
 8005e1c:	0605      	lsls	r5, r0, #24
 8005e1e:	d402      	bmi.n	8005e26 <_printf_i+0xbe>
 8005e20:	0640      	lsls	r0, r0, #25
 8005e22:	d500      	bpl.n	8005e26 <_printf_i+0xbe>
 8005e24:	b2b6      	uxth	r6, r6
 8005e26:	6019      	str	r1, [r3, #0]
 8005e28:	4b54      	ldr	r3, [pc, #336]	@ (8005f7c <_printf_i+0x214>)
 8005e2a:	270a      	movs	r7, #10
 8005e2c:	9304      	str	r3, [sp, #16]
 8005e2e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005e30:	d100      	bne.n	8005e34 <_printf_i+0xcc>
 8005e32:	3f02      	subs	r7, #2
 8005e34:	0023      	movs	r3, r4
 8005e36:	2200      	movs	r2, #0
 8005e38:	3343      	adds	r3, #67	@ 0x43
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	6863      	ldr	r3, [r4, #4]
 8005e3e:	60a3      	str	r3, [r4, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	db03      	blt.n	8005e4c <_printf_i+0xe4>
 8005e44:	2104      	movs	r1, #4
 8005e46:	6822      	ldr	r2, [r4, #0]
 8005e48:	438a      	bics	r2, r1
 8005e4a:	6022      	str	r2, [r4, #0]
 8005e4c:	2e00      	cmp	r6, #0
 8005e4e:	d102      	bne.n	8005e56 <_printf_i+0xee>
 8005e50:	9d03      	ldr	r5, [sp, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00c      	beq.n	8005e70 <_printf_i+0x108>
 8005e56:	9d03      	ldr	r5, [sp, #12]
 8005e58:	0030      	movs	r0, r6
 8005e5a:	0039      	movs	r1, r7
 8005e5c:	f7fa f9e4 	bl	8000228 <__aeabi_uidivmod>
 8005e60:	9b04      	ldr	r3, [sp, #16]
 8005e62:	3d01      	subs	r5, #1
 8005e64:	5c5b      	ldrb	r3, [r3, r1]
 8005e66:	702b      	strb	r3, [r5, #0]
 8005e68:	0033      	movs	r3, r6
 8005e6a:	0006      	movs	r6, r0
 8005e6c:	429f      	cmp	r7, r3
 8005e6e:	d9f3      	bls.n	8005e58 <_printf_i+0xf0>
 8005e70:	2f08      	cmp	r7, #8
 8005e72:	d109      	bne.n	8005e88 <_printf_i+0x120>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	07db      	lsls	r3, r3, #31
 8005e78:	d506      	bpl.n	8005e88 <_printf_i+0x120>
 8005e7a:	6862      	ldr	r2, [r4, #4]
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	dc02      	bgt.n	8005e88 <_printf_i+0x120>
 8005e82:	2330      	movs	r3, #48	@ 0x30
 8005e84:	3d01      	subs	r5, #1
 8005e86:	702b      	strb	r3, [r5, #0]
 8005e88:	9b03      	ldr	r3, [sp, #12]
 8005e8a:	1b5b      	subs	r3, r3, r5
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	9b07      	ldr	r3, [sp, #28]
 8005e90:	0021      	movs	r1, r4
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	9805      	ldr	r0, [sp, #20]
 8005e96:	9b06      	ldr	r3, [sp, #24]
 8005e98:	aa09      	add	r2, sp, #36	@ 0x24
 8005e9a:	f7ff fef5 	bl	8005c88 <_printf_common>
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d148      	bne.n	8005f34 <_printf_i+0x1cc>
 8005ea2:	2001      	movs	r0, #1
 8005ea4:	4240      	negs	r0, r0
 8005ea6:	b00b      	add	sp, #44	@ 0x2c
 8005ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eaa:	2220      	movs	r2, #32
 8005eac:	6809      	ldr	r1, [r1, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	6022      	str	r2, [r4, #0]
 8005eb2:	2278      	movs	r2, #120	@ 0x78
 8005eb4:	4932      	ldr	r1, [pc, #200]	@ (8005f80 <_printf_i+0x218>)
 8005eb6:	9104      	str	r1, [sp, #16]
 8005eb8:	0021      	movs	r1, r4
 8005eba:	3145      	adds	r1, #69	@ 0x45
 8005ebc:	700a      	strb	r2, [r1, #0]
 8005ebe:	6819      	ldr	r1, [r3, #0]
 8005ec0:	6822      	ldr	r2, [r4, #0]
 8005ec2:	c940      	ldmia	r1!, {r6}
 8005ec4:	0610      	lsls	r0, r2, #24
 8005ec6:	d402      	bmi.n	8005ece <_printf_i+0x166>
 8005ec8:	0650      	lsls	r0, r2, #25
 8005eca:	d500      	bpl.n	8005ece <_printf_i+0x166>
 8005ecc:	b2b6      	uxth	r6, r6
 8005ece:	6019      	str	r1, [r3, #0]
 8005ed0:	07d3      	lsls	r3, r2, #31
 8005ed2:	d502      	bpl.n	8005eda <_printf_i+0x172>
 8005ed4:	2320      	movs	r3, #32
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	2e00      	cmp	r6, #0
 8005edc:	d001      	beq.n	8005ee2 <_printf_i+0x17a>
 8005ede:	2710      	movs	r7, #16
 8005ee0:	e7a8      	b.n	8005e34 <_printf_i+0xcc>
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	4393      	bics	r3, r2
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	e7f8      	b.n	8005ede <_printf_i+0x176>
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	680d      	ldr	r5, [r1, #0]
 8005ef0:	1d10      	adds	r0, r2, #4
 8005ef2:	6949      	ldr	r1, [r1, #20]
 8005ef4:	6018      	str	r0, [r3, #0]
 8005ef6:	6813      	ldr	r3, [r2, #0]
 8005ef8:	062e      	lsls	r6, r5, #24
 8005efa:	d501      	bpl.n	8005f00 <_printf_i+0x198>
 8005efc:	6019      	str	r1, [r3, #0]
 8005efe:	e002      	b.n	8005f06 <_printf_i+0x19e>
 8005f00:	066d      	lsls	r5, r5, #25
 8005f02:	d5fb      	bpl.n	8005efc <_printf_i+0x194>
 8005f04:	8019      	strh	r1, [r3, #0]
 8005f06:	2300      	movs	r3, #0
 8005f08:	9d03      	ldr	r5, [sp, #12]
 8005f0a:	6123      	str	r3, [r4, #16]
 8005f0c:	e7bf      	b.n	8005e8e <_printf_i+0x126>
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	1d11      	adds	r1, r2, #4
 8005f12:	6019      	str	r1, [r3, #0]
 8005f14:	6815      	ldr	r5, [r2, #0]
 8005f16:	2100      	movs	r1, #0
 8005f18:	0028      	movs	r0, r5
 8005f1a:	6862      	ldr	r2, [r4, #4]
 8005f1c:	f000 f9a6 	bl	800626c <memchr>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d001      	beq.n	8005f28 <_printf_i+0x1c0>
 8005f24:	1b40      	subs	r0, r0, r5
 8005f26:	6060      	str	r0, [r4, #4]
 8005f28:	6863      	ldr	r3, [r4, #4]
 8005f2a:	6123      	str	r3, [r4, #16]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	9a03      	ldr	r2, [sp, #12]
 8005f30:	7013      	strb	r3, [r2, #0]
 8005f32:	e7ac      	b.n	8005e8e <_printf_i+0x126>
 8005f34:	002a      	movs	r2, r5
 8005f36:	6923      	ldr	r3, [r4, #16]
 8005f38:	9906      	ldr	r1, [sp, #24]
 8005f3a:	9805      	ldr	r0, [sp, #20]
 8005f3c:	9d07      	ldr	r5, [sp, #28]
 8005f3e:	47a8      	blx	r5
 8005f40:	3001      	adds	r0, #1
 8005f42:	d0ae      	beq.n	8005ea2 <_printf_i+0x13a>
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	079b      	lsls	r3, r3, #30
 8005f48:	d415      	bmi.n	8005f76 <_printf_i+0x20e>
 8005f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f4c:	68e0      	ldr	r0, [r4, #12]
 8005f4e:	4298      	cmp	r0, r3
 8005f50:	daa9      	bge.n	8005ea6 <_printf_i+0x13e>
 8005f52:	0018      	movs	r0, r3
 8005f54:	e7a7      	b.n	8005ea6 <_printf_i+0x13e>
 8005f56:	0022      	movs	r2, r4
 8005f58:	2301      	movs	r3, #1
 8005f5a:	9906      	ldr	r1, [sp, #24]
 8005f5c:	9805      	ldr	r0, [sp, #20]
 8005f5e:	9e07      	ldr	r6, [sp, #28]
 8005f60:	3219      	adds	r2, #25
 8005f62:	47b0      	blx	r6
 8005f64:	3001      	adds	r0, #1
 8005f66:	d09c      	beq.n	8005ea2 <_printf_i+0x13a>
 8005f68:	3501      	adds	r5, #1
 8005f6a:	68e3      	ldr	r3, [r4, #12]
 8005f6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	42ab      	cmp	r3, r5
 8005f72:	dcf0      	bgt.n	8005f56 <_printf_i+0x1ee>
 8005f74:	e7e9      	b.n	8005f4a <_printf_i+0x1e2>
 8005f76:	2500      	movs	r5, #0
 8005f78:	e7f7      	b.n	8005f6a <_printf_i+0x202>
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	080066ec 	.word	0x080066ec
 8005f80:	080066fd 	.word	0x080066fd

08005f84 <__sflush_r>:
 8005f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f86:	220c      	movs	r2, #12
 8005f88:	5e8b      	ldrsh	r3, [r1, r2]
 8005f8a:	0005      	movs	r5, r0
 8005f8c:	000c      	movs	r4, r1
 8005f8e:	071a      	lsls	r2, r3, #28
 8005f90:	d456      	bmi.n	8006040 <__sflush_r+0xbc>
 8005f92:	684a      	ldr	r2, [r1, #4]
 8005f94:	2a00      	cmp	r2, #0
 8005f96:	dc02      	bgt.n	8005f9e <__sflush_r+0x1a>
 8005f98:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005f9a:	2a00      	cmp	r2, #0
 8005f9c:	dd4e      	ble.n	800603c <__sflush_r+0xb8>
 8005f9e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005fa0:	2f00      	cmp	r7, #0
 8005fa2:	d04b      	beq.n	800603c <__sflush_r+0xb8>
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2080      	movs	r0, #128	@ 0x80
 8005fa8:	682e      	ldr	r6, [r5, #0]
 8005faa:	602a      	str	r2, [r5, #0]
 8005fac:	001a      	movs	r2, r3
 8005fae:	0140      	lsls	r0, r0, #5
 8005fb0:	6a21      	ldr	r1, [r4, #32]
 8005fb2:	4002      	ands	r2, r0
 8005fb4:	4203      	tst	r3, r0
 8005fb6:	d033      	beq.n	8006020 <__sflush_r+0x9c>
 8005fb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	075b      	lsls	r3, r3, #29
 8005fbe:	d506      	bpl.n	8005fce <__sflush_r+0x4a>
 8005fc0:	6863      	ldr	r3, [r4, #4]
 8005fc2:	1ad2      	subs	r2, r2, r3
 8005fc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <__sflush_r+0x4a>
 8005fca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fcc:	1ad2      	subs	r2, r2, r3
 8005fce:	2300      	movs	r3, #0
 8005fd0:	0028      	movs	r0, r5
 8005fd2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005fd4:	6a21      	ldr	r1, [r4, #32]
 8005fd6:	47b8      	blx	r7
 8005fd8:	89a2      	ldrh	r2, [r4, #12]
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	d106      	bne.n	8005fec <__sflush_r+0x68>
 8005fde:	6829      	ldr	r1, [r5, #0]
 8005fe0:	291d      	cmp	r1, #29
 8005fe2:	d846      	bhi.n	8006072 <__sflush_r+0xee>
 8005fe4:	4b29      	ldr	r3, [pc, #164]	@ (800608c <__sflush_r+0x108>)
 8005fe6:	410b      	asrs	r3, r1
 8005fe8:	07db      	lsls	r3, r3, #31
 8005fea:	d442      	bmi.n	8006072 <__sflush_r+0xee>
 8005fec:	2300      	movs	r3, #0
 8005fee:	6063      	str	r3, [r4, #4]
 8005ff0:	6923      	ldr	r3, [r4, #16]
 8005ff2:	6023      	str	r3, [r4, #0]
 8005ff4:	04d2      	lsls	r2, r2, #19
 8005ff6:	d505      	bpl.n	8006004 <__sflush_r+0x80>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <__sflush_r+0x7e>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d100      	bne.n	8006004 <__sflush_r+0x80>
 8006002:	6560      	str	r0, [r4, #84]	@ 0x54
 8006004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006006:	602e      	str	r6, [r5, #0]
 8006008:	2900      	cmp	r1, #0
 800600a:	d017      	beq.n	800603c <__sflush_r+0xb8>
 800600c:	0023      	movs	r3, r4
 800600e:	3344      	adds	r3, #68	@ 0x44
 8006010:	4299      	cmp	r1, r3
 8006012:	d002      	beq.n	800601a <__sflush_r+0x96>
 8006014:	0028      	movs	r0, r5
 8006016:	f7ff fbed 	bl	80057f4 <_free_r>
 800601a:	2300      	movs	r3, #0
 800601c:	6363      	str	r3, [r4, #52]	@ 0x34
 800601e:	e00d      	b.n	800603c <__sflush_r+0xb8>
 8006020:	2301      	movs	r3, #1
 8006022:	0028      	movs	r0, r5
 8006024:	47b8      	blx	r7
 8006026:	0002      	movs	r2, r0
 8006028:	1c43      	adds	r3, r0, #1
 800602a:	d1c6      	bne.n	8005fba <__sflush_r+0x36>
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0c3      	beq.n	8005fba <__sflush_r+0x36>
 8006032:	2b1d      	cmp	r3, #29
 8006034:	d001      	beq.n	800603a <__sflush_r+0xb6>
 8006036:	2b16      	cmp	r3, #22
 8006038:	d11a      	bne.n	8006070 <__sflush_r+0xec>
 800603a:	602e      	str	r6, [r5, #0]
 800603c:	2000      	movs	r0, #0
 800603e:	e01e      	b.n	800607e <__sflush_r+0xfa>
 8006040:	690e      	ldr	r6, [r1, #16]
 8006042:	2e00      	cmp	r6, #0
 8006044:	d0fa      	beq.n	800603c <__sflush_r+0xb8>
 8006046:	680f      	ldr	r7, [r1, #0]
 8006048:	600e      	str	r6, [r1, #0]
 800604a:	1bba      	subs	r2, r7, r6
 800604c:	9201      	str	r2, [sp, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	079b      	lsls	r3, r3, #30
 8006052:	d100      	bne.n	8006056 <__sflush_r+0xd2>
 8006054:	694a      	ldr	r2, [r1, #20]
 8006056:	60a2      	str	r2, [r4, #8]
 8006058:	9b01      	ldr	r3, [sp, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	ddee      	ble.n	800603c <__sflush_r+0xb8>
 800605e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006060:	0032      	movs	r2, r6
 8006062:	001f      	movs	r7, r3
 8006064:	0028      	movs	r0, r5
 8006066:	9b01      	ldr	r3, [sp, #4]
 8006068:	6a21      	ldr	r1, [r4, #32]
 800606a:	47b8      	blx	r7
 800606c:	2800      	cmp	r0, #0
 800606e:	dc07      	bgt.n	8006080 <__sflush_r+0xfc>
 8006070:	89a2      	ldrh	r2, [r4, #12]
 8006072:	2340      	movs	r3, #64	@ 0x40
 8006074:	2001      	movs	r0, #1
 8006076:	4313      	orrs	r3, r2
 8006078:	b21b      	sxth	r3, r3
 800607a:	81a3      	strh	r3, [r4, #12]
 800607c:	4240      	negs	r0, r0
 800607e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006080:	9b01      	ldr	r3, [sp, #4]
 8006082:	1836      	adds	r6, r6, r0
 8006084:	1a1b      	subs	r3, r3, r0
 8006086:	9301      	str	r3, [sp, #4]
 8006088:	e7e6      	b.n	8006058 <__sflush_r+0xd4>
 800608a:	46c0      	nop			@ (mov r8, r8)
 800608c:	dfbffffe 	.word	0xdfbffffe

08006090 <_fflush_r>:
 8006090:	690b      	ldr	r3, [r1, #16]
 8006092:	b570      	push	{r4, r5, r6, lr}
 8006094:	0005      	movs	r5, r0
 8006096:	000c      	movs	r4, r1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d102      	bne.n	80060a2 <_fflush_r+0x12>
 800609c:	2500      	movs	r5, #0
 800609e:	0028      	movs	r0, r5
 80060a0:	bd70      	pop	{r4, r5, r6, pc}
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d004      	beq.n	80060b0 <_fflush_r+0x20>
 80060a6:	6a03      	ldr	r3, [r0, #32]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <_fflush_r+0x20>
 80060ac:	f7ff fa70 	bl	8005590 <__sinit>
 80060b0:	220c      	movs	r2, #12
 80060b2:	5ea3      	ldrsh	r3, [r4, r2]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0f1      	beq.n	800609c <_fflush_r+0xc>
 80060b8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060ba:	07d2      	lsls	r2, r2, #31
 80060bc:	d404      	bmi.n	80060c8 <_fflush_r+0x38>
 80060be:	059b      	lsls	r3, r3, #22
 80060c0:	d402      	bmi.n	80060c8 <_fflush_r+0x38>
 80060c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060c4:	f7ff fb75 	bl	80057b2 <__retarget_lock_acquire_recursive>
 80060c8:	0028      	movs	r0, r5
 80060ca:	0021      	movs	r1, r4
 80060cc:	f7ff ff5a 	bl	8005f84 <__sflush_r>
 80060d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060d2:	0005      	movs	r5, r0
 80060d4:	07db      	lsls	r3, r3, #31
 80060d6:	d4e2      	bmi.n	800609e <_fflush_r+0xe>
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	059b      	lsls	r3, r3, #22
 80060dc:	d4df      	bmi.n	800609e <_fflush_r+0xe>
 80060de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060e0:	f7ff fb68 	bl	80057b4 <__retarget_lock_release_recursive>
 80060e4:	e7db      	b.n	800609e <_fflush_r+0xe>
	...

080060e8 <fiprintf>:
 80060e8:	b40e      	push	{r1, r2, r3}
 80060ea:	b517      	push	{r0, r1, r2, r4, lr}
 80060ec:	4c05      	ldr	r4, [pc, #20]	@ (8006104 <fiprintf+0x1c>)
 80060ee:	ab05      	add	r3, sp, #20
 80060f0:	cb04      	ldmia	r3!, {r2}
 80060f2:	0001      	movs	r1, r0
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	9301      	str	r3, [sp, #4]
 80060f8:	f7ff fcaa 	bl	8005a50 <_vfiprintf_r>
 80060fc:	bc1e      	pop	{r1, r2, r3, r4}
 80060fe:	bc08      	pop	{r3}
 8006100:	b003      	add	sp, #12
 8006102:	4718      	bx	r3
 8006104:	20000028 	.word	0x20000028

08006108 <__swbuf_r>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	0006      	movs	r6, r0
 800610c:	000d      	movs	r5, r1
 800610e:	0014      	movs	r4, r2
 8006110:	2800      	cmp	r0, #0
 8006112:	d004      	beq.n	800611e <__swbuf_r+0x16>
 8006114:	6a03      	ldr	r3, [r0, #32]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <__swbuf_r+0x16>
 800611a:	f7ff fa39 	bl	8005590 <__sinit>
 800611e:	69a3      	ldr	r3, [r4, #24]
 8006120:	60a3      	str	r3, [r4, #8]
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	071b      	lsls	r3, r3, #28
 8006126:	d502      	bpl.n	800612e <__swbuf_r+0x26>
 8006128:	6923      	ldr	r3, [r4, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <__swbuf_r+0x3a>
 800612e:	0021      	movs	r1, r4
 8006130:	0030      	movs	r0, r6
 8006132:	f000 f82b 	bl	800618c <__swsetup_r>
 8006136:	2800      	cmp	r0, #0
 8006138:	d003      	beq.n	8006142 <__swbuf_r+0x3a>
 800613a:	2501      	movs	r5, #1
 800613c:	426d      	negs	r5, r5
 800613e:	0028      	movs	r0, r5
 8006140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	6820      	ldr	r0, [r4, #0]
 8006146:	b2ef      	uxtb	r7, r5
 8006148:	1ac0      	subs	r0, r0, r3
 800614a:	6963      	ldr	r3, [r4, #20]
 800614c:	b2ed      	uxtb	r5, r5
 800614e:	4283      	cmp	r3, r0
 8006150:	dc05      	bgt.n	800615e <__swbuf_r+0x56>
 8006152:	0021      	movs	r1, r4
 8006154:	0030      	movs	r0, r6
 8006156:	f7ff ff9b 	bl	8006090 <_fflush_r>
 800615a:	2800      	cmp	r0, #0
 800615c:	d1ed      	bne.n	800613a <__swbuf_r+0x32>
 800615e:	68a3      	ldr	r3, [r4, #8]
 8006160:	3001      	adds	r0, #1
 8006162:	3b01      	subs	r3, #1
 8006164:	60a3      	str	r3, [r4, #8]
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	6022      	str	r2, [r4, #0]
 800616c:	701f      	strb	r7, [r3, #0]
 800616e:	6963      	ldr	r3, [r4, #20]
 8006170:	4283      	cmp	r3, r0
 8006172:	d004      	beq.n	800617e <__swbuf_r+0x76>
 8006174:	89a3      	ldrh	r3, [r4, #12]
 8006176:	07db      	lsls	r3, r3, #31
 8006178:	d5e1      	bpl.n	800613e <__swbuf_r+0x36>
 800617a:	2d0a      	cmp	r5, #10
 800617c:	d1df      	bne.n	800613e <__swbuf_r+0x36>
 800617e:	0021      	movs	r1, r4
 8006180:	0030      	movs	r0, r6
 8006182:	f7ff ff85 	bl	8006090 <_fflush_r>
 8006186:	2800      	cmp	r0, #0
 8006188:	d0d9      	beq.n	800613e <__swbuf_r+0x36>
 800618a:	e7d6      	b.n	800613a <__swbuf_r+0x32>

0800618c <__swsetup_r>:
 800618c:	4b2d      	ldr	r3, [pc, #180]	@ (8006244 <__swsetup_r+0xb8>)
 800618e:	b570      	push	{r4, r5, r6, lr}
 8006190:	0005      	movs	r5, r0
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	000c      	movs	r4, r1
 8006196:	2800      	cmp	r0, #0
 8006198:	d004      	beq.n	80061a4 <__swsetup_r+0x18>
 800619a:	6a03      	ldr	r3, [r0, #32]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <__swsetup_r+0x18>
 80061a0:	f7ff f9f6 	bl	8005590 <__sinit>
 80061a4:	230c      	movs	r3, #12
 80061a6:	5ee2      	ldrsh	r2, [r4, r3]
 80061a8:	0713      	lsls	r3, r2, #28
 80061aa:	d423      	bmi.n	80061f4 <__swsetup_r+0x68>
 80061ac:	06d3      	lsls	r3, r2, #27
 80061ae:	d407      	bmi.n	80061c0 <__swsetup_r+0x34>
 80061b0:	2309      	movs	r3, #9
 80061b2:	602b      	str	r3, [r5, #0]
 80061b4:	2340      	movs	r3, #64	@ 0x40
 80061b6:	2001      	movs	r0, #1
 80061b8:	4313      	orrs	r3, r2
 80061ba:	81a3      	strh	r3, [r4, #12]
 80061bc:	4240      	negs	r0, r0
 80061be:	e03a      	b.n	8006236 <__swsetup_r+0xaa>
 80061c0:	0752      	lsls	r2, r2, #29
 80061c2:	d513      	bpl.n	80061ec <__swsetup_r+0x60>
 80061c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061c6:	2900      	cmp	r1, #0
 80061c8:	d008      	beq.n	80061dc <__swsetup_r+0x50>
 80061ca:	0023      	movs	r3, r4
 80061cc:	3344      	adds	r3, #68	@ 0x44
 80061ce:	4299      	cmp	r1, r3
 80061d0:	d002      	beq.n	80061d8 <__swsetup_r+0x4c>
 80061d2:	0028      	movs	r0, r5
 80061d4:	f7ff fb0e 	bl	80057f4 <_free_r>
 80061d8:	2300      	movs	r3, #0
 80061da:	6363      	str	r3, [r4, #52]	@ 0x34
 80061dc:	2224      	movs	r2, #36	@ 0x24
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	4393      	bics	r3, r2
 80061e2:	81a3      	strh	r3, [r4, #12]
 80061e4:	2300      	movs	r3, #0
 80061e6:	6063      	str	r3, [r4, #4]
 80061e8:	6923      	ldr	r3, [r4, #16]
 80061ea:	6023      	str	r3, [r4, #0]
 80061ec:	2308      	movs	r3, #8
 80061ee:	89a2      	ldrh	r2, [r4, #12]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	81a3      	strh	r3, [r4, #12]
 80061f4:	6923      	ldr	r3, [r4, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10b      	bne.n	8006212 <__swsetup_r+0x86>
 80061fa:	21a0      	movs	r1, #160	@ 0xa0
 80061fc:	2280      	movs	r2, #128	@ 0x80
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	0089      	lsls	r1, r1, #2
 8006202:	0092      	lsls	r2, r2, #2
 8006204:	400b      	ands	r3, r1
 8006206:	4293      	cmp	r3, r2
 8006208:	d003      	beq.n	8006212 <__swsetup_r+0x86>
 800620a:	0021      	movs	r1, r4
 800620c:	0028      	movs	r0, r5
 800620e:	f000 f869 	bl	80062e4 <__smakebuf_r>
 8006212:	230c      	movs	r3, #12
 8006214:	5ee2      	ldrsh	r2, [r4, r3]
 8006216:	2101      	movs	r1, #1
 8006218:	0013      	movs	r3, r2
 800621a:	400b      	ands	r3, r1
 800621c:	420a      	tst	r2, r1
 800621e:	d00b      	beq.n	8006238 <__swsetup_r+0xac>
 8006220:	2300      	movs	r3, #0
 8006222:	60a3      	str	r3, [r4, #8]
 8006224:	6963      	ldr	r3, [r4, #20]
 8006226:	425b      	negs	r3, r3
 8006228:	61a3      	str	r3, [r4, #24]
 800622a:	2000      	movs	r0, #0
 800622c:	6923      	ldr	r3, [r4, #16]
 800622e:	4283      	cmp	r3, r0
 8006230:	d101      	bne.n	8006236 <__swsetup_r+0xaa>
 8006232:	0613      	lsls	r3, r2, #24
 8006234:	d4be      	bmi.n	80061b4 <__swsetup_r+0x28>
 8006236:	bd70      	pop	{r4, r5, r6, pc}
 8006238:	0791      	lsls	r1, r2, #30
 800623a:	d400      	bmi.n	800623e <__swsetup_r+0xb2>
 800623c:	6963      	ldr	r3, [r4, #20]
 800623e:	60a3      	str	r3, [r4, #8]
 8006240:	e7f3      	b.n	800622a <__swsetup_r+0x9e>
 8006242:	46c0      	nop			@ (mov r8, r8)
 8006244:	20000028 	.word	0x20000028

08006248 <_sbrk_r>:
 8006248:	2300      	movs	r3, #0
 800624a:	b570      	push	{r4, r5, r6, lr}
 800624c:	4d06      	ldr	r5, [pc, #24]	@ (8006268 <_sbrk_r+0x20>)
 800624e:	0004      	movs	r4, r0
 8006250:	0008      	movs	r0, r1
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	f7fb fefa 	bl	800204c <_sbrk>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d103      	bne.n	8006264 <_sbrk_r+0x1c>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d000      	beq.n	8006264 <_sbrk_r+0x1c>
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	bd70      	pop	{r4, r5, r6, pc}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	2000047c 	.word	0x2000047c

0800626c <memchr>:
 800626c:	b2c9      	uxtb	r1, r1
 800626e:	1882      	adds	r2, r0, r2
 8006270:	4290      	cmp	r0, r2
 8006272:	d101      	bne.n	8006278 <memchr+0xc>
 8006274:	2000      	movs	r0, #0
 8006276:	4770      	bx	lr
 8006278:	7803      	ldrb	r3, [r0, #0]
 800627a:	428b      	cmp	r3, r1
 800627c:	d0fb      	beq.n	8006276 <memchr+0xa>
 800627e:	3001      	adds	r0, #1
 8006280:	e7f6      	b.n	8006270 <memchr+0x4>

08006282 <abort>:
 8006282:	2006      	movs	r0, #6
 8006284:	b510      	push	{r4, lr}
 8006286:	f000 f897 	bl	80063b8 <raise>
 800628a:	2001      	movs	r0, #1
 800628c:	f7fb fe88 	bl	8001fa0 <_exit>

08006290 <__swhatbuf_r>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	000e      	movs	r6, r1
 8006294:	001d      	movs	r5, r3
 8006296:	230e      	movs	r3, #14
 8006298:	5ec9      	ldrsh	r1, [r1, r3]
 800629a:	0014      	movs	r4, r2
 800629c:	b096      	sub	sp, #88	@ 0x58
 800629e:	2900      	cmp	r1, #0
 80062a0:	da0c      	bge.n	80062bc <__swhatbuf_r+0x2c>
 80062a2:	89b2      	ldrh	r2, [r6, #12]
 80062a4:	2380      	movs	r3, #128	@ 0x80
 80062a6:	0011      	movs	r1, r2
 80062a8:	4019      	ands	r1, r3
 80062aa:	421a      	tst	r2, r3
 80062ac:	d114      	bne.n	80062d8 <__swhatbuf_r+0x48>
 80062ae:	2380      	movs	r3, #128	@ 0x80
 80062b0:	00db      	lsls	r3, r3, #3
 80062b2:	2000      	movs	r0, #0
 80062b4:	6029      	str	r1, [r5, #0]
 80062b6:	6023      	str	r3, [r4, #0]
 80062b8:	b016      	add	sp, #88	@ 0x58
 80062ba:	bd70      	pop	{r4, r5, r6, pc}
 80062bc:	466a      	mov	r2, sp
 80062be:	f000 f885 	bl	80063cc <_fstat_r>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	dbed      	blt.n	80062a2 <__swhatbuf_r+0x12>
 80062c6:	23f0      	movs	r3, #240	@ 0xf0
 80062c8:	9901      	ldr	r1, [sp, #4]
 80062ca:	021b      	lsls	r3, r3, #8
 80062cc:	4019      	ands	r1, r3
 80062ce:	4b04      	ldr	r3, [pc, #16]	@ (80062e0 <__swhatbuf_r+0x50>)
 80062d0:	18c9      	adds	r1, r1, r3
 80062d2:	424b      	negs	r3, r1
 80062d4:	4159      	adcs	r1, r3
 80062d6:	e7ea      	b.n	80062ae <__swhatbuf_r+0x1e>
 80062d8:	2100      	movs	r1, #0
 80062da:	2340      	movs	r3, #64	@ 0x40
 80062dc:	e7e9      	b.n	80062b2 <__swhatbuf_r+0x22>
 80062de:	46c0      	nop			@ (mov r8, r8)
 80062e0:	ffffe000 	.word	0xffffe000

080062e4 <__smakebuf_r>:
 80062e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e6:	2602      	movs	r6, #2
 80062e8:	898b      	ldrh	r3, [r1, #12]
 80062ea:	0005      	movs	r5, r0
 80062ec:	000c      	movs	r4, r1
 80062ee:	b085      	sub	sp, #20
 80062f0:	4233      	tst	r3, r6
 80062f2:	d007      	beq.n	8006304 <__smakebuf_r+0x20>
 80062f4:	0023      	movs	r3, r4
 80062f6:	3347      	adds	r3, #71	@ 0x47
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	2301      	movs	r3, #1
 80062fe:	6163      	str	r3, [r4, #20]
 8006300:	b005      	add	sp, #20
 8006302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006304:	ab03      	add	r3, sp, #12
 8006306:	aa02      	add	r2, sp, #8
 8006308:	f7ff ffc2 	bl	8006290 <__swhatbuf_r>
 800630c:	9f02      	ldr	r7, [sp, #8]
 800630e:	9001      	str	r0, [sp, #4]
 8006310:	0039      	movs	r1, r7
 8006312:	0028      	movs	r0, r5
 8006314:	f7ff fae4 	bl	80058e0 <_malloc_r>
 8006318:	2800      	cmp	r0, #0
 800631a:	d108      	bne.n	800632e <__smakebuf_r+0x4a>
 800631c:	220c      	movs	r2, #12
 800631e:	5ea3      	ldrsh	r3, [r4, r2]
 8006320:	059a      	lsls	r2, r3, #22
 8006322:	d4ed      	bmi.n	8006300 <__smakebuf_r+0x1c>
 8006324:	2203      	movs	r2, #3
 8006326:	4393      	bics	r3, r2
 8006328:	431e      	orrs	r6, r3
 800632a:	81a6      	strh	r6, [r4, #12]
 800632c:	e7e2      	b.n	80062f4 <__smakebuf_r+0x10>
 800632e:	2380      	movs	r3, #128	@ 0x80
 8006330:	89a2      	ldrh	r2, [r4, #12]
 8006332:	6020      	str	r0, [r4, #0]
 8006334:	4313      	orrs	r3, r2
 8006336:	81a3      	strh	r3, [r4, #12]
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	6120      	str	r0, [r4, #16]
 800633c:	6167      	str	r7, [r4, #20]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <__smakebuf_r+0x78>
 8006342:	0028      	movs	r0, r5
 8006344:	230e      	movs	r3, #14
 8006346:	5ee1      	ldrsh	r1, [r4, r3]
 8006348:	f000 f852 	bl	80063f0 <_isatty_r>
 800634c:	2800      	cmp	r0, #0
 800634e:	d005      	beq.n	800635c <__smakebuf_r+0x78>
 8006350:	2303      	movs	r3, #3
 8006352:	89a2      	ldrh	r2, [r4, #12]
 8006354:	439a      	bics	r2, r3
 8006356:	3b02      	subs	r3, #2
 8006358:	4313      	orrs	r3, r2
 800635a:	81a3      	strh	r3, [r4, #12]
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	9a01      	ldr	r2, [sp, #4]
 8006360:	4313      	orrs	r3, r2
 8006362:	81a3      	strh	r3, [r4, #12]
 8006364:	e7cc      	b.n	8006300 <__smakebuf_r+0x1c>

08006366 <_raise_r>:
 8006366:	b570      	push	{r4, r5, r6, lr}
 8006368:	0004      	movs	r4, r0
 800636a:	000d      	movs	r5, r1
 800636c:	291f      	cmp	r1, #31
 800636e:	d904      	bls.n	800637a <_raise_r+0x14>
 8006370:	2316      	movs	r3, #22
 8006372:	6003      	str	r3, [r0, #0]
 8006374:	2001      	movs	r0, #1
 8006376:	4240      	negs	r0, r0
 8006378:	bd70      	pop	{r4, r5, r6, pc}
 800637a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800637c:	2b00      	cmp	r3, #0
 800637e:	d004      	beq.n	800638a <_raise_r+0x24>
 8006380:	008a      	lsls	r2, r1, #2
 8006382:	189b      	adds	r3, r3, r2
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	2a00      	cmp	r2, #0
 8006388:	d108      	bne.n	800639c <_raise_r+0x36>
 800638a:	0020      	movs	r0, r4
 800638c:	f000 f854 	bl	8006438 <_getpid_r>
 8006390:	002a      	movs	r2, r5
 8006392:	0001      	movs	r1, r0
 8006394:	0020      	movs	r0, r4
 8006396:	f000 f83d 	bl	8006414 <_kill_r>
 800639a:	e7ed      	b.n	8006378 <_raise_r+0x12>
 800639c:	2a01      	cmp	r2, #1
 800639e:	d009      	beq.n	80063b4 <_raise_r+0x4e>
 80063a0:	1c51      	adds	r1, r2, #1
 80063a2:	d103      	bne.n	80063ac <_raise_r+0x46>
 80063a4:	2316      	movs	r3, #22
 80063a6:	6003      	str	r3, [r0, #0]
 80063a8:	2001      	movs	r0, #1
 80063aa:	e7e5      	b.n	8006378 <_raise_r+0x12>
 80063ac:	2100      	movs	r1, #0
 80063ae:	0028      	movs	r0, r5
 80063b0:	6019      	str	r1, [r3, #0]
 80063b2:	4790      	blx	r2
 80063b4:	2000      	movs	r0, #0
 80063b6:	e7df      	b.n	8006378 <_raise_r+0x12>

080063b8 <raise>:
 80063b8:	b510      	push	{r4, lr}
 80063ba:	4b03      	ldr	r3, [pc, #12]	@ (80063c8 <raise+0x10>)
 80063bc:	0001      	movs	r1, r0
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	f7ff ffd1 	bl	8006366 <_raise_r>
 80063c4:	bd10      	pop	{r4, pc}
 80063c6:	46c0      	nop			@ (mov r8, r8)
 80063c8:	20000028 	.word	0x20000028

080063cc <_fstat_r>:
 80063cc:	2300      	movs	r3, #0
 80063ce:	b570      	push	{r4, r5, r6, lr}
 80063d0:	4d06      	ldr	r5, [pc, #24]	@ (80063ec <_fstat_r+0x20>)
 80063d2:	0004      	movs	r4, r0
 80063d4:	0008      	movs	r0, r1
 80063d6:	0011      	movs	r1, r2
 80063d8:	602b      	str	r3, [r5, #0]
 80063da:	f7fb fe15 	bl	8002008 <_fstat>
 80063de:	1c43      	adds	r3, r0, #1
 80063e0:	d103      	bne.n	80063ea <_fstat_r+0x1e>
 80063e2:	682b      	ldr	r3, [r5, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d000      	beq.n	80063ea <_fstat_r+0x1e>
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	2000047c 	.word	0x2000047c

080063f0 <_isatty_r>:
 80063f0:	2300      	movs	r3, #0
 80063f2:	b570      	push	{r4, r5, r6, lr}
 80063f4:	4d06      	ldr	r5, [pc, #24]	@ (8006410 <_isatty_r+0x20>)
 80063f6:	0004      	movs	r4, r0
 80063f8:	0008      	movs	r0, r1
 80063fa:	602b      	str	r3, [r5, #0]
 80063fc:	f7fb fe12 	bl	8002024 <_isatty>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d103      	bne.n	800640c <_isatty_r+0x1c>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d000      	beq.n	800640c <_isatty_r+0x1c>
 800640a:	6023      	str	r3, [r4, #0]
 800640c:	bd70      	pop	{r4, r5, r6, pc}
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	2000047c 	.word	0x2000047c

08006414 <_kill_r>:
 8006414:	2300      	movs	r3, #0
 8006416:	b570      	push	{r4, r5, r6, lr}
 8006418:	4d06      	ldr	r5, [pc, #24]	@ (8006434 <_kill_r+0x20>)
 800641a:	0004      	movs	r4, r0
 800641c:	0008      	movs	r0, r1
 800641e:	0011      	movs	r1, r2
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	f7fb fdad 	bl	8001f80 <_kill>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	d103      	bne.n	8006432 <_kill_r+0x1e>
 800642a:	682b      	ldr	r3, [r5, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d000      	beq.n	8006432 <_kill_r+0x1e>
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	2000047c 	.word	0x2000047c

08006438 <_getpid_r>:
 8006438:	b510      	push	{r4, lr}
 800643a:	f7fb fd9b 	bl	8001f74 <_getpid>
 800643e:	bd10      	pop	{r4, pc}

08006440 <_init>:
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	46c0      	nop			@ (mov r8, r8)
 8006444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006446:	bc08      	pop	{r3}
 8006448:	469e      	mov	lr, r3
 800644a:	4770      	bx	lr

0800644c <_fini>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	46c0      	nop			@ (mov r8, r8)
 8006450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006452:	bc08      	pop	{r3}
 8006454:	469e      	mov	lr, r3
 8006456:	4770      	bx	lr
